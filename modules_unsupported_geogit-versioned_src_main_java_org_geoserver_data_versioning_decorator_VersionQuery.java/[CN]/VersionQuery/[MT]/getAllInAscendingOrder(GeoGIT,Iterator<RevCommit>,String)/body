{
  LinkedList<Ref> featureRefs=new LinkedList<Ref>();
  final List<String> path=path(featureId);
  while (commits.hasNext()) {
    RevCommit commit=commits.next();
    ObjectId commitId=commit.getId();
    ObjectId parentCommitId=commit.getParentIds().get(0);
    DiffOp diffOp=ggit.diff().setOldVersion(parentCommitId).setNewVersion(commitId).setFilter(path);
    Iterator<DiffEntry> diffs=diffOp.call();
    Preconditions.checkState(diffs.hasNext());
    DiffEntry diff=diffs.next();
    Preconditions.checkState(!diffs.hasNext());
switch (diff.getType()) {
case ADD:
case MODIFY:
      featureRefs.addFirst(diff.getNewObject());
    break;
case DELETE:
  break;
}
}
return featureRefs;
}
