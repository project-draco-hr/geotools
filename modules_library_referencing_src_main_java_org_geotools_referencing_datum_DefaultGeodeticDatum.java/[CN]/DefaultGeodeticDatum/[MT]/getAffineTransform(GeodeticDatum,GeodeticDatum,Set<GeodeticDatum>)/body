{
  ensureNonNull("source",source);
  ensureNonNull("target",target);
  if (source instanceof DefaultGeodeticDatum) {
    final BursaWolfParameters[] bursaWolf=((DefaultGeodeticDatum)source).bursaWolf;
    if (bursaWolf != null) {
      for (int i=0; i < bursaWolf.length; i++) {
        final BursaWolfParameters transformation=bursaWolf[i];
        if (equals(target,transformation.targetDatum,false)) {
          return transformation.getAffineTransform();
        }
      }
    }
  }
  if (target instanceof DefaultGeodeticDatum) {
    final BursaWolfParameters[] bursaWolf=((DefaultGeodeticDatum)target).bursaWolf;
    if (bursaWolf != null) {
      for (int i=0; i < bursaWolf.length; i++) {
        final BursaWolfParameters transformation=bursaWolf[i];
        if (equals(source,transformation.targetDatum,false)) {
          final XMatrix matrix=transformation.getAffineTransform();
          matrix.invert();
          return matrix;
        }
      }
    }
  }
  if (source instanceof DefaultGeodeticDatum && target instanceof DefaultGeodeticDatum) {
    final BursaWolfParameters[] sourceParam=((DefaultGeodeticDatum)source).bursaWolf;
    final BursaWolfParameters[] targetParam=((DefaultGeodeticDatum)target).bursaWolf;
    if (sourceParam != null && targetParam != null) {
      GeodeticDatum sourceStep;
      GeodeticDatum targetStep;
      for (int i=0; i < sourceParam.length; i++) {
        sourceStep=sourceParam[i].targetDatum;
        for (int j=0; j < targetParam.length; j++) {
          targetStep=targetParam[j].targetDatum;
          if (equals(sourceStep,targetStep,false)) {
            final XMatrix step1, step2;
            if (exclusion == null) {
              exclusion=new HashSet<GeodeticDatum>();
            }
            if (exclusion.add(source)) {
              if (exclusion.add(target)) {
                step1=getAffineTransform(source,sourceStep,exclusion);
                if (step1 != null) {
                  step2=getAffineTransform(targetStep,target,exclusion);
                  if (step2 != null) {
                    step2.multiply(step1);
                    return step2;
                  }
                }
                exclusion.remove(target);
              }
              exclusion.remove(source);
            }
          }
        }
      }
    }
  }
  return null;
}
