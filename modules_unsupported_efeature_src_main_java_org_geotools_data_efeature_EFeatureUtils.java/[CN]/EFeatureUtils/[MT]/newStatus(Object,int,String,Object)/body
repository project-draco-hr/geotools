{
  if (!(cause instanceof Throwable || cause instanceof StackTraceElement[] || cause == null)) {
    throw new IllegalArgumentException("Cause can only be Throwable and StackTraceElement[]");
  }
  return new EFeatureStatus(){
    @Override public int getType(){
      return type;
    }
    @Override public Object getSource(){
      return source;
    }
    @Override public String getMessage(){
      return message;
    }
    @Override public Throwable getCause(){
      return (cause instanceof Throwable ? (Throwable)cause : null);
    }
    @Override public StackTraceElement[] getStackTrace(){
      return (cause instanceof Throwable ? ((Throwable)cause).getStackTrace() : (StackTraceElement[])cause);
    }
    @Override public boolean isType(    int match){
      return type == match;
    }
    @Override public boolean isSuccess(){
      return isType(SUCCESS);
    }
    @Override public boolean isWarning(){
      return isType(WARNING);
    }
    @Override public boolean isFailure(){
      return isType(FAILURE);
    }
    @Override public EFeatureStatus clone(    String message){
      return newStatus(source,type,message,cause);
    }
    @Override public EFeatureStatus clone(    String message,    Object cause){
      return newStatus(source,type,message,cause);
    }
  }
;
}
