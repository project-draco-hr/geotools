{
  numOverviews=configuration.getLevelsNum() - 1;
  final double[][] resolutions=configuration.getLevels();
  overViewResolutions=numOverviews >= 1 ? new double[numOverviews][2] : null;
  highestRes=new double[2];
  highestRes[0]=resolutions[0][0];
  highestRes[1]=resolutions[0][1];
  if (LOGGER.isLoggable(Level.FINE))   LOGGER.fine(new StringBuilder("Highest res ").append(highestRes[0]).append(" ").append(highestRes[1]).toString());
  if (numOverviews > 0) {
    for (int i=0; i < numOverviews; i++) {
      overViewResolutions[i][0]=resolutions[i + 1][0];
      overViewResolutions[i][1]=resolutions[i + 1][1];
    }
  }
  coverageName=configuration.getName();
  expandMe=configuration.isExpandToRGB();
  checkAuxiliaryMetadata=configuration.isCheckAuxiliaryMetadata();
  CatalogConfigurationBean catalogConfigurationBean=configuration.getCatalogConfigurationBean();
  heterogeneousGranules=catalogConfigurationBean.isHeterogeneous();
  pathType=catalogConfigurationBean.isAbsolutePath() ? PathType.ABSOLUTE : PathType.RELATIVE;
  locationAttributeName=catalogConfigurationBean.getLocationAttribute();
  final String suggestedSPIClass=catalogConfigurationBean.getSuggestedSPI();
  if (suggestedSPIClass != null) {
    try {
      final Class<?> clazz=Class.forName(suggestedSPIClass);
      if (clazz.newInstance() instanceof ImageReaderSpi)       suggestedSPI=(ImageReaderSpi)clazz.newInstance();
 else       suggestedSPI=null;
    }
 catch (    Exception e) {
      if (LOGGER.isLoggable(Level.FINE))       LOGGER.log(Level.FINE,e.getLocalizedMessage(),e);
      suggestedSPI=null;
    }
  }
  cachingIndex=catalogConfigurationBean.isCaching();
  if (configuration.getEnvelope() != null) {
    this.imposedBBox=true;
  }
 else {
    this.imposedBBox=false;
  }
  this.typeName=catalogConfigurationBean.getTypeName();
}
