{
  this.sourceURL=Utils.checkSource(source,hints);
  if (this.sourceURL == null) {
    throw new DataSourceException("This plugin accepts File, URL or String. The string may describe a File or an URL");
  }
  MosaicConfigurationBean configuration=null;
  try {
    if (sourceURL.getProtocol().equals("file")) {
      final File sourceFile=DataUtilities.urlToFile(sourceURL);
      if (!sourceFile.exists()) {
        throw new DataSourceException("The specified sourceURL doesn't refer to an existing file");
      }
    }
    configuration=Utils.loadMosaicProperties(sourceURL,this.locationAttributeName);
    if (configuration == null) {
      final File parent=DataUtilities.urlToFile(sourceURL).getParentFile();
      final File[] properties=parent.listFiles((FilenameFilter)FileFilterUtils.and(FileFilterUtils.notFileFilter(FileFilterUtils.nameFileFilter("indexer.properties")),FileFilterUtils.and(FileFilterUtils.notFileFilter(FileFilterUtils.nameFileFilter("datastore.properties")),FileFilterUtils.makeFileOnly(FileFilterUtils.suffixFileFilter(".properties")))));
      final File datastoreProperties=new File(parent,"datastore.properties");
      List<MosaicConfigurationBean> beans=new ArrayList<MosaicConfigurationBean>();
      for (      File propFile : properties) {
        if (Utils.checkFileReadable(propFile) && Utils.loadMosaicProperties(DataUtilities.fileToURL(propFile),"") != null) {
          configuration=Utils.loadMosaicProperties(DataUtilities.fileToURL(propFile),this.locationAttributeName);
          if (configuration != null) {
            beans.add(configuration);
          }
        }
      }
      if (beans.isEmpty() && !datastoreProperties.exists()) {
        throw new DataSourceException("No mosaic properties file or datastore properties file have been found");
      }
      GranuleCatalog catalog=null;
      final Properties params=CatalogManager.createGranuleCatalogProperties(datastoreProperties);
      final Object typeNames=params.get(Utils.SCAN_FOR_TYPENAMES);
      if (typeNames != null) {
        params.put(Utils.SCAN_FOR_TYPENAMES,Boolean.valueOf(typeNames.toString()));
      }
 else {
        params.put(Utils.SCAN_FOR_TYPENAMES,Boolean.TRUE);
      }
      if (beans.size() > 0) {
        catalog=GranuleCatalogFactory.createGranuleCatalog(sourceURL,beans.get(0).getCatalogConfigurationBean(),params,getHints());
      }
 else {
        catalog=CatalogManager.createGranuleCatalogFromDatastore(parent,datastoreProperties,true,getHints());
      }
      MultiLevelROIProvider rois=MultiLevelROIProviderFactory.createFootprintProvider(parent);
      catalog.setMultiScaleROIProvider(rois);
      if (granuleCatalog != null) {
        granuleCatalog.dispose();
      }
      granuleCatalog=catalog;
      if (granuleCatalog == null) {
        throw new DataSourceException("Unable to create index for this URL " + sourceURL);
      }
      for (      MosaicConfigurationBean bean : beans) {
        addRasterManager(bean,true);
      }
    }
 else {
      granuleCatalog=CatalogManager.createCatalog(sourceURL,configuration,this.hints);
      File parent=DataUtilities.urlToFile(sourceURL).getParentFile();
      MultiLevelROIProvider rois=MultiLevelROIProviderFactory.createFootprintProvider(parent);
      granuleCatalog.setMultiScaleROIProvider(rois);
      addRasterManager(configuration,true);
    }
    if (sourceURL != null) {
      parentDirectory=DataUtilities.urlToFile(sourceURL);
      if (!parentDirectory.isDirectory()) {
        parentDirectory=parentDirectory.getParentFile();
      }
    }
  }
 catch (  Throwable e) {
    try {
      if (granuleCatalog != null) {
        granuleCatalog.dispose();
      }
    }
 catch (    Throwable e1) {
      if (LOGGER.isLoggable(Level.FINEST)) {
        LOGGER.log(Level.FINEST,e1.getLocalizedMessage(),e1);
      }
    }
 finally {
      granuleCatalog=null;
    }
    try {
      disposeManagers();
    }
 catch (    Throwable e1) {
      if (LOGGER.isLoggable(Level.FINEST)) {
        LOGGER.log(Level.FINEST,e1.getLocalizedMessage(),e1);
      }
    }
 finally {
      rasterManagers=null;
    }
    throw new DataSourceException(e);
  }
}
