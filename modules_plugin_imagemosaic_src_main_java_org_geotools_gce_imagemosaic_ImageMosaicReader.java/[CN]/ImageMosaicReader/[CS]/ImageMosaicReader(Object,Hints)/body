{
  super(source,uHints);
  if (this.hints.containsKey(Hints.EXECUTOR_SERVICE)) {
    final Object executor=uHints.get(Hints.EXECUTOR_SERVICE);
    if (executor != null && executor instanceof ExecutorService) {
      multiThreadedLoader=(ExecutorService)executor;
      if (LOGGER.isLoggable(Level.FINE)) {
        if (multiThreadedLoader instanceof ThreadPoolExecutor) {
          final ThreadPoolExecutor tpe=(ThreadPoolExecutor)multiThreadedLoader;
          LOGGER.fine("Using ThreadPoolExecutor with the following settings: " + "core pool size = " + tpe.getCorePoolSize() + "\nmax pool size = "+ tpe.getMaximumPoolSize()+ "\nkeep alive time "+ tpe.getKeepAliveTime(TimeUnit.MILLISECONDS));
        }
      }
    }
  }
  if (this.hints.containsKey(Hints.MAX_ALLOWED_TILES))   this.maxAllowedTiles=((Integer)this.hints.get(Hints.MAX_ALLOWED_TILES));
  if (source instanceof ImageMosaicDescriptor) {
    initReaderFromDescriptor((ImageMosaicDescriptor)source,uHints);
  }
 else {
    try {
      Hints localHints=new Hints(uHints);
      if (localHints != null) {
        localHints.add(new Hints(Utils.MOSAIC_READER,this));
      }
      initReaderFromURL(source,localHints);
    }
 catch (    Exception e) {
      throw new DataSourceException(e);
    }
  }
  if (sourceURL != null) {
    parentDirectory=DataUtilities.urlToFile(sourceURL);
    if (!parentDirectory.isDirectory()) {
      parentDirectory=parentDirectory.getParentFile();
    }
  }
}
