{
  if (domain == null || domain.isEmpty()) {
    throw new IllegalArgumentException("Null domain requested");
  }
  if (values == null || values.isEmpty()) {
    throw new IllegalArgumentException("Null domain values provided");
  }
  if (domainsMap.isEmpty() || !domainsMap.containsKey(domain)) {
    throw new IllegalArgumentException("requested domain is not supported by this mosaic: " + domain);
  }
  DomainDescriptor domainDescriptor=domainsMap.get(domain);
  final String propertyName=domainDescriptor.getPropertyName();
  final int size=values.size();
  final List<Filter> filters=new ArrayList<Filter>();
  for (int i=0; i < size; i++) {
    final Object value=values.get(i);
    if (value == null) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Ignoring null date for the filter:" + domain);
      }
      continue;
    }
    if (value instanceof Range) {
      final Range range=(Range)value;
      filters.add(FeatureUtilities.DEFAULT_FILTER_FACTORY.and(FeatureUtilities.DEFAULT_FILTER_FACTORY.lessOrEqual(FeatureUtilities.DEFAULT_FILTER_FACTORY.property(propertyName),FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(range.getMaxValue())),FeatureUtilities.DEFAULT_FILTER_FACTORY.greaterOrEqual(FeatureUtilities.DEFAULT_FILTER_FACTORY.property(propertyName),FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(range.getMinValue()))));
      continue;
    }
    filters.add(FeatureUtilities.DEFAULT_FILTER_FACTORY.equal(FeatureUtilities.DEFAULT_FILTER_FACTORY.property(propertyName),FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(value),true));
  }
  return FeatureUtilities.DEFAULT_FILTER_FACTORY.or(filters);
}
