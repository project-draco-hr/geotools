{
  JulianDate response;
  if (calDate != null && time != null) {
    DateAndTime dateAndTime=new DefaultDateAndTime(this,calDate.getIndeterminatePosition(),calDate.getCalendarEraName(),calDate.getCalendarDate(),time.getClockTime());
    return dateTrans(dateAndTime);
  }
  GregorianCalendar gc=new GregorianCalendar(-4713,1,1);
  gc.set(GregorianCalendar.ERA,GregorianCalendar.BC);
  final int julianGre=15 + 31 * (10 + 12 * 1582);
  Number coordinateValue=0;
  TemporalCoordinateSystem refSystem=new DefaultTemporalCoordinateSystem(new NamedIdentifier(Citations.CRS,new SimpleInternationalString("Julian calendar")),null,gc.getTime(),new SimpleInternationalString("day"));
  if (calDate != null) {
    int[] cal=calDate.getCalendarDate();
    int year=0;
    int month=0;
    int day=0;
    if (cal.length > 3) {
      throw new IllegalArgumentException("The CalendarDate integer array is malformed ! see ISO 8601 format.");
    }
 else {
      year=cal[0];
      if (cal.length > 0) {
        month=cal[1];
      }
      if (cal.length > 1) {
        day=cal[2];
      }
      int julianYear=year;
      if (year < 0) {
        julianYear++;
      }
      int julianMonth=month;
      if (month > 2) {
        julianMonth++;
      }
 else {
        julianYear--;
        julianMonth+=13;
      }
      double julian=(java.lang.Math.floor(365.25 * julianYear) + java.lang.Math.floor(30.6001 * julianMonth) + day+ 1720995.0);
      if (day + 31 * (month + 12 * year) >= julianGre) {
        int ja=(int)(0.01 * julianYear);
        julian+=2 - ja + (0.25 * ja);
      }
      coordinateValue=java.lang.Math.floor(julian);
      response=new DefaultJulianDate(refSystem,null,coordinateValue);
      return response;
    }
  }
 else   if (time != null) {
    Number[] clk=time.getClockTime();
    Number hour=0;
    Number minute=0;
    Number second=0;
    if (clk.length > 3) {
      throw new IllegalArgumentException("The ClockTime Number array is malformed ! see ISO 8601 format.");
    }
 else {
      hour=clk[0];
      if (clk.length > 0) {
        minute=clk[1];
      }
      if (clk.length > 1) {
        second=clk[2];
      }
      double julian=((hour.doubleValue() - 12) / 24) + (minute.doubleValue() / 1440) + (second.doubleValue() / 86400);
      coordinateValue=julian;
      response=new DefaultJulianDate(refSystem,null,coordinateValue);
      return response;
    }
  }
 else {
    throw new IllegalArgumentException("the both CalendarDate and ClockTime cannot be null !");
  }
}
