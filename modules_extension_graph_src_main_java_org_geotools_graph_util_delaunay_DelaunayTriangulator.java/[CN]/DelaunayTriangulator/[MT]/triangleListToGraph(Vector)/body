{
  Vector edgeList=new Vector();
  Vector nodeList=new Vector();
  Iterator triangleIterator=tList.iterator();
  while (triangleIterator.hasNext()) {
    Triangle next=(Triangle)triangleIterator.next();
    Edge[] edges=next.getEdges();
    for (int i=0; i < 3; i++) {
      if (!(((DelaunayEdge)edges[i]).hasEndPoint(temp1) || ((DelaunayEdge)edges[i]).hasEndPoint(temp2) || ((DelaunayEdge)edges[i]).hasEndPoint(temp3))) {
        if (!(edgeList.contains(edges[i]))) {
          edgeList.add(edges[i]);
          edges[i].getNodeA().add(edges[i]);
          edges[i].getNodeB().add(edges[i]);
          if (!(nodeList.contains(edges[i].getNodeA()))) {
            nodeList.add(edges[i].getNodeA());
          }
          if (!(nodeList.contains(edges[i].getNodeB()))) {
            nodeList.add(edges[i].getNodeB());
          }
        }
      }
    }
  }
  return new BasicGraph(nodeList,edgeList);
}
