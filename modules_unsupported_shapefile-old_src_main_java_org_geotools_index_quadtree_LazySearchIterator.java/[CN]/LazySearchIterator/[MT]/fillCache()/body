{
  indices.clear();
  ArrayList dataList=null;
  try {
    while (indices.size() < MAX_INDICES && current != null) {
      if (idIndex < current.getNumShapeIds() && !current.isVisited() && current.getBounds().intersects(bounds)) {
        indices.add(current.getShapeId(idIndex));
        idIndex++;
      }
 else {
        current.setShapesId(new int[0]);
        idIndex=0;
        boolean foundUnvisited=false;
        for (int i=0; i < current.getNumSubNodes(); i++) {
          Node node=current.getSubNode(i);
          if (!node.isVisited() && node.getBounds().intersects(bounds)) {
            foundUnvisited=true;
            parents.add(current);
            current=node;
            break;
          }
        }
        if (!foundUnvisited) {
          current.setVisited(true);
          current.clean();
          if (parents.isEmpty())           current=null;
 else           current=parents.remove(parents.size() - 1);
        }
      }
    }
    indices.sort();
    int size=indices.size();
    dataList=new ArrayList(size);
    for (int i=0; i < size; i++) {
      int recno=indices.get(i);
      Data data=new Data(DATA_DEFINITION);
      data.addValue(recno + 1);
      data.addValue(new Long(indexfile.getOffsetInBytes(recno)));
      dataList.add(data);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  data=dataList.iterator();
}
