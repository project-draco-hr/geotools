{
  final float preScaleX, preScaleY, postScaleX, postScaleY;
  if (srcBounds != null) {
    preScaleX=(float)srcBounds.getWidth();
    preScaleY=(float)srcBounds.getHeight();
  }
 else {
    preScaleX=getWidth(srcCoords,srcOffset,numCoords);
    preScaleY=getWidth(srcCoords,srcOffset + 1,numCoords);
  }
  if (dstBounds != null) {
    postScaleX=(float)dstBounds.getWidth();
    postScaleY=(float)dstBounds.getHeight();
  }
 else {
    postScaleX=getWidth(dstCoords,dstOffset,numCoords);
    postScaleY=getWidth(dstCoords,dstOffset + 1,numCoords);
  }
  if (USE_HACK) {
    final double scaleX=preScaleX / postScaleX;
    final double scaleY=preScaleY / postScaleY;
    if (scaleX != 1 || scaleY != 1) {
      final int n=numCoords * 2;
      if (cloneCoords) {
        float[] o;
        o=srcCoords;
        srcCoords=new float[n];
        System.arraycopy(o,srcOffset,srcCoords,0,n);
        srcOffset=0;
        o=dstCoords;
        dstCoords=new float[n];
        System.arraycopy(o,dstOffset,dstCoords,0,n);
        dstOffset=0;
      }
      for (int i=0; i < n; ) {
        srcCoords[srcOffset + i]/=scaleX;
        dstCoords[dstOffset + i++]*=scaleX;
        srcCoords[srcOffset + i]/=scaleY;
        dstCoords[dstOffset + i++]*=scaleY;
      }
    }
  }
  warp=WarpPolynomial.createWarp(dstCoords,dstOffset,srcCoords,srcOffset,numCoords,1 / preScaleX,1 / preScaleY,postScaleX,postScaleY,degree);
  inverse=new WarpTransform2D(WarpPolynomial.createWarp(srcCoords,srcOffset,dstCoords,dstOffset,numCoords,1 / postScaleX,1 / postScaleY,preScaleX,preScaleY,degree),this);
}
