{
  if (colorMap == null)   return;
  this.type=colorMap.getType();
  this.extendedColors=colorMap.getExtendedColors();
  final ColorMapEntry[] cmEntries=colorMap.getColorMapEntries();
  if (cmEntries != null && cmEntries.length > 0) {
    final CoverageProcessingNode source=getSource(0);
    GridCoverageRendererUtilities.ensureSourceNotNull(source,"ColorMapNode");
    final GridCoverage2D sourceCoverage=(GridCoverage2D)source.getOutput();
    GridCoverageRendererUtilities.ensureSourceNotNull(sourceCoverage,"ColorMapNode");
    final int numSD=sourceCoverage.getNumSampleDimensions();
    if (numSD > 1) {
      ColorModel cm=sourceCoverage.getRenderedImage().getColorModel();
      if (!cm.hasAlpha() && cm.getNumColorComponents() != 2) {
        throw new IllegalArgumentException(Errors.format(ErrorKeys.BAD_BAND_NUMBER_$1,Integer.valueOf(numSD)));
      }
    }
    final GridSampleDimension candidateSD=sourceCoverage.getSampleDimension(0);
    double[] candidateNoDataValues=preparaNoDataValues(candidateSD);
    final SLDColorMapBuilder builder=new SLDColorMapBuilder();
    builder.setExtendedColors(this.extendedColors).setLinearColorMapType(this.type).setNumberColorMapEntries(cmEntries.length).setColorForValuesToPreserve(new Color(0,0,0,0)).setGapsColor(new Color(0,0,0,0));
    for (int i=0; i < cmEntries.length; i++) {
      builder.addColorMapEntry(cmEntries[i]);
    }
    if (candidateNoDataValues != null && candidateNoDataValues.length > 0) {
      final LinearColorMapElement noDataCategories[]=new LinearColorMapElement[candidateNoDataValues.length];
      for (int i=0; i < noDataCategories.length; i++) {
        builder.addValueToPreserve(candidateNoDataValues[i]);
      }
    }
    colorMapTransform=builder.buildLinearColorMap();
  }
 else   this.type=-1;
}
