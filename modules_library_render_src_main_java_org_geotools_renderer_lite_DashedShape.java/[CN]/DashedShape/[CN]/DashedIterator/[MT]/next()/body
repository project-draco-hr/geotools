{
  if (segmentLength == 0) {
    if (!delegate.isDone()) {
      prevCoords[0]=currCoords[0];
      prevCoords[1]=currCoords[1];
      lastType=delegate.currentSegment(currCoords);
      dx=currCoords[0] - prevCoords[0];
      dy=currCoords[1] - prevCoords[1];
      segmentLength=(float)sqrt(pow(dx,2) + pow(dy,2));
      segmentOffset=0;
      delegate.next();
    }
 else {
      done=true;
    }
  }
  if (!done) {
    float dashResidual=dashOffsets[dashIndex] - dashOffset;
    float segmentResidual=segmentLength - segmentOffset;
    float residual=min(dashResidual,segmentResidual);
    if (abs(segmentLength) > EPS) {
      dashedSegment[0]=dashedSegment[0] + dx * residual / segmentLength;
      dashedSegment[1]=dashedSegment[1] + dy * residual / segmentLength;
    }
    if (lastType == PathIterator.SEG_LINETO) {
      dashedType=dashIndex % 2 == 0 ? PathIterator.SEG_LINETO : PathIterator.SEG_MOVETO;
    }
 else {
      dashedType=lastType;
    }
    dashOffset+=residual;
    segmentOffset+=residual;
    if (abs(dashOffsets[dashIndex] - dashOffset) < EPS) {
      dashIndex++;
      if (dashIndex >= dashOffsets.length) {
        dashIndex=0;
        dashOffset=0;
      }
    }
    if (abs(segmentOffset - segmentLength) < EPS) {
      segmentLength=0;
      segmentOffset=0;
    }
  }
}
