{
  String res="/test-data/complexFeature.xsd";
  URL resource=getClass().getResource(res);
  SchemaIndex schemaIndex=schemaLoader.parse(resource);
  FeatureTypeRegistry typeRegistry=new FeatureTypeRegistry();
  try {
    typeRegistry.addSchemas(schemaIndex);
    Name typeName=Types.typeName(NS_URI,"wq_plus_Type");
    AttributeType type=(AttributeType)typeRegistry.getAttributeType(typeName);
    assertTrue(type instanceof FeatureType);
    assertFalse(type instanceof SimpleFeatureType);
    assertEquals(typeName,type.getName());
    assertTrue(type.getUserData().get(XSDTypeDefinition.class) instanceof XSDComplexTypeDefinition);
    FeatureType wq_plus_Type=(FeatureType)type;
    assertNotNull(wq_plus_Type.getSuper());
    typeName=Types.typeName(GML.NAMESPACE,GML.AbstractFeatureType.getLocalPart());
    assertEquals(typeName,wq_plus_Type.getSuper().getName());
    assertNotNull(wq_plus_Type.getDescriptors());
    assertEquals(8,((ComplexFeatureTypeImpl)wq_plus_Type).getTypeDescriptors().size());
    Name name=Types.typeName(NS_URI,"wq_plus");
    AttributeDescriptor wqPlusDescriptor=typeRegistry.getDescriptor(name);
    assertNotNull(wqPlusDescriptor);
    assertEquals(name,wqPlusDescriptor.getName());
    assertSame(wq_plus_Type,wqPlusDescriptor.getType());
    assertTrue(wqPlusDescriptor.getUserData().get(XSDElementDeclaration.class) instanceof XSDElementDeclaration);
    typeName=Types.typeName(NS_URI,"measurementType");
    type=typeRegistry.getAttributeType(typeName);
    assertTrue(type instanceof ComplexType);
    assertFalse(type instanceof FeatureType);
    assertTrue(type.getUserData().get(XSDTypeDefinition.class) instanceof XSDComplexTypeDefinition);
    ComplexType measurementType=(ComplexType)type;
    assertEquals(typeName,measurementType.getName());
    assertTrue(measurementType.isIdentified());
    assertFalse(measurementType.isAbstract());
    assertEquals(2,measurementType.getDescriptors().size());
    name=Types.typeName(NS_URI,"measurement");
    AttributeDescriptor descriptor;
    descriptor=(AttributeDescriptor)Types.descriptor(wq_plus_Type,name);
    assertNotNull(descriptor);
    assertEquals(name,descriptor.getName());
    assertNotNull(descriptor.getType());
    assertSame(measurementType,descriptor.getType());
    assertEquals(0,descriptor.getMinOccurs());
    assertEquals(Integer.MAX_VALUE,descriptor.getMaxOccurs());
    assertTrue(descriptor.getUserData().get(XSDElementDeclaration.class) instanceof XSDElementDeclaration);
    name=Types.typeName(NS_URI,"result");
    descriptor=(AttributeDescriptor)Types.descriptor(measurementType,name);
    typeName=Types.typeName(XS.NAMESPACE,XS.FLOAT.getLocalPart());
    assertSimpleAttribute(descriptor,name,typeName,Float.class,1,1);
    name=Types.typeName(NS_URI,"determinand_description");
    descriptor=(AttributeDescriptor)Types.descriptor(measurementType,name);
    typeName=Types.typeName(XS.NAMESPACE,XS.STRING.getLocalPart());
    assertSimpleAttribute(descriptor,name,typeName,String.class,1,1);
    name=Types.typeName(NS_URI,"the_geom");
    descriptor=(AttributeDescriptor)Types.descriptor(wq_plus_Type,name);
    typeName=Types.typeName(GML.NAMESPACE,GML.PointPropertyType.getLocalPart());
    assertSimpleAttribute(descriptor,name,typeName,Point.class,1,1);
    name=Types.typeName(NS_URI,"sitename");
    descriptor=(AttributeDescriptor)Types.descriptor(wq_plus_Type,name);
    typeName=Types.typeName(XS.NAMESPACE,XS.STRING.getLocalPart());
    assertSimpleAttribute(descriptor,name,typeName,String.class,1,Integer.MAX_VALUE);
  }
  finally {
    typeRegistry.disposeSchemaIndexes();
  }
}
