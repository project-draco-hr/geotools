{
  Oblong neighbor=null;
class Shift {
    double dx;
    double dy;
    public Shift(    double dx,    double dy){
      this.dx=dx;
      this.dy=dy;
    }
  }
  Map<Neighbor,Shift> shifts=new HashMap<Neighbor,Shift>();
  shifts.put(Neighbor.LOWER,new Shift(0.0,-HEIGHT));
  shifts.put(Neighbor.LOWER_LEFT,new Shift(-WIDTH,-HEIGHT));
  shifts.put(Neighbor.LOWER_RIGHT,new Shift(WIDTH,-HEIGHT));
  shifts.put(Neighbor.LEFT,new Shift(-WIDTH,0.0));
  shifts.put(Neighbor.RIGHT,new Shift(WIDTH,0.0));
  shifts.put(Neighbor.UPPER,new Shift(0.0,HEIGHT));
  shifts.put(Neighbor.UPPER_LEFT,new Shift(-WIDTH,HEIGHT));
  shifts.put(Neighbor.UPPER_RIGHT,new Shift(WIDTH,HEIGHT));
  Oblong oblong=Oblongs.create(0.0,0.0,WIDTH,HEIGHT,null);
  for (  Neighbor n : Neighbor.values()) {
    neighbor=gridBuilder.createNeighbor(oblong,n);
    Shift shift=shifts.get(n);
    assertNotNull("Error in test code",shift);
    assertNeighbor(oblong,neighbor,shift.dx,shift.dy);
  }
}
