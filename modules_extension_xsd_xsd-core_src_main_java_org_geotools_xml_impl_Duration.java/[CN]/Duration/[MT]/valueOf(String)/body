{
  if (pValue == null) {
    throw new NullPointerException("The duration value must not be null.");
  }
  int len=pValue.length();
  int offset=0;
  boolean isNegative;
  if (len > 0) {
    char c=pValue.charAt(0);
    if (c == '-') {
      isNegative=true;
      ++offset;
    }
 else     if (c == '+') {
      isNegative=false;
      ++offset;
    }
 else {
      isNegative=false;
    }
  }
 else {
    throw new IllegalArgumentException("Invalid duration: Empty string");
  }
  if (len == 0 || pValue.charAt(offset) != 'P') {
    throw new IllegalArgumentException("Invalid duration: " + pValue + " (must start with P, +P, or -P)");
  }
 else {
    ++offset;
  }
  int years=-1, months=-1, daysOfMonth=-1, hours=-1, minutes=-1, seconds=-1;
  long millis=-1;
  int preDecimalPoint=-1;
  boolean separatorSeen=false;
  StringBuffer digits=new StringBuffer();
  while (offset < len) {
    char c=pValue.charAt(offset);
    if (Character.isDigit(c)) {
      digits.append(c);
    }
 else     if (c == 'T') {
      if (separatorSeen) {
        throw new IllegalArgumentException("Invalid duration: " + pValue + " (date/time separator 'T' used twice)");
      }
 else {
        separatorSeen=true;
      }
    }
 else {
      long l;
      if (digits.length() == 0) {
        l=0;
      }
 else {
        try {
          l=Long.parseLong(digits.toString());
        }
 catch (        NumberFormatException e) {
          throw new IllegalArgumentException("Invalid duration: " + pValue + " (max long value exceeded by "+ digits+ ")");
        }
        digits.setLength(0);
      }
      if (preDecimalPoint >= 0) {
        if (c == 'S') {
          if (!separatorSeen) {
            throw new IllegalArgumentException("Invalid duration: " + pValue + "(seconds specified before date/time separator 'T' seen)");
          }
          if (seconds != -1) {
            throw new IllegalArgumentException("Invalid duration: " + pValue + " (seconds specified twice)");
          }
          seconds=preDecimalPoint;
          millis=l;
          preDecimalPoint=-1;
        }
 else {
          throw new IllegalArgumentException("Invalid duration: " + pValue + " (decimal point not allowed here: "+ preDecimalPoint+ "."+ digits+ c+ ")");
        }
      }
 else       if (l > Integer.MAX_VALUE) {
        throw new IllegalArgumentException("Invalid duration: " + pValue + " (max integer value exceeded by "+ digits+ ")");
      }
 else {
        int i=(int)l;
        if (c == '.') {
          preDecimalPoint=i;
        }
 else         if (separatorSeen) {
          if (c == 'Y' || c == 'D') {
            throw new IllegalArgumentException("Invalid duration: " + pValue + " (years or days of month specified after date/time separator 'T' seen)");
          }
 else           if (c == 'S') {
            if (seconds != -1) {
              throw new IllegalArgumentException("Invalid duration: " + pValue + " (seconds specified twice)");
            }
            seconds=i;
            millis=0;
          }
 else           if (c == 'M') {
            if (minutes != -1) {
              throw new IllegalArgumentException("Invalid duration: " + pValue + " (minutes specified twice)");
            }
 else             if (seconds != -1) {
              throw new IllegalArgumentException("Invalid duration: " + pValue + " (minutes specified after seconds)");
            }
            minutes=i;
          }
 else           if (c == 'H') {
            if (hours != -1) {
              throw new IllegalArgumentException("Invalid duration: " + pValue + " (hours specified twice)");
            }
 else             if (minutes != -1) {
              throw new IllegalArgumentException("Invalid duration: " + pValue + " (hours specified after minutes)");
            }
 else             if (seconds != -1) {
              throw new IllegalArgumentException("Invalid duration: " + pValue + " (seconds specified after minutes)");
            }
            hours=i;
          }
        }
 else {
          if (c == 'H' || c == 'S') {
            throw new IllegalArgumentException("Invalid duration: " + pValue + " (hours or seconds specified before date/time separator 'T' seen)");
          }
 else           if (c == 'Y') {
            if (years != -1) {
              throw new IllegalArgumentException("Invalid duration: " + pValue + " (years specified twice)");
            }
 else             if (months != -1) {
              throw new IllegalArgumentException("Invalid duration: " + pValue + " (years specified after months)");
            }
 else             if (daysOfMonth != -1) {
              throw new IllegalArgumentException("Invalid duration: " + pValue + " (years specified after days of month)");
            }
            years=i;
          }
 else           if (c == 'M') {
            if (months != -1) {
              throw new IllegalArgumentException("Invalid duration: " + pValue + " (months specified twice)");
            }
 else             if (daysOfMonth != -1) {
              throw new IllegalArgumentException("Invalid duration: " + pValue + " (days of month specified after months)");
            }
            months=i;
          }
 else           if (c == 'D') {
            if (daysOfMonth != -1) {
              throw new IllegalArgumentException("Invalid duration: " + pValue + " (days of month specified twice)");
            }
            daysOfMonth=i;
          }
        }
      }
    }
    ++offset;
  }
  return new Duration(isNegative,years == -1 ? 0 : years,months == -1 ? 0 : months,daysOfMonth == -1 ? 0 : daysOfMonth,hours == -1 ? 0 : hours,minutes == -1 ? 0 : minutes,seconds == -1 ? 0 : seconds,millis == -1 ? 0 : millis);
}
