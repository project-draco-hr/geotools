{
  final double[] DATA={0.00,0,0,11.25,883,884,22.50,1762,1768,33.75,2632,2652,45.00,3489,3536,56.25,4327,4419,67.50,5140,5303,78.75,5923,6187,90.00,6667,7071,101.25,7363,7955,112.50,8002,8839,123.75,8573,9723,135.00,9064,10607,146.25,9463,11490,157.50,9758,12374,168.75,9939,13258,180.00,10000,14142};
  final double R=20000 / Math.PI;
  final DefaultEllipsoid ellipsoid=DefaultEllipsoid.createEllipsoid("Test",R,R,SI.KILO(SI.METER));
  final GeodeticCalculator calculator=new GeodeticCalculator(ellipsoid);
  calculator.setStartingGeographicPoint(0,45);
  for (int i=0; i < DATA.length; i+=3) {
    calculator.setDestinationGeographicPoint(DATA[i],45);
    final double orthodromic=calculator.getOrthodromicDistance();
    assertEquals("Orthodromic distance",DATA[i + 1],orthodromic,0.75);
    int count=0;
    double length=0, lastX=Double.NaN, lastY=Double.NaN;
    final Shape path=calculator.getGeodeticCurve(1000);
    final PathIterator iterator=path.getPathIterator(null,0.1);
    final double[] buffer=new double[6];
    while (!iterator.isDone()) {
switch (iterator.currentSegment(buffer)) {
case PathIterator.SEG_LINETO:
{
          count++;
          length+=ellipsoid.orthodromicDistance(lastX,lastY,buffer[0],buffer[1]);
        }
case PathIterator.SEG_MOVETO:
{
        lastX=buffer[0];
        lastY=buffer[1];
        break;
      }
default :
{
      throw new IllegalPathStateException();
    }
}
iterator.next();
}
assertEquals("Segment count",1000,count);
assertEquals("Orthodromic path length",orthodromic,length,1E-4);
}
}
