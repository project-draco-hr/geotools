{
  final double esp=excentricity * sin(phi);
  final double gfi=pow(((1. - esp) / (1. + esp)),hae);
  final double u=2 * (atan(pow(tan(phi / 2 + s45),alfa) / k1 * gfi) - s45);
  final double deltav=-lambda * alfa;
  final double cosU=cos(u);
  final double s=asin((cosAzim * sin(u)) + (sinAzim * cosU * cos(deltav)));
  final double d=asin(cosU * sin(deltav) / cos(s));
  final double eps=n * d;
  final double ro=rop / pow(tan(s / 2 + s45),n);
  final double y=-(ro * cos(eps));
  final double x=-(ro * sin(eps));
  double[] result={x,y};
  if (axisTransform != null) {
    try {
      axisTransform.transform(new double[]{x,y},0,result,0,1);
    }
 catch (    TransformException e) {
      throw new ProjectionException(e);
    }
  }
  if (ptDst != null) {
    ptDst.setLocation(result[0],result[1]);
    return ptDst;
  }
  return new Point2D.Double(result[0],result[1]);
}
