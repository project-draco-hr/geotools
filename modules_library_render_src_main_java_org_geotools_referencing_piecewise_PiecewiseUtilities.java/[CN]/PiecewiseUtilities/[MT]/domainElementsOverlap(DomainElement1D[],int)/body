{
  final NumberRange<? extends Number> range1=domainElements[idx - 1].getRange();
  final NumberRange<? extends Number> range2=domainElements[idx].getRange();
  final Comparable[] args=new Comparable[]{range1.getMinValue(),range1.getMaxValue(),range2.getMinValue(),range2.getMaxValue()};
  for (int j=0; j < args.length; j++) {
    if (args[j] instanceof Number) {
      final double value=((Number)args[j]).doubleValue();
      if (Double.isNaN(value)) {
        String hex=Long.toHexString(Double.doubleToRawLongBits(value));
        args[j]="NaN(" + hex + ')';
      }
    }
  }
  throw new IllegalArgumentException(Errors.format(ErrorKeys.RANGE_OVERLAP_$4,args));
}
