{
  selectedProperties=new HashMap<AttributeMapping,List<PropertyName>>();
  if (propertyNames == null) {
    selectedMapping=mapping.getAttributeMappings();
  }
 else {
    final AttributeDescriptor targetDescriptor=mapping.getTargetFeature();
    selectedMapping=new ArrayList<AttributeMapping>();
    for (    AttributeMapping attMapping : mapping.getAttributeMappings()) {
      final StepList targetSteps=attMapping.getTargetXPath();
      boolean alreadyAdded=false;
      if (includeMandatory) {
        PropertyName targetProp=namespaceAwareFilterFactory.property(targetSteps.toString());
        Object descr=targetProp.evaluate(targetDescriptor.getType());
        if (descr instanceof PropertyDescriptor) {
          if (((PropertyDescriptor)descr).getMinOccurs() >= 1) {
            selectedMapping.add(attMapping);
            selectedProperties.put(attMapping,new ArrayList<PropertyName>());
            alreadyAdded=true;
          }
        }
      }
      for (      PropertyName requestedProperty : propertyNames) {
        StepList requestedPropertySteps=requestedProperty.getNamespaceContext() == null ? null : XPath.steps(targetDescriptor,requestedProperty.getPropertyName(),requestedProperty.getNamespaceContext());
        if (requestedPropertySteps == null ? AppSchemaDataAccess.matchProperty(requestedProperty.getPropertyName(),targetSteps) : AppSchemaDataAccess.matchProperty(requestedPropertySteps,targetSteps)) {
          if (!alreadyAdded) {
            selectedMapping.add(attMapping);
            selectedProperties.put(attMapping,new ArrayList<PropertyName>());
            alreadyAdded=true;
          }
          if (requestedPropertySteps != null && requestedPropertySteps.size() > targetSteps.size()) {
            List<PropertyName> pnList=selectedProperties.get(attMapping);
            StepList subProperty=requestedPropertySteps.subList(targetSteps.size(),requestedPropertySteps.size());
            pnList.add(filterFac.property(subProperty.toString(),requestedProperty.getNamespaceContext()));
          }
        }
      }
    }
  }
}
