{
  if (AttributeDescriptors == null || AttributeDescriptors.isEmpty())   return null;
  if (AttributeDescriptors.size() == 1)   return AttributeDescriptors.iterator().next().getClass();
  Class common=null;
  AttributeDescriptor at=null;
  Iterator i=AttributeDescriptors.iterator();
  while (i.hasNext()) {
    at=(AttributeDescriptor)i.next();
    if (at != null) {
      if (common == null) {
        common=at.getType().getBinding();
      }
 else {
        Class t=at.getType().getBinding();
        if (t != null) {
          if (!common.isAssignableFrom(t)) {
            if (t.isAssignableFrom(common)) {
              common=t;
            }
 else {
              int selection=findCompatible(common,t);
switch (selection) {
case 0:
                common=findCommon(common,t);
              break;
case 1:
            break;
case 2:
          common=t;
        break;
default :
      break;
  }
}
}
}
}
}
}
return common;
}
