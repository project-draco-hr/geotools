{
  List l=new LinkedList();
  ElementGrouping[] children=eg.getChildren();
  if (children != null)   for (int i=0; i < children.length; i++) {
    l.addAll(getAttributes(name,children[i]));
  }
  if (l.isEmpty()) {
    return null;
  }
  if (l.size() == 1) {
    return (AttributeDescriptor)l.iterator().next();
  }
  Class<?> type=getCommonType(l);
  if (type == null)   type=Object.class;
  boolean nillable=eg.getMinOccurs() == 0;
  if (!nillable && children != null) {
    for (int i=0; i < children.length && !nillable; i++) {
      if (eg.getMinOccurs() == 0)       nillable=true;
    }
  }
  Class[] choices=collectionChoices(l);
  NameImpl typeName=new NameImpl(name);
  if (Geometry.class.isAssignableFrom(type)) {
    return new ChoiceGeometryTypeImpl(typeName,choices,type,nillable,1,1,null,null,Collections.EMPTY_LIST);
  }
 else {
    return new ChoiceAttributeTypeImpl(typeName,choices,type,nillable,1,1,null,Collections.EMPTY_LIST);
  }
}
