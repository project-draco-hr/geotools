{
synchronized (LabelCacheImpl.class) {
    LabelCacheImpl.DISABLE_LETTER_LEVEL_CONFLICT=true;
    Style style=RendererBaseTest.loadStyle(this,"letterConflict6.sld");
    MapContent mc=new MapContent();
    mc.getViewport().setCoordinateReferenceSystem(DefaultGeographicCRS.WGS84);
    mc.addLayer(new FeatureLayer(fs_line4,style));
    StreamingRenderer renderer=getNewRenderer(mc);
    BufferedImage image1=RendererBaseTest.renderImage(renderer,bounds2,null);
    long t0, t1, t2, t3;
    long ta=0;
    for (int i=0; i < 10; i++) {
      renderer=getNewRenderer(mc);
      t0=System.nanoTime();
      image1=RendererBaseTest.renderImage(renderer,bounds2,null);
      t1=System.nanoTime();
      ta+=(t1 - t0);
    }
    LOGGER.fine("time false " + ta / 10000000);
    mc.dispose();
    LabelCacheImpl.DISABLE_LETTER_LEVEL_CONFLICT=false;
    mc=new MapContent();
    mc.getViewport().setCoordinateReferenceSystem(DefaultGeographicCRS.WGS84);
    mc.addLayer(new FeatureLayer(fs_line4,style));
    renderer=getNewRenderer(mc);
    BufferedImage image2=RendererBaseTest.renderImage(renderer,bounds2,null);
    ta=0;
    for (int i=0; i < 10; i++) {
      renderer=getNewRenderer(mc);
      t2=System.nanoTime();
      image2=RendererBaseTest.renderImage(renderer,bounds2,null);
      t3=System.nanoTime();
      ta+=(t3 - t2);
    }
    LOGGER.fine("time true " + ta / 10000000);
    mc.dispose();
    assertTrue("More labels in image2 than image1",countDarkPixels(image2) > countDarkPixels(image1));
    writeImage("letterConflictEnabledPerfFalse",image1);
    writeImage("letterConflictEnabledPerfTrue",image2);
    showImage("letterConflictEnabledPref false",TIME,image1);
    showImage("letterConflictEnabledPerf true",TIME,image2);
  }
}
