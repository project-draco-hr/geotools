{
  CatalogConfigurationBean catalogConfigurationBean=mosaicConfiguration.getCatalogConfigurationBean();
  final Properties properties=new Properties();
  properties.setProperty(Utils.Prop.ABSOLUTE_PATH,Boolean.toString(catalogConfigurationBean.isAbsolutePath()));
  properties.setProperty(Utils.Prop.LOCATION_ATTRIBUTE,catalogConfigurationBean.getLocationAttribute());
  final String timeAttribute=mosaicConfiguration.getTimeAttribute();
  if (timeAttribute != null) {
    properties.setProperty(Utils.Prop.TIME_ATTRIBUTE,mosaicConfiguration.getTimeAttribute());
  }
  final String elevationAttribute=mosaicConfiguration.getElevationAttribute();
  if (elevationAttribute != null) {
    properties.setProperty(Utils.Prop.ELEVATION_ATTRIBUTE,mosaicConfiguration.getElevationAttribute());
  }
  final String additionalDomainAttribute=mosaicConfiguration.getAdditionalDomainAttributes();
  if (additionalDomainAttribute != null) {
    properties.setProperty(Utils.Prop.ADDITIONAL_DOMAIN_ATTRIBUTES,mosaicConfiguration.getAdditionalDomainAttributes());
  }
  final int numberOfLevels=mosaicConfiguration.getLevelsNum();
  final double[][] resolutionLevels=mosaicConfiguration.getLevels();
  properties.setProperty(Utils.Prop.LEVELS_NUM,Integer.toString(numberOfLevels));
  final StringBuilder levels=new StringBuilder();
  for (int k=0; k < numberOfLevels; k++) {
    levels.append(Double.toString(resolutionLevels[k][0])).append(",").append(Double.toString(resolutionLevels[k][1]));
    if (k < numberOfLevels - 1) {
      levels.append(" ");
    }
  }
  properties.setProperty(Utils.Prop.LEVELS,levels.toString());
  properties.setProperty(Utils.Prop.NAME,mosaicConfiguration.getName());
  String typeName=mosaicConfiguration.getCatalogConfigurationBean().getTypeName();
  if (typeName == null) {
    typeName=mosaicConfiguration.getName();
  }
  properties.setProperty(Utils.Prop.TYPENAME,typeName);
  properties.setProperty(Utils.Prop.EXP_RGB,Boolean.toString(mosaicConfiguration.isExpandToRGB()));
  properties.setProperty(Utils.Prop.CHECK_AUXILIARY_METADATA,Boolean.toString(mosaicConfiguration.isCheckAuxiliaryMetadata()));
  properties.setProperty(Utils.Prop.HETEROGENEOUS,Boolean.toString(catalogConfigurationBean.isHeterogeneous()));
  boolean wrapStore=catalogConfigurationBean.isWrapStore();
  if (wrapStore) {
    properties.setProperty(Utils.Prop.WRAP_STORE,Boolean.toString(wrapStore));
  }
  if (cachedReaderSPI != null) {
    properties.setProperty(Utils.Prop.SUGGESTED_SPI,cachedReaderSPI.getClass().getName());
  }
  if (imposedBBox != null) {
    properties.setProperty(Utils.Prop.ENVELOPE2D,imposedBBox.getMinX() + "," + imposedBBox.getMinY()+ " "+ imposedBBox.getMaxX()+ ","+ imposedBBox.getMaxY());
  }
  properties.setProperty(Utils.Prop.CACHING,Boolean.toString(catalogConfigurationBean.isCaching()));
  if (mosaicConfiguration.getAuxiliaryFilePath() != null) {
    properties.setProperty(Utils.Prop.AUXILIARY_FILE,mosaicConfiguration.getAuxiliaryFilePath());
  }
  OutputStream outStream=null;
  String filePath=runConfiguration.getParameter(Prop.ROOT_MOSAIC_DIR) + "/" + mosaicConfiguration.getName()+ ".properties";
  try {
    outStream=new BufferedOutputStream(new FileOutputStream(filePath));
    properties.store(outStream,"-Automagically created from GeoTools-");
  }
 catch (  FileNotFoundException e) {
    eventHandler.fireEvent(Level.SEVERE,e.getLocalizedMessage(),0);
  }
catch (  IOException e) {
    eventHandler.fireEvent(Level.SEVERE,e.getLocalizedMessage(),0);
  }
 finally {
    if (outStream != null) {
      IOUtils.closeQuietly(outStream);
    }
  }
}
