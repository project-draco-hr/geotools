{
  final String indexName=getRunConfiguration().getParameter(Prop.INDEX_NAME);
  final String coverageName=coverageReader instanceof StructuredGridCoverage2DReader ? inputCoverageName : indexName;
  final Indexer indexer=getRunConfiguration().getIndexer();
  final boolean coverageExists=coverageExists(coverageName);
  MosaicConfigurationBean mosaicConfiguration=null;
  MosaicConfigurationBean currentConfigurationBean=null;
  RasterManager rasterManager=null;
  if (coverageExists) {
    rasterManager=getParentReader().getRasterManager(coverageName);
    mosaicConfiguration=rasterManager.getConfiguration();
  }
  final MosaicBeanBuilder configBuilder=new MosaicBeanBuilder();
  final GeneralEnvelope envelope=(GeneralEnvelope)coverageReader.getOriginalEnvelope(inputCoverageName);
  final CoordinateReferenceSystem actualCRS=coverageReader.getCoordinateReferenceSystem(inputCoverageName);
  SampleModel sm=null;
  ColorModel cm=null;
  int numberOfLevels=1;
  double[][] resolutionLevels=null;
  CatalogBuilderConfiguration catalogConfig;
  if (mosaicConfiguration == null) {
    catalogConfig=getRunConfiguration();
    ImageLayout layout=coverageReader.getImageLayout(inputCoverageName);
    cm=layout.getColorModel(null);
    sm=layout.getSampleModel(null);
    numberOfLevels=coverageReader.getNumOverviews(inputCoverageName) + 1;
    resolutionLevels=coverageReader.getResolutionLevels(inputCoverageName);
    configBuilder.setSampleModel(sm);
    configBuilder.setColorModel(cm);
    ColorModel defaultCM=cm;
    if (defaultCM instanceof IndexColorModel) {
      IndexColorModel icm=(IndexColorModel)defaultCM;
      int numBands=defaultCM.getNumColorComponents();
      byte[][] defaultPalette=new byte[3][icm.getMapSize()];
      icm.getReds(defaultPalette[0]);
      icm.getGreens(defaultPalette[0]);
      icm.getBlues(defaultPalette[0]);
      if (numBands == 4) {
        icm.getAlphas(defaultPalette[0]);
      }
      configBuilder.setPalette(defaultPalette);
    }
    configBuilder.setCrs(actualCRS);
    configBuilder.setLevels(resolutionLevels);
    configBuilder.setLevelsNum(numberOfLevels);
    configBuilder.setName(coverageName);
    configBuilder.setTimeAttribute(IndexerUtils.getAttribute(coverageName,Utils.TIME_DOMAIN,indexer));
    configBuilder.setElevationAttribute(IndexerUtils.getAttribute(coverageName,Utils.ELEVATION_DOMAIN,indexer));
    configBuilder.setAdditionalDomainAttributes(IndexerUtils.getAttribute(coverageName,Utils.ADDITIONAL_DOMAIN,indexer));
    final Hints runHints=getRunConfiguration().getHints();
    if (runHints != null && runHints.containsKey(Utils.AUXILIARY_FILES_PATH)) {
      String auxiliaryFilePath=(String)runHints.get(Utils.AUXILIARY_FILES_PATH);
      if (auxiliaryFilePath != null && auxiliaryFilePath.trim().length() > 0) {
        configBuilder.setAuxiliaryFilePath(auxiliaryFilePath);
      }
    }
    final CatalogConfigurationBean catalogConfigurationBean=new CatalogConfigurationBean();
    catalogConfigurationBean.setCaching(IndexerUtils.getParameterAsBoolean(Prop.CACHING,indexer));
    catalogConfigurationBean.setAbsolutePath(IndexerUtils.getParameterAsBoolean(Prop.ABSOLUTE_PATH,indexer));
    catalogConfigurationBean.setLocationAttribute(IndexerUtils.getParameter(Prop.LOCATION_ATTRIBUTE,indexer));
    catalogConfigurationBean.setTypeName(coverageName);
    configBuilder.setCatalogConfigurationBean(catalogConfigurationBean);
    currentConfigurationBean=configBuilder.getMosaicConfigurationBean();
    rasterManager=getParentReader().addRasterManager(currentConfigurationBean,false);
    if (!useExistingSchema) {
      SimpleFeatureType indexSchema=CatalogManager.createSchema(getRunConfiguration(),currentConfigurationBean.getName(),actualCRS);
      getParentReader().createCoverage(coverageName,indexSchema);
    }
    getConfigurations().put(currentConfigurationBean.getName(),currentConfigurationBean);
  }
 else {
    catalogConfig=new CatalogBuilderConfiguration();
    CatalogConfigurationBean bean=mosaicConfiguration.getCatalogConfigurationBean();
    catalogConfig.setParameter(Prop.LOCATION_ATTRIBUTE,(bean.getLocationAttribute()));
    catalogConfig.setParameter(Prop.ABSOLUTE_PATH,Boolean.toString(bean.isAbsolutePath()));
    catalogConfig.setParameter(Prop.ROOT_MOSAIC_DIR,getRunConfiguration().getParameter(Prop.ROOT_MOSAIC_DIR));
    CatalogConfigurationBean catalogConfigurationBean=bean;
    if (!catalogConfigurationBean.isHeterogeneous()) {
      numberOfLevels=coverageReader.getNumOverviews(inputCoverageName) + 1;
      boolean needUpdate=false;
      if (numberOfLevels != mosaicConfiguration.getLevelsNum()) {
        catalogConfigurationBean.setHeterogeneous(true);
        if (numberOfLevels > mosaicConfiguration.getLevelsNum()) {
          resolutionLevels=coverageReader.getResolutionLevels(inputCoverageName);
          mosaicConfiguration.setLevels(resolutionLevels);
          mosaicConfiguration.setLevelsNum(numberOfLevels);
          needUpdate=true;
        }
      }
 else {
        final double[][] mosaicLevels=mosaicConfiguration.getLevels();
        resolutionLevels=coverageReader.getResolutionLevels(inputCoverageName);
        final boolean homogeneousLevels=Utils.homogeneousCheck(numberOfLevels,resolutionLevels,mosaicLevels);
        if (!homogeneousLevels) {
          catalogConfigurationBean.setHeterogeneous(true);
          needUpdate=true;
        }
      }
      if (needUpdate) {
        getConfigurations().put(mosaicConfiguration.getName(),mosaicConfiguration);
      }
    }
    ImageLayout layout=coverageReader.getImageLayout(inputCoverageName);
    cm=layout.getColorModel(null);
    sm=layout.getSampleModel(null);
    ColorModel actualCM=cm;
    CoordinateReferenceSystem expectedCRS;
    if (mosaicConfiguration.getCrs() != null) {
      expectedCRS=mosaicConfiguration.getCrs();
    }
 else {
      expectedCRS=rasterManager.spatialDomainManager.coverageCRS;
    }
    if (!(CRS.equalsIgnoreMetadata(expectedCRS,actualCRS))) {
      eventHandler.fireFileEvent(Level.INFO,fileBeingProcessed,false,"Skipping image " + fileBeingProcessed + " because CRSs do not match.",(((fileIndex + 1) * 99.0) / numFiles));
      return;
    }
    byte[][] palette=mosaicConfiguration.getPalette();
    ColorModel colorModel=mosaicConfiguration.getColorModel();
    if (colorModel == null) {
      palette=rasterManager.getConfiguration().getPalette();
      colorModel=rasterManager.defaultCM;
    }
    if (Utils.checkColorModels(colorModel,palette,mosaicConfiguration,actualCM)) {
      eventHandler.fireFileEvent(Level.INFO,fileBeingProcessed,false,"Skipping image " + fileBeingProcessed + " because color models do not match.",(((fileIndex + 1) * 99.0) / numFiles));
      return;
    }
  }
  if (!useExistingSchema) {
    CatalogManager.updateCatalog(coverageName,fileBeingProcessed,coverageReader,getParentReader(),catalogConfig,envelope,transaction,getPropertiesCollectors());
  }
}
