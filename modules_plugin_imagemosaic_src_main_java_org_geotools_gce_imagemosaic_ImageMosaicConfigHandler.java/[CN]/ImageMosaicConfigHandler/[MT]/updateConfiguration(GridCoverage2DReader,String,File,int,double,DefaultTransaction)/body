{
  final String targetCoverageName=getTargetCoverageName(coverageReader,inputCoverageName);
  final Indexer indexer=getRunConfiguration().getIndexer();
  final boolean coverageExists=coverageExists(targetCoverageName);
  MosaicConfigurationBean mosaicConfiguration=null;
  MosaicConfigurationBean currentConfigurationBean=null;
  RasterManager rasterManager=null;
  if (coverageExists) {
    rasterManager=getParentReader().getRasterManager(targetCoverageName);
    mosaicConfiguration=rasterManager.getConfiguration();
  }
  final MosaicBeanBuilder configBuilder=new MosaicBeanBuilder();
  final GeneralEnvelope envelope=coverageReader.getOriginalEnvelope(inputCoverageName);
  final CoordinateReferenceSystem actualCRS=coverageReader.getCoordinateReferenceSystem(inputCoverageName);
  SampleModel sm=null;
  ColorModel cm=null;
  int numberOfLevels=1;
  double[][] resolutionLevels=null;
  CatalogBuilderConfiguration catalogConfig;
  if (mosaicConfiguration == null) {
    catalogConfig=getRunConfiguration();
    ImageLayout layout=coverageReader.getImageLayout(inputCoverageName);
    cm=layout.getColorModel(null);
    sm=layout.getSampleModel(null);
    numberOfLevels=coverageReader.getNumOverviews(inputCoverageName) + 1;
    resolutionLevels=coverageReader.getResolutionLevels(inputCoverageName);
    configBuilder.setSampleModel(sm);
    configBuilder.setColorModel(cm);
    ColorModel defaultCM=cm;
    if (defaultCM instanceof IndexColorModel) {
      IndexColorModel icm=(IndexColorModel)defaultCM;
      byte[][] defaultPalette=Utils.extractPalette(icm);
      configBuilder.setPalette(defaultPalette);
    }
    configBuilder.setCrs(actualCRS);
    configBuilder.setLevels(resolutionLevels);
    configBuilder.setLevelsNum(numberOfLevels);
    configBuilder.setName(targetCoverageName);
    configBuilder.setTimeAttribute(IndexerUtils.getAttribute(targetCoverageName,Utils.TIME_DOMAIN,indexer));
    configBuilder.setElevationAttribute(IndexerUtils.getAttribute(targetCoverageName,Utils.ELEVATION_DOMAIN,indexer));
    configBuilder.setAdditionalDomainAttributes(IndexerUtils.getAttribute(targetCoverageName,Utils.ADDITIONAL_DOMAIN,indexer));
    final Hints runHints=getRunConfiguration().getHints();
    if (runHints != null) {
      if (runHints.containsKey(Utils.AUXILIARY_FILES_PATH)) {
        String auxiliaryFilePath=(String)runHints.get(Utils.AUXILIARY_FILES_PATH);
        if (auxiliaryFilePath != null && auxiliaryFilePath.trim().length() > 0) {
          configBuilder.setAuxiliaryFilePath(auxiliaryFilePath);
        }
      }
      if (runHints.containsKey(Utils.AUXILIARY_DATASTORE_PATH)) {
        String auxiliaryDatastorePath=(String)runHints.get(Utils.AUXILIARY_DATASTORE_PATH);
        if (auxiliaryDatastorePath != null && auxiliaryDatastorePath.trim().length() > 0) {
          configBuilder.setAuxiliaryDatastorePath(auxiliaryDatastorePath);
        }
      }
    }
    final CatalogConfigurationBean catalogConfigurationBean=new CatalogConfigurationBean();
    catalogConfigurationBean.setCaching(IndexerUtils.getParameterAsBoolean(Prop.CACHING,indexer));
    catalogConfigurationBean.setAbsolutePath(IndexerUtils.getParameterAsBoolean(Prop.ABSOLUTE_PATH,indexer));
    catalogConfigurationBean.setLocationAttribute(IndexerUtils.getParameter(Prop.LOCATION_ATTRIBUTE,indexer));
    catalogConfigurationBean.setWrapStore(IndexerUtils.getParameterAsBoolean(Prop.WRAP_STORE,indexer));
    String configuredTypeName=IndexerUtils.getParameter(Prop.TYPENAME,indexer);
    if (configuredTypeName != null) {
      catalogConfigurationBean.setTypeName(configuredTypeName);
    }
 else {
      catalogConfigurationBean.setTypeName(targetCoverageName);
    }
    configBuilder.setCatalogConfigurationBean(catalogConfigurationBean);
    configBuilder.setCheckAuxiliaryMetadata(IndexerUtils.getParameterAsBoolean(Prop.CHECK_AUXILIARY_METADATA,indexer));
    currentConfigurationBean=configBuilder.getMosaicConfigurationBean();
    getParentReader().addRasterManager(currentConfigurationBean,false);
    if (!useExistingSchema) {
      SimpleFeatureType indexSchema=createSchema(getRunConfiguration(),currentConfigurationBean.getName(),actualCRS);
      getParentReader().createCoverage(targetCoverageName,indexSchema);
    }
    getConfigurations().put(currentConfigurationBean.getName(),currentConfigurationBean);
  }
 else {
    catalogConfig=new CatalogBuilderConfiguration();
    CatalogConfigurationBean bean=mosaicConfiguration.getCatalogConfigurationBean();
    catalogConfig.setParameter(Prop.LOCATION_ATTRIBUTE,(bean.getLocationAttribute()));
    catalogConfig.setParameter(Prop.ABSOLUTE_PATH,Boolean.toString(bean.isAbsolutePath()));
    catalogConfig.setParameter(Prop.ROOT_MOSAIC_DIR,getRunConfiguration().getParameter(Prop.ROOT_MOSAIC_DIR));
    CatalogConfigurationBean catalogConfigurationBean=bean;
    numberOfLevels=coverageReader.getNumOverviews(inputCoverageName) + 1;
    resolutionLevels=coverageReader.getResolutionLevels(inputCoverageName);
    int originalNumberOfLevels=mosaicConfiguration.getLevelsNum();
    boolean needUpdate=false;
    if (Utils.homogeneousCheck(Math.min(numberOfLevels,originalNumberOfLevels),resolutionLevels,mosaicConfiguration.getLevels())) {
      if (numberOfLevels != originalNumberOfLevels) {
        catalogConfigurationBean.setHeterogeneous(true);
        if (numberOfLevels > originalNumberOfLevels) {
          needUpdate=true;
        }
      }
    }
 else {
      catalogConfigurationBean.setHeterogeneous(true);
      if (isHigherResolution(resolutionLevels,mosaicConfiguration.getLevels())) {
        needUpdate=true;
      }
    }
    if (needUpdate) {
      mosaicConfiguration.setLevels(resolutionLevels);
      mosaicConfiguration.setLevelsNum(numberOfLevels);
      getConfigurations().put(mosaicConfiguration.getName(),mosaicConfiguration);
    }
  }
  if (!useExistingSchema) {
    updateCatalog(targetCoverageName,fileBeingProcessed,coverageReader,getParentReader(),catalogConfig,envelope,transaction,getPropertiesCollectors());
  }
}
