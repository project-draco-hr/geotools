{
  Filter resultFilter;
  Filter expected;
  resultFilter=CompilerUtil.parseFilter(this.language,FilterCQLSample.FILTER_AFTER_DATE);
  Assert.assertNotNull("Filter expected",resultFilter);
  expected=FilterCQLSample.getSample(FilterCQLSample.FILTER_AFTER_DATE);
  Assert.assertEquals("greater filter ",expected,resultFilter);
  resultFilter=CompilerUtil.parseFilter(this.language,FilterCQLSample.FILTER_AFTER_PERIOD_BETWEEN_DATES);
  Assert.assertNotNull("Filter expected",resultFilter);
  expected=FilterCQLSample.getSample(FilterCQLSample.FILTER_AFTER_PERIOD_BETWEEN_DATES);
  Assert.assertEquals("greater filter ",expected,resultFilter);
  resultFilter=CompilerUtil.parseFilter(this.language,FilterCQLSample.FILTER_AFTER_PERIOD_DATE_DAYS);
  Assert.assertNotNull("Filter expected",resultFilter);
  expected=FilterCQLSample.getSample(FilterCQLSample.FILTER_AFTER_PERIOD_DATE_DAYS);
  Assert.assertEquals("greater filter",expected,resultFilter);
  resultFilter=CompilerUtil.parseFilter(this.language,FilterCQLSample.FILTER_AFTER_PERIOD_DATE_MONTH);
  Assert.assertNotNull("Filter expected",resultFilter);
  expected=FilterCQLSample.getSample(FilterCQLSample.FILTER_AFTER_PERIOD_DATE_MONTH);
  Assert.assertEquals("greater filter",expected,resultFilter);
  resultFilter=CompilerUtil.parseFilter(this.language,FilterCQLSample.FILTER_AFTER_PERIOD_DATE_YEARS);
  Assert.assertNotNull("Filter expected",resultFilter);
  expected=FilterCQLSample.getSample(FilterCQLSample.FILTER_AFTER_PERIOD_DATE_YEARS);
  Assert.assertEquals("greater filter",expected,resultFilter);
  resultFilter=CompilerUtil.parseFilter(this.language,FilterCQLSample.FILTER_AFTER_PERIOD_DATE_YEARS_MONTH);
  Assert.assertNotNull("Filter expected",resultFilter);
  expected=FilterCQLSample.getSample(FilterCQLSample.FILTER_AFTER_PERIOD_DATE_YEARS_MONTH);
  Assert.assertEquals("greater filter",expected,resultFilter);
  resultFilter=CompilerUtil.parseFilter(this.language,FilterCQLSample.FILTER_AFTER_PERIOD_DATE_HOURS);
  Assert.assertNotNull("Filter expected",resultFilter);
  expected=FilterCQLSample.getSample(FilterCQLSample.FILTER_AFTER_PERIOD_DATE_HOURS);
  Assert.assertEquals("greater filter",expected,resultFilter);
  resultFilter=CompilerUtil.parseFilter(this.language,FilterCQLSample.FILTER_AFTER_PERIOD_DATE_MINUTES);
  Assert.assertNotNull("FilSter expected",resultFilter);
  expected=FilterCQLSample.getSample(FilterCQLSample.FILTER_AFTER_PERIOD_DATE_MINUTES);
  Assert.assertEquals("greater filter",expected,resultFilter);
  resultFilter=CompilerUtil.parseFilter(this.language,FilterCQLSample.FILTER_AFTER_PERIOD_DATE_SECONDS);
  Assert.assertNotNull("Filter expected",resultFilter);
  expected=FilterCQLSample.getSample(FilterCQLSample.FILTER_AFTER_PERIOD_DATE_SECONDS);
  Assert.assertEquals("greater filter",expected,resultFilter);
  resultFilter=CompilerUtil.parseFilter(this.language,FilterCQLSample.FILTER_AFTER_PERIOD_DATE_YMD_HMS);
  Assert.assertNotNull("Filter expected",resultFilter);
  expected=FilterCQLSample.getSample(FilterCQLSample.FILTER_AFTER_PERIOD_DATE_YMD_HMS);
  Assert.assertEquals("greater filter",expected,resultFilter);
}
