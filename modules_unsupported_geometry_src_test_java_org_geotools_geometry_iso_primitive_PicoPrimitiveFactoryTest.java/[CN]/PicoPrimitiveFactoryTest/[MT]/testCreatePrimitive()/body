{
  CoordinateReferenceSystem crs=DefaultGeographicCRS.WGS84;
  PicoContainer container=container(crs);
  PrimitiveFactoryImpl factory=(PrimitiveFactoryImpl)container.getComponentInstanceOfType(PrimitiveFactoryImpl.class);
  PositionFactory positionFactory=(PositionFactory)container.getComponentInstanceOfType(PositionFactory.class);
  DirectPosition positionA=positionFactory.createDirectPosition(new double[]{10,10});
  DirectPosition positionB=positionFactory.createDirectPosition(new double[]{70,30});
  Envelope bounds=new EnvelopeImpl(positionA,positionB);
  DirectPosition one=new DirectPositionImpl(positionA);
  one.setOrdinate(1,bounds.getMinimum(1));
  DirectPosition two=new DirectPositionImpl(positionB);
  two.setOrdinate(1,bounds.getMinimum(1));
  DirectPosition three=new DirectPositionImpl(two);
  three.setOrdinate(1,bounds.getMaximum(1));
  DirectPosition four=new DirectPositionImpl(one);
  four.setOrdinate(1,bounds.getMaximum(1));
  LineSegment edge1=new LineSegmentImpl(one,two,0.0);
  LineSegment edge2=new LineSegmentImpl(two,three,0.0);
  LineSegment edge3=new LineSegmentImpl(three,four,0.0);
  LineSegment edge4=new LineSegmentImpl(four,one,0.0);
  List<OrientableCurve> edges=new ArrayList<OrientableCurve>();
  edges.add(new CurveImpl(edge1));
  edges.add(new CurveImpl(edge2));
  edges.add(new CurveImpl(edge3));
  edges.add(new CurveImpl(edge4));
  Ring expectedRing=new RingImpl(edges);
  SurfaceBoundaryImpl sb=new SurfaceBoundaryImpl(crs,expectedRing,null);
  PrimitiveImpl impl=factory.createPrimitive(bounds);
  assertNotNull(impl);
  SurfaceBoundary boundary=new SurfaceBoundaryImpl(crs,expectedRing,Collections.EMPTY_LIST);
  SurfaceImpl expected=new SurfaceImpl(boundary);
  assertEquals(expected.getBoundary(),impl.getBoundary());
  assertTrue(expected.equals(impl));
  Set<Primitive> containedPrimitives=impl.getContainedPrimitives();
  assertTrue(containedPrimitives == null);
  impl.addContainedPrimitive((PrimitiveImpl)sb.getBoundary());
  containedPrimitives=new HashSet<Primitive>();
  containedPrimitives.add((PrimitiveImpl)sb.getBoundary());
  assertTrue(containedPrimitives.equals(impl.getContainedPrimitives()));
  Set<Primitive> containingPrimitives=impl.getContainingPrimitives();
  assertTrue(containingPrimitives == null);
  impl.addContainingPrimitive((PrimitiveImpl)sb.getBoundary());
  containingPrimitives=new HashSet<Primitive>();
  containingPrimitives.add((PrimitiveImpl)sb.getBoundary());
  assertTrue(containingPrimitives.equals(impl.getContainingPrimitives()));
  Set<Complex> complexes=impl.getComplexes();
  assertTrue(complexes == null);
  impl.addComplex(sb);
  complexes=new HashSet<Complex>();
  complexes.add(sb);
  assertTrue(complexes.equals(impl.getComplexes()));
  Set<Complex> maximalComplexes=impl.getMaximalComplex();
  assertTrue(maximalComplexes.toArray()[0] == sb);
}
