{
  this.store=store;
  this.attf=new AppSchemaFeatureFactoryImpl();
  this.mapping=mapping;
  Hints hints=query.getHints();
  ResolveValueType resolveVal=(ResolveValueType)hints.get(Hints.RESOLVE);
  boolean resolve=ResolveValueType.ALL.equals(resolveVal) || ResolveValueType.LOCAL.equals(resolveVal);
  if (!resolve && resolveVal != null && !ResolveValueType.NONE.equals(resolveVal)) {
    throw new IllegalArgumentException("Resolve:" + resolveVal.getName() + " is not supported in app-schema!");
  }
  Integer atd=(Integer)hints.get(Hints.ASSOCIATION_TRAVERSAL_DEPTH);
  resolveDepth=resolve ? atd == null ? 0 : atd : 0;
  resolveTimeOut=(Integer)hints.get(Hints.RESOLVE_TIMEOUT);
  namespaces=mapping.getNamespaces();
  namespaceAwareFilterFactory=new FilterFactoryImplNamespaceAware(namespaces);
  Object includeProps=query.getHints().get(Query.INCLUDE_MANDATORY_PROPS);
  includeMandatory=includeProps instanceof Boolean && ((Boolean)includeProps).booleanValue();
  if (query != null && query.getProperties() != null) {
    setPropertyNames(query.getProperties());
  }
 else {
    setPropertyNames(null);
  }
  if (mapping.isDenormalised()) {
    if (removeQueryLimitIfDenormalised) {
      this.dataMaxFeatures=Query.DEFAULT_MAX;
      if (hasPostFilter) {
        this.requestMaxFeatures=Query.DEFAULT_MAX;
      }
 else {
        this.requestMaxFeatures=query.getMaxFeatures();
      }
    }
 else {
      this.dataMaxFeatures=query.getMaxFeatures();
      this.requestMaxFeatures=query.getMaxFeatures();
    }
  }
 else {
    this.requestMaxFeatures=query.getMaxFeatures();
    this.dataMaxFeatures=query.getMaxFeatures();
  }
  if (unrolledQuery == null) {
    unrolledQuery=getUnrolledQuery(query);
  }
  xpathAttributeBuilder=new XPath();
  xpathAttributeBuilder.setFeatureFactory(attf);
  initialiseSourceFeatures(mapping,unrolledQuery,query.getCoordinateSystemReproject());
  xpathAttributeBuilder.setFilterFactory(namespaceAwareFilterFactory);
}
