{
  if ((parents == null) || (parents[0] == null)) {
    return null;
  }
  if (constraints == null) {
    return null;
  }
  if (constraints.length == 0) {
    ElementValue[] t=new ElementValue[1];
    t[0]=value;
    return parents[0].getValue(element,t,attrs,hints);
  }
  String val=(String)value.getValue();
  if (val != null && constraints[0].getFacetType() == Facet.ENUMERATION) {
    for (int i=0; i < constraints.length; i++) {
      if (val.equalsIgnoreCase(constraints[i].getValue())) {
        ElementValue[] t=new ElementValue[1];
        t[0]=value;
        return parents[0].getValue(element,t,attrs,hints);
      }
    }
    return null;
  }
  Number nval=null;
  Date dval=null;
  ElementValue[] t=new ElementValue[1];
  t[0]=value;
  Object o=parents[0].getValue(element,t,attrs,hints);
  if (o instanceof Number) {
    nval=(Number)o;
  }
  if (o instanceof Date) {
    dval=(Date)o;
  }
  for (int i=0; i < constraints.length; i++) {
switch (constraints[i].getFacetType()) {
case Facet.ENUMERATION:
      break;
case Facet.FRACTIONDIGITS:
    int decimals=val.length() - val.indexOf(".");
  int maxDec=Integer.parseInt(constraints[i].getValue());
if (decimals > maxDec) {
  throw new SAXException("Too many decimal places");
}
break;
case Facet.LENGTH:
int maxLength=Integer.parseInt(constraints[i].getValue());
if (val.length() != maxLength) {
throw new SAXException("Too long places");
}
break;
case Facet.MAXEXCLUSIVE:
if (nval != null) {
Double max=Double.valueOf(constraints[i].getValue());
if (nval.doubleValue() > max.doubleValue()) {
throw new SAXException("Too large a value");
}
}
if (dval != null) {
Date max;
try {
max=DateFormat.getDateTimeInstance().parse(constraints[i].getValue());
}
 catch (ParseException e) {
throw new SAXException(e);
}
if (dval.after(max)) {
throw new SAXException("Too large a value");
}
}
break;
case Facet.MAXINCLUSIVE:
if (nval != null) {
Double max=Double.valueOf(constraints[i].getValue());
if (nval.doubleValue() >= max.doubleValue()) {
throw new SAXException("Too large a value");
}
}
if (dval != null) {
Date max;
try {
max=DateFormat.getDateTimeInstance().parse(constraints[i].getValue());
}
 catch (ParseException e) {
throw new SAXException(e);
}
if (dval.compareTo(max) > 0) {
throw new SAXException("Too large a value");
}
}
case Facet.MAXLENGTH:
maxLength=Integer.parseInt(constraints[i].getValue());
if (val.length() > maxLength) {
throw new SAXException("Too long places");
}
break;
case Facet.MINEXCLUSIVE:
if (nval != null) {
Double max=Double.valueOf(constraints[i].getValue());
if (nval.doubleValue() < max.doubleValue()) {
throw new SAXException("Too large a value");
}
}
if (dval != null) {
Date max;
try {
max=DateFormat.getDateTimeInstance().parse(constraints[i].getValue());
}
 catch (ParseException e) {
throw new SAXException(e);
}
if (dval.before(max)) {
throw new SAXException("Too large a value");
}
}
case Facet.MININCLUSIVE:
if (nval != null) {
Double max=Double.valueOf(constraints[i].getValue());
if (nval.doubleValue() <= max.doubleValue()) {
throw new SAXException("Too large a value");
}
}
if (dval != null) {
Date max;
try {
max=DateFormat.getDateTimeInstance().parse(constraints[i].getValue());
}
 catch (ParseException e) {
throw new SAXException(e);
}
if (dval.compareTo(max) < 0) {
throw new SAXException("Too large a value");
}
}
case Facet.MINLENGTH:
maxLength=Integer.parseInt(constraints[i].getValue());
if (val.length() < maxLength) {
throw new SAXException("Too short places");
}
break;
case Facet.PATTERN:
if (val.split(constraints[i].getValue()).length != 1) {
throw new SAXException("Does not match pattern");
}
break;
case Facet.TOTALDIGITS:
maxLength=Integer.parseInt(constraints[i].getValue()) + 1;
if (val.length() > maxLength) {
throw new SAXException("Too many digits");
}
break;
}
}
return o;
}
