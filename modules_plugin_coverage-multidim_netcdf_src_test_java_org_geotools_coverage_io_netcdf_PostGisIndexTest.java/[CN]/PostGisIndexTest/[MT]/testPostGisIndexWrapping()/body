{
  final String auxName="O3NO2wrapped.xml";
  File file=TestData.file(this,GOME_FILE);
  File auxFile=TestData.file(this,auxName);
  final File dir=new File(TestData.file(this,"."),GOME_DIR);
  if (!dir.mkdir()) {
    FileUtils.deleteDirectory(dir);
    assertTrue("Unable to create workdir:" + dir,dir.mkdir());
  }
  File destFile=new File(dir,GOME_FILE);
  File destAuxFile=new File(dir,auxName);
  FileUtils.copyFile(file,destFile);
  FileUtils.copyFile(auxFile,destAuxFile);
  File datastoreFile=createDatastoreProperties(dir,null);
  final NetCDFImageReaderSpi unidataImageReaderSpi=new NetCDFImageReaderSpi();
  assertTrue(unidataImageReaderSpi.canDecodeInput(file));
  NetCDFImageReader reader=null;
  try {
    reader=(NetCDFImageReader)unidataImageReaderSpi.createReaderInstance();
    reader.setAuxiliaryFilesPath(destAuxFile.getCanonicalPath());
    reader.setInput(destFile);
    int numImages=reader.getNumImages(true);
    assertEquals(8,numImages);
    for (int i=0; i < numImages; i++) {
      Slice2DIndex sliceIndex=reader.getSlice2DIndex(i);
      assertNotNull(sliceIndex);
      spitOutSliceInformation(i,sliceIndex);
    }
    final List<Name> names=reader.getCoveragesNames();
    assertNotNull(names);
    assertTrue(!names.isEmpty());
    assertTrue(2 == names.size());
    assertTrue(names.contains(new NameImpl("O3")));
    final CoverageSlicesCatalog cs=reader.getCatalog();
    assertNotNull(cs);
    final String[] typeNames=cs.getTypeNames();
    for (    String typeName : typeNames) {
      final List<CoverageSlice> granules=cs.getGranules(new Query(typeName));
      checkGranules(granules);
    }
    Hints hints=new Hints(Utils.AUXILIARY_FILES_PATH,destAuxFile.getCanonicalPath());
    hints.add(new Hints(Utils.AUXILIARY_DATASTORE_PATH,datastoreFile.getCanonicalPath()));
    NetCDFReader gtReader=new NetCDFReader(destFile,hints);
    String coverageName=gtReader.getGridCoverageNames()[1];
    CloseableIterator<FileGroup> files=null;
    try {
      final String[] metadataNames=gtReader.getMetadataNames(coverageName);
      assertNotNull(metadataNames);
      assertEquals(metadataNames.length,12);
      ResourceInfo info=gtReader.getInfo(coverageName);
      assertTrue(info instanceof FileResourceInfo);
      FileResourceInfo fileInfo=(FileResourceInfo)info;
      files=fileInfo.getFiles(null);
      int fileGroups=0;
      FileGroup fg=null;
      while (files.hasNext()) {
        fg=files.next();
        fileGroups++;
      }
      assertEquals(1,fileGroups);
      File mainFile=fg.getMainFile();
      assertEquals("O3-NO2",FilenameUtils.getBaseName(mainFile.getAbsolutePath()));
      Map<String,Object> metadata=fg.getMetadata();
      assertNotNull(metadata);
      assertFalse(metadata.isEmpty());
      Set<String> keys=metadata.keySet();
      assertEquals(3,keys.size());
      final SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.sss'Z'");
      sdf.setTimeZone(TimeZone.getTimeZone("GMT+0"));
      Date start=sdf.parse("2012-04-01T00:00:00.000Z");
      Date end=sdf.parse("2012-04-01T01:00:00.000Z");
      DateRange timeRange=new DateRange(start,end);
      assertEquals(timeRange,metadata.get(Utils.TIME_DOMAIN));
      NumberRange<Double> elevationRange=NumberRange.create(10.0,450.0);
      assertEquals(elevationRange,metadata.get(Utils.ELEVATION_DOMAIN));
    }
 catch (    Throwable t) {
      throw new RuntimeException(t);
    }
 finally {
      if (files != null) {
        files.close();
      }
      if (reader != null) {
        try {
          reader.dispose();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  finally {
    if (reader != null) {
      try {
        reader.dispose();
      }
 catch (      Throwable t) {
      }
    }
  }
}
