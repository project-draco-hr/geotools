{
  StrictWFS_1_1_Strategy strategy=createTestProtocol(GEOS_ARCHSITES_11.CAPABILITIES,new StrictWFS_1_1_Strategy());
  try {
    strategy.describeFeatureTypeGET("nonExistentTypeName","text/xml; subtype=gml/3.1.1");
    fail("Expected IAE");
  }
 catch (  IllegalArgumentException e) {
    assertTrue(true);
  }
  HTTPResponse httpResponse=new TestHttpResponse("text/xml; subtype=gml/3.1.1",null,"mock-content");
  TestHTTPClient mockHttp=new TestHTTPClient(httpResponse);
  strategy=createTestProtocol(GEOS_ARCHSITES_11.CAPABILITIES,mockHttp,new StrictWFS_1_1_Strategy());
  WFSResponse wfsResponse;
  wfsResponse=strategy.describeFeatureTypeGET(GEOS_ARCHSITES_11.FEATURETYPENAME,"text/xml; subtype=gml/3.1.1");
  URL baseUrl=mockHttp.targetUrl;
  assertNotNull(baseUrl);
  String externalForm=baseUrl.toExternalForm();
  externalForm=URLDecoder.decode(externalForm,"UTF-8");
  assertTrue(externalForm.startsWith("http://localhost:8080/geoserver/wfs?"));
  assertTrue(externalForm.contains("REQUEST=DescribeFeatureType"));
  assertTrue(externalForm.contains("TYPENAME=sf:archsites"));
  assertTrue(externalForm.contains("VERSION=1.1.0"));
  assertTrue(externalForm.contains("SERVICE=WFS"));
  assertTrue(externalForm.contains("NAMESPACE=xmlns(sf=http://www.openplans.org/spearfish)"));
  assertNotNull(wfsResponse);
  assertEquals(Charset.forName("UTF-8"),wfsResponse.getCharacterEncoding());
  assertEquals("text/xml; subtype=gml/3.1.1",wfsResponse.getContentType());
  assertNotNull(wfsResponse.getInputStream());
}
