{
  Level debugLevel=Level.FINE;
  Logger log=LOGGER;
  while (log != null) {
    log.setLevel(debugLevel);
    for (int i=0; i < log.getHandlers().length; i++) {
      Handler h=log.getHandlers()[i];
      h.setLevel(debugLevel);
    }
    log=log.getParent();
  }
  SimpleFeatureTypeBuilder ftb=new SimpleFeatureTypeBuilder();
  ftb.setName("testFeatureType");
  ftb.add("testAttr",Integer.class);
  integerFType=ftb.buildFeatureType();
  ftb.setName("testFeatureType");
  ftb.add("testAttr",String.class);
  stringFType=ftb.buildFeatureType();
  output=new StringWriter();
  encoder=new FilterToSQL(output);
  FIDMapper mapper=new FIDMapper(){
    @Override public boolean returnFIDColumnsAsAttributes(){
      return false;
    }
    @Override public boolean isVolatile(){
      return false;
    }
    @Override public boolean isValid(    String fid){
      return false;
    }
    @Override public boolean isAutoIncrement(    int colIndex){
      return false;
    }
    @Override public void initSupportStructures(){
    }
    @Override public boolean hasAutoIncrementColumns(){
      return false;
    }
    @Override public Object[] getPKAttributes(    String FID) throws IOException {
      return new Object[]{FID};
    }
    @Override public String getID(    Object[] attributes){
      return null;
    }
    @Override public int getColumnType(    int colIndex){
      return 0;
    }
    @Override public int getColumnSize(    int colIndex){
      return 0;
    }
    @Override public String getColumnName(    int colIndex){
      return "id";
    }
    @Override public int getColumnDecimalDigits(    int colIndex){
      return 0;
    }
    @Override public int getColumnCount(){
      return 1;
    }
    @Override public String createID(    Connection conn,    SimpleFeature feature,    Statement statement) throws IOException {
      return null;
    }
  }
;
  encoder.setFIDMapper(mapper);
}
