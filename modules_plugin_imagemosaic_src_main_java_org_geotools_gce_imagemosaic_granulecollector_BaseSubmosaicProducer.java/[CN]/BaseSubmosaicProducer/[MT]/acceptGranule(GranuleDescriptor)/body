{
  Object imageIndex=granuleDescriptor.getOriginator().getAttribute("imageindex");
  if (imageIndex != null && imageIndex instanceof Integer) {
    rasterLayerResponse.setImageChoice((Integer)imageIndex);
  }
  final GranuleLoader loader=new GranuleLoader(rasterLayerResponse.getBaseReadParameters(),rasterLayerResponse.getImageChoice(),rasterLayerResponse.getMosaicBBox(),rasterLayerResponse.getFinalWorldToGridCorner(),granuleDescriptor,rasterLayerResponse.getRequest(),rasterLayerResponse.getHints());
  if (!dryRun) {
    final boolean multiThreadedLoading=isMultithreadedLoadingEnabled();
    if (multiThreadedLoading) {
      final ExecutorService mtLoader=rasterLayerResponse.getRasterManager().getParentReader().getMultiThreadedLoader();
      granulesFutures.add(mtLoader.submit(loader));
    }
 else {
      final FutureTask<GranuleDescriptor.GranuleLoadingResult> task=new FutureTask<>(loader);
      task.run();
      ROIExcessGranuleRemover remover=rasterLayerResponse.getExcessGranuleRemover();
      GranuleLoadingResult result;
      if (remover != null) {
        try {
          result=task.get();
          if (!remover.addGranule(result)) {
            return false;
          }
        }
 catch (        InterruptedException|ExecutionException e) {
          throw new RuntimeException(e);
        }
      }
      granulesFutures.add(task);
    }
  }
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("We added the granule " + granuleDescriptor.toString());
  }
  granulesNumber++;
  return true;
}
