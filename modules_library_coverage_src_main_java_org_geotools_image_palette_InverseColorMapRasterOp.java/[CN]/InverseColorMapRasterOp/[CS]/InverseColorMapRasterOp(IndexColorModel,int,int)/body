{
  this.icm=destCM;
  this.alphaThreshold=alphaThreshold;
  hasAlpha=icm.hasAlpha();
  transparencyIndex=icm.getTransparentPixel();
  final int mapSize=icm.getMapSize();
  final byte[][] colorMap=new byte[3][hasAlpha ? (mapSize - 1) : mapSize];
  if (hasAlpha) {
    final byte[] r=new byte[mapSize];
    final byte[] g=new byte[mapSize];
    final byte[] b=new byte[mapSize];
    icm.getReds(r);
    icm.getGreens(g);
    icm.getBlues(b);
    final int reducedMapSize=mapSize - 1;
    if (transparencyIndex == 0) {
      System.arraycopy(r,1,colorMap[0],0,reducedMapSize);
      System.arraycopy(g,1,colorMap[1],0,reducedMapSize);
      System.arraycopy(b,1,colorMap[2],0,reducedMapSize);
    }
 else     if (transparencyIndex == mapSize - 1) {
      System.arraycopy(r,0,colorMap[0],0,reducedMapSize);
      System.arraycopy(g,0,colorMap[1],0,reducedMapSize);
      System.arraycopy(b,0,colorMap[2],0,reducedMapSize);
    }
 else {
      System.arraycopy(r,0,colorMap[0],0,transparencyIndex);
      System.arraycopy(g,0,colorMap[1],0,transparencyIndex);
      System.arraycopy(b,0,colorMap[2],0,transparencyIndex);
      System.arraycopy(r,transparencyIndex + 1,colorMap[0],transparencyIndex,reducedMapSize - transparencyIndex);
      System.arraycopy(g,transparencyIndex + 1,colorMap[1],transparencyIndex,reducedMapSize - transparencyIndex);
      System.arraycopy(b,transparencyIndex + 1,colorMap[2],transparencyIndex,reducedMapSize - transparencyIndex);
    }
  }
 else {
    icm.getReds(colorMap[0]);
    icm.getGreens(colorMap[1]);
    icm.getBlues(colorMap[2]);
  }
  invCM=new EfficientInverseColorMapComputation(colorMap,quantizationColors);
}
