{
  File file=JFileDataStoreChooser.showOpenFile("csv",null);
  if (file == null) {
    return;
  }
  final SimpleFeatureType TYPE=DataUtilities.createType("Location","location:Point:srid=4326," + "name:String," + "number:Integer");
  List<SimpleFeature> features=new ArrayList<SimpleFeature>();
  GeometryFactory geometryFactory=JTSFactoryFinder.getGeometryFactory();
  SimpleFeatureBuilder featureBuilder=new SimpleFeatureBuilder(TYPE);
  BufferedReader reader=new BufferedReader(new FileReader(file));
  try {
    String line=reader.readLine();
    System.out.println("Header: " + line);
    for (line=reader.readLine(); line != null; line=reader.readLine()) {
      if (line.trim().length() > 0) {
        String tokens[]=line.split("\\,");
        double latitude=Double.parseDouble(tokens[0]);
        double longitude=Double.parseDouble(tokens[1]);
        String name=tokens[2].trim();
        int number=Integer.parseInt(tokens[3].trim());
        Point point=geometryFactory.createPoint(new Coordinate(longitude,latitude));
        featureBuilder.add(point);
        featureBuilder.add(name);
        featureBuilder.add(number);
        SimpleFeature feature=featureBuilder.buildFeature(null);
        features.add(feature);
      }
    }
  }
  finally {
    reader.close();
  }
  File newFile=getNewShapeFile(file);
  ShapefileDataStoreFactory dataStoreFactory=new ShapefileDataStoreFactory();
  Map<String,Serializable> params=new HashMap<String,Serializable>();
  params.put("url",newFile.toURI().toURL());
  params.put("create spatial index",Boolean.TRUE);
  ShapefileDataStore newDataStore=(ShapefileDataStore)dataStoreFactory.createNewDataStore(params);
  newDataStore.createSchema(TYPE);
  newDataStore.forceSchemaCRS(DefaultGeographicCRS.WGS84);
  Transaction transaction=new DefaultTransaction("create");
  String typeName=newDataStore.getTypeNames()[0];
  SimpleFeatureSource featureSource=newDataStore.getFeatureSource(typeName);
  if (featureSource instanceof SimpleFeatureStore) {
    SimpleFeatureStore featureStore=(SimpleFeatureStore)featureSource;
    SimpleFeatureCollection collection=new ListFeatureCollection(TYPE,features);
    featureStore.setTransaction(transaction);
    try {
      featureStore.addFeatures(collection);
      transaction.commit();
    }
 catch (    Exception problem) {
      problem.printStackTrace();
      transaction.rollback();
    }
 finally {
      transaction.close();
    }
    System.exit(0);
  }
 else {
    System.out.println(typeName + " does not support read/write access");
    System.exit(1);
  }
}
