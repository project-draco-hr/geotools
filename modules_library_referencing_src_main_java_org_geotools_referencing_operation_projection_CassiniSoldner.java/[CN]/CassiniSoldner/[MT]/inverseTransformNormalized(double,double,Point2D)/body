{
  double ph1=inv_mlfn(ml0 + y);
  double tn=Math.tan(ph1);
  double t=tn * tn;
  double n=Math.sin(ph1);
  double r=1.0 / (1.0 - excentricitySquared * n * n);
  n=Math.sqrt(r);
  r*=(1.0 - excentricitySquared) * n;
  double dd=x / n;
  double d2=dd * dd;
  double phi=ph1 - (n * tn / r) * d2 * (0.5 - (1.0 + 3.0 * t) * d2 * C3);
  double lam=dd * (1.0 + t * d2 * (-C4 + (1.0 + 3.0 * t) * d2 * C5)) / Math.cos(ph1);
  if (ptDst != null) {
    ptDst.setLocation(lam,phi);
    return ptDst;
  }
  return new Point2D.Double(lam,phi);
}
