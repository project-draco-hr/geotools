{
  File imageDir=new File(markdownFile.getParent(),"images");
  String page=baseName(markdownFile);
  String title=baseTitle(markdownFile);
  Pattern imagePattern=Pattern.compile("([a-zA-Z\\-0-9]+)\\_(\\d+)\\.png");
  String imageReplace=".. |image$1| image:: /images/" + page + "/$3";
  Pattern figurePattern=Pattern.compile(".. figure:: (download/attachments/.+?)/(.+)");
  String figureReplace=".. figure:: /images/" + page + "/$2";
  Map<Pattern,String> replace=new HashMap<Pattern,String>();
  Pattern linkPattern=Pattern.compile("([a-zA-Z\\-0-9]+)\\_(\\d+)\\.html");
  String linkReplace="$1";
  Pattern strightLinkPattern=Pattern.compile("(\\s*)`(.*) <(.*)>`_");
  String straightLinkReplace="$1:doc:`$2`";
  StringBuilder contents=new StringBuilder();
  BufferedReader reader=null;
  String line;
  int pageLevel=-1;
  boolean lineFeedNeeded=false;
  String previousLine=null;
  try {
    reader=new BufferedReader(new FileReader(markdownFile));
    while ((line=reader.readLine()) != null) {
      if (line.contains("<div id=\"main-content\" class=\"wiki-content group\">")) {
        break;
      }
    }
    while ((line=reader.readLine()) != null) {
      if (line.contains("<div id=\"footer\" role=\"contentinfo\">")) {
        break;
      }
      if (line.startsWith("<div class")) {
        if (line.startsWith("<div class=\"columnMacro\">") || line.startsWith("<div class=\"sectionColumnWrapper\">") || line.startsWith("<div class=\"sectionMacro\">")|| line.startsWith("<div class=\"sectionMacroRow\">")|| line.startsWith("<div class=\"columnMacro\"")|| line.startsWith("<div class=\"refresh-issues-bottom\">")) {
          continue;
        }
        continue;
      }
      if (line.startsWith("</div>")) {
        continue;
      }
      if (line.contains("FeatureCollection cleanup")) {
        System.out.println("Check delete_feature_mode.gif ");
      }
      for (      Entry<Pattern,String> entry : replace.entrySet()) {
        Matcher matcher=entry.getKey().matcher(line);
        if (matcher.matches()) {
          line=matcher.replaceAll(entry.getValue());
          reader.readLine();
          reader.readLine();
          lineFeedNeeded=true;
        }
      }
      Matcher linkMatcher=linkPattern.matcher(line);
      line=linkMatcher.replaceAll(linkReplace);
      Matcher straightLinkMatcher=strightLinkPattern.matcher(line);
      if (straightLinkMatcher.matches()) {
        String indent=straightLinkMatcher.group(1);
        String pageRef=straightLinkMatcher.group(2);
        String htmlRef=straightLinkMatcher.group(3);
        String fixed_page_ref=fixPageReference(pageRef);
        if (htmlRef.startsWith("http")) {
          line=indent + "`" + pageRef+ " <"+ htmlRef+ ">`_";
        }
 else {
          line=indent + ":doc:`" + fixed_page_ref+ "`";
          lineFeedNeeded=true;
        }
      }
      Matcher imageMatcher=imagePattern.matcher(line);
      if (imageMatcher.matches()) {
        String image=imageMatcher.group(1);
        String path=imageMatcher.group(2);
        String file=imageMatcher.group(3);
        File attachementImage=new File(new File(htmlDirectory,path),file);
        File pageDir=new File(imageDir,page);
        File pageImage=new File(pageDir,file);
        duplicateImage(attachementImage,pageImage);
        boolean moved=pageImage.exists();
        if (moved) {
          line=imageMatcher.replaceAll(imageReplace);
        }
      }
      Matcher figureMatcher=figurePattern.matcher(line);
      if (figureMatcher.matches()) {
        String path=figureMatcher.group(1);
        String file=figureMatcher.group(2);
        File attachementImage=new File(new File(htmlDirectory,path),file);
        File pageDir=new File(imageDir,page);
        File pageImage=new File(pageDir,file);
        duplicateImage(attachementImage,pageImage);
        boolean moved=pageImage.exists();
        if (moved) {
          line=figureMatcher.replaceAll(figureReplace);
        }
      }
      contents.append(line);
      contents.append("\n");
      if (lineFeedNeeded) {
        contents.append("\n");
        lineFeedNeeded=false;
      }
      previousLine=line;
    }
  }
 catch (  FileNotFoundException e) {
    System.out.println("Unable to read '" + markdownFile + "':"+ e);
    return false;
  }
catch (  IOException e) {
    System.out.println("Trouble reading '" + markdownFile + "':"+ e);
    return false;
  }
 finally {
    close(reader);
  }
  String text=contents.toString();
  boolean deleted=markdownFile.delete();
  if (deleted) {
    try {
      OutputStream modifiedCopy=new BufferedOutputStream(new FileOutputStream(markdownFile));
      InputStream textSteram=new ByteArrayInputStream(text.getBytes(Charset.defaultCharset()));
      bufferedStreamsCopy(textSteram,modifiedCopy);
    }
 catch (    IOException eek) {
      System.out.println("Trouble writing modified '" + markdownFile + "':"+ eek);
      return false;
    }
  }
  return true;
}
