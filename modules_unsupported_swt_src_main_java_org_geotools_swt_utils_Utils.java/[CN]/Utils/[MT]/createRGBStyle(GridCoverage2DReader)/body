{
  GridCoverage2D cov=null;
  try {
    cov=reader.read(null);
  }
 catch (  IOException giveUp) {
    throw new RuntimeException(giveUp);
  }
  int numBands=cov.getNumSampleDimensions();
  if (numBands < 3) {
    return null;
  }
  String[] sampleDimensionNames=new String[numBands];
  for (int i=0; i < numBands; i++) {
    GridSampleDimension dim=cov.getSampleDimension(i);
    sampleDimensionNames[i]=dim.getDescription().toString();
  }
  final int RED=0, GREEN=1, BLUE=2;
  int[] channelNum={-1,-1,-1};
  for (int i=0; i < numBands; i++) {
    String name=sampleDimensionNames[i].toLowerCase();
    if (name != null) {
      if (name.matches("red.*")) {
        channelNum[RED]=i + 1;
      }
 else       if (name.matches("green.*")) {
        channelNum[GREEN]=i + 1;
      }
 else       if (name.matches("blue.*")) {
        channelNum[BLUE]=i + 1;
      }
    }
  }
  if (channelNum[RED] < 0 || channelNum[GREEN] < 0 || channelNum[BLUE] < 0) {
    channelNum[RED]=1;
    channelNum[GREEN]=2;
    channelNum[BLUE]=3;
  }
  SelectedChannelType[] sct=new SelectedChannelType[cov.getNumSampleDimensions()];
  ContrastEnhancement ce=styleFactory.contrastEnhancement(filterFactory.literal(1.0),new Normalize());
  for (int i=0; i < 3; i++) {
    sct[i]=styleFactory.createSelectedChannelType(String.valueOf(channelNum[i]),ce);
  }
  RasterSymbolizer sym=styleFactory.getDefaultRasterSymbolizer();
  ChannelSelection sel=styleFactory.channelSelection(sct[RED],sct[GREEN],sct[BLUE]);
  sym.setChannelSelection(sel);
  return SLD.wrapSymbolizers(sym);
}
