{
  int seed=voParser.getIntOption(symbolizer,"random-seed",0);
  int tileSize=voParser.getIntOption(symbolizer,"random-tile-size",256);
  int count=voParser.getIntOption(symbolizer,"random-symbol-count",16);
  int spaceAround=voParser.getIntOption(symbolizer,"random-space-around",0);
  boolean randomRotation=voParser.getBooleanOption(symbolizer,"random-rotation",false);
  boolean useGrid=voParser.getBooleanOption(symbolizer,"random-grid",true);
  if (tileSize <= 0) {
    throw new IllegalArgumentException("The random-tile-size parameter must be positive");
  }
  if (count > MAX_RANDOM_COUNT) {
    throw new IllegalArgumentException("The random-symbol-count exceeds the safety limit " + MAX_RANDOM_COUNT + ". You can override this limit by setting the org.geotools.render.random.maxCount system property");
  }
  if (icon != null && (icon.getIconWidth() > tileSize || icon.getIconHeight() > tileSize)) {
    throw new IllegalArgumentException("Cannot perform random image disposition, image size " + icon.getIconWidth() + "x"+ icon.getIconHeight()+ " exceeds randomized tile size: "+ tileSize);
  }
  BufferedImage image=new BufferedImage(tileSize,tileSize,BufferedImage.TYPE_4BYTE_ABGR);
  Graphics2D g2d=image.createGraphics();
  Geometry tileBounds=new GeometryBuilder().box(0,0,tileSize,tileSize);
  Geometry bounds=getGeometryBounds(icon,mark,shape,markSize,feature);
  Geometry conflictBounds=getConflictBounds(bounds,spaceAround);
  ReservedAreaCache rac=buildReservedAreaCache(conflictBounds);
  Rectangle targetArea=new Rectangle(0,0,tileSize,tileSize);
  Random random=new Random(seed);
  PositionSequence ps;
  Envelope conflictSymbolSize=new Envelope();
  if (conflictBounds != null) {
    conflictSymbolSize=conflictBounds.getEnvelopeInternal();
  }
  if (useGrid) {
    ps=new GridBasedPositionGenerator(random,rac,count,targetArea,randomRotation);
  }
 else {
    ps=new FullyRandomizedPositionGenerator(random,rac,count,targetArea,randomRotation);
  }
  Object oldInterpolationValue=g2d.getRenderingHint(RenderingHints.KEY_INTERPOLATION);
  if (randomRotation && icon != null) {
    g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  }
  AffineTransform originalTransform=g2d.getTransform();
  try {
    try {
      AffineTransform at=new AffineTransform();
      Position p;
      while ((p=ps.getNextPosition()) != null) {
        at.setToTranslation(p.x,p.y);
        at.rotate(Math.toRadians(p.rotation));
        List<AffineTransform2D> transforms=new ArrayList<AffineTransform2D>();
        AffineTransform2D at2d=new AffineTransform2D(at);
        transforms.add(at2d);
        Geometry transformed=JTS.transform(bounds,at2d);
        if (tileBounds.intersects(transformed) && !tileBounds.contains(transformed)) {
          for (int dx=-tileSize; dx <= tileSize; dx+=tileSize) {
            for (int dy=-tileSize; dy <= tileSize; dy+=tileSize) {
              if (dx == 0 && dy == 0) {
                continue;
              }
              int mx=p.x + dx;
              int my=p.y + dy;
              at.setToTranslation(mx,my);
              at.rotate(Math.toRadians(p.rotation));
              AffineTransform2D tx2d=new AffineTransform2D(at);
              Geometry translatedBounds=JTS.transform(bounds,tx2d);
              if (tileBounds.intersects(translatedBounds) || tileBounds.contains(translatedBounds)) {
                transforms.add(tx2d);
              }
            }
          }
        }
        if (!rac.checkAndReserve(transforms)) {
          ps.lastPositionResults(true);
          continue;
        }
        for (        AffineTransform2D transform : transforms) {
          if (icon != null) {
            g2d.setTransform(originalTransform);
            g2d.transform(transform);
            icon.paintIcon(null,g2d,0,0);
          }
 else           if (shape != null) {
            factory.fillDrawMark(g2d,transform.getTranslateX(),transform.getTranslateY(),mark,markSize,Math.toRadians(p.rotation),feature);
          }
        }
        ps.lastPositionResults(false);
      }
    }
 catch (    TransformException e) {
      throw new RuntimeException("Unexpected error happened while paining the random symbols",e);
    }
  }
  finally {
    g2d.setTransform(originalTransform);
    if (oldInterpolationValue != null) {
      g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,oldInterpolationValue);
    }
  }
  if (RANDOM_VISUAL_DEBUGGER) {
    rac.paintReservedAreas(g2d);
  }
  g2d.dispose();
  return image;
}
