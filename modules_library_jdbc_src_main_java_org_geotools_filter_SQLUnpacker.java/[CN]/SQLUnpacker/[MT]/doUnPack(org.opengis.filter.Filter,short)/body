{
  FilterPair retPair;
  FilterPair subPair;
  Filter subSup=null;
  Filter subUnSup=null;
  Filter retSup=null;
  Filter retUnSup=null;
  if (filter == null) {
    return new FilterPair(null,null);
  }
  if (capabilities.fullySupports(filter)) {
    retSup=filter;
  }
 else {
    short type=Filters.getFilterType(filter);
    if ((type == splitType) && capabilities.supports(splitType)) {
      Iterator<Filter> filters=((LogicFilter)filter).getChildren().iterator();
      while (filters.hasNext()) {
        Filter next=filters.next();
        subPair=doUnPack(next,splitType);
        subSup=subPair.getSupported();
        subUnSup=subPair.getUnSupported();
        retSup=combineFilters(retSup,subSup,splitType);
        retUnSup=combineFilters(retUnSup,subUnSup,splitType);
      }
    }
 else     if ((type == AbstractFilter.LOGIC_NOT) && capabilities.supports(AbstractFilter.LOGIC_NOT)) {
      Filter child=((Not)filter).getFilter();
      subPair=doUnPack(child,splitType);
      subSup=subPair.getSupported();
      subUnSup=subPair.getUnSupported();
      if (subSup != null) {
        retSup=ff.not(subSup);
      }
      if (subUnSup != null) {
        retUnSup=ff.not(subUnSup);
      }
    }
 else {
      retUnSup=filter;
    }
  }
  retPair=new FilterPair(retSup,retUnSup);
  return retPair;
}
