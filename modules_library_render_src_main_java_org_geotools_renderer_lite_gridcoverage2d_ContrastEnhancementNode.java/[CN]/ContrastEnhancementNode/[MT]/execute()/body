{
  final Hints hints=getHints();
  final List<CoverageProcessingNode> sources=this.getSources();
  if (sources != null && !sources.isEmpty()) {
    final GridCoverage2D source=(GridCoverage2D)getSource(0).getOutput();
    GridCoverageRendererUtilities.ensureSourceNotNull(source,this.getName().toString());
    GridCoverage2D output;
    if ((!Double.isNaN(gammaValue) && !Double.isInfinite(gammaValue) && !(Math.abs(gammaValue - 1) < 1E-6)) || (type != null && type.length() > 0)) {
      final RenderedImage sourceImage=source.getRenderedImage();
      ROI roi=CoverageUtilities.getROIProperty(source);
      NoDataContainer noDataContainer=CoverageUtilities.getNoDataProperty(source);
      Range nodata=noDataContainer != null ? noDataContainer.getAsRange() : null;
      ImageWorker worker;
      if (type != null && type.equalsIgnoreCase("HISTOGRAM")) {
        worker=new ImageWorker(sourceImage).setROI(roi).setNoData(nodata).setRenderingHints(hints).forceComponentColorModel().rescaleToBytes();
      }
 else {
        worker=new ImageWorker(sourceImage).setROI(roi).setNoData(nodata).setRenderingHints(hints).forceComponentColorModel();
      }
      final int numbands=worker.getNumBands();
      RenderedImage alphaBand=null;
      if (numbands % 2 == 0) {
        alphaBand=new ImageWorker(worker.getRenderedImage()).setRenderingHints(hints).retainLastBand().getRenderedImage();
        worker.setRenderingHints(hints).retainBands(numbands - 1);
      }
      ImageWorker intensityWorker;
      RenderedImage hChannel=null;
      RenderedImage sChannel=null;
      final boolean intensity;
      RenderedImage IHS=null;
      if (numbands > 1) {
        IHS=worker.setRenderingHints(hints).forceColorSpaceIHS().getRenderedImage();
        intensityWorker=worker.setRenderingHints(hints).retainFirstBand();
        sChannel=new ImageWorker(IHS).setRenderingHints(hints).retainLastBand().getRenderedImage();
        hChannel=new ImageWorker(IHS).setRenderingHints(hints).retainBands(new int[]{1}).getRenderedImage();
        intensity=true;
      }
 else {
        intensityWorker=worker;
        intensity=false;
      }
      performContrastEnhancement(intensityWorker,hints);
      performGammaCorrection(intensityWorker,hints);
      if (intensity) {
        final ImageLayout imageLayout=new ImageLayout();
        imageLayout.setColorModel(IHS.getColorModel());
        imageLayout.setSampleModel(IHS.getSampleModel());
        final RenderingHints rendHints=new RenderingHints(Collections.EMPTY_MAP);
        rendHints.add(hints);
        rendHints.add(new RenderingHints(JAI.KEY_IMAGE_LAYOUT,imageLayout));
        intensityWorker.setRenderingHints(rendHints).addBands(new RenderedImage[]{hChannel,sChannel},false,null);
        intensityWorker.setRenderingHints(hints).forceColorSpaceRGB();
      }
      if (alphaBand != null) {
        final ColorModel cm=new ComponentColorModel(numbands >= 3 ? ColorSpace.getInstance(ColorSpace.CS_sRGB) : ColorSpace.getInstance(ColorSpace.CS_GRAY),numbands >= 3 ? new int[]{8,8,8,8} : new int[]{8,8},true,false,Transparency.TRANSLUCENT,DataBuffer.TYPE_BYTE);
        final ImageLayout imageLayout=new ImageLayout();
        imageLayout.setColorModel(cm);
        imageLayout.setSampleModel(cm.createCompatibleSampleModel(intensityWorker.getRenderedImage().getWidth(),intensityWorker.getRenderedImage().getHeight()));
        intensityWorker.setRenderingHints(hints).setRenderingHint(JAI.KEY_IMAGE_LAYOUT,imageLayout).addBand(alphaBand,false,true,null);
      }
      final int numSourceBands=source.getNumSampleDimensions();
      final RenderedImage finalImage=intensityWorker.getRenderedImage();
      final int numActualBands=finalImage.getSampleModel().getNumBands();
      final GridCoverageFactory factory=getCoverageFactory();
      final HashMap<Object,Object> props=new HashMap<Object,Object>();
      if (source.getProperties() != null) {
        props.putAll(source.getProperties());
      }
      if (intensityWorker.getNoData() != null) {
        props.put(NoDataContainer.GC_NODATA,new NoDataContainer(intensityWorker.getNoData()));
      }
      if (intensityWorker.getROI() != null) {
        props.put("GC_ROI",intensityWorker.getROI());
      }
      if (numActualBands == numSourceBands) {
        final String name="ce_coverage" + source.getName();
        output=factory.create(name,finalImage,(GridGeometry2D)source.getGridGeometry(),source.getSampleDimensions(),new GridCoverage[]{source},props);
      }
 else {
        final GridSampleDimension sd[]=new GridSampleDimension[numActualBands];
        for (int i=0; i < numActualBands; i++)         sd[i]=(GridSampleDimension)source.getSampleDimension(0);
        output=factory.create("ce_coverage" + source.getName().toString(),finalImage,(GridGeometry2D)source.getGridGeometry(),sd,new GridCoverage[]{source},props);
      }
    }
 else     output=source;
    return output;
  }
  throw new IllegalStateException(Errors.format(ErrorKeys.SOURCE_CANT_BE_NULL_$1,this.getName().toString()));
}
