{
  ComplexType builtType=new AbstractLazyComplexTypeImpl(new NameImpl("http://www.opengis.net/gml/3.2","ArcStringType"),false,false,null,null){
    @Override public AttributeType buildSuper(){
      return ABSTRACTCURVESEGMENTTYPE_TYPE;
    }
    @Override public Collection<PropertyDescriptor> buildDescriptors(){
      List<PropertyDescriptor> descriptors=new ArrayList<PropertyDescriptor>();
      descriptors.add(new AttributeDescriptorImpl(DIRECTPOSITIONTYPE_TYPE,new NameImpl("http://www.opengis.net/gml/3.2","pos"),1,1,false,null));
      descriptors.add(new AttributeDescriptorImpl(POINTPROPERTYTYPE_TYPE,new NameImpl("http://www.opengis.net/gml/3.2","pointProperty"),1,1,false,null));
      descriptors.add(new AttributeDescriptorImpl(POINTPROPERTYTYPE_TYPE,new NameImpl("http://www.opengis.net/gml/3.2","pointRep"),1,1,false,null));
      descriptors.add(new AttributeDescriptorImpl(DIRECTPOSITIONLISTTYPE_TYPE,new NameImpl("http://www.opengis.net/gml/3.2","posList"),1,1,false,null));
      descriptors.add(new AttributeDescriptorImpl(COORDINATESTYPE_TYPE,new NameImpl("http://www.opengis.net/gml/3.2","coordinates"),1,1,false,null));
      descriptors.add(new AttributeDescriptorImpl(CURVEINTERPOLATIONTYPE_TYPE,new NameImpl("interpolation"),0,1,true,null));
      descriptors.add(new AttributeDescriptorImpl(XSSchema.INTEGER_TYPE,new NameImpl("numArc"),0,1,true,null));
      return descriptors;
    }
  }
;
  return builtType;
}
