{
  ComplexType builtType=new AbstractLazyComplexTypeImpl(new NameImpl("http://www.opengis.net/gml/3.2","AbstractGMLType"),false,true,null,null){
    @Override public AttributeType buildSuper(){
      return XSSchema.ANYTYPE_TYPE;
    }
    @Override public Collection<PropertyDescriptor> buildDescriptors(){
      List<PropertyDescriptor> descriptors=new ArrayList<PropertyDescriptor>();
      descriptors.add(new AttributeDescriptorImpl(METADATAPROPERTYTYPE_TYPE,new NameImpl("http://www.opengis.net/gml/3.2","metaDataProperty"),0,2147483647,false,null));
      descriptors.add(new AttributeDescriptorImpl(STRINGORREFTYPE_TYPE,new NameImpl("http://www.opengis.net/gml/3.2","description"),0,1,false,null));
      descriptors.add(new AttributeDescriptorImpl(REFERENCETYPE_TYPE,new NameImpl("http://www.opengis.net/gml/3.2","descriptionReference"),0,1,false,null));
      descriptors.add(new AttributeDescriptorImpl(CODEWITHAUTHORITYTYPE_TYPE,new NameImpl("http://www.opengis.net/gml/3.2","identifier"),0,1,false,null));
      descriptors.add(new AttributeDescriptorImpl(CODETYPE_TYPE,new NameImpl("http://www.opengis.net/gml/3.2","name"),0,2147483647,false,null));
      descriptors.add(new AttributeDescriptorImpl(XSSchema.ID_TYPE,new NameImpl("http://www.opengis.net/gml/3.2","id"),0,1,true,null));
      return descriptors;
    }
  }
;
  return builtType;
}
