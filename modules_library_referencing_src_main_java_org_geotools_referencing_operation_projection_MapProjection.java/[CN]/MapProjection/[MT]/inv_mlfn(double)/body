{
  double s, t, phi, k=1.0 / (1.0 - excentricitySquared);
  int i;
  phi=arg;
  for (i=MAXIMUM_ITERATIONS; true; ) {
    if (--i < 0) {
      throw new ProjectionException(Errors.format(ErrorKeys.NO_CONVERGENCE));
    }
    s=Math.sin(phi);
    t=1.0 - excentricitySquared * s * s;
    t=(mlfn(phi,s,Math.cos(phi)) - arg) * (t * Math.sqrt(t)) * k;
    phi-=t;
    if (Math.abs(t) < MLFN_TOL) {
      return phi;
    }
  }
}
