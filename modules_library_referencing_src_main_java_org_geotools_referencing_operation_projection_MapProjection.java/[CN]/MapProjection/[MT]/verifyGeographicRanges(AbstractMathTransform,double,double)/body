{
  final boolean xOut, yOut;
  xOut=(x < (Longitude.MIN_VALUE - ANGLE_TOLERANCE) || x > (Longitude.MAX_VALUE + ANGLE_TOLERANCE));
  yOut=(y < (Latitude.MIN_VALUE - ANGLE_TOLERANCE) || y > (Latitude.MAX_VALUE + ANGLE_TOLERANCE));
  if (!xOut && !yOut) {
    return false;
  }
  final String lineSeparator=System.getProperty("line.separator","\n");
  final StringBuilder buffer=new StringBuilder();
  buffer.append(Errors.format(ErrorKeys.OUT_OF_PROJECTION_VALID_AREA_$1,tr.getName()));
  if (xOut) {
    buffer.append(lineSeparator);
    buffer.append(Errors.format(ErrorKeys.LONGITUDE_OUT_OF_RANGE_$1,new Longitude(x)));
  }
  if (yOut) {
    buffer.append(lineSeparator);
    buffer.append(Errors.format(ErrorKeys.LATITUDE_OUT_OF_RANGE_$1,new Latitude(y)));
  }
  final LogRecord record=new LogRecord(Level.WARNING,buffer.toString());
  final String classe;
  if (tr instanceof Inverse) {
    classe=((Inverse)tr).inverse().getClass().getName() + ".Inverse";
  }
 else {
    classe=tr.getClass().getName();
  }
  record.setSourceClassName(classe);
  record.setSourceMethodName("transform");
  record.setLoggerName(LOGGER.getName());
  LOGGER.log(record);
  return true;
}
