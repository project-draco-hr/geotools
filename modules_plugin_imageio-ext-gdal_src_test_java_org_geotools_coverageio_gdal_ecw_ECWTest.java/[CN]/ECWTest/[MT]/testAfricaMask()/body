{
  if (!testingEnabled()) {
    return;
  }
  File file=null;
  try {
    file=TestData.file(this,fileName);
  }
 catch (  FileNotFoundException fnfe) {
    LOGGER.warning("test-data not found: " + fileName + "\nTests are skipped");
    return;
  }
catch (  IOException ioe) {
    LOGGER.warning("test-data not found: " + fileName + "\nTests are skipped");
    return;
  }
  final URL url=file.toURI().toURL();
  final BaseGDALGridCoverage2DReader reader=new ECWReader(url,null);
  final ParameterValue<Boolean> jai=AbstractGridFormat.USE_JAI_IMAGEREAD.createValue();
  jai.setValue(true);
  ParameterValue<String> footprint=AbstractGridFormat.FOOTPRINT_BEHAVIOR.createValue();
  footprint.setValue(FootprintBehavior.Transparent.toString());
  GridCoverage2D gc=(GridCoverage2D)reader.read(new GeneralParameterValue[]{jai,footprint});
  LOGGER.info(gc.toString());
  forceDataLoading(gc);
  DirectPosition pointInGreenland=new DirectPosition2D(-43.3,75.9);
  DirectPosition pointInAfrica=new DirectPosition2D(20,0);
  byte[] pixel=new byte[4];
  gc.evaluate(pointInGreenland,pixel);
  assertTrue((pixel[3] & 0xFF) == 0);
  gc.evaluate(pointInAfrica,pixel);
  assertTrue((pixel[3] & 0xFF) == 255);
}
