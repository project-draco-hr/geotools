{
  int size=Math.max(image.getWidth(),image.getHeight());
  boolean hasScaleX=Math.abs(tx.getScaleX() - 1) * size > RS_EPS;
  boolean hasScaleY=Math.abs(tx.getScaleY() - 1) * size > RS_EPS;
  boolean hasShearX=Math.abs(tx.getShearX()) * size > RS_EPS;
  boolean hasShearY=Math.abs(tx.getShearY()) * size > RS_EPS;
  boolean hasTranslateX=Math.abs(tx.getTranslateX()) > RS_EPS;
  boolean hasTranslateY=Math.abs(tx.getTranslateY()) > RS_EPS;
  if (!hasScaleX && !hasScaleY && !hasShearX&& !hasShearY&& !hasTranslateX&& !hasTranslateY) {
    return this;
  }
  ParameterListDescriptor pld=getOperationDescriptor("affine").getParameterListDescriptor(RenderedRegistryMode.MODE_NAME);
  if (interpolation == null) {
    interpolation=(Interpolation)pld.getParamDefaultValue("interpolation");
  }
  if (bgValues == null) {
    if (background == null || background.length <= 0) {
      bgValues=(double[])pld.getParamDefaultValue("backgroundValues");
    }
 else {
      bgValues=background;
    }
  }
  background=bgValues;
  RenderedImage source=image;
  if (image instanceof RenderedOp) {
    RenderedOp op=(RenderedOp)image;
    Object mtProperty=op.getProperty("MathTransform");
    Object sourceBoundsProperty=op.getProperty("SourceBoundingBox");
    String opName=op.getOperationName();
    if (WARP_REDUCTION_ENABLED && "Warp".equals(opName) && mtProperty instanceof MathTransform2D&& sourceBoundsProperty instanceof Rectangle) {
      try {
        MathTransform2D originalTransform=(MathTransform2D)mtProperty;
        MathTransformFactory factory=ReferencingFactoryFinder.getMathTransformFactory(null);
        MathTransform affineMT=factory.createAffineTransform(new org.geotools.referencing.operation.matrix.AffineTransform2D(tx));
        MathTransform2D chained=(MathTransform2D)factory.createConcatenatedTransform(affineMT.inverse(),originalTransform);
        Double tolerance=(Double)getRenderingHint(Hints.RESAMPLE_TOLERANCE);
        if (tolerance == null) {
          tolerance=(Double)Hints.getSystemDefault(Hints.RESAMPLE_TOLERANCE);
        }
        if (tolerance == null) {
          tolerance=0.333;
        }
        WarpBuilder wb=new WarpBuilder(tolerance);
        wb.setMaxPositions(4 * 1024 * 1024);
        ParameterBlock pb=new ParameterBlock();
        pb.setSource(source,0);
        pb.set(tx,0);
        pb.set(interpolation,1);
        pb.set(bgValues,2);
        pb.set(roi,3);
        pb.set(true,5);
        pb.set(nodata,6);
        if (isNoDataNeeded() && bgValues != null && bgValues.length > 0) {
          setNoData(RangeFactory.create(bgValues[0],bgValues[0]));
        }
        RenderedOp at=JAI.create("Affine",pb,commonHints);
        Rectangle targetBB=at.getBounds();
        at.dispose();
        Rectangle sourceBB=(Rectangle)sourceBoundsProperty;
        Rectangle mappingBB;
        if (source.getProperty("ROI") instanceof ROI) {
          mappingBB=sourceBB.union(targetBB);
        }
 else {
          mappingBB=targetBB;
        }
        Warp warp=wb.buildWarp(chained,mappingBB);
        Warp sourceWarp=(Warp)op.getParameterBlock().getObjectParameter(0);
        if (warp instanceof WarpGrid || warp instanceof WarpAffine || !(sourceWarp instanceof WarpGrid || sourceWarp instanceof WarpAffine)) {
          PlanarImage sourceImage=op.getSourceImage(0);
          final ParameterBlock paramBlk=new ParameterBlock().addSource(sourceImage);
          Object property=sourceImage.getProperty("ROI");
          boolean canProcessROI=true;
          Range oldNoData=(Range)(op.getParameterBlock().getNumParameters() > 3 ? op.getParameterBlock().getObjectParameter(4) : null);
          double[] oldBkg=(double[])(op.getParameterBlock().getObjectParameter(2) != null ? op.getParameterBlock().getObjectParameter(2) : null);
          boolean hasSameNodata=oldNoData == null || (oldBkg != null && nodata != null && oldBkg.length > 0 && oldBkg[0] == nodata.getMin().doubleValue());
          if (((property == null) || property.equals(java.awt.Image.UndefinedProperty) || !(property instanceof ROI))) {
            paramBlk.add(warp).add(interpolation).add(bgValues);
            if (oldNoData != null) {
              paramBlk.set(oldNoData,4);
            }
            ROI newROI=null;
            if (roi != null) {
              ROI reprojectedROI=roi;
              try {
                MathTransform inverse=originalTransform.inverse();
                if (inverse instanceof AffineTransform) {
                  AffineTransform inv=(AffineTransform)inverse;
                  newROI=reprojectedROI.transform(inv);
                }
              }
 catch (              Exception e) {
                if (LOGGER.isLoggable(Level.WARNING)) {
                  LOGGER.log(Level.WARNING,"Unable to compute the inverse of the new ROI provided",e);
                }
                canProcessROI=false;
              }
            }
            if (newROI != null) {
              setROI(newROI);
              paramBlk.set(newROI,3);
            }
            if (((isNoDataNeeded() || newROI != null || oldNoData != null) && bgValues != null && bgValues.length > 0) && hasSameNodata) {
              setNoData(RangeFactory.create(bgValues[0],bgValues[0]));
            }
          }
 else {
            ROI newROI=null;
            if (roi != null) {
              ROI reprojectedROI=roi;
              try {
                MathTransform inverse=originalTransform.inverse();
                if (inverse instanceof AffineTransform) {
                  AffineTransform inv=(AffineTransform)inverse;
                  reprojectedROI=reprojectedROI.transform(inv);
                  newROI=reprojectedROI.intersect((ROI)property);
                }
              }
 catch (              Exception e) {
                if (LOGGER.isLoggable(Level.WARNING)) {
                  LOGGER.log(Level.WARNING,"Unable to compute the inverse of the new ROI provided",e);
                }
                canProcessROI=false;
              }
            }
 else {
              newROI=(ROI)property;
            }
            setROI(newROI);
            paramBlk.add(warp).add(interpolation).add(bgValues).add(newROI);
            if (oldNoData != null) {
              paramBlk.set(oldNoData,4);
            }
            if (((isNoDataNeeded() || newROI != null || oldNoData != null) && bgValues != null && bgValues.length > 0) && hasSameNodata) {
              setNoData(RangeFactory.create(bgValues[0],bgValues[0]));
            }
          }
          if (canProcessROI && hasSameNodata) {
            Hints localHints=new Hints(commonHints);
            localHints.remove(JAI.KEY_IMAGE_LAYOUT);
            ImageLayout il=new ImageLayout();
            il.setMinX(targetBB.x);
            il.setMinY(targetBB.y);
            il.setWidth(targetBB.width);
            il.setHeight(targetBB.height);
            il.setTileHeight(op.getTileHeight());
            il.setTileWidth(op.getTileWidth());
            il.setTileGridXOffset(0);
            il.setTileGridYOffset(0);
            localHints.put(JAI.KEY_IMAGE_LAYOUT,il);
            RenderedOp result=JAI.create("Warp",paramBlk,localHints);
            result.setProperty("MathTransform",chained);
            image=result;
            PropertyGenerator gen=getOperationDescriptor("Warp").getPropertyGenerators(RenderedRegistryMode.MODE_NAME)[0];
            Object prop=gen.getProperty("roi",image);
            if (prop != null && prop instanceof ROI) {
              setROI((ROI)prop);
            }
 else {
              setROI(null);
            }
            return this;
          }
        }
      }
 catch (      Exception e) {
        LOGGER.log(Level.WARNING,"Failed to squash warp and affine into a single operation, chaining them instead",e);
      }
    }
    if ("Affine".equals(opName)) {
      ParameterBlock paramBlock=op.getParameterBlock();
      RenderedImage sSource=paramBlock.getRenderedSource(0);
      AffineTransform sTx=(AffineTransform)paramBlock.getObjectParameter(0);
      Interpolation sInterp=(Interpolation)paramBlock.getObjectParameter(1);
      double[] sBgValues=(double[])paramBlock.getObjectParameter(2);
      Range nodata=null;
      ROI r=null;
      boolean similarROI=true;
      boolean hasSameNodata=true;
      if (paramBlock.getNumParameters() > 3) {
        nodata=(Range)paramBlock.getObjectParameter(6);
        r=(ROI)paramBlock.getObjectParameter(3);
        if (r != null) {
          try {
            AffineTransform inverse=sTx.createInverse();
            ROI newROI=this.roi != null ? this.roi.transform(inverse) : null;
            similarROI=newROI != null && newROI.intersects(r.getBounds());
          }
 catch (          NoninvertibleTransformException e) {
            LOGGER.log(Level.SEVERE,e.getMessage(),e);
          }
          hasSameNodata=nodata == null || (sBgValues != null && this.nodata != null && sBgValues.length > 0 && sBgValues[0] == this.nodata.getMin().doubleValue());
        }
      }
      if ((sInterp == interpolation && Arrays.equals(sBgValues,bgValues)) && ((nodata == null || hasSameNodata) && (r == null || similarROI))) {
        AffineTransform concat=new AffineTransform(tx);
        concat.concatenate(sTx);
        tx=concat;
        source=sSource;
        if (similarROI && r != null) {
          try {
            AffineTransform inverse=sTx.createInverse();
            ROI newROI=this.roi != null ? this.roi.transform(inverse) : null;
            this.roi=newROI.intersect(r);
          }
 catch (          NoninvertibleTransformException e) {
            LOGGER.log(Level.SEVERE,e.getMessage(),e);
          }
        }
        if (hasSameNodata && nodata != null) {
          setNoData(nodata);
        }
      }
    }
 else     if ("Scale".equals(opName)) {
      ParameterBlock paramBlock=op.getParameterBlock();
      RenderedImage sSource=paramBlock.getRenderedSource(0);
      float xScale=paramBlock.getFloatParameter(0);
      float yScale=paramBlock.getFloatParameter(1);
      float xTrans=paramBlock.getFloatParameter(2);
      float yTrans=paramBlock.getFloatParameter(3);
      Interpolation sInterp=(Interpolation)paramBlock.getObjectParameter(4);
      Range nodata=null;
      ROI r=null;
      boolean similarROI=true;
      boolean hasSameNodata=true;
      if (paramBlock.getNumParameters() > 5) {
        nodata=(Range)paramBlock.getObjectParameter(7);
        r=(ROI)paramBlock.getObjectParameter(5);
        double[] sBgValues=(double[])paramBlock.getObjectParameter(8);
        if (r != null) {
          try {
            AffineTransform sTx=AffineTransform.getScaleInstance(xScale,yScale);
            sTx.concatenate(AffineTransform.getTranslateInstance(xTrans,yTrans));
            AffineTransform inverse=sTx.createInverse();
            ROI newROI=this.roi != null ? this.roi.transform(inverse) : null;
            similarROI=newROI != null && newROI.intersects(r.getBounds());
          }
 catch (          NoninvertibleTransformException e) {
            LOGGER.log(Level.SEVERE,e.getMessage(),e);
          }
        }
        hasSameNodata=nodata == null || (sBgValues != null && this.nodata != null && sBgValues.length > 0 && sBgValues[0] == this.nodata.getMin().doubleValue());
      }
      if (sInterp == interpolation && ((nodata == null || hasSameNodata) && (r == null || similarROI))) {
        AffineTransform concat=new AffineTransform(tx);
        concat.concatenate(new AffineTransform(xScale,0,0,yScale,xTrans,yTrans));
        tx=concat;
        source=sSource;
        if (similarROI && r != null) {
          try {
            AffineTransform sTx=AffineTransform.getScaleInstance(xScale,yScale);
            sTx.concatenate(AffineTransform.getTranslateInstance(xTrans,yTrans));
            AffineTransform inverse=sTx.createInverse();
            ROI newROI=this.roi != null ? this.roi.transform(inverse) : null;
            this.roi=newROI.intersect(r);
          }
 catch (          NoninvertibleTransformException e) {
            LOGGER.log(Level.SEVERE,e.getMessage(),e);
          }
        }
        if (hasSameNodata && nodata != null) {
          setNoData(nodata);
        }
      }
    }
  }
  hasScaleX=Math.abs(tx.getScaleX() - 1) * size > RS_EPS;
  hasScaleY=Math.abs(tx.getScaleY() - 1) * size > RS_EPS;
  hasShearX=Math.abs(tx.getShearX()) * size > RS_EPS;
  hasShearY=Math.abs(tx.getShearY()) * size > RS_EPS;
  hasTranslateX=Math.abs(tx.getTranslateX()) > RS_EPS;
  hasTranslateY=Math.abs(tx.getTranslateY()) > RS_EPS;
  boolean intTranslateX=Math.abs((tx.getTranslateX() - Math.round(tx.getTranslateX()))) < RS_EPS;
  boolean intTranslateY=Math.abs((tx.getTranslateY() - Math.round(tx.getTranslateY()))) < RS_EPS;
  boolean nonNegativeScaleX=tx.getScaleX() >= 0;
  boolean nonNegativeScaleY=tx.getScaleY() >= 0;
  if (!hasScaleX && !hasScaleY && !hasShearX&& !hasShearY&& !hasTranslateX&& !hasTranslateY) {
    this.image=source;
    return this;
  }
  ParameterBlock pb=new ParameterBlock();
  pb.setSource(source,0);
  if (!hasShearX && !hasShearY && nonNegativeScaleX&& nonNegativeScaleY) {
    if (!hasScaleX && !hasScaleY && intTranslateX&& intTranslateY) {
      Hints localHints=new Hints(commonHints);
      localHints.remove(JAI.KEY_IMAGE_LAYOUT);
      pb.set(1.0f,0);
      pb.set(1.0f,1);
      pb.set((float)Math.round(tx.getTranslateX()),2);
      pb.set((float)Math.round(tx.getTranslateY()),3);
      pb.set(interpolation,4);
      pb.set(roi,5);
      pb.set(nodata,7);
      if (isNoDataNeeded()) {
        if (background != null && background.length > 0) {
          pb.set(background,8);
          setNoData(RangeFactory.create(background[0],background[0]));
        }
      }
      image=JAI.create("Scale",pb,localHints);
      if (roi != null) {
        PropertyGenerator gen=getOperationDescriptor("Scale").getPropertyGenerators(RenderedRegistryMode.MODE_NAME)[0];
        Object prop=gen.getProperty("roi",image);
        if (prop != null && prop instanceof ROI) {
          setROI((ROI)prop);
        }
 else {
          setROI(null);
        }
      }
    }
 else {
      pb.set((float)tx.getScaleX(),0);
      pb.set((float)tx.getScaleY(),1);
      pb.set((float)tx.getTranslateX(),2);
      pb.set((float)tx.getTranslateY(),3);
      pb.set(interpolation,4);
      pb.set(roi,5);
      pb.set(nodata,7);
      if (isNoDataNeeded()) {
        if (background != null && background.length > 0) {
          pb.set(background,8);
          setNoData(RangeFactory.create(background[0],background[0]));
        }
      }
      image=JAI.create("Scale",pb,commonHints);
      if (roi != null) {
        PropertyGenerator gen=getOperationDescriptor("Scale").getPropertyGenerators(RenderedRegistryMode.MODE_NAME)[0];
        Object prop=gen.getProperty("roi",image);
        if (prop != null && prop instanceof ROI) {
          setROI((ROI)prop);
        }
 else {
          setROI(null);
        }
      }
    }
  }
 else {
    pb.set(tx,0);
    pb.set(interpolation,1);
    pb.set(bgValues,2);
    pb.set(roi,3);
    pb.set(true,5);
    pb.set(nodata,6);
    if (isNoDataNeeded()) {
      if (bgValues != null && bgValues.length > 0) {
        setNoData(RangeFactory.create(bgValues[0],bgValues[0]));
      }
    }
    image=JAI.create("Affine",pb,commonHints);
    if (roi != null) {
      PropertyGenerator gen=getOperationDescriptor("Affine").getPropertyGenerators(RenderedRegistryMode.MODE_NAME)[0];
      Object prop=gen.getProperty("roi",image);
      if (prop != null && prop instanceof ROI) {
        setROI((ROI)prop);
      }
 else {
        setROI(null);
      }
    }
  }
  return this;
}
