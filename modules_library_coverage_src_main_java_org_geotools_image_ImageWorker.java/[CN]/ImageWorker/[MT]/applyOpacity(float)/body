{
  RenderedImage result;
  ColorModel colorModel=image.getColorModel();
  if (colorModel instanceof IndexColorModel) {
    IndexColorModel index=(IndexColorModel)colorModel;
    byte[] reds=new byte[index.getMapSize()];
    byte[] greens=new byte[index.getMapSize()];
    byte[] blues=new byte[index.getMapSize()];
    byte[] alphas=new byte[index.getMapSize()];
    index.getReds(reds);
    index.getGreens(greens);
    index.getBlues(blues);
    index.getAlphas(alphas);
    final int transparentPixel=index.getTransparentPixel();
    for (int i=0; i < alphas.length; i++) {
      alphas[i]=(byte)Math.round((0xFF & alphas[i]) * opacity);
      if (i == transparentPixel) {
        alphas[i]=0;
      }
    }
    IndexColorModel newColorModel=new IndexColorModel(index.getPixelSize(),index.getMapSize(),reds,greens,blues,alphas);
    LookupTable table=buildOpacityLookupTable(0,1,-1,image.getSampleModel().getDataType());
    ImageLayout layout=new ImageLayout(image);
    layout.setColorModel(newColorModel);
    RenderingHints hints=new RenderingHints(JAI.KEY_IMAGE_LAYOUT,layout);
    ParameterBlock pb=new ParameterBlock();
    pb.setSource(image,0);
    pb.set(table,0);
    pb.set(roi,2);
    pb.set(nodata,3);
    if (isNoDataNeeded()) {
      if (background != null && background.length > 0) {
        pb.set(background[0],1);
        setNoData(RangeFactory.create(background[0],background[0]));
      }
    }
    result=JAI.create("Lookup",pb,hints);
  }
 else {
    RenderedImage expanded;
    if (!(colorModel instanceof ComponentColorModel)) {
      expanded=new ImageWorker(image).forceComponentColorModel().getRenderedImage();
    }
 else {
      expanded=image;
    }
    if (!expanded.getColorModel().hasAlpha()) {
      byte alpha=(byte)Math.round(255 * opacity);
      ImageLayout layout=new ImageLayout(image.getMinX(),image.getMinY(),image.getWidth(),image.getHeight());
      RenderedOp alphaBand=ConstantDescriptor.create((float)image.getWidth(),(float)image.getHeight(),new Byte[]{new Byte(alpha)},new RenderingHints(JAI.KEY_IMAGE_LAYOUT,layout));
      ParameterBlock pb=new ParameterBlock();
      pb.setSource(expanded,0);
      pb.setSource(alphaBand,1);
      pb.set(new Range[]{nodata,nodata == null ? null : RangeFactory.create(alpha - 1,alpha - 1)},0);
      if (isNoDataNeeded()) {
        if (background != null && background.length > 0) {
          double dest=background[0];
          pb.set(dest,1);
          setNoData(RangeFactory.create(dest,dest));
        }
      }
      pb.set(roi,3);
      pb.set(true,4);
      result=JAI.create("BandMerge",pb,null);
    }
 else {
      final int bands=expanded.getSampleModel().getNumBands();
      int alphaBand=bands - 1;
      ParameterBlock pb=new ParameterBlock();
      pb.setSource(expanded,0);
      LookupTable table=buildOpacityLookupTable(opacity,bands,alphaBand,expanded.getSampleModel().getDataType());
      pb.set(table,0);
      pb.set(roi,2);
      pb.set(nodata,3);
      if (isNoDataNeeded()) {
        if (background != null && background.length > 0) {
          pb.set(background[0],1);
          setNoData(RangeFactory.create(background[0],background[0]));
        }
      }
      result=JAI.create("Lookup",pb,null);
    }
  }
  image=result;
  return this;
}
