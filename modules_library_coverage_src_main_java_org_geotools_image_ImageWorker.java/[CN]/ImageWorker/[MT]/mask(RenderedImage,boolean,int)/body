{
  tileCacheEnabled(false);
  forceIndexColorModel(true);
  final RenderingHints hints=new RenderingHints(JAI.KEY_TILE_CACHE,null);
  if (newValue == 255 && !maskValue) {
    final byte[] lutData=new byte[256];
    Arrays.fill(lutData,(byte)0);
    lutData[0]=(byte)255;
    final LookupTableJAI lut=new LookupTableJAI(lutData);
    mask=LookupDescriptor.create(mask,lut,hints);
    image=AddDescriptor.create(image,mask,getRenderingHints());
    tileCacheEnabled(true);
    invalidateStatistics();
    return this;
  }
 else {
    if (!isBinary())     binarize();
    if (maskValue)     mask=NotDescriptor.create(mask,new RenderingHints(JAI.KEY_REPLACE_INDEX_COLOR_MODEL,Boolean.FALSE));
    tileCacheEnabled(false);
    image=AndDescriptor.create(mask,image,getRenderingHints());
    mask=AddConstDescriptor.create(mask,new double[]{newValue},new RenderingHints(JAI.KEY_REPLACE_INDEX_COLOR_MODEL,Boolean.FALSE));
    image=AddDescriptor.create(mask,image,getRenderingHints());
    tileCacheEnabled(true);
    invalidateStatistics();
    return this;
  }
}
