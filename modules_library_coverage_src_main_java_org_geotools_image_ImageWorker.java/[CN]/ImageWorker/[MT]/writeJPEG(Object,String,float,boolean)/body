{
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("Encoding input image to write out as JPEG.");
  }
  ColorModel cm=image.getColorModel();
  final boolean hasAlpha=cm.hasAlpha();
  forceComponentColorModel();
  cm=image.getColorModel();
  rescaleToBytes();
  cm=image.getColorModel();
  final int numBands=image.getSampleModel().getNumBands();
  if (hasAlpha) {
    retainBands(numBands - 1);
  }
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("Getting a JPEG writer and configuring it.");
  }
  ImageWriter writer=null;
  if (nativeAcc && CODEC_LIB_AVAILABLE && IMAGEIO_JPEG_IMAGE_WRITER_SPI != null) {
    try {
      writer=IMAGEIO_JPEG_IMAGE_WRITER_SPI.createWriterInstance();
    }
 catch (    Exception e) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.log(Level.INFO,"Unable to instantiate CLIB JPEG ImageWriter",e);
      }
      writer=null;
    }
  }
  if (writer == null) {
    if (JDK_JPEG_IMAGE_WRITER_SPI == null) {
      throw new IllegalStateException(Errors.format(ErrorKeys.ILLEGAL_CLASS_$2,"Unable to find JDK JPEG Writer"));
    }
    writer=JDK_JPEG_IMAGE_WRITER_SPI.createWriterInstance();
  }
  final ImageWriteParam iwp=writer.getDefaultWriteParam();
  final ImageOutputStream outStream=ImageIOExt.createImageOutputStream(image,destination);
  if (outStream == null) {
    throw new IIOException(Errors.format(ErrorKeys.NULL_ARGUMENT_$1,"stream"));
  }
  iwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
  iwp.setCompressionType(compression);
  iwp.setCompressionQuality(compressionRate);
  if (iwp instanceof JPEGImageWriteParam) {
    final JPEGImageWriteParam param=(JPEGImageWriteParam)iwp;
    param.setOptimizeHuffmanTables(true);
    try {
      param.setProgressiveMode(JPEGImageWriteParam.MODE_DEFAULT);
    }
 catch (    UnsupportedOperationException e) {
      throw new IOException(e);
    }
  }
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("Writing out...");
  }
  try {
    writer.setOutput(outStream);
    if ((!nativeAcc && (image.getMinX() != 0 || image.getMinY() != 0)) || (nativeAcc && (image.getNumXTiles() > 1 || image.getNumYTiles() > 1))) {
      final BufferedImage finalImage=new BufferedImage(image.getColorModel(),((WritableRaster)image.getData()).createWritableTranslatedChild(0,0),image.getColorModel().isAlphaPremultiplied(),null);
      writer.write(null,new IIOImage(finalImage,null,null),iwp);
    }
 else {
      writer.write(null,new IIOImage(image,null,null),iwp);
    }
  }
  finally {
    try {
      writer.dispose();
    }
 catch (    Throwable e) {
      if (LOGGER.isLoggable(Level.FINEST))       LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
    }
    try {
      outStream.close();
    }
 catch (    Throwable e) {
      if (LOGGER.isLoggable(Level.FINEST))       LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
    }
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("Writing out... Done!");
    }
  }
}
