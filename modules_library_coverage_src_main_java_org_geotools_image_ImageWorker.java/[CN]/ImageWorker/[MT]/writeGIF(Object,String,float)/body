{
  forceIndexColorModelForGIF(true);
  final IIORegistry registry=IIORegistry.getDefaultInstance();
  Iterator<ImageWriterSpi> it=registry.getServiceProviders(ImageWriterSpi.class,true);
  ImageWriterSpi spi=null;
  while (it.hasNext()) {
    final ImageWriterSpi candidate=it.next();
    if (containsFormatName(candidate.getFormatNames(),"gif")) {
      if (spi == null) {
        spi=candidate;
      }
 else {
        final String name=candidate.getClass().getName();
        if (name.equals("com.sun.media.imageioimpl.plugins.gif.GIFImageWriterSpi")) {
          spi=candidate;
          break;
        }
      }
    }
  }
  if (spi == null) {
    throw new IIOException(Errors.format(ErrorKeys.NO_IMAGE_WRITER));
  }
  final ImageOutputStream stream=ImageIOExt.createImageOutputStream(image,destination);
  if (stream == null)   throw new IIOException(Errors.format(ErrorKeys.NULL_ARGUMENT_$1,"stream"));
  final ImageWriter writer=spi.createWriterInstance();
  final ImageWriteParam param=writer.getDefaultWriteParam();
  param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
  param.setCompressionType(compression);
  param.setCompressionQuality(compressionRate);
  try {
    writer.setOutput(stream);
    writer.write(null,new IIOImage(image,null,null),param);
  }
  finally {
    try {
      stream.close();
    }
 catch (    Throwable e) {
      if (LOGGER.isLoggable(Level.FINEST))       LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
    }
    try {
      writer.dispose();
    }
 catch (    Throwable e) {
      if (LOGGER.isLoggable(Level.FINEST))       LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
    }
  }
  return this;
}
