{
  final int COLUMN_NAME=4;
  final int DATA_TYPE=5;
  final int TYPE_NAME=6;
  try {
    int dataType=rs.getInt(DATA_TYPE);
    String colName=rs.getString(COLUMN_NAME);
    LOGGER.fine("dataType: " + dataType + " "+ rs.getString(TYPE_NAME)+ " "+ colName);
    Class type=(Class)TYPE_MAPPINGS.get(new Integer(dataType));
    if (colName.equals(XMinColumnName)) {
      if (Number.class.isAssignableFrom(type)) {
        return new AttributeTypeBuilder().binding(Polygon.class).buildDescriptor(geomName);
      }
 else {
        String excMesg="Specified MIN X column of " + colName + " of type: "+ type+ ", can not be used as BBOX element";
        throw new DataSourceException(excMesg);
      }
    }
 else     if (colName.equals(YMinColumnName)) {
      if (Number.class.isAssignableFrom(type)) {
        return null;
      }
 else {
        String excMesg="Specified Y column of " + colName + " of type: "+ type+ ", can not be used as as BBOX element";
        throw new DataSourceException(excMesg);
      }
    }
 else     if (colName.equals(XMaxColumnName)) {
      if (Number.class.isAssignableFrom(type)) {
        return null;
      }
 else {
        String excMesg="Specified X column of " + colName + " of type: "+ type+ ", can not be used as as BBOX element";
        throw new DataSourceException(excMesg);
      }
    }
 else     if (colName.equals(YMaxColumnName)) {
      if (Number.class.isAssignableFrom(type)) {
        return null;
      }
 else {
        String excMesg="Specified Y column of " + colName + " of type: "+ type+ ", can not be used as as BBOX element";
        throw new DataSourceException(excMesg);
      }
    }
 else {
      return super.buildAttributeType(rs);
    }
  }
 catch (  SQLException e) {
    throw new IOException("SQL exception occurred: " + e.getMessage());
  }
}
