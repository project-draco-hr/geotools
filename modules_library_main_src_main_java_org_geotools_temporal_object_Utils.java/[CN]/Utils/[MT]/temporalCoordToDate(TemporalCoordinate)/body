{
  if (temporalCoord == null) {
    return null;
  }
  final Calendar calendar=Calendar.getInstance();
  final DefaultTemporalCoordinate timeCoord=(DefaultTemporalCoordinate)temporalCoord;
  Number value=timeCoord.getCoordinateValue();
  if (timeCoord.getFrame() instanceof TemporalCoordinateSystem) {
    DefaultTemporalCoordinateSystem coordSystem=(DefaultTemporalCoordinateSystem)timeCoord.getFrame();
    Date origin=coordSystem.getOrigin();
    String interval=coordSystem.getInterval().toString();
    Long timeInMS=0L;
    if (interval.equals("year")) {
      timeInMS=value.longValue() * yearMS;
    }
 else     if (interval.equals("month")) {
      timeInMS=value.longValue() * monthMS;
    }
 else     if (interval.equals("week")) {
      timeInMS=value.longValue() * weekMS;
    }
 else     if (interval.equals("day")) {
      timeInMS=value.longValue() * dayMS;
    }
 else     if (interval.equals("hour")) {
      timeInMS=value.longValue() * hourMS;
    }
 else     if (interval.equals("minute")) {
      timeInMS=value.longValue() * minMS;
    }
 else     if (interval.equals("second")) {
      timeInMS=value.longValue() * secondMS;
    }
 else {
      throw new IllegalArgumentException(" The interval of TemporalCoordinateSystem for this TemporalCoordinate object is unknown ! ");
    }
    timeInMS=timeInMS + origin.getTime();
    calendar.setTimeInMillis(timeInMS);
    return calendar.getTime();
  }
 else {
    throw new IllegalArgumentException("The frame of this TemporalCoordinate object must be an instance of TemporalCoordinateSystem");
  }
}
