{
  this.delegate=delegate;
  this.firstFeatures=firstFeatures;
  this.secondFeatures=secondFeatures;
  SimpleFeatureTypeBuilder tb=new SimpleFeatureTypeBuilder();
  GeometryDescriptor geometryDescriptor=firstFeatureCollectionSchema.getGeometryDescriptor();
  for (  AttributeDescriptor descriptor : firstFeatureCollectionSchema.getAttributeDescriptors()) {
    if (!(descriptor.getType() instanceof GeometryTypeImpl) || (!geometryDescriptor.getName().equals(descriptor.getName()))) {
      AttributeTypeBuilder builder=new AttributeTypeBuilder();
      builder.setName(this.firstFeatures.features().next().getFeatureType().getName().getLocalPart() + "_" + descriptor.getName());
      builder.setNillable(descriptor.isNillable());
      builder.setBinding(descriptor.getType().getBinding());
      builder.setMinOccurs(descriptor.getMinOccurs());
      builder.setMaxOccurs(descriptor.getMaxOccurs());
      builder.setDefaultValue(descriptor.getDefaultValue());
      builder.setCRS(this.firstFeatures.features().next().getFeatureType().getCoordinateReferenceSystem());
      AttributeDescriptor intersectionDescriptor=builder.buildDescriptor(this.firstFeatures.features().next().getFeatureType().getName().getLocalPart() + "_" + descriptor.getName(),descriptor.getType());
      tb.add(intersectionDescriptor);
      tb.addBinding(descriptor.getType());
    }
 else {
      tb.add(descriptor);
    }
  }
  geometryDescriptor=secondFeatureCollectionSchema.getGeometryDescriptor();
  for (  AttributeDescriptor descriptor : secondFeatureCollectionSchema.getAttributeDescriptors()) {
    if (!(descriptor.getType() instanceof GeometryTypeImpl) || (!geometryDescriptor.getName().equals(descriptor.getName()))) {
      AttributeTypeBuilder builder=new AttributeTypeBuilder();
      builder.setName(this.secondFeatures.features().next().getFeatureType().getName().getLocalPart() + "_" + descriptor.getName());
      builder.setNillable(descriptor.isNillable());
      builder.setBinding(descriptor.getType().getBinding());
      builder.setMinOccurs(descriptor.getMinOccurs());
      builder.setMaxOccurs(descriptor.getMaxOccurs());
      builder.setDefaultValue(descriptor.getDefaultValue());
      builder.setCRS(this.secondFeatures.features().next().getFeatureType().getCoordinateReferenceSystem());
      builder.setNamespaceURI(this.secondFeatures.features().next().getFeatureType().getName().getNamespaceURI());
      builder.setDefaultValue(descriptor.getDefaultValue());
      AttributeDescriptor intersectionDescriptor=builder.buildDescriptor(this.secondFeatures.features().next().getFeatureType().getName().getLocalPart() + "_" + descriptor.getName(),descriptor.getType());
      tb.addBinding(descriptor.getType());
      tb.add(intersectionDescriptor);
    }
  }
  tb.setDescription(firstFeatureCollectionSchema.getDescription());
  tb.setCRS(firstFeatureCollectionSchema.getCoordinateReferenceSystem());
  tb.setAbstract(firstFeatureCollectionSchema.isAbstract());
  tb.setSuperType((SimpleFeatureType)firstFeatureCollectionSchema.getSuper());
  tb.setName(firstFeatureCollectionSchema.getName());
  this.fb=new SimpleFeatureBuilder(tb.buildFeatureType());
  subFeatureCollection=this.secondFeatures;
  this.dataGeomName=this.firstFeatures.getSchema().getGeometryDescriptor().getLocalName();
}
