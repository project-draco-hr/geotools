{
  this.retainAttributesFst=retainAttributesFstPar;
  this.retainAttributesSnd=retainAttributesSndPar;
  this.delegate=delegate;
  this.firstFeatures=firstFeatures;
  this.secondFeatures=secondFeatures;
  this.percentagesEnabled=percentagesEnabled;
  this.areasEnabled=areasEnabled;
  this.intersectionMode=intersectionMode;
  logger2.info("INFO----> Creating schema");
  SimpleFeatureTypeBuilder tb=new SimpleFeatureTypeBuilder();
  if (intersectionMode == IntersectionMode.FIRST) {
    geomType=firstFeatureCollectionSchema.getGeometryDescriptor();
  }
  if (intersectionMode == IntersectionMode.SECOND) {
    geomType=secondFeatureCollectionSchema.getGeometryDescriptor();
  }
  if (intersectionMode == IntersectionMode.INTERSECTION) {
    geomType=getIntersectionType(firstFeatures,secondFeatures);
  }
  tb.add(geomType);
  collectAttributes(firstFeatureCollectionSchema,retainAttributesFstPar,tb);
  collectAttributes(secondFeatureCollectionSchema,retainAttributesSndPar,tb);
  if (percentagesEnabled) {
    tb.add("percentageA",Double.class);
    tb.add("percentageB",Double.class);
  }
  if (areasEnabled) {
    tb.add("areaA",Double.class);
    tb.add("areaB",Double.class);
  }
  tb.setDescription(firstFeatureCollectionSchema.getDescription());
  tb.setCRS(firstFeatureCollectionSchema.getCoordinateReferenceSystem());
  tb.setAbstract(firstFeatureCollectionSchema.isAbstract());
  tb.setSuperType((SimpleFeatureType)firstFeatureCollectionSchema.getSuper());
  tb.setName(firstFeatureCollectionSchema.getName());
  this.fb=new SimpleFeatureBuilder(tb.buildFeatureType());
  subFeatureCollection=this.secondFeatures;
  this.dataGeomName=this.firstFeatures.getSchema().getGeometryDescriptor().getLocalName();
  logger2.info("INFO----> Schema created");
}
