{
  schemaName=schemaName != null ? schemaName : "public";
  String tableName=featureType.getName().getLocalPart();
  Statement st=null;
  try {
    st=cx.createStatement();
    for (    AttributeDescriptor att : featureType.getAttributeDescriptors()) {
      if (att instanceof GeometryDescriptor) {
        GeometryDescriptor gd=(GeometryDescriptor)att;
        int srid=-1;
        if (gd.getUserData().get(JDBCDataStore.JDBC_NATIVE_SRID) != null) {
          srid=(Integer)gd.getUserData().get(JDBCDataStore.JDBC_NATIVE_SRID);
        }
 else         if (gd.getCoordinateReferenceSystem() != null) {
          try {
            Integer result=CRS.lookupEpsgCode(gd.getCoordinateReferenceSystem(),true);
            if (result != null)             srid=result;
          }
 catch (          Exception e) {
            LOGGER.log(Level.FINE,"Error looking up the " + "epsg code for metadata " + "insertion, assuming -1",e);
          }
        }
        int dimensions=2;
        if (gd.getUserData().get(Hints.COORDINATE_DIMENSION) != null) {
          dimensions=(Integer)gd.getUserData().get(Hints.COORDINATE_DIMENSION);
        }
        String geomType=CLASS_TO_TYPE_MAP.get(gd.getType().getBinding());
        if (geomType == null) {
          geomType="GEOMETRY";
        }
        String sql=null;
        if (getVersion(cx).compareTo(V_2_0_0) >= 0) {
          if (dimensions == 3) {
            geomType=geomType + "Z";
          }
 else           if (dimensions == 4) {
            geomType=geomType + "ZM";
          }
 else           if (dimensions > 4) {
            throw new IllegalArgumentException("PostGIS only supports geometries with 2, 3 and 4 dimensions, current value: " + dimensions);
          }
          sql="ALTER TABLE \"" + schemaName + "\".\""+ tableName+ "\" "+ "ALTER COLUMN \""+ gd.getLocalName()+ "\" "+ "TYPE geometry ("+ geomType+ ", "+ srid+ ");";
          LOGGER.fine(sql);
          st.execute(sql);
        }
 else {
          sql="DELETE FROM GEOMETRY_COLUMNS" + " WHERE f_table_catalog=''" + " AND f_table_schema = '" + schemaName + "'"+ " AND f_table_name = '"+ tableName+ "'"+ " AND f_geometry_column = '"+ gd.getLocalName()+ "'";
          LOGGER.fine(sql);
          st.execute(sql);
          sql="INSERT INTO GEOMETRY_COLUMNS VALUES (''," + "'" + schemaName + "',"+ "'"+ tableName+ "',"+ "'"+ gd.getLocalName()+ "',"+ dimensions+ ","+ srid+ ","+ "'"+ geomType+ "')";
          LOGGER.fine(sql);
          st.execute(sql);
          if (srid > -1) {
            sql="ALTER TABLE " + "\"" + schemaName + "\""+ "."+ "\""+ tableName+ "\""+ " ADD CONSTRAINT \"enforce_srid_"+ gd.getLocalName()+ "\""+ " CHECK (ST_SRID("+ "\""+ gd.getLocalName()+ "\""+ ") = "+ srid+ ")";
            LOGGER.fine(sql);
            st.execute(sql);
          }
          sql="ALTER TABLE " + "\"" + schemaName + "\""+ "."+ "\""+ tableName+ "\""+ " ADD CONSTRAINT \"enforce_dims_"+ gd.getLocalName()+ "\""+ " CHECK (st_ndims(\""+ gd.getLocalName()+ "\")"+ " = "+ dimensions+ ")";
          LOGGER.fine(sql);
          st.execute(sql);
          if (!geomType.equals("GEOMETRY")) {
            sql="ALTER TABLE " + "\"" + schemaName + "\""+ "."+ "\""+ tableName+ "\""+ " ADD CONSTRAINT \"enforce_geotype_"+ gd.getLocalName()+ "\""+ " CHECK (geometrytype("+ "\""+ gd.getLocalName()+ "\""+ ") = '"+ geomType+ "'::text "+ "OR \""+ gd.getLocalName()+ "\""+ " IS NULL)";
            LOGGER.fine(sql);
            st.execute(sql);
          }
        }
        sql="CREATE INDEX \"spatial_" + tableName + "_"+ gd.getLocalName().toLowerCase()+ "\""+ " ON "+ "\""+ schemaName+ "\""+ "."+ "\""+ tableName+ "\""+ " USING GIST ("+ "\""+ gd.getLocalName()+ "\""+ ")";
        LOGGER.fine(sql);
        st.execute(sql);
      }
    }
    if (!cx.getAutoCommit()) {
      cx.commit();
    }
  }
  finally {
    dataStore.closeSafe(st);
  }
}
