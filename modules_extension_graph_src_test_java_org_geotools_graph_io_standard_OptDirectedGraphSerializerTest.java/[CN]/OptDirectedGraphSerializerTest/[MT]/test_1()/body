{
  final int k=5;
  GraphTestUtil.buildPerfectBinaryTree(builder(),k);
  try {
    File victim=File.createTempFile("graph",null);
    victim.deleteOnExit();
    serializer().setProperty(SerializedReaderWriter.FILENAME,victim.getAbsolutePath());
    serializer().write(builder().getGraph());
    Graph before=builder().getGraph();
    Graph after=serializer().read();
    assertTrue(before.getNodes().size() == after.getNodes().size());
    assertTrue(before.getEdges().size() == after.getEdges().size());
    GraphVisitor visitor=new GraphVisitor(){
      public int visit(      Graphable component){
        DirectedNode node=(DirectedNode)component;
        if (node.getInDegree() == 0 && node.getOutDegree() == 2)         return (Graph.PASS_AND_CONTINUE);
        return (Graph.FAIL_QUERY);
      }
    }
;
    assertTrue(after.queryNodes(visitor).size() == 1);
    visitor=new GraphVisitor(){
      public int visit(      Graphable component){
        DirectedNode node=(DirectedNode)component;
        if (node.getInDegree() == 1 && node.getOutDegree() == 2)         return (Graph.PASS_AND_CONTINUE);
        return (Graph.FAIL_QUERY);
      }
    }
;
    assertTrue(after.queryNodes(visitor).size() == Math.pow(2,k) - 2);
    visitor=new GraphVisitor(){
      public int visit(      Graphable component){
        DirectedNode node=(DirectedNode)component;
        if (node.getInDegree() == 1 && node.getOutDegree() == 0)         return (Graph.PASS_AND_CONTINUE);
        return (Graph.FAIL_QUERY);
      }
    }
;
    assertTrue(after.queryNodes(visitor).size() == Math.pow(2,k));
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(false);
  }
}
