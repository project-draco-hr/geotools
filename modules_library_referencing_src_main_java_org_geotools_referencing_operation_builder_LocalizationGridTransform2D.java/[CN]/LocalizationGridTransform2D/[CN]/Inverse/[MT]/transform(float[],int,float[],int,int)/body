{
  int postIncrement=0;
  if (srcPts == dstPts && srcOff < dstOff) {
    srcOff+=(numPts - 1) * 2;
    dstOff+=(numPts - 1) * 2;
    postIncrement=-4;
  }
  final Point2D.Double source=new Point2D.Double();
  final Point2D.Double target=new Point2D.Double();
  final AffineTransform tr=new AffineTransform(global);
  while (--numPts >= 0) {
    source.x=srcPts[srcOff++];
    source.y=srcPts[srcOff++];
    inverseTransform(source,target,tr);
    dstPts[dstOff++]=(float)target.x;
    dstPts[dstOff++]=(float)target.y;
    srcOff+=postIncrement;
    dstOff+=postIncrement;
  }
}
