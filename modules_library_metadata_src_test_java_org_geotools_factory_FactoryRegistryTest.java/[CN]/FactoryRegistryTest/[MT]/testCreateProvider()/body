{
  final Hints.Key key=DummyFactory.DUMMY_FACTORY;
  final DummyFactory factory1=new DummyFactory.Example1();
  final DummyFactory factory2=new DummyFactory.Example2();
  final DummyFactory factory3=new DummyFactory.Example3();
  final FactoryRegistry registry=getRegistry(true,factory1,factory2,factory3);
  Hints hints;
  DummyFactory factory;
  hints=new Hints(Hints.KEY_INTERPOLATION,Hints.VALUE_INTERPOLATION_BILINEAR);
  factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
  assertSame("First factory matches; it should be selected. ",factory1,factory);
  hints=new Hints(DummyFactory.DUMMY_FACTORY,DummyFactory.Example2.class);
  factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
  assertSame("Factory of class #2 were requested. ",factory2,factory);
  hints=new Hints(Hints.KEY_INTERPOLATION,Hints.VALUE_INTERPOLATION_BICUBIC);
  try {
    factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
    fail("Found or created factory " + factory + ", while it should not have been allowed.");
  }
 catch (  FactoryNotFoundException exception) {
  }
  final DummyFactory factory5=new DummyFactory.Example5(null);
  registry.registerServiceProvider(factory5);
  assertTrue(registry.setOrdering(DummyFactory.class,factory1,factory5));
  factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
  assertSame("An instance of Factory #5 should have been created.",factory5.getClass(),factory.getClass());
  assertNotSame("A NEW instance of Factory #5 should have been created",factory5,factory);
  hints.put(DummyFactory.DUMMY_FACTORY,DummyFactory.Example4.class);
  factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
  assertEquals("An instance of Factory #4 should have been created.",DummyFactory.Example4.class,factory.getClass());
}
