{
  final Hints.Key key=DummyFactory.DUMMY_FACTORY;
  final DummyFactory factory1=new DummyFactory.Example1();
  final DummyFactory factory2=new DummyFactory.Example2();
  final DummyFactory factory3=new DummyFactory.Example3();
  final FactoryRegistry registry=getRegistry(false,factory1,factory2,factory3);
  Hints hints;
  DummyFactory factory;
  hints=null;
  factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
  assertSame("No preferences; should select the first factory. ",factory1,factory);
  hints=new Hints(Hints.KEY_INTERPOLATION,Hints.VALUE_INTERPOLATION_BILINEAR);
  factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
  assertSame("First factory matches; it should be selected. ",factory1,factory);
  hints=new Hints(Hints.KEY_INTERPOLATION,Hints.VALUE_INTERPOLATION_BICUBIC);
  try {
    factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
    fail("Found factory " + factory + ", while the hint should have been rejected.");
  }
 catch (  FactoryNotFoundException exception) {
  }
  final DummyFactory factory4=new DummyFactory.Example4();
  registry.registerServiceProvider(factory4);
  assertTrue(registry.setOrdering(DummyFactory.class,factory1,factory4));
  factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
  assertSame("The new factory should be selected. ",factory4,factory);
  DummyFactory explicit=new DummyFactory.Example3();
  hints=new Hints(DummyFactory.DUMMY_FACTORY,explicit);
  factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
  assertSame("The user-specified factory should have been selected. ",explicit,factory);
  hints=new Hints(DummyFactory.DUMMY_FACTORY,DummyFactory.Example2.class);
  factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
  assertSame("Factory of class #2 were requested. ",factory2,factory);
  hints=new Hints(DummyFactory.DUMMY_FACTORY,new Class<?>[]{DummyFactory.Example3.class,DummyFactory.Example2.class});
  factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
  assertSame("Factory of class #3 were requested. ",factory3,factory);
  hints=new Hints(DummyFactory.INTERNAL_FACTORY,DummyFactory.Example2.class);
  factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
  assertSame("Expected factory #1. ",factory1,factory);
  final Hints implementations=new Hints(DummyFactory.DUMMY_FACTORY,new Class[]{DummyFactory.Example2.class,DummyFactory.Example3.class});
  hints=new Hints(DummyFactory.INTERNAL_FACTORY,DummyFactory.Example1.class);
  hints.add(implementations);
  factory=registry.getServiceProvider(DummyFactory.class,null,hints,key);
  assertSame("Expected a factory using #1 internally. ",factory2,factory);
}
