{
  String name=expression.getPropertyName();
  String[] split=name.split("\\.");
  if (split.length > 2) {
    String prefix=split[0];
    StringBuffer sb=new StringBuffer();
    for (int i=1; i < split.length; i++) {
      sb.append(split[i]);
    }
    split=new String[]{prefix,sb.toString()};
  }
  JoinPropertyName propertyName=null;
  if (ft2 == null) {
    propertyName=new JoinPropertyName(ft1,alias1,split.length > 1 ? split[1] : split[0]);
  }
 else {
    if (split.length == 1) {
      SimpleFeatureType ft=ft1.getDescriptor(split[0]) != null ? ft1 : ft2.getDescriptor(split[0]) != null ? ft2 : null;
      if (ft == null) {
        throw new IllegalArgumentException(String.format("Attribute '%s' not present in" + " either type '%s' or '%s'",split[0],ft1.getTypeName(),ft2.getTypeName()));
      }
      propertyName=new JoinPropertyName(ft,ft == ft1 ? alias1 : alias2,split[0]);
    }
 else {
      SimpleFeatureType ft=split[0].equals(alias1) ? ft1 : split[0].equals(alias2) ? ft2 : null;
      if (ft == null) {
        throw new IllegalArgumentException(String.format("Prefix '%s' does not match " + "either alias '%s' or '%s'",split[0],alias1,alias2));
      }
      propertyName=new JoinPropertyName(ft,split[0],split[1]);
    }
  }
  return propertyName;
}
