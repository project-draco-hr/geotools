{
  RoadNetworkValidationResults roadValidationResults=new RoadNetworkValidationResults();
  try {
  }
 catch (  Exception e) {
    assertTrue(false);
  }
  try {
    this.newRoad=SimpleFeatureBuilder.build(this.roadType,new Object[]{new Integer(2),line(new int[]{3,6,3,8,5,8,5,7,2,7}),"r4"},"road.rd4");
  }
 catch (  IllegalAttributeException e) {
  }
  try {
    FeatureReader<SimpleFeatureType,SimpleFeature> reader=DataUtilities.reader(new SimpleFeature[]{this.newRoad});
    String typeName=reader.getFeatureType().getTypeName();
    SimpleFeatureCollection collection=DataUtilities.collection(new SimpleFeature[]{this.newRoad});
    processor.runFeatureTests("road",collection,roadValidationResults);
  }
 catch (  Exception e1) {
    assertTrue(false);
  }
  System.out.println("NoLineSelfIntersect - incorrect");
  String[] messages=roadValidationResults.getFailedMessages();
  for (int i=0; i < messages.length; i++) {
    System.out.println(messages[i]);
  }
  assertTrue(roadValidationResults.getFailedMessages().length > 0);
}
