{
  RoadNetworkValidationResults roadValidationResults=new RoadNetworkValidationResults();
  LineNoSelfOverlappingValidation selfOverlappingValidatorRoads=new LineNoSelfOverlappingValidation();
  selfOverlappingValidatorRoads.setName("RoadSelfIntersect");
  selfOverlappingValidatorRoads.setDescription("Tests to see if a road intersects itself, which is bad!");
  selfOverlappingValidatorRoads.setTypeRef("road");
  try {
    processor.addValidation(selfOverlappingValidatorRoads);
  }
 catch (  Exception e) {
    assertTrue(false);
  }
  try {
    this.newRoad=SimpleFeatureBuilder.build(this.roadType,(new Object[]{new Integer(2),line(new int[]{7,7,8,7,9,7,9,6,8,6,8,7,7,7}),"r4"}),"road.rd4");
  }
 catch (  IllegalAttributeException e) {
  }
  try {
    processor.runFeatureTests("datastoreId",DataUtilities.collection(new SimpleFeature[]{this.newRoad}),roadValidationResults);
  }
 catch (  Exception e1) {
    assertTrue(false);
  }
  System.out.println("NoLineSelfOverlap - incorrect");
  String[] messages=roadValidationResults.getFailedMessages();
  for (int i=0; i < messages.length; i++) {
    System.out.println(messages[i]);
  }
  assertTrue(roadValidationResults.getFailedMessages().length > 0);
}
