{
  try {
    UomRescaleStyleVisitor visitor=null;
    double size=100;
    double margin=15;
    double expectedRescaledSize=computeExpectedRescaleSize(size,scaleMetersToPixel,uom);
    int expectedGraphicMargin=(int)computeExpectedRescaleSize(15,scaleMetersToPixel,uom);
    StyleBuilder styleBuilder=new StyleBuilder();
    PolygonSymbolizerImpl polySymb=(PolygonSymbolizerImpl)styleBuilder.createPolygonSymbolizer();
    polySymb.setUnitOfMeasure(uom);
    FilterFactory2 filterFactory=new FilterFactoryImpl();
    polySymb.getStroke().setWidth(filterFactory.literal(size));
    polySymb.getOptions().put(PolygonSymbolizer.GRAPHIC_MARGIN_KEY,"15");
    visitor=new UomRescaleStyleVisitor(scaleMetersToPixel);
    polySymb.accept(visitor);
    PolygonSymbolizer rescaledPolySymb=(PolygonSymbolizer)visitor.getCopy();
    double rescaledSize=rescaledPolySymb.getStroke().getWidth().evaluate(null,Double.class);
    assertEquals(Math.round(expectedRescaledSize),Math.round(rescaledSize));
    assertNotSame(rescaledPolySymb,polySymb);
    String[] splitted=rescaledPolySymb.getOptions().get(TextSymbolizer.GRAPHIC_MARGIN_KEY).split("\\s+");
    int rescaledGraphicMargin=Converters.convert(splitted[0],Integer.class).intValue();
    assertEquals(expectedGraphicMargin,rescaledGraphicMargin);
  }
 catch (  Exception e2) {
    e2.printStackTrace();
    fail(e2.getClass().getSimpleName() + " should not be thrown.");
  }
}
