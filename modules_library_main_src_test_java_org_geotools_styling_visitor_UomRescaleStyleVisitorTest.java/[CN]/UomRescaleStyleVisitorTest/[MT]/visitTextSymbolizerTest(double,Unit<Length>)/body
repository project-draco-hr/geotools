{
  try {
    UomRescaleStyleVisitor visitor=null;
    int fontSize=100;
    double displacementX=13;
    double displacementY=17;
    int maxDisplacement=10;
    double expectedRescaledFontSize=computeExpectedRescaleSize(fontSize,scaleMetersToPixel,uom);
    double expectedRescaledDisplacementXSize=computeExpectedRescaleSize(displacementX,scaleMetersToPixel,uom);
    double expectedRescaledDisplacementYSize=computeExpectedRescaleSize(displacementY,scaleMetersToPixel,uom);
    int expectedMaxDisplacement=(int)computeExpectedRescaleSize(maxDisplacement,scaleMetersToPixel,uom);
    int expectedGraphicMargin1=(int)computeExpectedRescaleSize(maxDisplacement,scaleMetersToPixel,uom);
    int expectedGraphicMargin2=(int)computeExpectedRescaleSize(maxDisplacement * 2,scaleMetersToPixel,uom);
    StyleBuilder styleBuilder=new StyleBuilder();
    TextSymbolizerImpl textSymb=(TextSymbolizerImpl)styleBuilder.createTextSymbolizer();
    textSymb.setUnitOfMeasure(uom);
    Font font=styleBuilder.createFont(new java.awt.Font("Verdana",java.awt.Font.PLAIN,fontSize));
    textSymb.setFont(font);
    PointPlacement placement=styleBuilder.createPointPlacement(0.3,0.3,displacementX,displacementY,10);
    textSymb.setLabelPlacement(placement);
    textSymb.addToOptions("maxDisplacement",String.valueOf(maxDisplacement));
    textSymb.addToOptions(TextSymbolizer.GRAPHIC_MARGIN_KEY,maxDisplacement + " " + maxDisplacement * 2);
    visitor=new UomRescaleStyleVisitor(scaleMetersToPixel);
    textSymb.accept(visitor);
    TextSymbolizer rescaledTextSymb=(TextSymbolizer)visitor.getCopy();
    double rescaledFontSize=rescaledTextSymb.getFont().getSize().evaluate(null,Double.class);
    PointPlacement rescaledPlacement=(PointPlacement)rescaledTextSymb.getLabelPlacement();
    double rescaledDisplacementXSize=rescaledPlacement.getDisplacement().getDisplacementX().evaluate(null,Double.class);
    double rescaledDisplacementYSize=rescaledPlacement.getDisplacement().getDisplacementY().evaluate(null,Double.class);
    Assert.assertEquals(Math.round(expectedRescaledFontSize),Math.round(rescaledFontSize));
    Assert.assertEquals(Math.round(expectedRescaledDisplacementXSize),Math.round(rescaledDisplacementXSize));
    Assert.assertEquals(Math.round(expectedRescaledDisplacementYSize),Math.round(rescaledDisplacementYSize));
    Assert.assertNotSame(rescaledTextSymb,textSymb);
    Map<String,String> options=rescaledTextSymb.getOptions();
    int rescaledMaxDisplacement=Converters.convert(options.get("maxDisplacement"),Integer.class).intValue();
    assertEquals(rescaledMaxDisplacement,expectedMaxDisplacement);
    String[] splitted=options.get(TextSymbolizer.GRAPHIC_MARGIN_KEY).split("\\s+");
    int rescaledGraphicMargin1=Converters.convert(splitted[0],Integer.class).intValue();
    int rescaledGraphicMargin2=Converters.convert(splitted[1],Integer.class).intValue();
    assertEquals(expectedGraphicMargin1,rescaledGraphicMargin1);
    assertEquals(expectedGraphicMargin2,rescaledGraphicMargin2);
  }
 catch (  Exception e2) {
    e2.printStackTrace();
    Assert.fail(e2.getClass().getSimpleName() + " should not be thrown.");
  }
}
