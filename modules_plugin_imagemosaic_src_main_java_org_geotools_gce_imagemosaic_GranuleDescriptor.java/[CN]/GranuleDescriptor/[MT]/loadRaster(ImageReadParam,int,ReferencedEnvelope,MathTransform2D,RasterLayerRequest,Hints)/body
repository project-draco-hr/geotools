{
  if (LOGGER.isLoggable(java.util.logging.Level.FINER)) {
    final String name=Thread.currentThread().getName();
    LOGGER.finer("Thread:" + name + " Loading raster data for granuleDescriptor "+ this.toString());
  }
  ImageReadParam readParameters=null;
  int imageIndex;
  final ReferencedEnvelope bbox=inclusionGeometry != null ? new ReferencedEnvelope(granuleBBOX.intersection(inclusionGeometry.getEnvelopeInternal()),granuleBBOX.getCoordinateReferenceSystem()) : granuleBBOX;
  boolean doFiltering=false;
  if (filterMe) {
    doFiltering=Utils.areaIsDifferent(inclusionGeometry,baseGridToWorld,granuleBBOX);
  }
  final ReferencedEnvelope intersection=new ReferencedEnvelope(bbox.intersection(cropBBox),cropBBox.getCoordinateReferenceSystem());
  if (intersection.isEmpty()) {
    if (LOGGER.isLoggable(java.util.logging.Level.FINE)) {
      LOGGER.fine(new StringBuilder("Got empty intersection for granule ").append(this.toString()).append(" with request ").append(request.toString()).append(" Resulting in no granule loaded: Empty result").toString());
    }
    return null;
  }
  ImageInputStream inStream=null;
  ImageReader reader=null;
  try {
    inStream=Utils.getInputStream(granuleUrl);
    if (inStream == null)     return null;
    if (cachedReaderSPI == null) {
      reader=ImageIOExt.getImageioReader(inStream);
      if (reader != null)       cachedReaderSPI=reader.getOriginatingProvider();
    }
 else     reader=cachedReaderSPI.createReaderInstance();
    if (reader == null) {
      if (LOGGER.isLoggable(java.util.logging.Level.WARNING)) {
        LOGGER.warning(new StringBuilder("Unable to get s reader for granuleDescriptor ").append(this.toString()).append(" with request ").append(request.toString()).append(" Resulting in no granule loaded: Empty result").toString());
      }
      return null;
    }
    reader.setInput(inStream);
    if (request.isHeterogeneousGranules()) {
      readParameters=new ImageReadParam();
      imageIndex=ReadParamsController.setReadParams(request.getRequestedResolution(),request.getOverviewPolicy(),request.getDecimationPolicy(),readParameters,request.rasterManager,overviewsController);
    }
 else {
      imageIndex=index;
      readParameters=imageReadParameters;
    }
    final GranuleOverviewLevelDescriptor selectedlevel=getLevel(imageIndex,reader,inStream);
    AffineTransform2D cropWorldToGrid=new AffineTransform2D(selectedlevel.gridToWorldTransformCorner);
    cropWorldToGrid=(AffineTransform2D)cropWorldToGrid.inverse();
    final Rectangle sourceArea=CRS.transform(cropWorldToGrid,intersection).toRectangle2D().getBounds();
    if (selectedlevel.baseToLevelTransform.isIdentity())     sourceArea.grow(2,2);
    XRectangle2D.intersect(sourceArea,selectedlevel.rasterDimensions,sourceArea);
    if (sourceArea.isEmpty()) {
      if (LOGGER.isLoggable(java.util.logging.Level.FINE)) {
        LOGGER.fine("Got empty area for granuleDescriptor " + this.toString() + " with request "+ request.toString()+ " Resulting in no granule loaded: Empty result");
      }
      return null;
    }
 else     if (LOGGER.isLoggable(java.util.logging.Level.FINER)) {
      LOGGER.finer("Loading level " + imageIndex + " with source region: "+ sourceArea+ " subsampling: "+ readParameters.getSourceXSubsampling()+ ","+ readParameters.getSourceYSubsampling()+ " for granule:"+ granuleUrl);
    }
    int newSubSamplingFactor=0;
    final String pluginName=cachedReaderSPI.getPluginClassName();
    if (pluginName != null && pluginName.equals(ImageUtilities.DIRECT_KAKADU_PLUGIN)) {
      final int ssx=readParameters.getSourceXSubsampling();
      final int ssy=readParameters.getSourceYSubsampling();
      newSubSamplingFactor=Utilities.getSubSamplingFactor2(ssx,ssy);
      if (newSubSamplingFactor != 0) {
        if (newSubSamplingFactor > maxDecimationFactor && maxDecimationFactor != -1) {
          newSubSamplingFactor=maxDecimationFactor;
        }
        readParameters.setSourceSubsampling(newSubSamplingFactor,newSubSamplingFactor,0,0);
      }
    }
    readParameters.setSourceRegion(sourceArea);
    final RenderedImage raster;
    try {
      raster=request.getReadType().read(readParameters,imageIndex,granuleUrl,selectedlevel.rasterDimensions,reader,hints,false);
    }
 catch (    Throwable e) {
      if (LOGGER.isLoggable(java.util.logging.Level.FINE)) {
        LOGGER.log(java.util.logging.Level.FINE,"Unable to load raster for granuleDescriptor " + this.toString() + " with request "+ request.toString()+ " Resulting in no granule loaded: Empty result",e);
      }
      return null;
    }
    sourceArea.setRect(readParameters.getSourceRegion());
    double decimationScaleX=((1.0 * sourceArea.width) / raster.getWidth());
    double decimationScaleY=((1.0 * sourceArea.height) / raster.getHeight());
    final AffineTransform decimationScaleTranform=XAffineTransform.getScaleInstance(decimationScaleX,decimationScaleY);
    final AffineTransform afterDecimationTranslateTranform=XAffineTransform.getTranslateInstance(sourceArea.x,sourceArea.y);
    final AffineTransform backToBaseLevelScaleTransform=selectedlevel.baseToLevelTransform;
    final AffineTransform finalRaster2Model=new AffineTransform(baseGridToWorld);
    finalRaster2Model.concatenate(CoverageUtilities.CENTER_TO_CORNER);
    final double x=finalRaster2Model.getTranslateX();
    final double y=finalRaster2Model.getTranslateY();
    if (!XAffineTransform.isIdentity(backToBaseLevelScaleTransform,Utils.AFFINE_IDENTITY_EPS))     finalRaster2Model.concatenate(backToBaseLevelScaleTransform);
    if (!XAffineTransform.isIdentity(afterDecimationTranslateTranform,Utils.AFFINE_IDENTITY_EPS))     finalRaster2Model.concatenate(afterDecimationTranslateTranform);
    if (!XAffineTransform.isIdentity(decimationScaleTranform,Utils.AFFINE_IDENTITY_EPS))     finalRaster2Model.concatenate(decimationScaleTranform);
    finalRaster2Model.preConcatenate((AffineTransform)mosaicWorldToGrid);
    final Interpolation interpolation=request.getInterpolation();
    Rectangle2D finalLayout=ImageUtilities.layoutHelper(raster,(float)finalRaster2Model.getScaleX(),(float)finalRaster2Model.getScaleY(),(float)finalRaster2Model.getTranslateX(),(float)finalRaster2Model.getTranslateY(),interpolation);
    if (finalLayout.isEmpty()) {
      if (LOGGER.isLoggable(java.util.logging.Level.INFO))       LOGGER.info("Unable to create a granuleDescriptor " + this.toString() + " due to jai scale bug creating a null source area");
      return null;
    }
    ROI granuleLoadingShape=null;
    if (granuleROIShape != null) {
      final Point2D translate=mosaicWorldToGrid.transform(new DirectPosition2D(x,y),(Point2D)null);
      AffineTransform tx2=new AffineTransform();
      tx2.preConcatenate(AffineTransform.getScaleInstance(((AffineTransform)mosaicWorldToGrid).getScaleX(),-((AffineTransform)mosaicWorldToGrid).getScaleY()));
      tx2.preConcatenate(AffineTransform.getScaleInstance(((AffineTransform)baseGridToWorld).getScaleX(),-((AffineTransform)baseGridToWorld).getScaleY()));
      tx2.preConcatenate(AffineTransform.getTranslateInstance(translate.getX(),translate.getY()));
      granuleLoadingShape=(ROI)granuleROIShape.transform(tx2);
    }
    final RenderingHints localHints=new RenderingHints(JAI.KEY_REPLACE_INDEX_COLOR_MODEL,Boolean.FALSE);
    if (XAffineTransform.isIdentity(finalRaster2Model,10E-6)) {
      return new GranuleLoadingResult(raster,granuleLoadingShape,granuleUrl,doFiltering);
    }
 else {
      final Dimension tileDimensions=request.getTileDimensions();
      if (tileDimensions != null && request.getReadType().equals(ReadType.DIRECT_READ)) {
        final ImageLayout layout=new ImageLayout();
        layout.setTileHeight(tileDimensions.width).setTileWidth(tileDimensions.height);
        localHints.add(new RenderingHints(JAI.KEY_IMAGE_LAYOUT,layout));
      }
 else {
        if (hints != null && hints.containsKey(JAI.KEY_IMAGE_LAYOUT)) {
          final Object layout=hints.get(JAI.KEY_IMAGE_LAYOUT);
          if (layout != null && layout instanceof ImageLayout) {
            localHints.add(new RenderingHints(JAI.KEY_IMAGE_LAYOUT,((ImageLayout)layout).clone()));
          }
        }
      }
      if (hints != null && hints.containsKey(JAI.KEY_TILE_CACHE)) {
        final Object cache=hints.get(JAI.KEY_TILE_CACHE);
        if (cache != null && cache instanceof TileCache)         localHints.add(new RenderingHints(JAI.KEY_TILE_CACHE,(TileCache)cache));
      }
      if (hints != null && hints.containsKey(JAI.KEY_TILE_SCHEDULER)) {
        final Object scheduler=hints.get(JAI.KEY_TILE_SCHEDULER);
        if (scheduler != null && scheduler instanceof TileScheduler)         localHints.add(new RenderingHints(JAI.KEY_TILE_SCHEDULER,(TileScheduler)scheduler));
      }
      boolean addBorderExtender=true;
      if (hints != null && hints.containsKey(JAI.KEY_BORDER_EXTENDER)) {
        final Object extender=hints.get(JAI.KEY_BORDER_EXTENDER);
        if (extender != null && extender instanceof BorderExtender) {
          localHints.add(new RenderingHints(JAI.KEY_BORDER_EXTENDER,(BorderExtender)extender));
          addBorderExtender=false;
        }
      }
      if (addBorderExtender) {
        localHints.add(ImageUtilities.BORDER_EXTENDER_HINTS);
      }
      ImageWorker iw=new ImageWorker(raster);
      iw.setRenderingHints(localHints);
      iw.affine(finalRaster2Model,interpolation,request.getBackgroundValues());
      return new GranuleLoadingResult(iw.getRenderedImage(),granuleLoadingShape,granuleUrl,doFiltering);
    }
  }
 catch (  IllegalStateException e) {
    if (LOGGER.isLoggable(java.util.logging.Level.WARNING)) {
      LOGGER.log(java.util.logging.Level.WARNING,new StringBuilder("Unable to load raster for granuleDescriptor ").append(this.toString()).append(" with request ").append(request.toString()).append(" Resulting in no granule loaded: Empty result").toString(),e);
    }
    return null;
  }
catch (  org.opengis.referencing.operation.NoninvertibleTransformException e) {
    if (LOGGER.isLoggable(java.util.logging.Level.WARNING)) {
      LOGGER.log(java.util.logging.Level.WARNING,new StringBuilder("Unable to load raster for granuleDescriptor ").append(this.toString()).append(" with request ").append(request.toString()).append(" Resulting in no granule loaded: Empty result").toString(),e);
    }
    return null;
  }
catch (  TransformException e) {
    if (LOGGER.isLoggable(java.util.logging.Level.WARNING)) {
      LOGGER.log(java.util.logging.Level.WARNING,new StringBuilder("Unable to load raster for granuleDescriptor ").append(this.toString()).append(" with request ").append(request.toString()).append(" Resulting in no granule loaded: Empty result").toString(),e);
    }
    return null;
  }
 finally {
    try {
      if (inStream != null) {
        inStream.close();
      }
    }
  finally {
      if (request.getReadType() != ReadType.JAI_IMAGEREAD && reader != null) {
        reader.dispose();
      }
    }
  }
}
