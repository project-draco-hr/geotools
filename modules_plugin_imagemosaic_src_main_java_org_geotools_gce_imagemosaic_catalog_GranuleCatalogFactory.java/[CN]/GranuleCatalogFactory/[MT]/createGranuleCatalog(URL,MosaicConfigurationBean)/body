{
  final File sourceFile=DataUtilities.urlToFile(sourceURL);
  final String extension=FilenameUtils.getExtension(sourceFile.getAbsolutePath());
  if (extension.equalsIgnoreCase("shp")) {
    final Map<String,Serializable> params=new HashMap<String,Serializable>();
    params.put(ShapefileDataStoreFactory.URLP.key,sourceURL);
    if (sourceURL.getProtocol().equalsIgnoreCase("file"))     params.put(ShapefileDataStoreFactory.CREATE_SPATIAL_INDEX.key,Boolean.TRUE);
    params.put(ShapefileDataStoreFactory.MEMORY_MAPPED.key,Boolean.TRUE);
    params.put("PathType",configuration.isAbsolutePath() ? PathType.ABSOLUTE : PathType.RELATIVE);
    params.put("LocationAttribute",configuration.getLocationAttribute());
    params.put("SuggestedSPI",configuration.getSuggestedSPI());
    params.put("Heterogeneous",configuration.isHeterogeneous());
    File parentDirectory=DataUtilities.urlToFile(sourceURL);
    if (parentDirectory.isFile())     parentDirectory=parentDirectory.getParentFile();
    params.put("ParentLocation",DataUtilities.fileToURL(parentDirectory).toString());
    final DataStoreFactorySpi spi=configuration.isCaching() ? Utils.SHAPE_SPI : Utils.INDEXED_SHAPE_SPI;
    return configuration.isCaching() ? new STRTreeGranuleCatalog(params,spi) : new GTDataStoreGranuleCatalog(params,false,spi);
  }
 else {
    Properties properties=Utils.loadPropertiesFromURL(sourceURL);
    if (properties == null)     return null;
    final String SPIClass=properties.getProperty("SPI");
    try {
      final DataStoreFactorySpi spi=(DataStoreFactorySpi)Class.forName(SPIClass).newInstance();
      final Map<String,Serializable> params=new HashMap<String,Serializable>();
      final Param[] paramsInfo=spi.getParametersInfo();
      for (      Param p : paramsInfo) {
        if (properties.containsKey(p.key))         params.put(p.key,(Serializable)Converters.convert(properties.getProperty(p.key),p.type));
 else         if (p.required && p.sample == null)         throw new IOException("Required parameter missing: " + p.toString());
      }
      params.put("PathType",configuration.isAbsolutePath() ? PathType.ABSOLUTE : PathType.RELATIVE);
      params.put("LocationAttribute",configuration.getLocationAttribute());
      params.put("SuggestedSPI",configuration.getSuggestedSPI());
      params.put("Heterogeneous",configuration.isHeterogeneous());
      if (sourceURL != null) {
        File parentDirectory=DataUtilities.urlToFile(sourceURL);
        if (parentDirectory.isFile())         parentDirectory=parentDirectory.getParentFile();
        params.put("ParentLocation",DataUtilities.fileToURL(parentDirectory).toString());
      }
 else       params.put("ParentLocation",null);
      return configuration.isCaching() ? new STRTreeGranuleCatalog(params,spi) : new GTDataStoreGranuleCatalog(params,false,spi);
    }
 catch (    ClassNotFoundException e) {
      if (LOGGER.isLoggable(Level.WARNING))       LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
      return null;
    }
catch (    InstantiationException e) {
      if (LOGGER.isLoggable(Level.WARNING))       LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
      return null;
    }
catch (    IllegalAccessException e) {
      if (LOGGER.isLoggable(Level.WARNING))       LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
      return null;
    }
catch (    IOException e) {
      if (LOGGER.isLoggable(Level.WARNING))       LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
      return null;
    }
  }
}
