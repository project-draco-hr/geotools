{
  final File sourceFile=DataUtilities.urlToFile(sourceURL);
  final String extension=FilenameUtils.getExtension(sourceFile.getAbsolutePath());
  final Map<String,Serializable> params=new HashMap<String,Serializable>();
  params.put(Utils.Prop.PATH_TYPE,configuration.isAbsolutePath() ? PathType.ABSOLUTE : PathType.RELATIVE);
  params.put(Utils.Prop.LOCATION_ATTRIBUTE,configuration.getLocationAttribute());
  params.put(Utils.Prop.SUGGESTED_SPI,configuration.getSuggestedSPI());
  params.put(Utils.Prop.HETEROGENEOUS,configuration.isHeterogeneous());
  if (sourceURL != null) {
    File parentDirectory=DataUtilities.urlToFile(sourceURL);
    if (parentDirectory.isFile())     parentDirectory=parentDirectory.getParentFile();
    params.put(Utils.Prop.PARENT_LOCATION,DataUtilities.fileToURL(parentDirectory).toString());
  }
 else   params.put(Utils.Prop.PARENT_LOCATION,null);
  String typeName=configuration.getTypeName();
  if (typeName != null) {
    params.put(Utils.Prop.TYPENAME,configuration.getTypeName());
  }
  DataStoreFactorySpi spi=null;
  if (extension.equalsIgnoreCase("shp")) {
    params.put(ShapefileDataStoreFactory.URLP.key,sourceURL);
    params.put(ShapefileDataStoreFactory.CREATE_SPATIAL_INDEX.key,Boolean.TRUE);
    params.put(ShapefileDataStoreFactory.MEMORY_MAPPED.key,Boolean.TRUE);
    params.put(ShapefileDataStoreFactory.CACHE_MEMORY_MAPS.key,Boolean.TRUE);
    params.put(ShapefileDataStoreFactory.DBFTIMEZONE.key,TimeZone.getTimeZone("UTC"));
    spi=Utils.SHAPE_SPI;
  }
 else {
    Properties properties=Utils.loadPropertiesFromURL(sourceURL);
    if (properties == null)     return null;
    final String SPIClass=properties.getProperty("SPI");
    try {
      spi=(DataStoreFactorySpi)Class.forName(SPIClass).newInstance();
      final Param[] paramsInfo=spi.getParametersInfo();
      for (      Param p : paramsInfo) {
        if (properties.containsKey(p.key))         params.put(p.key,(Serializable)Converters.convert(properties.getProperty(p.key),p.type));
 else         if (p.required && p.sample == null)         throw new IOException("Required parameter missing: " + p.toString());
      }
    }
 catch (    Exception e) {
      if (LOGGER.isLoggable(Level.WARNING))       LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
      return null;
    }
  }
  return configuration.isCaching() ? new STRTreeGranuleCatalog(params,spi) : new GTDataStoreGranuleCatalog(params,false,spi);
}
