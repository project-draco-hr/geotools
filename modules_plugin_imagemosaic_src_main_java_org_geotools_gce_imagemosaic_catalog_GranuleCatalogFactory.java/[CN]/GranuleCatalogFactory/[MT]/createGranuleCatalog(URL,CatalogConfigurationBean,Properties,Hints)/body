{
  final File sourceFile=DataUtilities.urlToFile(sourceURL);
  final String extension=FilenameUtils.getExtension(sourceFile.getAbsolutePath());
  final Properties params=new Properties();
  params.put(Utils.Prop.PATH_TYPE,catalogConfigurationBean.isAbsolutePath() ? PathType.ABSOLUTE : PathType.RELATIVE);
  if (catalogConfigurationBean.getLocationAttribute() != null)   params.put(Utils.Prop.LOCATION_ATTRIBUTE,catalogConfigurationBean.getLocationAttribute());
  if (catalogConfigurationBean.getSuggestedSPI() != null)   params.put(Utils.Prop.SUGGESTED_SPI,catalogConfigurationBean.getSuggestedSPI());
  params.put(Utils.Prop.HETEROGENEOUS,catalogConfigurationBean.isHeterogeneous());
  params.put(Utils.Prop.WRAP_STORE,catalogConfigurationBean.isWrapStore());
  if (sourceURL != null) {
    File parentDirectory=DataUtilities.urlToFile(sourceURL);
    if (parentDirectory.isFile())     parentDirectory=parentDirectory.getParentFile();
    params.put(Utils.Prop.PARENT_LOCATION,DataUtilities.fileToURL(parentDirectory).toString());
  }
 else   params.put(Utils.Prop.PARENT_LOCATION,null);
  String typeName=catalogConfigurationBean.getTypeName();
  if (typeName != null) {
    params.put(Utils.Prop.TYPENAME,catalogConfigurationBean.getTypeName());
  }
  DataStoreFactorySpi spi=null;
  if (extension.equalsIgnoreCase("shp")) {
    params.put(ShapefileDataStoreFactory.URLP.key,sourceURL);
    params.put(ShapefileDataStoreFactory.CREATE_SPATIAL_INDEX.key,Boolean.TRUE);
    params.put(ShapefileDataStoreFactory.ENABLE_SPATIAL_INDEX.key,Boolean.TRUE);
    params.put(ShapefileDataStoreFactory.MEMORY_MAPPED.key,Boolean.FALSE);
    params.put(ShapefileDataStoreFactory.CACHE_MEMORY_MAPS.key,Boolean.FALSE);
    params.put(ShapefileDataStoreFactory.DBFTIMEZONE.key,TimeZone.getTimeZone("UTC"));
    spi=Utils.SHAPE_SPI;
  }
 else {
    Properties properties=CoverageUtilities.loadPropertiesFromURL(sourceURL);
    if (properties == null)     return null;
    for (    Object p : properties.keySet()) {
      params.put(p.toString(),properties.get(p).toString());
    }
    final String SPIClass=properties.getProperty("SPI");
    try {
      spi=(DataStoreFactorySpi)Class.forName(SPIClass).newInstance();
    }
 catch (    Exception e) {
      if (LOGGER.isLoggable(Level.WARNING))       LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
      return null;
    }
  }
  if (overrideParams != null && !overrideParams.isEmpty()) {
    params.putAll(overrideParams);
  }
  final GranuleCatalog catalog=catalogConfigurationBean.isCaching() ? new STRTreeGranuleCatalog(params,spi,hints) : new CachingDataStoreGranuleCatalog(new GTDataStoreGranuleCatalog(params,false,spi,hints));
  return catalog;
}
