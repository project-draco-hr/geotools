{
  BasicEdge be;
  Iterator itr;
  itr=m_edge.getRelated();
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4));
  assertTrue(!itr.hasNext());
  m_nodeA.add(m_same);
  m_nodeB.add(m_same);
  itr=m_edge.getRelated();
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_same));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_same));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_same));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_same));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_same));
  assertTrue(!itr.hasNext());
  m_nodeA.remove(m_same);
  m_nodeB.remove(m_same);
  m_nodeB.add(m_opp);
  m_nodeA.add(m_opp);
  itr=m_edge.getRelated();
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_opp));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_opp));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_opp));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_opp));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_opp));
  assertTrue(!itr.hasNext());
  m_nodeA.remove(m_opp);
  m_nodeB.remove(m_opp);
  m_nodeA.add(m_loopA);
  itr=m_edge.getRelated();
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopA));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopA));
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopA));
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopA));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopA));
  assertTrue(!itr.hasNext());
  m_nodeA.remove(m_loopA);
  m_nodeB.add(m_loopB);
  itr=m_edge.getRelated();
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopB));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopB));
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopB));
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopB));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopB));
  assertTrue(!itr.hasNext());
  m_nodeA.add(m_loopA);
  itr=m_edge.getRelated();
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_loopA)|| be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopB));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_loopA)|| be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopB));
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_loopA)|| be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopB));
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_loopA)|| be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopB));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_loopA)|| be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopB));
  assertTrue(itr.hasNext());
  be=(BasicEdge)itr.next();
  assertTrue(be.equals(m_other1) || be.equals(m_other2) || be.equals(m_loopA)|| be.equals(m_other3)|| be.equals(m_other4)|| be.equals(m_loopB));
  assertTrue(!itr.hasNext());
}
