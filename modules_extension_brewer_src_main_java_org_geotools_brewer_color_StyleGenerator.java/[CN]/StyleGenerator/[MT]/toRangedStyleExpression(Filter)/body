{
  if (filter instanceof BinaryLogicOperator) {
    BinaryLogicOperator lFilter=(BinaryLogicOperator)filter;
    if (!(filter instanceof And)) {
      throw new IllegalArgumentException("Only logic filters constructed using the LOGIC_AND filterType are currently supported by this method.");
    }
    List<Filter> children=lFilter.getChildren();
    Filter filter1=children.get(0);
    Filter filter2=children.get(1);
    if (children.size() > 2) {
      throw new IllegalArgumentException("This method currently only supports logical filters with exactly 2 children.");
    }
    if (!(filter1 instanceof BinaryComparisonOperator) || !(filter2 instanceof BinaryComparisonOperator)) {
      throw new IllegalArgumentException("Only compare filters as logical filter children are currently supported by this method.");
    }
    Expression min1;
    Expression min2;
    Expression max1;
    Expression max2;
    if (filter1 instanceof PropertyIsLessThanOrEqualTo || filter1 instanceof PropertyIsLessThan) {
      min1=((BinaryComparisonOperator)filter1).getExpression1();
      max1=((BinaryComparisonOperator)filter1).getExpression2();
    }
 else     if (filter1 instanceof PropertyIsGreaterThanOrEqualTo || filter1 instanceof PropertyIsGreaterThan) {
      min1=((BinaryComparisonOperator)filter1).getExpression2();
      max1=((BinaryComparisonOperator)filter1).getExpression1();
    }
 else {
      throw new IllegalArgumentException("Unsupported FilterType");
    }
    if (filter2 instanceof PropertyIsLessThanOrEqualTo || filter2 instanceof PropertyIsLessThan) {
      min2=((BinaryComparisonOperator)filter2).getExpression1();
      max2=((BinaryComparisonOperator)filter2).getExpression2();
    }
 else     if (filter2 instanceof PropertyIsGreaterThanOrEqualTo || filter2 instanceof PropertyIsGreaterThan) {
      min2=((BinaryComparisonOperator)filter2).getExpression2();
      max2=((BinaryComparisonOperator)filter2).getExpression1();
    }
 else {
      throw new IllegalArgumentException("Unsupported FilterType");
    }
    if (max1.equals(min2)) {
      return min1.toString() + ".." + max2.toString();
    }
 else     if (max2.equals(min1)) {
      return min2.toString() + ".." + max1.toString();
    }
 else {
      throw new IllegalArgumentException("Couldn't find the expected arrangement of Expressions");
    }
  }
 else   if (filter instanceof BinaryComparisonOperator) {
  }
  throw new UnsupportedOperationException("Don't know how to handle this filter");
}
