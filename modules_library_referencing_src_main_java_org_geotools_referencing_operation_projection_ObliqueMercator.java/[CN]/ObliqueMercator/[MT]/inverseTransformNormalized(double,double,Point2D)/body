{
  double v=x * cosrot - y * sinrot;
  double u=y * cosrot + x * sinrot + u_c;
  double Qp=exp(-BrA * v);
  double temp=1.0 / Qp;
  double Sp=0.5 * (Qp - temp);
  double Vp=sin(BrA * u);
  double Up=(Vp * cosgamma0 + Sp * singamma0) / (0.5 * (Qp + temp));
  if (abs(abs(Up) - 1.0) < EPSILON) {
    x=0.0;
    y=Up < 0.0 ? -PI / 2.0 : PI / 2.0;
  }
 else {
    y=pow(E / sqrt((1. + Up) / (1. - Up)),1.0 / B);
    y=cphi2(y);
    x=-atan2((Sp * cosgamma0 - Vp * singamma0),cos(BrA * u)) / B;
  }
  if (ptDst != null) {
    ptDst.setLocation(x,y);
    return ptDst;
  }
  return new Point2D.Double(x,y);
}
