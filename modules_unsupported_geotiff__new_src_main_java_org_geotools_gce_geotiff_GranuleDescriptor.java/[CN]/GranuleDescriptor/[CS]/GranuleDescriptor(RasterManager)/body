{
  this.granuleBBOX=new ReferencedEnvelope(rasterManager.spatialDomainManager.coverageBBox);
  this.baseGridToWorld=new AffineTransform((AffineTransform)rasterManager.spatialDomainManager.coverageGridToWorld2D);
  final File granuleFile=DataUtilities.urlToFile(rasterManager.parent.sourceURL);
  ImageInputStream inStream=null;
  ImageReader reader=null;
  try {
    inStream=ImageIOExt.createImageInputStream(granuleFile);
    if (inStream == null) {
      throw new IllegalArgumentException("Unable to get an input stream for the provided file " + granuleFile.toString());
    }
    reader=Utils.TIFFREADERFACTORY.createReaderInstance();
    reader.setInput(inStream);
    ImageInputStreamSpi streamSPI=ImageIOExt.getImageInputStreamSPI(granuleFile);
    GranuleLevelDescriptor baseLevel=null;
    int numRasters=reader.getNumImages(true);
    int i=0;
    for (; i < numRasters; i++) {
      final Rectangle rasterDimension=new Rectangle(0,0,reader.getWidth(i),reader.getHeight(i));
      if (i == 0) {
        this.granuleLevels.put(Integer.valueOf(i),new GranuleLevelDescriptor(i,granuleFile,streamSPI,1,1,rasterDimension.width,rasterDimension.height));
        baseLevel=granuleLevels.get(Integer.valueOf(0));
      }
 else {
        final double scaleX=baseLevel.width / (1.0 * rasterDimension.width);
        final double scaleY=baseLevel.height / (1.0 * rasterDimension.height);
        this.granuleLevels.put(Integer.valueOf(i),new GranuleLevelDescriptor(i,granuleFile,streamSPI,scaleX,scaleY,rasterDimension.width,rasterDimension.height));
      }
    }
    if (rasterManager.parent.extOvrImgChoice >= 0) {
      try {
        if (inStream != null) {
          inStream.close();
        }
      }
 catch (      Throwable e) {
      }
      try {
        if (reader != null)         reader.dispose();
      }
 catch (      Throwable e) {
      }
      inStream=rasterManager.parent.ovrInStreamSPI.createInputStreamInstance(rasterManager.parent.ovrSource,ImageIO.getUseCache(),ImageIO.getCacheDirectory());
      if (inStream == null) {
        throw new IllegalArgumentException("Unable to get an input stream for the provided file " + granuleFile.toString());
      }
      streamSPI=ImageIOExt.getImageInputStreamSPI(rasterManager.parent.ovrSource);
      reader=Utils.TIFFREADERFACTORY.createReaderInstance();
      reader.setInput(inStream);
      numRasters=reader.getNumImages(true);
      for (int k=0; k < numRasters; k++, i++) {
        final Rectangle rasterDimension=new Rectangle(0,0,reader.getWidth(k),reader.getHeight(k));
        final double scaleX=baseLevel.width / (1.0 * rasterDimension.width);
        final double scaleY=baseLevel.height / (1.0 * rasterDimension.height);
        this.granuleLevels.put(Integer.valueOf(i),new GranuleLevelDescriptor(k,rasterManager.parent.ovrSource,streamSPI,scaleX,scaleY,rasterDimension.width,rasterDimension.height));
      }
    }
  }
 catch (  IllegalStateException e) {
    throw new IllegalArgumentException(e);
  }
catch (  IOException e) {
    throw new IllegalArgumentException(e);
  }
 finally {
    try {
      if (inStream != null) {
        inStream.close();
      }
    }
 catch (    Throwable e) {
      throw new IllegalArgumentException(e);
    }
 finally {
      if (reader != null)       reader.dispose();
    }
  }
}
