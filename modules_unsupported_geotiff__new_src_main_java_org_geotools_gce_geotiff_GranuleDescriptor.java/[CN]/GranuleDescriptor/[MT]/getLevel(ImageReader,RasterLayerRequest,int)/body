{
synchronized (granuleLevels) {
    if (granuleLevels.containsKey(Integer.valueOf(imageChoice))) {
      return granuleLevels.get(Integer.valueOf(imageChoice));
    }
 else {
      ImageInputStream inStream=null;
      boolean disposeReader=false;
      File file=granuleFile;
      try {
        if (request.rasterManager.parent.extOvrImgChoice >= 0 && imageChoice >= request.rasterManager.parent.extOvrImgChoice) {
          file=request.rasterManager.parent.ovrSource;
          inStream=request.rasterManager.parent.ovrInStreamSPI.createInputStreamInstance(file,ImageIO.getUseCache(),ImageIO.getCacheDirectory());
          imageChoice=imageChoice - request.rasterManager.parent.extOvrImgChoice;
          reader=Utils.TIFFREADERFACTORY.createReaderInstance();
          reader.setInput(inStream);
          disposeReader=true;
        }
        if (reader == null) {
          throw new IllegalArgumentException();
        }
        final Rectangle levelDimension=new Rectangle(0,0,reader.getWidth(imageChoice),reader.getHeight(imageChoice));
        final Level baseLevel=granuleLevels.get(0);
        final double scaleX=baseLevel.width / (1.0 * levelDimension.width);
        final double scaleY=baseLevel.height / (1.0 * levelDimension.height);
        final Level newLevel=new Level(scaleX,scaleY,levelDimension.width,levelDimension.height);
        this.granuleLevels.put(Integer.valueOf(imageChoice),newLevel);
        return newLevel;
      }
 catch (      IllegalStateException e) {
        throw new IllegalArgumentException(e);
      }
catch (      IOException e) {
        throw new IllegalArgumentException(e);
      }
 finally {
        try {
          if (inStream != null)           inStream.close();
        }
 catch (        Throwable e) {
          throw new IllegalArgumentException(e);
        }
 finally {
          if (reader != null && disposeReader)           reader.dispose();
        }
      }
    }
  }
}
