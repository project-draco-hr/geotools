{
  DefaultPiecewiseTransform1DElement e0=DefaultPiecewiseTransform1DElement.create("zero",NumberRange.create(0,100),NumberRange.create(0,200));
  Assert.assertTrue(e0 instanceof DefaultLinearPiecewiseTransform1DElement);
  Assert.assertEquals(((DefaultLinearPiecewiseTransform1DElement)e0).getOutputMinimum(),e0.transform(0),0.0);
  Assert.assertEquals(((DefaultLinearPiecewiseTransform1DElement)e0).getOutputMaximum(),e0.transform(e0.getInputMaximum()),0.0);
  Assert.assertEquals(0.0,((DefaultLinearPiecewiseTransform1DElement)e0).getOffset(),0.0);
  Assert.assertEquals(2.0,((DefaultLinearPiecewiseTransform1DElement)e0).getScale(),0.0);
  Assert.assertFalse(e0.isIdentity());
  Assert.assertEquals(1,e0.getSourceDimensions());
  Assert.assertEquals(1,e0.getTargetDimensions());
  try {
    Assert.assertEquals(e0.transform(Double.POSITIVE_INFINITY),0.0,0.0);
    Assert.assertTrue(false);
  }
 catch (  Exception e) {
  }
  DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement> transform=new DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement>(new DefaultPiecewiseTransform1DElement[]{e0});
  Assert.assertEquals(0.0,transform.transform(0),0);
  try {
    Assert.assertFalse(transform.isIdentity());
    Assert.assertTrue(false);
  }
 catch (  Exception e) {
  }
  Assert.assertEquals(1,transform.getSourceDimensions());
  Assert.assertEquals(1,transform.getTargetDimensions());
}
