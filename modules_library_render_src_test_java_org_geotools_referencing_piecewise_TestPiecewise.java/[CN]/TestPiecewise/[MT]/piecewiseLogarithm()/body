{
  final DefaultPiecewiseTransform1DElement zero=DefaultPiecewiseTransform1DElement.create("zero",RangeFactory.create(0,0),0);
  final DefaultPiecewiseTransform1DElement mainElement=new DefaultPiecewiseTransform1DElement("natural logarithm",RangeFactory.create(0,false,255,true),new MathTransformation(){
    public double derivative(    double arg0) throws TransformException {
      return 1 / arg0;
    }
    public double transform(    double arg0){
      return Math.log(arg0);
    }
    public int getSourceDimensions(){
      return 01;
    }
    public int getTargetDimensions(){
      return 1;
    }
    public boolean isIdentity(){
      return false;
    }
    @Override public MathTransformation inverseTransform(){
      return null;
    }
    @Override public Position transform(    Position ptSrc,    Position ptDst) throws TransformationException {
      if (ptDst == null) {
        ptDst=new Position();
      }
      ptDst.setOrdinatePosition(transform(ptSrc.getOrdinatePosition()));
      return ptDst;
    }
  }
);
  DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement> transform=new DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement>(new DefaultPiecewiseTransform1DElement[]{zero,mainElement});
  Assert.assertEquals(0.0,transform.transform(0),0);
  Assert.assertEquals(0.0,transform.transform(1),0);
  Assert.assertEquals(Math.log(255.0),transform.transform(255),0);
  Assert.assertEquals(Math.log(124.0),transform.transform(124),0);
  boolean exceptionFound=false;
  try {
    Assert.assertEquals(Math.log(255.0),transform.transform(256),0);
  }
 catch (  TransformationException e) {
    exceptionFound=true;
  }
  Assert.assertTrue(exceptionFound);
  final DefaultPiecewiseTransform1DElement nodata=DefaultPiecewiseTransform1DElement.create("no-data",RangeFactory.create(-1,-1),Double.NaN);
  transform=new DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement>(new DefaultPiecewiseTransform1DElement[]{zero,mainElement,nodata});
  Assert.assertEquals(0.0,transform.transform(0),0);
  Assert.assertEquals(0.0,transform.transform(1),0);
  Assert.assertEquals(Math.log(255.0),transform.transform(255),0);
  Assert.assertEquals(Math.log(124.0),transform.transform(124),0);
  exceptionFound=false;
  try {
    Assert.assertTrue(Double.isNaN(transform.transform(256)));
  }
 catch (  TransformationException e1) {
    exceptionFound=true;
  }
  Assert.assertTrue(exceptionFound);
  final DefaultPiecewiseTransform1DElement overlap=DefaultPiecewiseTransform1DElement.create("overlap",RangeFactory.create(-100,12),Double.NaN);
  exceptionFound=false;
  try {
    transform=new DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement>(new DefaultPiecewiseTransform1DElement[]{zero,mainElement,overlap,nodata});
  }
 catch (  Throwable e) {
    exceptionFound=true;
  }
  Assert.assertTrue(exceptionFound);
}
