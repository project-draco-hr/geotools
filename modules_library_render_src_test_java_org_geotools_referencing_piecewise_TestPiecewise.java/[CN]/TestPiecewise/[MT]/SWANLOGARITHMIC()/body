{
  final RenderedImage image=getSWAN();
  if (TestData.isInteractiveTest())   ImageIOUtilities.visualize(image,"testSWANLOGARITHMIC");
  ImageWorker w=new ImageWorker(image).setROI(new ROI(new ImageWorker(image).binarize(0).getRenderedImage()));
  final double[] minimum=w.getMinimums();
  final double[] maximum=w.getMaximums();
  final DefaultPiecewiseTransform1DElement mainElement=new DefaultPiecewiseTransform1DElement("natural logarithm",RangeFactory.create(minimum[0],maximum[0]),new MathTransformationAdapter(){
    public double derivative(    double arg0) throws TransformException {
      return 1 / arg0;
    }
    public double transform(    double arg0){
      return minimum[0] + 1.2 * Math.log(arg0 / minimum[0]) * ((maximum[0] - minimum[0]) / (Math.log(maximum[0] / minimum[0])));
    }
    public boolean isIdentity(){
      return false;
    }
  }
);
  DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement> transform=new DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement>(new DefaultPiecewiseTransform1DElement[]{mainElement},0);
  boolean exceptionThrown=false;
  try {
    final RenderedOp d=w.piecewise(transform,new Integer(2)).getRenderedOperation();
    d.getTiles();
  }
 catch (  Exception e) {
    exceptionThrown=true;
  }
  Assert.assertTrue(exceptionThrown);
  final RenderedOp finalImage=w.piecewise(transform,new Integer(0)).getRenderedOperation();
  if (TestData.isInteractiveTest())   ImageIOUtilities.visualize(finalImage,"testSWANLOGARITHMIC");
 else   finalImage.getTiles();
  finalImage.dispose();
}
