{
  SimpleFeatureIterator features=featureCollection.features();
  ArrayList<Double> data=new ArrayList<Double>();
  try {
    while (features.hasNext()) {
      SimpleFeature feature=features.next();
      final Object result=getParameters().get(0).evaluate(feature);
      logger.finest("importing " + result);
      if (result != null) {
        final Double e=new Double(result.toString());
        if (!e.isInfinite() && !e.isNaN())         data.add(e);
      }
    }
  }
 catch (  NumberFormatException e) {
    return null;
  }
  Collections.sort(data);
  final int k=getClasses();
  final int m=data.size();
  if (k == m) {
    logger.info("Number of classes (" + k + ") is equal to number of data points ("+ m+ ") "+ "unique classification returned");
    Comparable[] localMin=new Comparable[k];
    Comparable[] localMax=new Comparable[k];
    for (int id=0; id < k - 1; id++) {
      localMax[id]=data.get(id + 1);
      localMin[id]=data.get(id);
    }
    localMax[k - 1]=data.get(k - 1);
    localMin[k - 1]=data.get(k - 1);
    return new RangedClassifier(localMin,localMax);
  }
  int[][] iwork=new int[m + 1][k + 1];
  double[][] work=new double[m + 1][k + 1];
  for (int j=1; j <= k; j++) {
    iwork[0][j]=1;
    iwork[1][j]=1;
    work[1][j]=0;
    for (int i=2; i <= m; i++) {
      work[i][j]=Double.MAX_VALUE;
    }
  }
  for (int i=1; i <= m; i++) {
    double s1=0;
    double s2=0;
    double var=0.0;
    for (int ii=1; ii <= i; ii++) {
      int i3=i - ii + 1;
      double val=data.get(i3 - 1);
      s2=s2 + (val * val);
      s1+=val;
      double s0=(double)ii;
      var=s2 - ((s1 * s1) / s0);
      int ik=i3 - 1;
      if (ik != 0) {
        for (int j=2; j <= k; j++) {
          if (work[i][j] >= (var + work[ik][j - 1])) {
            iwork[i][j]=i3 - 1;
            work[i][j]=var + work[ik][j - 1];
          }
        }
      }
    }
    iwork[i][1]=1;
    work[i][1]=var;
  }
  if (logger.getLevel() == Level.FINER) {
    for (int i=0; i < m; i++) {
      String tmp=(i + ": " + data.get(i));
      for (int j=2; j <= k; j++) {
        tmp+=("\t" + iwork[i][j]);
      }
      logger.finer(tmp);
    }
  }
  int ik=m - 1;
  Comparable[] localMin=new Comparable[k];
  Comparable[] localMax=new Comparable[k];
  localMax[k - 1]=data.get(ik);
  for (int j=k; j >= 2; j--) {
    logger.finest("index " + ik + ", class"+ j);
    int id=(int)iwork[ik][j] - 1;
    localMax[j - 2]=data.get(id);
    localMin[j - 1]=data.get(id);
    ik=(int)iwork[ik][j] - 1;
  }
  localMin[0]=data.get(0);
  return new RangedClassifier(localMin,localMax);
}
