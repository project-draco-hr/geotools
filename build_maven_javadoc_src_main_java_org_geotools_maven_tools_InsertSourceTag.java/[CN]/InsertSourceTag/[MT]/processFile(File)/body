{
  List<String> buffer=new ArrayList<String>();
  boolean inCommentBlock=false;
  boolean nonEmptyLines=false;
  boolean completedSearch=false;
  int commentStartLine=-1;
  int commentEndLine=-1;
  int sourceTagLine=-1;
  boolean replaceLine=false;
  Matcher matcher=null;
  String text;
  String sourceTagText;
  matcher=findSVNLine.matcher(file.getAbsolutePath());
  if (matcher.matches()) {
    int pos=matcher.start(1);
    String repoURL=Source.SVN_REPO_URL;
    StringBuilder sb=new StringBuilder(" * @source ");
    if (addSVNKeyword) {
      sb.append("$URL: ");
    }
    sb.append(Source.SVN_REPO_URL);
    sb.append(file.getAbsolutePath().substring(pos));
    if (addSVNKeyword) {
      sb.append(" $");
    }
    sourceTagText=sb.toString();
  }
 else {
    return false;
  }
  LineNumberReader reader=new LineNumberReader(new FileReader(file));
  reader.setLineNumber(-1);
  while ((text=reader.readLine()) != null) {
    buffer.add(text);
    if (completedSearch) {
      continue;
    }
    if (inCommentBlock) {
      matcher=findCommentEnd.matcher(text);
      if (matcher.find()) {
        inCommentBlock=false;
        commentEndLine=reader.getLineNumber();
      }
    }
 else {
      matcher=findCommentStart.matcher(text);
      if (matcher.find()) {
        inCommentBlock=true;
        nonEmptyLines=false;
        commentStartLine=reader.getLineNumber();
      }
 else {
        matcher=findClass.matcher(text);
        if (matcher.find()) {
          if (commentStartLine < 0) {
            return false;
          }
          if (nonEmptyLines) {
            return false;
          }
          for (int i=commentStartLine; i <= commentEndLine; i++) {
            matcher=findSourceTag.matcher(buffer.get(i));
            if (matcher.find()) {
              if (replaceExistingTag) {
                sourceTagLine=i;
                buffer.remove(i);
                break;
              }
 else {
                return false;
              }
            }
          }
          if (sourceTagLine < 0) {
            for (int i=commentStartLine; i <= commentEndLine; i++) {
              matcher=findVersionTag.matcher(buffer.get(i));
              if (matcher.find()) {
                sourceTagLine=i;
                break;
              }
            }
          }
          if (sourceTagLine < 0) {
            sourceTagLine=commentEndLine;
          }
          completedSearch=true;
        }
 else {
          if (text.trim().length() > 0) {
            nonEmptyLines=true;
          }
        }
      }
    }
  }
  reader.close();
  if (completedSearch) {
    return writeFile(file,buffer,sourceTagLine,sourceTagText);
  }
  return false;
}
