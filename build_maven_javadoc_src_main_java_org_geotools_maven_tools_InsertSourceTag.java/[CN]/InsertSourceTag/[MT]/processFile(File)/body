{
  Matcher matcher=null;
  String sourceTagText;
  matcher=findSVNLine.matcher(file.getAbsolutePath());
  if (matcher.matches()) {
    int pos=matcher.start(1);
    String repoURL=Source.SVN_REPO_URL;
    StringBuilder sb=new StringBuilder(" * @source ");
    if (optionSVNDelims) {
      sb.append("$URL: ");
    }
    sb.append(Source.SVN_REPO_URL);
    sb.append(file.getAbsolutePath().substring(pos));
    if (optionSVNDelims) {
      sb.append(" $");
    }
    sourceTagText=sb.toString();
  }
 else {
    System.out.println("   --- skipped this file");
    System.out.println();
    return false;
  }
  BufferedReader reader=new BufferedReader(new FileReader(file));
  List<String> buffer=new ArrayList<String>();
  String line;
  while ((line=reader.readLine()) != null) {
    buffer.add(line);
  }
  reader.close();
  boolean inJavadocBlock=false;
  boolean inCommentBlock=false;
  boolean unknownPrecedingContent=false;
  boolean classFound=false;
  int javadocStartLine=-1;
  int javadocEndLine=-1;
  int sourceTagLine=-1;
  for (int lineNo=0; sourceTagLine < 0 && lineNo < buffer.size(); lineNo++) {
    String text=buffer.get(lineNo);
    if (inJavadocBlock || inCommentBlock) {
      matcher=findCommentEnd.matcher(text);
      if (matcher.find()) {
        if (inJavadocBlock) {
          inJavadocBlock=false;
          javadocEndLine=lineNo;
        }
 else         if (inCommentBlock) {
          inCommentBlock=false;
        }
 else {
          System.out.println("   *** Mis-placed end marker for comment block " + "- skipping this file ***");
          System.out.println();
          return false;
        }
      }
    }
 else     if (findJavadocStart.matcher(text).find()) {
      inJavadocBlock=true;
      unknownPrecedingContent=false;
      javadocStartLine=lineNo;
    }
 else     if (findCommentStart.matcher(text).find()) {
      inCommentBlock=true;
    }
 else     if (!inJavadocBlock && !inCommentBlock && !classFound) {
      if (optionAnyClass) {
        matcher=findClass.matcher(text);
      }
 else {
        matcher=findPublicClass.matcher(text);
      }
      if (matcher.find()) {
        classFound=true;
        if (javadocStartLine < 0) {
          if (optionAddHeader) {
            buffer.add(lineNo," */");
            buffer.add(lineNo," * ");
            buffer.add(lineNo,"/**");
            javadocStartLine=lineNo;
            javadocEndLine=lineNo + 2;
            unknownPrecedingContent=false;
          }
 else {
            System.out.println("   *** No class javadocs - skipping file ***");
            System.out.println();
            return false;
          }
        }
        if (unknownPrecedingContent) {
          System.out.println("   *** Javadocs do not directly precede class" + " - skipping file ***");
          System.out.println();
          return false;
        }
        for (int blockLineNo=javadocStartLine; blockLineNo <= javadocEndLine; blockLineNo++) {
          String commentText=buffer.get(blockLineNo);
          matcher=findSourceTag.matcher(commentText);
          if (matcher.find()) {
            matcher=findCompleteSourceTag.matcher(commentText);
            if (!matcher.find()) {
              if (optionFixBreaks) {
                matcher=findCompletePath.matcher(buffer.get(blockLineNo + 1));
                if (matcher.find()) {
                  buffer.remove(blockLineNo + 1);
                  buffer.remove(blockLineNo);
                  sourceTagLine=blockLineNo;
                  if (!optionReplace) {
                    String http=matcher.group();
                    int start=http.indexOf("$URL");
                    if (start < 0) {
                      start=http.indexOf("http");
                    }
                    http=http.substring(start,http.length());
                    sourceTagText=commentText + http;
                  }
                  System.out.println("   *** Fixing broken source tag ***");
                  break;
                }
              }
 else {
                System.out.println("   *** Incomplete source tag detected" + "- skipping this file ***");
                System.out.println();
                return false;
              }
            }
            if (optionReplace) {
              sourceTagLine=blockLineNo;
              buffer.remove(blockLineNo);
              break;
            }
 else {
              return false;
            }
          }
        }
        if (sourceTagLine < 0) {
          for (int i=javadocStartLine; i <= javadocEndLine; i++) {
            matcher=findVersionTag.matcher(buffer.get(i));
            if (matcher.find()) {
              sourceTagLine=i;
              break;
            }
          }
        }
        if (sourceTagLine < 0) {
          sourceTagLine=javadocEndLine;
        }
      }
 else {
        if (text.trim().length() > 0) {
          matcher=findAnnotation.matcher(text);
          if (!matcher.find()) {
            unknownPrecedingContent=true;
          }
        }
      }
    }
  }
  if (sourceTagLine > 0) {
    return writeFile(file,buffer,sourceTagLine,sourceTagText);
  }
  return false;
}
