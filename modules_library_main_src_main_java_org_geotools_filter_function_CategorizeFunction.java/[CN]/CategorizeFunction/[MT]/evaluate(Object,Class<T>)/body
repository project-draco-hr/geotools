{
  final Expression lookupExp=parameters.get(0);
  final String belongsTo=queryThreshdoldBelongsTo(object);
  Expression currentExp=parameters.get(1);
  final List<Expression> splits;
  if (parameters.size() == 2) {
    return currentExp.evaluate(object,context);
  }
 else   if (parameters.size() % 2 == 0) {
    splits=parameters.subList(2,parameters.size());
  }
 else {
    splits=parameters.subList(2,parameters.size() - 1);
  }
  FilterFactory2 ff=CommonFactoryFinder.getFilterFactory2(null);
  for (int i=0; i < splits.size(); i+=2) {
    Expression threshholdExp=splits.get(i);
    Expression rangedExp=splits.get(i + 1);
    String lookupValue=lookupExp.evaluate(object,String.class);
    if (lookupValue.equalsIgnoreCase(RASTER_DATA)) {
      Double bandValue=new Double(object.toString());
      Double threshholdValue=threshholdExp.evaluate(object,Double.class);
      if (PRECEDING.equals(belongsTo)) {
        if (bandValue > threshholdValue) {
          currentExp=rangedExp;
        }
 else {
          break;
        }
      }
 else {
        if (bandValue >= threshholdValue) {
          currentExp=rangedExp;
        }
 else {
          break;
        }
      }
    }
 else {
      Filter isIncludedInThreshold;
      if (PRECEDING.equals(belongsTo)) {
        isIncludedInThreshold=ff.greater(lookupExp,threshholdExp);
      }
 else {
        isIncludedInThreshold=ff.greaterOrEqual(lookupExp,threshholdExp);
      }
      if (isIncludedInThreshold.evaluate(object)) {
        currentExp=rangedExp;
      }
 else {
        break;
      }
    }
  }
  return currentExp.evaluate(object,context);
}
