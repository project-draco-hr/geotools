{
  double minDist=Double.MAX_VALUE;
  int count=-1;
  int countunique=-1;
  double normCount=Double.NaN;
  double normCountUnique=Double.NaN;
  for (SimpleFeatureIterator it=result.features(); it.hasNext(); ) {
    SimpleFeature f=it.next();
    Coordinate outPt=((Point)f.getDefaultGeometry()).getCoordinate();
    double dist=outPt.distance(testPt);
    if (dist < minDist) {
      minDist=dist;
      count=(Integer)f.getAttribute(PointStackerProcess.ATTR_COUNT);
      countunique=(Integer)f.getAttribute(PointStackerProcess.ATTR_COUNT_UNIQUE);
      if (expectedProportion != null) {
        normCount=(Double)f.getAttribute(PointStackerProcess.ATTR_NORM_COUNT);
        normCountUnique=(Double)f.getAttribute(PointStackerProcess.ATTR_NORM_COUNT_UNIQUE);
      }
    }
  }
  assertEquals(expectedCount,count);
  assertEquals(expectedCountUnique,countunique);
  if (expectedProportion != null)   assertEquals(expectedProportion,normCount,0.0001);
  if (expectedProportionUnique != null)   assertEquals(expectedProportionUnique,normCountUnique,0.0001);
}
