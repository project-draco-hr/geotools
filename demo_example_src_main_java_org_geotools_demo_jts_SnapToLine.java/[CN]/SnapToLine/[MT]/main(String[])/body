{
  if (args.length != 1) {
    System.out.println("Please provide a filename");
    return;
  }
  File file=new File(args[0]);
  System.out.println("Snapping against:" + file);
  Map<String,Serializable> params=new HashMap<String,Serializable>();
  if (file.getName().endsWith(".properties")) {
    Properties properties=new Properties();
    FileInputStream inStream=new FileInputStream(file);
    try {
      properties.load(inStream);
    }
  finally {
      inStream.close();
    }
    for (    Map.Entry<Object,Object> property : properties.entrySet()) {
      params.put((String)property.getKey(),(String)property.getValue());
    }
  }
 else {
    params.put("url",file.toURI().toURL());
  }
  DataStore data=DataStoreFinder.getDataStore(params);
  List<Name> names=data.getNames();
  SimpleFeatureSource source=data.getFeatureSource(names.get(0));
  final SpatialIndex index=new STRtree();
  SimpleFeatureCollection features=source.getFeatures();
  System.out.println("Slurping in features ...");
  features.accepts(new FeatureVisitor(){
    public void visit(    Feature feature){
      SimpleFeature simpleFeature=(SimpleFeature)feature;
      Geometry geom=(MultiLineString)simpleFeature.getDefaultGeometry();
      Envelope bounds=geom.getEnvelopeInternal();
      if (bounds.isNull())       return;
      index.insert(bounds,new LocationIndexedLine(geom));
    }
  }
,new NullProgressListener());
  final int DURATION=6000;
  System.out.println("we now have our spatial index and are going to snap for " + DURATION);
  ReferencedEnvelope limit=features.getBounds();
  Coordinate[] points=new Coordinate[10000];
  Random rand=new Random(file.hashCode());
  for (int i=0; i < 10000; i++) {
    points[i]=new Coordinate(limit.getMinX() + rand.nextDouble() * limit.getWidth(),limit.getMinY() + rand.nextDouble() * limit.getHeight());
  }
  double distance=limit.getSpan(0) / 100.0;
  long now=System.currentTimeMillis();
  long then=now + DURATION;
  int count=0;
  System.out.println("we now have our spatial index and are going to snap for " + DURATION);
  while (System.currentTimeMillis() < then) {
    Coordinate pt=points[rand.nextInt(10000)];
    Envelope search=new Envelope(pt);
    search.expandBy(distance);
    List<LocationIndexedLine> hits=index.query(search);
    double d=Double.MAX_VALUE;
    Coordinate best=null;
    for (    LocationIndexedLine line : hits) {
      LinearLocation here=line.project(pt);
      Coordinate point=line.extractPoint(here);
      double currentD=point.distance(pt);
      if (currentD < d) {
        best=point;
      }
    }
    if (best == null) {
      System.out.println(pt + "-X");
    }
 else {
      System.out.println(pt + "->" + best);
    }
    count++;
  }
  System.out.println("snapped " + count + " times - and now I am tired");
  System.out.println("snapped " + count / DURATION + " per milli?");
}
