{
  schemaName=schemaName != null ? schemaName : "";
  String tableName=featureType.getName().getLocalPart();
  Statement st=null;
  try {
    st=cx.createStatement();
    for (    AttributeDescriptor att : featureType.getAttributeDescriptors()) {
      if (att instanceof GeometryDescriptor) {
        GeometryDescriptor gd=(GeometryDescriptor)att;
        int srid=-1;
        try {
          Integer result=CRS.lookupEpsgCode(gd.getCoordinateReferenceSystem(),true);
          if (result != null) {
            String sql="select srid from SYSSPATIAL.spatial_ref_sys" + " where AUTH_SRID = " + result;
            LOGGER.fine(sql);
            ResultSet resultSet=st.executeQuery(sql);
            resultSet.next();
            srid=resultSet.getInt("srid");
          }
        }
 catch (        FactoryException e) {
          e.printStackTrace();
        }
        String geomType=CLASS_TO_TYPE.get(gd.getType().getBinding());
        if (geomType == null)         geomType="GEOMETRY";
        String sql=MessageFormat.format("INSERT INTO SYSSPATIAL.GEOMETRY_COLUMNS " + "(F_TABLE_CATALOG, F_TABLE_SCHEMA, F_TABLE_NAME, F_GEOMETRY_COLUMN, COORD_DIMENSION, SRID, GEOM_TYPE)" + " VALUES ('''', ''{0}'', ''{1}'', ''{2}'', 2, {3,number,0}, ''{4}'')",schemaName,tableName,gd.getLocalName(),srid,geomType);
        LOGGER.fine(sql);
        st.execute(sql);
        StringBuffer sb=new StringBuffer();
        if (schemaName != null) {
          encodeSchemaName(schemaName,sb);
          sb.append(".");
        }
        encodeTableName(tableName,sb);
        String encodedTableName=sb.toString();
        sb=new StringBuffer();
        if (schemaName != null) {
          encodeSchemaName(schemaName,sb);
          sb.append(".");
        }
        String indexTableName=tableName + "_" + gd.getLocalName()+ "_idx";
        encodeTableName(indexTableName,sb);
        String encodedIdxTableName=sb.toString();
        try {
          sql="DROP TABLE " + encodedIdxTableName;
          LOGGER.fine(sql);
          st.execute(sql);
        }
 catch (        Exception e) {
          LOGGER.fine(e.getMessage());
        }
        sql="CREATE MULTISET TABLE " + encodedIdxTableName + " (id INTEGER NOT NULL, cellid INTEGER NOT NULL) PRIMARY INDEX (cellid)";
        LOGGER.fine(sql);
        st.execute(sql);
        mIndexTables.add(indexTableName);
        sql=MessageFormat.format("CREATE TRIGGER \"{0}_{1}_mi\" AFTER INSERT ON {12}" + "  REFERENCING NEW TABLE AS nt" + "  FOR EACH STATEMENT"+ "  BEGIN ATOMIC"+ "  ("+ "    INSERT INTO \"{0}_{1}_idx\""+ "    SELECT"+ "    {2},"+ "    sysspatial.tessellate_index ("+ "      \"{1}\".ST_Envelope().ST_ExteriorRing().ST_PointN(1).ST_X(), "+ "      \"{1}\".ST_Envelope().ST_ExteriorRing().ST_PointN(1).ST_Y(), "+ "      \"{1}\".ST_Envelope().ST_ExteriorRing().ST_PointN(3).ST_X(), "+ "      \"{1}\".ST_Envelope().ST_ExteriorRing().ST_PointN(3).ST_Y(), "+ "      {3,number,0.0#}, {4,number,0.0#}, {5,number,0.0#}, {6,number,0.0#}, "+ "      {7,number,0}, {8,number,0}, {9,number,0}, {10,number,0.0#}, {11,number,0})"+ "    FROM nt;"+ "  ) "+ "END",tableName,gd.getLocalName(),key,u_xmin,u_ymin,u_xmax,u_ymax,g_nx,g_ny,levels,scale,shift,encodedTableName);
        LOGGER.fine(sql);
        st.execute(sql);
        sql=MessageFormat.format("CREATE TRIGGER \"{0}_{1}_md\" AFTER DELETE ON {2}" + "  REFERENCING OLD TABLE AS ot" + "  FOR EACH STATEMENT"+ "  BEGIN ATOMIC"+ "  ("+ "    DELETE FROM \"{0}_{1}_idx\" WHERE ID IN (SELECT ID from ot);"+ "  )"+ "END",tableName,gd.getLocalName(),encodedTableName);
        LOGGER.fine(sql);
        st.execute(sql);
      }
      cx.commit();
    }
  }
  finally {
    dataStore.closeSafe(st);
  }
}
