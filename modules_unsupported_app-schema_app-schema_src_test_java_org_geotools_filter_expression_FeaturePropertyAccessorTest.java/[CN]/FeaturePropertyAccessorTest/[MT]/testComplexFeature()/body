{
  FeatureType fType=createFeatureType();
  AttributeDescriptor complexDesc=(AttributeDescriptor)fType.getDescriptor(COMPLEX_ATTRIBUTE);
  ComplexType complexAttType=(ComplexType)complexDesc.getType();
  AttributeDescriptor rootDesc=(AttributeDescriptor)complexAttType.getDescriptor(ROOT_ATTRIBUTE);
  ComplexType rootAttType=(ComplexType)rootDesc.getType();
  Collection<Property> properties=new ArrayList<Property>(fType.getDescriptors().size());
  AttributeDescriptor simpleAttributeDesc=(AttributeDescriptor)fType.getDescriptor(SIMPLE_ATTRIBUTE);
  AttributeImpl simpleAttribute=new AttributeImpl("simple value",simpleAttributeDesc,null);
  properties.add(simpleAttribute);
  Collection<Property> rootPropertiesOne=new ArrayList<Property>();
  AttributeDescriptor multiLeafDesc=(AttributeDescriptor)rootAttType.getDescriptor(MULTI_LEAF_ATTRIBUTE);
  AttributeImpl leafOne=new AttributeImpl("multi leaf value 1",multiLeafDesc,null);
  rootPropertiesOne.add(leafOne);
  AttributeImpl leafTwo=new AttributeImpl("multi leaf value 2",multiLeafDesc,null);
  rootPropertiesOne.add(leafTwo);
  AttributeDescriptor singleLeafDesc=(AttributeDescriptor)rootAttType.getDescriptor(SINGLE_LEAF_ATTRIBUTE);
  AttributeImpl singleLeaf=new AttributeImpl("single leaf value",singleLeafDesc,null);
  rootPropertiesOne.add(singleLeaf);
  Map<Name,Object> userData=new HashMap<Name,Object>();
  singleLeaf.getUserData().put(Attributes.class,userData);
  userData.put(Types.typeName(EG,"att"),"test attribute");
  AttributeImpl rootOne=new ComplexAttributeImpl(rootPropertiesOne,rootDesc,null);
  Collection<Property> rootPropertiesTwo=new ArrayList<Property>();
  rootPropertiesTwo.add(leafOne);
  rootPropertiesTwo.add(singleLeaf);
  AttributeImpl rootTwo=new ComplexAttributeImpl(rootPropertiesTwo,rootDesc,null);
  Collection<Property> rootPropertiesThree=new ArrayList<Property>();
  rootPropertiesThree.add(singleLeaf);
  AttributeImpl rootThree=new ComplexAttributeImpl(rootPropertiesThree,rootDesc,null);
  Collection<Property> complexProperties=new ArrayList<Property>(2);
  complexProperties.add(rootOne);
  complexProperties.add(rootTwo);
  complexProperties.add(rootThree);
  AttributeImpl complexAttribute=new ComplexAttributeImpl(complexProperties,complexDesc,null);
  properties.add(complexAttribute);
  Feature feature=new FeatureImpl(properties,fType,new FeatureIdImpl("test1"));
  AttributeExpressionImpl ex=new AttributeExpressionImpl("eg:simpleAttribute",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(simpleAttribute,ex.evaluate(feature));
  ex=new AttributeExpressionImpl("eg:complexAttribute",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(complexAttribute,ex.evaluate(feature));
  ex=new AttributeExpressionImpl("eg:complexAttribute/eg:rootAttribute",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  Object o=ex.evaluate(feature);
  assertTrue(o instanceof List);
  assertEquals(3,((List)o).size());
  assertEquals(rootOne,((List)o).get(0));
  assertEquals(rootTwo,((List)o).get(1));
  assertEquals(rootThree,((List)o).get(2));
  ex=new AttributeExpressionImpl("eg:complexAttribute/eg:rootAttribute/eg:singleLeafAttribute",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  o=ex.evaluate(feature);
  assertTrue(o instanceof List);
  assertEquals(3,((List)o).size());
  assertEquals(singleLeaf,((List)o).get(0));
  assertEquals(singleLeaf,((List)o).get(1));
  assertEquals(singleLeaf,((List)o).get(2));
  ex=new AttributeExpressionImpl("eg:complexAttribute/eg:rootAttribute[1]",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(rootOne,ex.evaluate(feature));
  ex=new AttributeExpressionImpl("eg:complexAttribute/eg:rootAttribute[2]",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(rootTwo,ex.evaluate(feature));
  ex=new AttributeExpressionImpl("eg:complexAttribute/eg:rootAttribute[3]/eg:singleLeafAttribute",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(singleLeaf,ex.evaluate(feature));
  ex=new AttributeExpressionImpl("eg:complexAttribute/eg:rootAttribute[3]/eg:multiLeafAttribute",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(null,ex.evaluate(feature));
  ex=new AttributeExpressionImpl("eg:complexAttribute/eg:rootAttribute[2]/eg:multiLeafAttribute",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(leafOne,ex.evaluate(feature));
  ex=new AttributeExpressionImpl("eg:complexAttribute/eg:rootAttribute[2]/eg:multiLeafAttribute[2]",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(null,ex.evaluate(feature));
  boolean exceptionThrown=false;
  try {
    ex.setLenient(false);
    assertEquals(null,ex.evaluate(singleLeaf));
  }
 catch (  Exception e) {
    exceptionThrown=true;
  }
  if (!exceptionThrown) {
    fail("Expecting Exception since object passed in is not a complex attribute.");
  }
  ex=new AttributeExpressionImpl("randomAttribute",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(null,ex.evaluate(feature));
  assertEquals(null,ex.evaluate(fType));
  ex=new AttributeExpressionImpl("eg:complexAttribute/eg:rootAttribute[3]/eg:singleLeafAttribute/@eg:att",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals("test attribute",ex.evaluate(feature));
  ex=new AttributeExpressionImpl("eg:simpleAttribute",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(simpleAttributeDesc,ex.evaluate(fType));
  ex=new AttributeExpressionImpl("eg:complexAttribute",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(complexDesc,ex.evaluate(fType));
  ex=new AttributeExpressionImpl("eg:complexAttribute/eg:rootAttribute",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(rootDesc,ex.evaluate(fType));
  ex=new AttributeExpressionImpl("eg:complexAttribute/eg:rootAttribute/eg:singleLeafAttribute",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(singleLeafDesc,ex.evaluate(fType));
  ex=new AttributeExpressionImpl("eg:complexAttribute/eg:rootAttribute/eg:multiLeafAttribute",new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,NAMESPACES));
  assertEquals(multiLeafDesc,ex.evaluate(fType));
}
