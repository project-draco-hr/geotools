{
  if (name.equals(AbstractGridFormat.READ_GRIDGEOMETRY2D.getName())) {
    final Object value=param.getValue();
    if (value == null)     return;
    final GridGeometry2D gg=(GridGeometry2D)param.getValue();
    if (gg == null) {
      return;
    }
    requestedBBox=new ReferencedEnvelope((Envelope)gg.getEnvelope2D());
    requestedRasterArea=gg.getGridRange2D().getBounds();
    requestedGridToWorld=(AffineTransform)gg.getGridToCRS2D();
    return;
  }
  if (name.equals(JP2KFormat.USE_MULTITHREADING.getName())) {
    useMultithreading=param.booleanValue();
    return;
  }
  if (name.equals(AbstractGridFormat.USE_JAI_IMAGEREAD.getName())) {
    final Object value=param.getValue();
    if (value == null)     return;
    readType=param.booleanValue() ? ReadType.JAI_IMAGEREAD : ReadType.DIRECT_READ;
    return;
  }
  if (name.equals(AbstractGridFormat.OVERVIEW_POLICY.getName())) {
    final Object value=param.getValue();
    if (value == null)     return;
    overviewPolicy=(OverviewPolicy)param.getValue();
    return;
  }
  if (name.equals(JP2KFormat.INPUT_TRANSPARENT_COLOR.getName())) {
    final Object value=param.getValue();
    if (value == null)     return;
    inputTransparentColor=(Color)param.getValue();
    inputTransparentColor=new Color(inputTransparentColor.getRed(),inputTransparentColor.getGreen(),inputTransparentColor.getBlue());
    return;
  }
  if (name.equals(JP2KFormat.SUGGESTED_TILE_SIZE.getName())) {
    final String suggestedTileSize=(String)param.getValue();
    if ((suggestedTileSize != null) && (suggestedTileSize.trim().length() > 0)) {
      if (suggestedTileSize.contains(JP2KFormat.TILE_SIZE_SEPARATOR)) {
        final String[] tilesSize=suggestedTileSize.split(JP2KFormat.TILE_SIZE_SEPARATOR);
        if (tilesSize.length == 2) {
          try {
            final int tileWidth=Integer.valueOf(tilesSize[0].trim());
            final int tileHeight=Integer.valueOf(tilesSize[1].trim());
            tileDimensions=new Dimension(tileWidth,tileHeight);
          }
 catch (          NumberFormatException nfe) {
            if (LOGGER.isLoggable(Level.WARNING)) {
              LOGGER.log(Level.WARNING,"Unable to parse " + "suggested tile size parameter");
            }
          }
        }
      }
    }
  }
}
