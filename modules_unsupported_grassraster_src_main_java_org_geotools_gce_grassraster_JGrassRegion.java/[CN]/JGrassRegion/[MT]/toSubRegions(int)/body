{
  int tmpR=getRows();
  int tmpC=getCols();
  double tmpWest=getWest();
  double tmpSouth=getSouth();
  double tmpWERes=getWEResolution();
  double tmpNSRes=getNSResolution();
  if (subregionsNum > tmpR || subregionsNum > tmpC) {
    throw new IllegalArgumentException("The number of subregions has to be smaller than the number of rows and columns.");
  }
  int subregRows=(int)Math.floor(tmpR / (double)subregionsNum);
  int subregCols=(int)Math.floor(tmpC / (double)subregionsNum);
  List<JGrassRegion> regions=new ArrayList<JGrassRegion>();
  double runningEasting=tmpWest;
  double runningNorthing=tmpSouth;
  for (int i=0; i < subregionsNum; i++) {
    double n=runningNorthing + subregRows * tmpNSRes;
    double s=runningNorthing;
    for (int j=0; j < subregionsNum; j++) {
      double w=runningEasting;
      double e=runningEasting + subregCols * tmpWERes;
      if (e > getEast()) {
        e=getEast();
      }
      if (n > getNorth()) {
        n=getNorth();
      }
      JGrassRegion r=new JGrassRegion(w,e,s,n,tmpWERes,tmpNSRes);
      if (r.getWEResolution() == 0 || r.getNSResolution() == 0) {
        continue;
      }
      regions.add(r);
      runningEasting=e;
    }
    runningEasting=tmpWest;
    runningNorthing=n;
  }
  return regions;
}
