{
  if (filter == null) {
    throw new NullPointerException("getFeatureReader requires Filter: " + "did you mean Filter.INCLUDE?");
  }
  if (transaction == null) {
    throw new NullPointerException("getFeatureReader requires Transaction: " + "did you mean Transaction.AUTO_COMMIT");
  }
  SimpleFeatureType featureType=getSchema(typeName);
  FeatureTypeInfo info=typeHandler.getFeatureTypeInfo(typeName);
  LOGGER.fine("getting feature writer for " + typeName + ": "+ info);
  SQLBuilder sqlBuilder=getSqlBuilder(typeName);
  org.opengis.filter.Filter preFilter=sqlBuilder.getPreQueryFilter(filter);
  org.opengis.filter.Filter postFilter=sqlBuilder.getPostQueryFilter(filter);
  Query query=new DefaultQuery(typeName,preFilter);
  String sqlQuery;
  try {
    sqlQuery=constructQuery(query,getAttributeTypes(typeName,propertyNames(query),null));
  }
 catch (  SchemaException e) {
    throw new DataSourceException("Some Attribute Names were specified that" + " do not exist in the FeatureType " + typeName + ". "+ "Requested names: "+ Arrays.asList(query.getPropertyNames())+ ", "+ "FeatureType: "+ featureType,e);
  }
  QueryData queryData=executeQuery(typeHandler.getFeatureTypeInfo(typeName),typeName,sqlQuery,transaction,true,null);
  FeatureReader<SimpleFeatureType,SimpleFeature> reader=createFeatureReader(info.getSchema(),postFilter,queryData);
  FeatureWriter<SimpleFeatureType,SimpleFeature> writer=createFeatureWriter(reader,queryData);
  if ((getLockingManager() != null) && getLockingManager() instanceof InProcessLockingManager) {
    InProcessLockingManager inProcess=(InProcessLockingManager)getLockingManager();
    writer=inProcess.checkedWriter(writer,transaction);
  }
  return writer;
}
