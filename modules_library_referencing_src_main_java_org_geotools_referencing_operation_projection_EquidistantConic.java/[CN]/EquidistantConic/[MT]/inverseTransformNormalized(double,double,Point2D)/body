{
  double rho=hypot(x,(y=this.rho0 - y));
  double phi, lam;
  if (rho != 0.0) {
    if (this.n < 0.) {
      rho=-rho;
      x=-x;
      y=-y;
    }
    phi=this.c - rho;
    if (!isSpherical) {
      phi=inv_mlfn(phi);
    }
    lam=atan2(x,y) / this.n;
  }
 else {
    lam=0;
    phi=(this.n > 0) ? PI / 2. : -PI / 2.;
  }
  if (ptDst != null) {
    ptDst.setLocation(lam,phi);
    return ptDst;
  }
  return new Point2D.Double(lam,phi);
}
