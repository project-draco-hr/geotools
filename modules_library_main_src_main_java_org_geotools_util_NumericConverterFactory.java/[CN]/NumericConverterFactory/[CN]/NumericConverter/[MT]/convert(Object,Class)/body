{
  target=primitiveToWrapperClass(target);
  if (source instanceof Number) {
    Number s=(Number)source;
    if (Long.class.equals(target)) {
      return new Long(s.longValue());
    }
    if (Integer.class.equals(target)) {
      return new Integer(s.intValue());
    }
    if (Short.class.equals(target)) {
      return new Short(s.shortValue());
    }
    if (Byte.class.equals(target)) {
      return new Byte(s.byteValue());
    }
    if (BigInteger.class.equals(target)) {
      return BigInteger.valueOf(s.longValue());
    }
    if (Double.class.equals(target)) {
      return new Double(s.toString());
    }
    if (Float.class.equals(target)) {
      return new Float(s.toString());
    }
    if (BigDecimal.class.equals(target)) {
      return new BigDecimal(s.toString());
    }
    if (Number.class.equals(target)) {
      try {
        return new Integer(s.toString());
      }
 catch (      Exception e) {
      }
      try {
        return new BigInteger(s.toString());
      }
 catch (      Exception e) {
      }
      try {
        return new Double(s.toString());
      }
 catch (      Exception e) {
      }
      try {
        return new BigDecimal(s.toString());
      }
 catch (      Exception e) {
      }
    }
  }
 else   if (source instanceof String) {
    String s=(String)source;
    s=s.trim();
    String integral=toIntegral(s);
    if (Double.class.equals(target)) {
      return new Double(s);
    }
    if (Float.class.equals(target)) {
      return new Float(s);
    }
    if (BigDecimal.class.equals(target)) {
      return new BigDecimal(s);
    }
    if (Long.class.equals(target)) {
      return new Long(integral);
    }
    if (Integer.class.equals(target)) {
      return new Integer(integral);
    }
    if (Short.class.equals(target)) {
      return new Short(integral);
    }
    if (Byte.class.equals(target)) {
      return new Byte(integral);
    }
    if (BigInteger.class.equals(target)) {
      return new BigInteger(integral);
    }
    if (Number.class.equals(target)) {
      if (integral.equals(s)) {
        try {
          return new Integer(integral);
        }
 catch (        Exception e) {
        }
        try {
          return new BigInteger(integral);
        }
 catch (        Exception e) {
        }
      }
      try {
        return new Double(s);
      }
 catch (      Exception e) {
      }
      try {
        return new BigDecimal(s);
      }
 catch (      Exception e) {
      }
    }
  }
  return null;
}
