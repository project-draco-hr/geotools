{
  target=primitiveToWrapperClass(target);
  if (source instanceof Number) {
    Number number=(Number)source;
    Class c=number.getClass();
    if (BigDecimal.class.equals(target)) {
      return (T)new BigDecimal(source.toString());
    }
 else     if (Double.class.equals(target)) {
      if (c != BigDecimal.class && c != BigInteger.class) {
        if (c == Float.class) {
          return (T)new Double(number.toString());
        }
        return (T)Double.valueOf(number.doubleValue());
      }
    }
 else     if (Float.class.equals(target)) {
      if (c == Float.class || c == Integer.class || c == Short.class || c == Byte.class) {
        return (T)Float.valueOf(number.floatValue());
      }
    }
 else     if (BigInteger.class.equals(target)) {
      if (BigInteger.class.isAssignableFrom(c) || c == Long.class || c == Integer.class || c == Short.class || c == Byte.class) {
        return (T)new BigInteger(number.toString());
      }
    }
 else     if (Long.class.equals(target)) {
      if (c == Long.class || c == Integer.class || c == Short.class || c == Byte.class) {
        return (T)Long.valueOf(number.longValue());
      }
    }
 else     if (Integer.class.equals(target)) {
      if (c == Integer.class || c == Short.class || c == Byte.class) {
        return (T)Integer.valueOf(number.intValue());
      }
    }
 else     if (Short.class.equals(target)) {
      if (c == Short.class || c == Byte.class) {
        return (T)Short.valueOf(number.shortValue());
      }
    }
 else     if (Byte.class.equals(target)) {
      if (c == Byte.class) {
        return (T)Byte.valueOf(number.byteValue());
      }
    }
  }
 else   if (source instanceof String) {
    String src=(String)source;
    try {
      if (BigDecimal.class.isAssignableFrom(target)) {
        return (T)new BigDecimal(src);
      }
 else       if (target == Double.class) {
        Double x=new Double(src);
        if (x.toString().equals(src))         return (T)x;
      }
 else       if (target == Float.class) {
        Float x=new Float(src);
        if (x.toString().equals(src))         return (T)x;
      }
 else       if (BigInteger.class.isAssignableFrom(target)) {
        BigInteger x=new BigInteger(src);
        if (x.toString().equals(src))         return (T)x;
      }
 else       if (target == Long.class) {
        Long x=new Long(src);
        if (x.toString().equals(src))         return (T)x;
      }
 else       if (target == Integer.class) {
        Integer x=new Integer(src);
        if (x.toString().equals(src))         return (T)x;
      }
 else       if (target == Short.class) {
        Short x=new Short(src);
        if (x.toString().equals(src))         return (T)x;
      }
 else       if (target == Byte.class) {
        Byte x=new Byte(src);
        if (x.toString().equals(src))         return (T)x;
      }
    }
 catch (    Exception ex) {
      return null;
    }
  }
  return null;
}
