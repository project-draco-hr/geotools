{
  Query unrolledQuery=Query.ALL;
  FeatureSource source=mapping.getSource();
  if (!Query.ALL.equals(query)) {
    Filter complexFilter=query.getFilter();
    Filter unrolledFilter=AppSchemaDataAccess.unrollFilter(complexFilter,mapping);
    Object includeProps=query.getHints().get(Query.INCLUDE_MANDATORY_PROPS);
    List<PropertyName> propNames=getSurrogatePropertyNames(query.getProperties(),mapping,includeProps instanceof Boolean && ((Boolean)includeProps).booleanValue());
    Query newQuery=new Query();
    String name=source.getName().getLocalPart();
    newQuery.setTypeName(name);
    newQuery.setFilter(unrolledFilter);
    newQuery.setProperties(propNames);
    newQuery.setCoordinateSystem(query.getCoordinateSystem());
    newQuery.setCoordinateSystemReproject(query.getCoordinateSystemReproject());
    newQuery.setHandle(query.getHandle());
    newQuery.setMaxFeatures(query.getMaxFeatures());
    if (query instanceof JoiningQuery) {
      FilterAttributeExtractor extractor=new FilterAttributeExtractor();
      mapping.getFeatureIdExpression().accept(extractor,null);
      List<SortBy> sort=new ArrayList<SortBy>();
      for (      String att : extractor.getAttributeNameSet()) {
        sort.add(new SortByImpl(filterFac.property(att),SortOrder.ASCENDING));
      }
      newQuery.setSortBy(sort.toArray(new SortBy[sort.size()]));
      JoiningQuery jQuery=new JoiningQuery(newQuery);
      jQuery.setQueryJoins(((JoiningQuery)query).getQueryJoins());
      jQuery.setSubset(((JoiningQuery)query).isSubset());
      unrolledQuery=jQuery;
    }
 else {
      unrolledQuery=newQuery;
    }
  }
  return unrolledQuery;
}
