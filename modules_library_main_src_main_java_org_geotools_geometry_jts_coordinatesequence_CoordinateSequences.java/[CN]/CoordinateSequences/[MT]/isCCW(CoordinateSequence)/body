{
  int nPts=ring.size() - 1;
  double hiy=ring.getOrdinate(0,1);
  int hiIndex=0;
  for (int i=1; i <= nPts; i++) {
    if (ring.getOrdinate(i,1) > hiy) {
      hiy=ring.getOrdinate(i,1);
      hiIndex=i;
    }
  }
  int iPrev=hiIndex;
  do {
    iPrev=iPrev - 1;
    if (iPrev < 0)     iPrev=nPts;
  }
 while (equals2D(ring,iPrev,hiIndex) && iPrev != hiIndex);
  int iNext=hiIndex;
  do {
    iNext=(iNext + 1) % nPts;
  }
 while (equals2D(ring,iNext,hiIndex) && iNext != hiIndex);
  if (equals2D(ring,iPrev,hiIndex) || equals2D(ring,iNext,hiIndex) || equals2D(ring,iPrev,iNext))   return false;
  int disc=computeOrientation(ring,iPrev,hiIndex,iNext);
  boolean isCCW=false;
  if (disc == 0) {
    isCCW=(ring.getOrdinate(iPrev,0) > ring.getOrdinate(iNext,0));
  }
 else {
    isCCW=(disc > 0);
  }
  return isCCW;
}
