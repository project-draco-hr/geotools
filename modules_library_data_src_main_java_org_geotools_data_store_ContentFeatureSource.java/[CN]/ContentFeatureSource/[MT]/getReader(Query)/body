{
  query=joinQuery(query);
  query=resolvePropertyNames(query);
  if (query.getStartIndex() != null && (query.getSortBy() == null || query.getSortBy().length == 0)) {
    Query dq=new Query(query);
    dq.setSortBy(new SortBy[]{SortBy.NATURAL_ORDER});
    query=dq;
  }
  if (!query.getJoins().isEmpty() && getQueryCapabilities().isJoiningSupported()) {
    throw new IOException("Feature source does not support joins");
  }
  FeatureReader<SimpleFeatureType,SimpleFeature> reader=getReaderInternal(query);
  if (!canTransact() && transaction != null && transaction != Transaction.AUTO_COMMIT) {
    DiffTransactionState state=(DiffTransactionState)getTransaction().getState(getEntry());
    reader=new DiffFeatureReader<SimpleFeatureType,SimpleFeature>(reader,state.getDiff());
  }
  if (!canFilter()) {
    if (query.getFilter() != null && query.getFilter() != Filter.INCLUDE) {
      reader=new FilteringFeatureReader<SimpleFeatureType,SimpleFeature>(reader,query.getFilter());
    }
  }
  if (!canRetype()) {
    if (query.getPropertyNames() != Query.ALL_NAMES) {
      SimpleFeatureType target=SimpleFeatureTypeBuilder.retype(reader.getFeatureType(),query.getPropertyNames());
      if (!target.equals(reader.getFeatureType())) {
        reader=new ReTypeFeatureReader(reader,target,false);
      }
    }
  }
  if (query.getSortBy() != null && query.getSortBy().length != 0) {
    if (!canSort()) {
      reader=new SortedFeatureReader(DataUtilities.simple(reader),query);
    }
  }
  int offset=query.getStartIndex() != null ? query.getStartIndex() : 0;
  if (!canOffset() && offset > 0) {
    for (int i=0; i < offset && reader.hasNext(); i++) {
      reader.next();
    }
  }
  if (!canLimit()) {
    if (query.getMaxFeatures() != -1 && query.getMaxFeatures() < Integer.MAX_VALUE) {
      reader=new MaxFeatureReader<SimpleFeatureType,SimpleFeature>(reader,query.getMaxFeatures());
    }
  }
  if (!canReproject()) {
    CoordinateReferenceSystem sourceCRS=query.getCoordinateSystem();
    CoordinateReferenceSystem targetCRS=query.getCoordinateSystemReproject();
    CoordinateReferenceSystem nativeCRS=reader.getFeatureType().getCoordinateReferenceSystem();
    if (sourceCRS != null && !sourceCRS.equals(nativeCRS)) {
      try {
        reader=new ForceCoordinateSystemFeatureReader(reader,sourceCRS);
      }
 catch (      SchemaException e) {
        throw (IOException)new IOException("Error occurred trying to force CRS").initCause(e);
      }
    }
 else {
      sourceCRS=nativeCRS;
    }
    if (targetCRS != null) {
      if (sourceCRS == null) {
        throw new IOException("Cannot reproject data, the source CRS is not available");
      }
 else       if (!sourceCRS.equals(targetCRS)) {
        try {
          reader=new ReprojectFeatureReader(reader,targetCRS);
        }
 catch (        Exception e) {
          if (e instanceof IOException)           throw (IOException)e;
 else           throw (IOException)new IOException("Error occurred trying to reproject data").initCause(e);
        }
      }
    }
  }
  if (!canLock()) {
  }
  return reader;
}
