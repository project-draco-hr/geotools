{
  query=joinQuery(query);
  query=resolvePropertyNames(query);
  ReferencedEnvelope bounds;
  if (!canTransact() && transaction != null && transaction != Transaction.AUTO_COMMIT) {
    DiffTransactionState state=(DiffTransactionState)getTransaction().getState(getEntry());
    Diff diff=state.getDiff();
    Iterator<String> i=diff.getModified().keySet().iterator();
    FilterFactory2 ff=CommonFactoryFinder.getFilterFactory2();
    Set<FeatureId> modifiedFids=new HashSet<FeatureId>();
    while (i.hasNext()) {
      String featureId=i.next();
      modifiedFids.add(ff.featureId(featureId));
    }
    Filter skipFilter=ff.not(ff.id(modifiedFids));
    Query q=new Query(query);
    q.setFilter(ff.and(skipFilter,query.getFilter()));
    bounds=getBoundsInternal(q);
    if (bounds != null) {
      Iterator<SimpleFeature> it=diff.getAdded().values().iterator();
      while (it.hasNext()) {
        SimpleFeature feature=(SimpleFeature)it.next();
        BoundingBox fb=feature.getBounds();
        if (fb != null) {
          bounds.expandToInclude(ReferencedEnvelope.reference(fb));
        }
      }
      it=diff.getModified().values().iterator();
      while (it.hasNext()) {
        SimpleFeature feature=(SimpleFeature)it.next();
        if (feature != Diff.NULL) {
          BoundingBox fb=feature.getBounds();
          if (fb != null) {
            bounds.expandToInclude(ReferencedEnvelope.reference(fb));
          }
        }
      }
    }
  }
 else {
    bounds=getBoundsInternal(query);
  }
  if (!canReproject()) {
    CoordinateReferenceSystem sourceCRS=query.getCoordinateSystem();
    CoordinateReferenceSystem targetCRS=query.getCoordinateSystemReproject();
    CoordinateReferenceSystem nativeCRS=getSchema().getCoordinateReferenceSystem();
    if (sourceCRS != null && !sourceCRS.equals(nativeCRS)) {
      bounds=new ReferencedEnvelope(bounds,sourceCRS);
    }
 else {
      sourceCRS=nativeCRS;
    }
    if (targetCRS != null) {
      if (sourceCRS == null) {
        throw new IOException("Cannot reproject data, the source CRS is not available");
      }
 else       if (!sourceCRS.equals(targetCRS)) {
        try {
          bounds=bounds.transform(targetCRS,true);
        }
 catch (        Exception e) {
          if (e instanceof IOException)           throw (IOException)e;
 else           throw (IOException)new IOException("Error occurred trying to reproject data").initCause(e);
        }
      }
    }
  }
  return bounds;
}
