{
  int i=0;
switch (Filters.getExpressionType(expr)) {
case org.geotools.filter.ExpressionType.LITERAL_DOUBLE:
case org.geotools.filter.ExpressionType.LITERAL_INTEGER:
case org.geotools.filter.ExpressionType.LITERAL_STRING:
case org.geotools.filter.ExpressionType.LITERAL_GEOMETRY:
case org.geotools.filter.ExpressionType.LITERAL_LONG:
    i=36;
  break;
case org.geotools.filter.ExpressionType.MATH_ADD:
i=29;
break;
case org.geotools.filter.ExpressionType.MATH_SUBTRACT:
i=30;
break;
case org.geotools.filter.ExpressionType.MATH_MULTIPLY:
i=31;
break;
case org.geotools.filter.ExpressionType.MATH_DIVIDE:
i=32;
break;
case org.geotools.filter.ExpressionType.ATTRIBUTE_DOUBLE:
case org.geotools.filter.ExpressionType.ATTRIBUTE_INTEGER:
case org.geotools.filter.ExpressionType.ATTRIBUTE_STRING:
case org.geotools.filter.ExpressionType.ATTRIBUTE_GEOMETRY:
case org.geotools.filter.ExpressionType.ATTRIBUTE_UNDECLARED:
case org.geotools.filter.ExpressionType.ATTRIBUTE:
i=34;
break;
case org.geotools.filter.ExpressionType.FUNCTION:
i=35;
break;
}
if (i != 0) {
FilterSchema.getInstance().getElements()[i].getType().encode(FilterSchema.getInstance().getElements()[i],expr,output,hints);
}
}
