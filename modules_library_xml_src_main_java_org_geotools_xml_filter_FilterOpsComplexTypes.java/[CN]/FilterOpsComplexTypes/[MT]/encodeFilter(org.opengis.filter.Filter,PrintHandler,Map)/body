{
  if (filter instanceof BinaryLogicOperator) {
    FilterType.elems[LOGIC_TYPE].getType().encode(FilterType.elems[LOGIC_TYPE],filter,output,hints);
  }
 else   if (filter instanceof Not) {
    FilterType.elems[LOGIC_TYPE].getType().encode(FilterType.elems[LOGIC_TYPE],filter,output,hints);
  }
 else   if (filter instanceof BinaryComparisonOperator) {
    FilterType.elems[COMPARE_TYPE].getType().encode(FilterType.elems[COMPARE_TYPE],filter,output,hints);
  }
 else   if (filter instanceof PropertyIsBetween) {
    FilterType.elems[COMPARE_TYPE].getType().encode(FilterType.elems[COMPARE_TYPE],filter,output,hints);
  }
 else   if (filter instanceof Id) {
    FilterType.elems[FID_TYPE].getType().encode(FilterType.elems[FID_TYPE],filter,output,hints);
  }
 else   if (filter instanceof BinarySpatialOperator) {
    FilterType.elems[SPATIAL_TYPE].getType().encode(FilterType.elems[SPATIAL_TYPE],filter,output,hints);
  }
 else   if (filter instanceof PropertyIsLike) {
    FilterType.elems[COMPARE_TYPE].getType().encode(FilterType.elems[COMPARE_TYPE],filter,output,hints);
  }
 else   if (filter instanceof PropertyIsNull) {
    FilterType.elems[COMPARE_TYPE].getType().encode(FilterType.elems[COMPARE_TYPE],filter,output,hints);
  }
 else {
    throw new OperationNotSupportedException("The Filter type is not known: please try again. " + filter == null ? "null" : filter.getClass().getName());
  }
}
