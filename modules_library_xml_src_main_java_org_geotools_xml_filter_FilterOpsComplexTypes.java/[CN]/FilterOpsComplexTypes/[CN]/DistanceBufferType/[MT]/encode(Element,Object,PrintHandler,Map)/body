{
  if (!canEncode(element,value,hints)) {
    return;
  }
  DistanceBufferOperator lf=(DistanceBufferOperator)value;
  output.startElement(element.getNamespace(),element.getName(),null);
  if (Filters.getExpressionType(lf.getExpression1()) == org.geotools.filter.ExpressionType.ATTRIBUTE) {
    elems[0].getType().encode(elems[0],lf.getExpression1(),output,hints);
    elems[1].getType().encode(elems[1],lf.getExpression2().evaluate(null,Geometry.class),output,hints);
    elems[2].getType().encode(elems[2],lf,output,hints);
  }
 else {
    if (Filters.getExpressionType(lf.getExpression2()) == org.geotools.filter.ExpressionType.ATTRIBUTE) {
      elems[0].getType().encode(elems[0],lf.getExpression2(),output,hints);
      elems[1].getType().encode(elems[1],lf.getExpression1().evaluate(null,Geometry.class),output,hints);
      elems[2].getType().encode(elems[2],lf,output,hints);
    }
 else {
      throw new OperationNotSupportedException("Either the left or right expr must be a literal for the property name");
    }
  }
  output.endElement(element.getNamespace(),element.getName());
}
