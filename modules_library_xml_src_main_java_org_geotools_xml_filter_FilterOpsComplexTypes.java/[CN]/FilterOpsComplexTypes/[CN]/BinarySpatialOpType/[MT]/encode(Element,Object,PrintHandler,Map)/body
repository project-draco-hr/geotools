{
  if (!canEncode(element,value,hints)) {
    return;
  }
  GeometryFilter lf=(GeometryFilter)value;
  output.startElement(element.getNamespace(),element.getName(),null);
  if ((lf.getLeftGeometry().getType() == org.geotools.filter.ExpressionType.LITERAL_STRING) || (lf.getLeftGeometry().getType() == org.geotools.filter.ExpressionType.ATTRIBUTE_STRING) || (lf.getLeftGeometry().getType() == org.geotools.filter.ExpressionType.ATTRIBUTE)) {
    elems[0].getType().encode(elems[0],lf.getLeftGeometry(),output,hints);
    if (lf.getRightGeometry().getType() == org.geotools.filter.ExpressionType.LITERAL_GEOMETRY) {
      elems[1].getType().encode(elems[1],((LiteralExpression)lf.getRightGeometry()).getLiteral(),output,hints);
    }
 else {
      elems[2].getType().encode(elems[2],((LiteralExpression)lf.getRightGeometry()).getLiteral(),output,hints);
    }
  }
 else {
    if ((lf.getRightGeometry().getType() == org.geotools.filter.ExpressionType.LITERAL_STRING) || (lf.getRightGeometry().getType() == org.geotools.filter.ExpressionType.ATTRIBUTE_STRING) || (lf.getRightGeometry().getType() == org.geotools.filter.ExpressionType.ATTRIBUTE)) {
      elems[0].getType().encode(elems[0],lf.getRightGeometry(),output,hints);
      if (lf.getLeftGeometry().getType() == org.geotools.filter.ExpressionType.LITERAL_GEOMETRY) {
        elems[1].getType().encode(elems[1],((LiteralExpression)lf.getLeftGeometry()).getLiteral(),output,hints);
      }
 else {
        elems[2].getType().encode(elems[2],((LiteralExpression)lf.getLeftGeometry()).getLiteral(),output,hints);
      }
    }
 else {
      throw new OperationNotSupportedException("Either the left or right expr must be a literal for the property name l=" + lf.getLeftGeometry().getType() + " r="+ lf.getRightGeometry().getType());
    }
  }
  output.endElement(element.getNamespace(),element.getName());
}
