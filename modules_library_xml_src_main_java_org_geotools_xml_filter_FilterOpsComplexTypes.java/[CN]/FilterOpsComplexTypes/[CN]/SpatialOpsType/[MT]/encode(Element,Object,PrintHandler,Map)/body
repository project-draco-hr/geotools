{
  if (!canEncode(element,value,hints)) {
    return;
  }
  BinarySpatialOperator lf=(BinarySpatialOperator)value;
switch (Filters.getFilterType(lf)) {
case GEOMETRY_BBOX:
    BBOXType.getInstance().encode(new FilterElement("BBOX",BBOXType.getInstance(),element),value,output,hints);
  return;
case GEOMETRY_BEYOND:
DistanceBufferType.getInstance().encode(new FilterElement("Beyond",DistanceBufferType.getInstance(),element),value,output,hints);
return;
case GEOMETRY_CONTAINS:
BinarySpatialOpType.getInstance().encode(new FilterElement("Contains",BinarySpatialOpType.getInstance(),element),value,output,hints);
return;
case GEOMETRY_CROSSES:
BinarySpatialOpType.getInstance().encode(new FilterElement("Crosses",BinarySpatialOpType.getInstance(),element),value,output,hints);
return;
case GEOMETRY_DISJOINT:
BinarySpatialOpType.getInstance().encode(new FilterElement("Disjoint",BinarySpatialOpType.getInstance(),element),value,output,hints);
return;
case GEOMETRY_DWITHIN:
DistanceBufferType.getInstance().encode(new FilterElement("DWithin",DistanceBufferType.getInstance(),element),value,output,hints);
return;
case GEOMETRY_EQUALS:
BinarySpatialOpType.getInstance().encode(new FilterElement("Equals",BinarySpatialOpType.getInstance(),element),value,output,hints);
return;
case GEOMETRY_INTERSECTS:
BinarySpatialOpType.getInstance().encode(new FilterElement("Intersects",BinarySpatialOpType.getInstance(),element),value,output,hints);
return;
case GEOMETRY_OVERLAPS:
BinarySpatialOpType.getInstance().encode(new FilterElement("Overlaps",BinarySpatialOpType.getInstance(),element),value,output,hints);
return;
case GEOMETRY_TOUCHES:
BinarySpatialOpType.getInstance().encode(new FilterElement("Touches",BinarySpatialOpType.getInstance(),element),value,output,hints);
return;
case GEOMETRY_WITHIN:
BinarySpatialOpType.getInstance().encode(new FilterElement("Within",BinarySpatialOpType.getInstance(),element),value,output,hints);
return;
}
throw new OperationNotSupportedException("Unknown filter type in ComparisonFilter: " + lf.getClass().getName());
}
