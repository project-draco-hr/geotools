{
  final Set crs=factory.getAuthorityCodes(CoordinateReferenceSystem.class);
  assertFalse(crs.isEmpty());
  assertEquals("Check size() consistency",crs.size(),crs.size());
  assertTrue(crs.size() > 0);
  final Set geographicCRS=factory.getAuthorityCodes(GeographicCRS.class);
  assertTrue(geographicCRS instanceof AuthorityCodes);
  assertFalse(geographicCRS.isEmpty());
  assertTrue(geographicCRS.size() > 0);
  assertTrue(geographicCRS.size() < crs.size());
  assertFalse(geographicCRS.containsAll(crs));
  assertTrue(crs.containsAll(geographicCRS));
  final Set projectedCRS=factory.getAuthorityCodes(ProjectedCRS.class);
  assertTrue(projectedCRS instanceof AuthorityCodes);
  assertFalse(projectedCRS.isEmpty());
  assertTrue(projectedCRS.size() > 0);
  assertTrue(projectedCRS.size() < crs.size());
  assertFalse(projectedCRS.containsAll(crs));
  assertTrue(crs.containsAll(projectedCRS));
  final Set datum=factory.getAuthorityCodes(Datum.class);
  assertTrue(datum instanceof AuthorityCodes);
  assertFalse(datum.isEmpty());
  assertTrue(datum.size() > 0);
  final Set geodeticDatum=factory.getAuthorityCodes(GeodeticDatum.class);
  assertTrue(geodeticDatum instanceof AuthorityCodes);
  assertFalse(geodeticDatum.isEmpty());
  assertTrue(geodeticDatum.size() > 0);
  assertFalse(geodeticDatum.containsAll(datum));
  assertTrue(datum.containsAll(geodeticDatum));
  assertSame(crs,factory.getAuthorityCodes(CoordinateReferenceSystem.class));
  assertSame(geographicCRS,factory.getAuthorityCodes(GeographicCRS.class));
  assertSame(projectedCRS,factory.getAuthorityCodes(ProjectedCRS.class));
  assertSame(datum,factory.getAuthorityCodes(Datum.class));
  assertSame(geodeticDatum,factory.getAuthorityCodes(GeodeticDatum.class));
  assertSame(geodeticDatum,factory.getAuthorityCodes(DefaultGeodeticDatum.class));
  assertTrue("Dummy type",factory.getAuthorityCodes((Class)String.class).isEmpty());
  final Set operations=factory.getAuthorityCodes(Operation.class);
  final Set conversions=factory.getAuthorityCodes(Conversion.class);
  final Set projections=factory.getAuthorityCodes(Projection.class);
  final Set transformations=factory.getAuthorityCodes(Transformation.class);
  assertTrue(operations instanceof AuthorityCodes);
  assertTrue(conversions instanceof AuthorityCodes);
  assertTrue(projections instanceof AuthorityCodes);
  assertTrue(transformations instanceof AuthorityCodes);
  assertTrue(conversions.size() < operations.size());
  assertTrue(projections.size() < operations.size());
  assertTrue(transformations.size() < operations.size());
  assertTrue(projections.size() < conversions.size());
  assertFalse(projections.containsAll(conversions));
  assertTrue(conversions.containsAll(projections));
  assertTrue(operations.containsAll(conversions));
  assertTrue(operations.containsAll(transformations));
  assertTrue(Collections.disjoint(conversions,transformations));
  assertFalse(Collections.disjoint(conversions,projections));
  assertFalse(operations.isEmpty());
  assertFalse(conversions.isEmpty());
  assertFalse(projections.isEmpty());
  assertFalse(transformations.isEmpty());
  assertTrue(conversions.contains("101"));
  assertFalse(projections.contains("101"));
  assertTrue(projections.contains("16001"));
  @SuppressWarnings("unchecked") final Set units=factory.getAuthorityCodes((Class)Unit.class);
  assertTrue(units instanceof AuthorityCodes);
  assertFalse(units.isEmpty());
  assertTrue(units.size() > 0);
  final Set all=factory.getAuthorityCodes(IdentifiedObject.class);
  assertFalse(all instanceof AuthorityCodes);
  assertTrue(all.containsAll(crs));
  assertTrue(all.containsAll(datum));
  assertTrue(all.containsAll(operations));
  assertFalse(all.containsAll(units));
}
