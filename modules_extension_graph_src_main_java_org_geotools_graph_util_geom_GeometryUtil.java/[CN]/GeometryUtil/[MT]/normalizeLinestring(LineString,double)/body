{
  Coordinate[] c=line.getCoordinates();
  boolean[] remove=new boolean[c.length];
  int nremove=0;
  double[] add=new double[c.length];
  int nadd=0;
  if (c.length == 2) {
    if (distance(c,0,1) > sample) {
      int n=(int)(distance(c,0,1) / sample);
      if (n > 1) {
        nadd+=n - 1;
        add[0]=distance(c,0,1) / ((double)n);
      }
    }
 else     return (line);
  }
 else {
    int i=0;
    while (i < c.length - 2) {
      int j=i + 1;
      while (j < c.length - 1) {
        if (distance(c,i,j) < sample) {
          remove[j]=true;
          nremove++;
          j++;
        }
 else         break;
      }
      int n=(int)(distance(c,i,j) / (sample));
      if (n > 1) {
        add[i]=distance(c,i,j) / ((double)n);
        nadd+=n - 1;
      }
      i=j;
    }
    for (int k=c.length - 2; k >= 1; k--) {
      if (!remove[k]) {
        if (distance(c,c.length - 1,k) < sample) {
          remove[k]=true;
          nremove++;
          int l=k - 1;
          for (; l >= 0; l--) {
            if (!remove[l])             break;
          }
          if (l > -1) {
            int n=(int)(distance(c,l,k) / sample);
            if (n > 1) {
              add[l]=0d;
              nadd-=(n - 1);
            }
            n=(int)(distance(c,l,c.length - 1) / sample);
            if (n > 1) {
              add[l]=distance(c,l,c.length - 1) / ((double)n);
              nadd+=n - 1;
            }
          }
        }
 else {
          if (k == c.length - 2) {
            int n=(int)(distance(c,k,c.length - 1) / sample);
            if (n > 1) {
              nadd+=n - 1;
              add[k]=distance(c,k,c.length - 1) / ((double)n);
            }
          }
        }
        break;
      }
    }
  }
  Coordinate[] newc=new Coordinate[c.length - nremove + nadd];
  int j=0;
  for (int i=0; i < c.length; i++) {
    if (!remove[i]) {
      newc[j++]=c[i];
      if (add[i] > 0d) {
        int next=-1;
        for (int k=i + 1; k < c.length && next == -1; k++) {
          if (!remove[k])           next=k;
        }
        if (next == -1)         continue;
        double dx=(c[next].x - c[i].x) * (add[i]) / distance(c,i,next);
        double dy=(c[next].y - c[i].y) * (add[i]) / distance(c,i,next);
        int n=(int)(distance(c,i,next) / add[i] + +0.000001);
        for (int k=1; k < n; k++) {
          newc[j++]=new Coordinate(c[i].x + k * dx,c[i].y + k * dy);
        }
      }
    }
  }
  return (gf().createLineString(newc));
}
