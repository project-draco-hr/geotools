{
  Coordinate[] merged=new Coordinate[l1.getNumPoints() + l2.getNumPoints() - 1];
  if (l1.getCoordinateN(l1.getNumPoints() - 1).equals(l2.getCoordinateN(0))) {
    for (int i=0; i < l1.getNumPoints(); i++) {
      merged[i]=l1.getCoordinateN(i);
    }
    for (int i=0; i < l2.getNumPoints() - 1; i++) {
      merged[i + l1.getNumPoints()]=l2.getCoordinateN(i + 1);
    }
  }
 else   if (l2.getCoordinateN(l2.getNumPoints() - 1).equals(l1.getCoordinateN(0))) {
    for (int i=0; i < l2.getNumPoints(); i++) {
      merged[i]=l2.getCoordinateN(i);
    }
    for (int i=0; i < l1.getNumPoints() - 1; i++) {
      merged[i + l2.getNumPoints()]=l1.getCoordinateN(i + 1);
    }
  }
 else   if (l1.getCoordinateN(l1.getNumPoints() - 1).equals(l2.getCoordinateN(l2.getNumPoints() - 1))) {
    for (int i=0; i < l1.getNumPoints(); i++) {
      merged[i]=l1.getCoordinateN(i);
    }
    for (int i=0; i < l2.getNumPoints() - 1; i++) {
      merged[i + l1.getNumPoints()]=l2.getCoordinateN(l2.getNumPoints() - 2 - i);
    }
  }
 else   if (l1.getCoordinateN(0).equals(l2.getCoordinateN(0))) {
    for (int i=0; i < l2.getNumPoints(); i++) {
      merged[i]=l2.getCoordinateN(l2.getNumPoints() - 1 - i);
    }
    for (int i=0; i < l1.getNumPoints() - 1; i++) {
      merged[i + l2.getNumPoints()]=l1.getCoordinateN(i + 1);
    }
  }
 else   return (null);
  return (gf().createLineString(merged));
}
