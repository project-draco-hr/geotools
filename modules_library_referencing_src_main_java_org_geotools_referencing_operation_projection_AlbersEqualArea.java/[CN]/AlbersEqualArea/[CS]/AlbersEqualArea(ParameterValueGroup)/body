{
  super(parameters);
  final Collection<GeneralParameterDescriptor> expected=getParameterDescriptors().descriptors();
  phi1=doubleValue(expected,Provider.STANDARD_PARALLEL_1,parameters);
  ensureLatitudeInRange(Provider.STANDARD_PARALLEL_1,phi1,true);
  phi2=doubleValue(expected,Provider.STANDARD_PARALLEL_2,parameters);
  if (Double.isNaN(phi2)) {
    phi2=phi1;
  }
  ensureLatitudeInRange(Provider.STANDARD_PARALLEL_2,phi2,true);
  if (abs(phi1 + phi2) < EPSILON) {
    throw new IllegalArgumentException(Errors.format(ErrorKeys.ANTIPODE_LATITUDES_$2,new Latitude(toDegrees(phi1)),new Latitude(toDegrees(phi2))));
  }
  double sinphi=sin(phi1);
  double cosphi=cos(phi1);
  double n=sinphi;
  boolean secant=(abs(phi1 - phi2) >= EPSILON);
  if (isSpherical) {
    if (secant) {
      n=0.5 * (n + sin(phi2));
    }
    c=cosphi * cosphi + n * 2 * sinphi;
    rho0=sqrt(c - n * 2 * sin(latitudeOfOrigin)) / n;
    ec=Double.NaN;
  }
 else {
    double m1=msfn(sinphi,cosphi);
    double q1=qsfn(sinphi);
    if (secant) {
      sinphi=sin(phi2);
      cosphi=cos(phi2);
      double m2=msfn(sinphi,cosphi);
      double q2=qsfn(sinphi);
      n=(m1 * m1 - m2 * m2) / (q2 - q1);
    }
    c=m1 * m1 + n * q1;
    rho0=sqrt(c - n * qsfn(sin(latitudeOfOrigin))) / n;
    ec=1.0 - .5 * (1.0 - excentricitySquared) * log((1.0 - excentricity) / (1.0 + excentricity)) / excentricity;
  }
  this.n=n;
}
