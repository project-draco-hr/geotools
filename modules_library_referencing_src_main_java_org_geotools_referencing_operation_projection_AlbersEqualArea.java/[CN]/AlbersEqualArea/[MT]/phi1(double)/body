{
  final double tone_es=1 - excentricitySquared;
  double phi=asin(0.5 * qs);
  if (excentricity < EPSILON) {
    return phi;
  }
  for (int i=0; i < MAXIMUM_ITERATIONS; i++) {
    final double sinpi=sin(phi);
    final double cospi=cos(phi);
    final double con=excentricity * sinpi;
    final double com=1.0 - con * con;
    final double dphi=0.5 * com * com / cospi * (qs / tone_es - sinpi / com + 0.5 / excentricity * log((1. - con) / (1. + con)));
    phi+=dphi;
    if (abs(dphi) <= ITERATION_TOLERANCE) {
      return phi;
    }
  }
  throw new ProjectionException(ErrorKeys.NO_CONVERGENCE);
}
