{
  y=rho0 - y;
  double rho=hypot(x,y);
  if (rho > EPSILON) {
    if (n < 0.0) {
      rho=-rho;
      x=-x;
      y=-y;
    }
    x=atan2(x,y) / n;
    y=rho * n;
    if (isSpherical) {
      y=(c - y * y) / (n * 2);
      if (abs(y) <= 1.0) {
        y=asin(y);
      }
 else {
        y=(y < 0.0) ? -PI / 2.0 : PI / 2.0;
      }
    }
 else {
      y=(c - y * y) / n;
      if (abs(ec - abs(y)) > EPSILON) {
        y=phi1(y);
      }
 else {
        y=(y < 0.0) ? -PI / 2.0 : PI / 2.0;
      }
    }
  }
 else {
    x=0.0;
    y=n > 0.0 ? PI / 2.0 : -PI / 2.0;
  }
  if (ptDst != null) {
    ptDst.setLocation(x,y);
    return ptDst;
  }
  return new Point2D.Double(x,y);
}
