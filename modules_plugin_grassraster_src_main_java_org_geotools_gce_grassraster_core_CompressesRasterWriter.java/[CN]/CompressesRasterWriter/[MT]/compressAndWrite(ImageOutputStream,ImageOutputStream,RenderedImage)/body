{
  int numberofbytes=outputToDiskType * 4;
  int dataWindowCols=dataWindow.getCols();
  int dataWindowRows=dataWindow.getRows();
  byte[] rowAsBytes=new byte[dataWindowCols * numberofbytes];
  ByteBuffer rowAsByteBuffer=ByteBuffer.wrap(rowAsBytes);
  int numberOfValuesPerRow=dataWindowCols;
  int rest=numberOfValuesPerRow % 8;
  int paddings=0;
  if (rest != 0) {
    paddings=8 - rest;
  }
  BitSet nullbits=new BitSet(numberOfValuesPerRow + paddings);
  int height=renderedImage.getHeight();
  int width=renderedImage.getWidth();
  RandomIter iterator=RandomIterFactory.create(renderedImage,new Rectangle(0,0,width,height));
  int k=0;
  monitor.started();
  monitor.setTask(new SimpleInternationalString("Writing map to disk: " + mapName));
  float progress=0;
  for (int i=0; i < dataWindowRows; i++) {
    for (int j=0; j < dataWindowCols; j++) {
      double value=iterator.getSampleDouble(j,i,0);
      if (Double.isNaN(value) || value == novalue) {
        if (numberofbytes == 8) {
          rowAsByteBuffer.putDouble(0.0);
        }
 else {
          rowAsByteBuffer.putFloat(0f);
        }
        nullbits.set(k);
        k++;
      }
 else {
        if (value < range[0])         range[0]=value;
        if (value > range[1])         range[1]=value;
        if (numberofbytes == 8) {
          rowAsByteBuffer.putDouble(value);
        }
 else {
          rowAsByteBuffer.putFloat((float)value);
        }
        k++;
      }
    }
    int l=0;
    byte[] bytearray=new byte[(numberOfValuesPerRow + paddings) / 8];
    for (int e=0; e < (numberOfValuesPerRow + paddings) / 8; e++) {
      bytearray[e]=0;
      for (int f=0; f < 8; f++) {
        if (nullbits.get(l)) {
          bytearray[e]+=(byte)Math.pow(2.0,(double)(7 - f));
        }
        l++;
      }
    }
    theCreatedNullFile.write(bytearray);
    nullbits.clear();
    k=0;
    byte[] output=new byte[rowAsBytes.length * 2];
    Deflater compresser=new Deflater();
    compresser.setInput(rowAsBytes);
    compresser.finish();
    int compressedDataLength=compresser.deflate(output);
    theCreatedFile.seek(pointerInFilePosition);
    theCreatedFile.write(49);
    theCreatedFile.write(output,0,compressedDataLength);
    rowaddresses[i + 1]=pointerInFilePosition=theCreatedFile.getStreamPosition();
    rowAsByteBuffer.clear();
    progress=(float)(progress + 100f * i / dataWindowRows);
    monitor.progress(progress);
  }
  monitor.complete();
  theCreatedFile.seek(1);
  for (int i=0; i < rowaddresses.length; i++) {
    theCreatedFile.writeInt((int)rowaddresses[i]);
  }
}
