{
  boolean newLayout=il == null;
  ImageLayout layout=newLayout ? new ImageLayout() : (ImageLayout)il.clone();
  int numSources=sources.size();
  int destNumBands=totalNumBands(sources);
  int destDataType=DataBuffer.TYPE_BYTE;
  RenderedImage srci=(RenderedImage)sources.get(0);
  boolean intersect=true;
  Rectangle destBounds=null;
  if (layout.isValid(ImageLayout.MIN_X_MASK) && layout.isValid(ImageLayout.MIN_Y_MASK) && layout.isValid(ImageLayout.WIDTH_MASK)&& layout.isValid(ImageLayout.HEIGHT_MASK)) {
    destBounds=new Rectangle(layout.getMinX(null),layout.getMinY(null),layout.getWidth(null),layout.getHeight(null));
    intersect=false;
    if (destBounds.isEmpty()) {
      destBounds=null;
      intersect=true;
    }
  }
  if (intersect) {
    destBounds=new Rectangle(srci.getMinX(),srci.getMinY(),srci.getWidth(),srci.getHeight());
  }
  for (int i=0; i < numSources; i++) {
    srci=(RenderedImage)sources.get(i);
    if (intersect) {
      destBounds=destBounds.intersection(new Rectangle(srci.getMinX(),srci.getMinY(),srci.getWidth(),srci.getHeight()));
    }
    int typei=srci.getSampleModel().getTransferType();
    destDataType=typei > destDataType ? typei : destDataType;
  }
  if (intersect) {
    layout.setMinX(destBounds.x);
    layout.setMinY(destBounds.y);
    layout.setWidth(destBounds.width);
    layout.setHeight(destBounds.height);
  }
  SampleModel sm=layout.getSampleModel((RenderedImage)sources.get(0));
  if (sm.getNumBands() < destNumBands) {
    int[] destOffsets=new int[destNumBands];
    for (int i=0; i < destNumBands; i++) {
      destOffsets[i]=i;
    }
    int destTileWidth=sm.getWidth();
    int destTileHeight=sm.getHeight();
    if (layout.isValid(ImageLayout.TILE_WIDTH_MASK)) {
      destTileWidth=layout.getTileWidth((RenderedImage)sources.get(0));
    }
    if (layout.isValid(ImageLayout.TILE_HEIGHT_MASK)) {
      destTileHeight=layout.getTileHeight((RenderedImage)sources.get(0));
    }
    sm=RasterFactory.createComponentSampleModel(sm,destDataType,destTileWidth,destTileHeight,destNumBands);
    layout.setSampleModel(sm);
  }
  ColorModel cm=layout.getColorModel(null);
  if (cm != null && !JDKWorkarounds.areCompatibleDataModels(sm,cm)) {
    layout.unsetValid(ImageLayout.COLOR_MODEL_MASK);
  }
  if ((cm == null || !cm.hasAlpha()) && sm instanceof ComponentSampleModel) {
    cm=getDefaultColorModel(sm);
    layout.setColorModel(cm);
  }
  return layout;
}
