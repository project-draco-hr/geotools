{
  if (child11 == null)   return new Element[0];
switch (child11.getGrouping()) {
case ElementGrouping.ALL:
    return ((All)child11).getElements();
case ElementGrouping.ANY:
  return null;
case ElementGrouping.CHOICE:
ElementGrouping[] children=((Choice)child11).getChildren();
List l=new LinkedList();
for (int i=0; i < children.length; i++) {
Element[] t=getChildElements(children[i]);
if (t != null) {
l.addAll(Arrays.asList(t));
}
}
return (l.size() > 0) ? (Element[])l.toArray(new Element[l.size()]) : null;
case ElementGrouping.ELEMENT:
return new Element[]{(Element)child11};
case ElementGrouping.GROUP:
ElementGrouping c=((Group)child11).getChild();
if (c == null) return new Element[0];
return getChildElements(c);
case ElementGrouping.SEQUENCE:
children=((Sequence)child11).getChildren();
l=new LinkedList();
if (children != null) {
for (int i=0; i < children.length; i++) {
Element[] t=getChildElements(children[i]);
if (t != null) {
l.addAll(Arrays.asList(t));
}
}
}
return (l.size() > 0) ? (Element[])l.toArray(new Element[l.size()]) : null;
}
return null;
}
