{
  Geometry clipped=null;
  if (clipper != null) {
    clipped=clipper.clip(geom,true);
  }
 else {
    if (geom.getEnvelopeInternal().intersects(clip.getEnvelopeInternal())) {
      clipped=clip.intersection(geom);
    }
  }
  if (clipped == null || clipped.getNumGeometries() == 0) {
    return null;
  }
  if (Point.class.isAssignableFrom(target) || MultiPoint.class.isAssignableFrom(target) || GeometryCollection.class.equals(target)) {
    return clipped;
  }
 else   if (MultiLineString.class.isAssignableFrom(target)) {
    final List<LineString> geoms=new ArrayList<LineString>();
    clipped.apply(new GeometryComponentFilter(){
      @Override public void filter(      Geometry geom){
        if (geom instanceof LineString) {
          geoms.add((LineString)geom);
        }
      }
    }
);
    LineString[] lsArray=(LineString[])geoms.toArray(new LineString[geoms.size()]);
    return geom.getFactory().createMultiLineString(lsArray);
  }
 else   if (MultiPolygon.class.isAssignableFrom(target)) {
    final List<Polygon> geoms=new ArrayList<Polygon>();
    clipped.apply(new GeometryComponentFilter(){
      @Override public void filter(      Geometry geom){
        if (geom instanceof Polygon) {
          geoms.add((Polygon)geom);
        }
      }
    }
);
    Polygon[] lsArray=(Polygon[])geoms.toArray(new Polygon[geoms.size()]);
    return geom.getFactory().createMultiPolygon(lsArray);
  }
 else {
    throw new RuntimeException("Unrecognized target type " + target.getCanonicalName());
  }
}
