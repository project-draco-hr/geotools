{
  float f_sx0=Float.MAX_VALUE;
  float f_sy0=Float.MAX_VALUE;
  float f_sx1=-Float.MAX_VALUE;
  float f_sy1=-Float.MAX_VALUE;
  for (int i=0; i < 4; i++) {
    float px=points[i * 2];
    float py=points[i * 2 + 1];
    f_sx0=Math.min(f_sx0,px);
    f_sy0=Math.min(f_sy0,py);
    f_sx1=Math.max(f_sx1,px);
    f_sy1=Math.max(f_sy1,py);
  }
  int s_x0=0, s_y0=0, s_x1=0, s_y1=0;
  if (interp instanceof InterpolationNearest) {
    s_x0=(int)Math.floor(f_sx0);
    s_y0=(int)Math.floor(f_sy0);
    s_x1=(int)Math.ceil(f_sx1 + 0.5);
    s_y1=(int)Math.ceil(f_sy1 + 0.5);
  }
 else {
    s_x0=(int)Math.floor(f_sx0 - 0.5);
    s_y0=(int)Math.floor(f_sy0 - 0.5);
    s_x1=(int)Math.ceil(f_sx1);
    s_y1=(int)Math.ceil(f_sy1);
  }
  return new Rectangle(s_x0,s_y0,s_x1 - s_x0,s_y1 - s_y0);
}
