{
  double minimum=0;
  double maximum=1;
  final int categoryCount=categories.length;
  if (categoryCount != 0) {
    minimum=categories[0].minimum;
    for (int i=categoryCount; --i >= 0; ) {
      final double value=categories[i].maximum;
      if (!Double.isNaN(value)) {
        maximum=value;
        break;
      }
    }
  }
  if (type != DataBuffer.TYPE_BYTE && type != DataBuffer.TYPE_USHORT) {
    final int transparency=Transparency.OPAQUE;
    final ColorSpace colors=new ScaledColorSpace(visibleBand,numBands,minimum,maximum);
    if (true) {
      return new ComponentColorModel(colors,false,false,transparency,type);
    }
    if (false) {
      return new FloatDoubleColorModel(colors,false,false,transparency,type);
    }
    if (false) {
      return new ComponentColorModelJAI(colors,false,false,transparency,type);
    }
    return RasterFactory.createComponentColorModel(type,colors,false,false,transparency);
  }
  if (numBands == 1 && categoryCount == 0) {
    final ColorSpace cs=ColorSpace.getInstance(ColorSpace.CS_GRAY);
    final int[] nBits={DataBuffer.getDataTypeSize(type)};
    return new ComponentColorModel(cs,nBits,false,true,Transparency.OPAQUE,type);
  }
  final int mapSize=((int)Math.round(maximum)) + 1;
  final int[] ARGB=new int[mapSize];
  for (int i=0; i < categoryCount; i++) {
    final Category category=categories[i];
    ColorUtilities.expand(category.getColors(),ARGB,(int)Math.round(category.minimum),(int)Math.round(category.maximum) + 1);
  }
  return ColorUtilities.getIndexColorModel(ARGB,numBands,visibleBand);
}
