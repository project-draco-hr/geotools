{
  String coverage=null;
  if (props.containsKey(Utils.ImageCollectionProperties.COVERAGE_NAME)) {
    final String coverageName=(String)props.get(Utils.ImageCollectionProperties.COVERAGE_NAME);
    if (coverageName != null && coverageName.trim().length() > 0) {
      coverage=coverageName;
    }
  }
  if (props.containsKey(Utils.ImageCollectionProperties.DEFAULT_PATH)) {
    final String defaultPath=(String)props.get(Utils.ImageCollectionProperties.DEFAULT_PATH);
    if (defaultPath != null && defaultPath.trim().length() > 0) {
      defaultValues.path=defaultPath;
    }
  }
  if (props.containsKey(Utils.ImageCollectionProperties.EXPAND_RGB)) {
    final String expand=(String)props.get(Utils.ImageCollectionProperties.EXPAND_RGB);
    if (expand != null && expand.trim().length() > 0) {
      this.expandMe=Boolean.parseBoolean(expand);
    }
  }
  if (props.containsKey(Utils.ImageCollectionProperties.TIME_BETWEEN_CHECKS)) {
    final String timeCheck=(String)props.get(Utils.ImageCollectionProperties.TIME_BETWEEN_CHECKS);
    if (timeCheck != null && timeCheck.trim().length() > 0) {
      try {
        defaultValues.timeBetweenChecks=Long.parseLong(timeCheck) * 1000;
      }
 catch (      NumberFormatException nfe) {
        if (LOGGER.isLoggable(Level.WARNING)) {
          LOGGER.log(Level.WARNING,"Unable to parse the specified time interval check.",nfe);
        }
      }
    }
  }
  if (props.containsKey(Utils.ImageCollectionProperties.MAX_WIDTH)) {
    final String maxW=(String)props.get(Utils.ImageCollectionProperties.MAX_WIDTH);
    if (maxW != null && maxW.trim().length() > 0) {
      try {
        defaultValues.maxWidth=Integer.parseInt(maxW);
      }
 catch (      NumberFormatException nfe) {
        if (LOGGER.isLoggable(Level.WARNING)) {
          LOGGER.log(Level.WARNING,"Unable to parse the specified Max Width property.",nfe);
        }
      }
    }
  }
  if (props.containsKey(Utils.ImageCollectionProperties.MAX_HEIGHT)) {
    final String maxH=(String)props.get(Utils.ImageCollectionProperties.MAX_HEIGHT);
    if (maxH != null && maxH.trim().length() > 0) {
      try {
        defaultValues.maxHeight=Integer.parseInt(maxH);
      }
 catch (      NumberFormatException nfe) {
        if (LOGGER.isLoggable(Level.WARNING)) {
          LOGGER.log(Level.WARNING,"Unable to parse the specified Max Height property.",nfe);
        }
      }
    }
  }
  return coverage;
}
