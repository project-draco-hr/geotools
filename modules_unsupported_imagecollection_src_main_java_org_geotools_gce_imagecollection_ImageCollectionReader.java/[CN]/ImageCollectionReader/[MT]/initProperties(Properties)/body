{
  String coverage=null;
  if (props.containsKey(Utils.ImageCollectionProperties.COVERAGE_NAME)) {
    final String coverageName=(String)props.get(Utils.ImageCollectionProperties.COVERAGE_NAME);
    if (coverageName != null && coverageName.trim().length() > 0) {
      coverage=coverageName;
    }
  }
  if (props.containsKey(Utils.ImageCollectionProperties.DEFAULT_PATH)) {
    final String defaultPath=(String)props.get(Utils.ImageCollectionProperties.DEFAULT_PATH);
    if (defaultPath != null && defaultPath.trim().length() > 0) {
      defaultValues.path=defaultPath;
    }
  }
  if (props.containsKey(Utils.ImageCollectionProperties.EXPAND_RGB)) {
    final String expand=(String)props.get(Utils.ImageCollectionProperties.EXPAND_RGB);
    if (expand != null && expand.trim().length() > 0) {
      this.expandMe=Boolean.parseBoolean(expand);
    }
  }
  if (props.containsKey(Utils.ImageCollectionProperties.TIME_BETWEEN_CHECKS)) {
    final String timeCheck=(String)props.get(Utils.ImageCollectionProperties.TIME_BETWEEN_CHECKS);
    if (timeCheck != null && timeCheck.trim().length() > 0) {
      try {
        defaultValues.timeBetweenChecks=Long.parseLong(timeCheck) * 1000;
      }
 catch (      NumberFormatException nfe) {
        if (LOGGER.isLoggable(Level.WARNING)) {
          LOGGER.log(Level.WARNING,"Unable to parse the specified time interval check.",nfe);
        }
      }
    }
  }
  if (props.containsKey(Utils.ImageCollectionProperties.MAX_WIDTH)) {
    final String maxW=(String)props.get(Utils.ImageCollectionProperties.MAX_WIDTH);
    if (maxW != null && maxW.trim().length() > 0) {
      try {
        defaultValues.maxWidth=Integer.parseInt(maxW);
      }
 catch (      NumberFormatException nfe) {
        if (LOGGER.isLoggable(Level.WARNING)) {
          LOGGER.log(Level.WARNING,"Unable to parse the specified Max Width property.",nfe);
        }
      }
    }
  }
  if (props.containsKey(Utils.ImageCollectionProperties.MAX_HEIGHT)) {
    final String maxH=(String)props.get(Utils.ImageCollectionProperties.MAX_HEIGHT);
    if (maxH != null && maxH.trim().length() > 0) {
      try {
        defaultValues.maxHeight=Integer.parseInt(maxH);
      }
 catch (      NumberFormatException nfe) {
        if (LOGGER.isLoggable(Level.WARNING)) {
          LOGGER.log(Level.WARNING,"Unable to parse the specified Max Height property.",nfe);
        }
      }
    }
  }
  if (props.containsKey(Utils.ImageCollectionProperties.EPSG_CODE)) {
    final String epsgCode=(String)props.get(Utils.ImageCollectionProperties.EPSG_CODE);
    if (epsgCode != null && epsgCode.trim().length() > 0) {
      try {
        defaultValues.epsgCode=Integer.parseInt(epsgCode);
        if (defaultValues.epsgCode != Utils.IMAGE_EPSG) {
          defaultValues.isGeoSpatial=true;
          CoordinateReferenceSystem crs=CRS.decode("EPSG:" + epsgCode);
          boolean envelopeIsSet=false;
          String env=null;
          if (props.containsKey(Utils.ImageCollectionProperties.ENVELOPE)) {
            env=(String)props.get(Utils.ImageCollectionProperties.ENVELOPE);
            final String coords[]=env.trim().split(" ");
            if (coords.length == 2) {
              final String coordsMin[]=coords[0].trim().split(",");
              final String coordsMax[]=coords[1].trim().split(",");
              if (coordsMin.length == 2 && coordsMax.length == 2) {
                GeneralEnvelope envelope=new GeneralEnvelope(new double[]{Double.parseDouble(coordsMin[0].trim()),Double.parseDouble(coordsMin[1].trim())},new double[]{Double.parseDouble(coordsMax[0].trim()),Double.parseDouble(coordsMax[1].trim())});
                envelope.setCoordinateReferenceSystem(crs);
                defaultValues.envelope=envelope;
                envelopeIsSet=true;
              }
            }
          }
          if ((!envelopeIsSet) && LOGGER.isLoggable(Level.WARNING)) {
            LOGGER.log(Level.WARNING,"Unable to parse the specified envelope. minx,miny,maxx,maxy coordinates are needed: " + env);
          }
        }
      }
 catch (      NumberFormatException nfe) {
        if (LOGGER.isLoggable(Level.WARNING)) {
          LOGGER.log(Level.WARNING,"Unable to parse the specified EPSG code: " + epsgCode,nfe);
        }
      }
catch (      NoSuchAuthorityCodeException e) {
        if (LOGGER.isLoggable(Level.WARNING)) {
          LOGGER.log(Level.WARNING,"Unable to parse the specified EPSG code: " + epsgCode,e);
        }
      }
catch (      FactoryException e) {
        if (LOGGER.isLoggable(Level.WARNING)) {
          LOGGER.log(Level.WARNING,"Unable to parse the specified EPSG code: " + epsgCode,e);
        }
      }
    }
  }
  return coverage;
}
