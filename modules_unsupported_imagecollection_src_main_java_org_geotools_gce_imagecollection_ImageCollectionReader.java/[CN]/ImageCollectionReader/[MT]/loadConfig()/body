{
  final String propertiesPath=rootPath + Utils.CONFIG_FILE;
  final File propertiesFile=new File(propertiesPath);
  String coverage=null;
  final boolean hasPropertiesFile=Utils.checkFileReadable(propertiesFile);
  if (hasPropertiesFile) {
    Properties props=new Properties();
    FileInputStream fis=null;
    try {
      fis=new FileInputStream(propertiesFile);
      props.load(fis);
      coverage=initProperties(props);
    }
 catch (    FileNotFoundException e) {
      if (LOGGER.isLoggable(Level.WARNING)) {
        LOGGER.log(Level.WARNING,"Unable to parse the config file: " + propertiesPath,e);
      }
    }
catch (    IOException e) {
      if (LOGGER.isLoggable(Level.WARNING)) {
        LOGGER.log(Level.WARNING,"Unable to parse the config file: " + propertiesPath,e);
      }
    }
 finally {
      if (fis != null) {
        try {
          fis.close();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  if (coverage == null) {
    coverageName=FilenameUtils.getBaseName(FilenameUtils.getFullPathNoEndSeparator(rootPath));
  }
 else {
    coverageName=coverage;
  }
  if (defaultValues.path == null) {
    final File parent=new File(rootPath);
    final List<File> files;
    if (parent.exists() && parent.isDirectory() && parent.canRead()) {
      files=Utils.getFileList(parent,Utils.FILE_FILTER,true);
      if (!files.isEmpty()) {
        String path=files.get(0).getAbsolutePath();
        defaultValues.path=path;
        if (path.startsWith(rootPath)) {
          defaultValues.path=path.substring(rootPath.length());
        }
      }
    }
  }
  if (!hasPropertiesFile) {
    updatePropertiesFile(propertiesFile);
  }
}
