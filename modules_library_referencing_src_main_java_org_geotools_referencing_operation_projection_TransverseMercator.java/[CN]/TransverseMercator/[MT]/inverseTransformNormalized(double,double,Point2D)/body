{
  double phi=inv_mlfn(ml0 + y);
  if (abs(phi) >= PI / 2) {
    y=y < 0.0 ? -(PI / 2) : (PI / 2);
    x=0.0;
  }
 else {
    double sinphi=sin(phi);
    double cosphi=cos(phi);
    double t=(abs(cosphi) > EPSILON) ? sinphi / cosphi : 0.0;
    double n=esp * cosphi * cosphi;
    double con=1.0 - excentricitySquared * sinphi * sinphi;
    double d=x * sqrt(con);
    con*=t;
    t*=t;
    double ds=d * d;
    y=phi - (con * ds / (1.0 - excentricitySquared)) * FC2 * (1.0 - ds * FC4 * (5.0 + t * (3.0 - 9.0 * n) + n * (1.0 - 4 * n) - ds * FC6 * (61.0 + t * (90.0 - 252.0 * n + 45.0 * t) + 46.0 * n - ds * FC8 * (1385.0 + t * (3633.0 + t * (4095.0 + 1574.0 * t))))));
    x=d * (FC1 - ds * FC3 * (1.0 + 2.0 * t + n - ds * FC5 * (5.0 + t * (28.0 + 24 * t + 8.0 * n) + 6.0 * n - ds * FC7 * (61.0 + t * (662.0 + t * (1320.0 + 720.0 * t)))))) / cosphi;
  }
  if (ptDst != null) {
    ptDst.setLocation(x,y);
    return ptDst;
  }
  return new Point2D.Double(x,y);
}
