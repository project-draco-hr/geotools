{
  final GridToEnvelopeMapper mapper=new GridToEnvelopeMapper();
  assertTrue(mapper.isAutomatic(GridToEnvelopeMapper.SWAP_XY));
  assertTrue(mapper.isAutomatic(GridToEnvelopeMapper.REVERSE_AXIS));
  assertFalse(mapper.getSwapXY());
  assertNull(mapper.getReverseAxis());
  try {
    mapper.getGridRange();
    fail();
  }
 catch (  IllegalStateException e) {
  }
  try {
    mapper.getEnvelope();
    fail();
  }
 catch (  IllegalStateException e) {
  }
  try {
    mapper.createTransform();
    fail();
  }
 catch (  IllegalStateException e) {
  }
  Point2D.Double point=new Point2D.Double();
  GeneralGridEnvelope gridRange;
  GeneralEnvelope envelope;
  gridRange=new GeneralGridEnvelope(new int[]{10,20},new int[]{110,220},false);
  envelope=new GeneralEnvelope(new double[]{1,4,6},new double[]{11,44,66});
  mapper.setGridRange(gridRange);
  assertSame(gridRange,mapper.getGridRange());
  try {
    mapper.getEnvelope();
    fail();
  }
 catch (  IllegalStateException e) {
  }
  try {
    mapper.setEnvelope(envelope);
    fail();
  }
 catch (  MismatchedDimensionException e) {
  }
  try {
    new GridToEnvelopeMapper(gridRange,envelope);
    fail();
  }
 catch (  MismatchedDimensionException e) {
  }
  envelope=envelope.getSubEnvelope(0,2);
  mapper.setEnvelope(envelope);
  assertSame(envelope,mapper.getEnvelope());
  assertFalse(mapper.getSwapXY());
  boolean[] reverse=mapper.getReverseAxis();
  assertNotNull(reverse);
  assertEquals(2,reverse.length);
  assertFalse(reverse[0]);
  assertTrue(reverse[1]);
  final AffineTransform tr1=mapper.createAffineTransform();
  assertEquals(AffineTransform.TYPE_GENERAL_SCALE | AffineTransform.TYPE_TRANSLATION | AffineTransform.TYPE_FLIP,tr1.getType());
  assertEquals(0.1,tr1.getScaleX(),EPS);
  assertEquals(-0.2,tr1.getScaleY(),EPS);
  assertEquals(0.05,tr1.getTranslateX(),EPS);
  assertEquals(47.9,tr1.getTranslateY(),EPS);
  assertSame("Transform should be cached",tr1,mapper.createAffineTransform());
  point.x=10 - 0.5;
  point.y=20 - 0.5;
  assertSame(point,tr1.transform(point,point));
  assertEquals(1,point.x,EPS);
  assertEquals(44,point.y,EPS);
  envelope=envelope.clone();
  envelope.setCoordinateReferenceSystem(DefaultGeographicCRS.WGS84);
  mapper.setEnvelope(envelope);
  assertFalse(mapper.getSwapXY());
  assertTrue(Arrays.equals(new boolean[]{false,true},mapper.getReverseAxis()));
  final AffineTransform tr2=mapper.createAffineTransform();
  assertNotSame("Should be a new transform",tr1,tr2);
  assertEquals(AffineTransform.TYPE_GENERAL_SCALE | AffineTransform.TYPE_TRANSLATION | AffineTransform.TYPE_FLIP,tr2.getType());
  assertEquals(0.1,tr2.getScaleX(),EPS);
  assertEquals(-0.2,tr2.getScaleY(),EPS);
  assertSame("Transform should be cached",tr2,mapper.createAffineTransform());
  point.x=10 - 0.5;
  point.y=20 - 0.5;
  assertSame(point,tr2.transform(point,point));
  assertEquals(1,point.x,EPS);
  assertEquals(44,point.y,EPS);
  envelope=envelope.clone();
  envelope.setCoordinateReferenceSystem(new DefaultGeographicCRS("WGS84",DefaultGeodeticDatum.WGS84,new DefaultEllipsoidalCS("WGS84",DefaultCoordinateSystemAxis.LATITUDE,DefaultCoordinateSystemAxis.LONGITUDE)));
  mapper.setEnvelope(envelope);
  assertTrue(mapper.getSwapXY());
  assertTrue(Arrays.equals(new boolean[]{true,false},mapper.getReverseAxis()));
  final AffineTransform tr3=mapper.createAffineTransform();
  assertNotSame("Should be a new transform",tr2,tr3);
  assertEquals(AffineTransform.TYPE_QUADRANT_ROTATION | AffineTransform.TYPE_GENERAL_SCALE | AffineTransform.TYPE_TRANSLATION,tr3.getType());
  assertEquals(0.0,tr3.getScaleX(),EPS);
  assertEquals(0.0,tr3.getScaleY(),EPS);
  assertEquals(-0.05,tr3.getShearX(),EPS);
  assertEquals(0.4,tr3.getShearY(),EPS);
  assertEquals(0.05,XAffineTransform.getScaleX0(tr3),EPS);
  assertEquals(0.4,XAffineTransform.getScaleY0(tr3),EPS);
  assertSame("Transform should be cached",tr3,mapper.createAffineTransform());
  point.x=10 - 0.5;
  point.y=20 - 0.5;
  assertSame(point,tr3.transform(point,point));
  assertEquals(4,point.y,EPS);
  assertEquals(11,point.x,EPS);
  final AffineTransform tr3i=tr3.createInverse();
  assertEquals(0.0,tr3i.getScaleX(),EPS);
  assertEquals(0.0,tr3i.getScaleY(),EPS);
  assertEquals(2.5,tr3i.getShearX(),EPS);
  assertEquals(-20,tr3i.getShearY(),EPS);
  assertEquals(2.5,XAffineTransform.getScaleX0(tr3i),EPS);
  assertEquals(20,XAffineTransform.getScaleY0(tr3i),EPS);
  assertTrue(mapper.isAutomatic(GridToEnvelopeMapper.SWAP_XY));
  assertTrue(mapper.isAutomatic(GridToEnvelopeMapper.REVERSE_AXIS));
  assertTrue(mapper.getSwapXY());
  mapper.setSwapXY(false);
  assertFalse(mapper.isAutomatic(GridToEnvelopeMapper.SWAP_XY));
  assertTrue(mapper.isAutomatic(GridToEnvelopeMapper.REVERSE_AXIS));
  assertFalse(mapper.getSwapXY());
  assertNotSame(tr3,mapper.createAffineTransform());
  mapper.setReverseAxis(null);
  mapper.reverseAxis(1);
  assertFalse(mapper.isAutomatic(GridToEnvelopeMapper.SWAP_XY));
  assertFalse(mapper.isAutomatic(GridToEnvelopeMapper.REVERSE_AXIS));
  assertEquals(tr1,mapper.createAffineTransform());
}
