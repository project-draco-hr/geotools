{
  System.out.println("   testCubicNumericInterpolation");
  setupParameters(data,values);
  parameters.add(ff2.literal(InterpolateFunction.METHOD_NUMERIC));
  parameters.add(ff2.literal(InterpolateFunction.MODE_CUBIC));
  Function fn=finder.findFunction("interpolate",parameters);
  double t=0.1;
  Double result;
  double expected;
  for (int i=2; i < data.length - 2; i++) {
    double testValue=data[i - 1] + t * (data[i] - data[i - 1]);
    result=fn.evaluate(feature(Double.valueOf(testValue)),Double.class);
    expected=cubic(testValue,new double[]{data[i - 2],data[i - 1],data[i],data[i + 1]},new double[]{values[i - 2],values[i - 1],values[i],values[i + 1]});
    assertEquals(expected,result,TOL);
  }
  result=fn.evaluate(feature(Double.valueOf(data[0] - 10)),Double.class);
  assertEquals(values[0],result,TOL);
  result=fn.evaluate(feature(Double.valueOf(data[data.length - 1] + 10)),Double.class);
  assertEquals(values[values.length - 1],result,TOL);
}
