{
  ParameterValueGroup param=processor.getOperation("Mosaic").getParameters();
  List<GridCoverage2D> sources=new ArrayList<GridCoverage2D>(2);
  sources.add(coverage1);
  sources.add(coverage2);
  param.parameter("Sources").setValue(sources);
  Hints hints=new Hints();
  Assert.assertTrue(!hints.containsKey(JAI.KEY_IMAGE_LAYOUT));
  ImageLayout il=new ImageLayout();
  hints.put(JAI.KEY_IMAGE_LAYOUT,il);
  il.setTileHeight(TILE_SIZE);
  il.setTileWidth(TILE_SIZE);
  GridCoverage2D mosaic=(GridCoverage2D)processor.doOperation(param,hints);
  Envelope2D expected=coverage1.getEnvelope2D();
  expected.include(coverage2.getEnvelope2D());
  Envelope2D actual=mosaic.getEnvelope2D();
  assertEqualBBOX(expected,actual);
  RenderedImage renderedImage=mosaic.getRenderedImage();
  Assert.assertTrue(renderedImage.getTileHeight() == TILE_SIZE);
  Assert.assertTrue(renderedImage.getTileWidth() == TILE_SIZE);
  double initialRes=calculateResolution(coverage1);
  double finalRes=calculateResolution(mosaic);
  double percentual=Math.abs(initialRes - finalRes) / initialRes;
  Assert.assertTrue(percentual < TOLERANCE);
  DirectPosition point=new DirectPosition2D(mosaic.getCoordinateReferenceSystem(),actual.getCenterX(),actual.getCenterY());
  double nodata=CoverageUtilities.getBackgroundValues(coverage1)[0];
  double result=((int[])mosaic.evaluate(point))[0];
  Assert.assertEquals(nodata,result,TOLERANCE);
  point=new DirectPosition2D(mosaic.getCoordinateReferenceSystem(),actual.getMinX() + finalRes,actual.getMinY() + finalRes);
  result=((int[])mosaic.evaluate(point))[0];
  Assert.assertNotEquals(nodata,result,TOLERANCE);
  Assert.assertTrue(hints.containsKey(JAI.KEY_IMAGE_LAYOUT));
  ImageLayout layout=(ImageLayout)hints.get(JAI.KEY_IMAGE_LAYOUT);
  Assert.assertTrue(!layout.isValid(ImageLayout.MIN_X_MASK));
  Assert.assertTrue(!layout.isValid(ImageLayout.MIN_Y_MASK));
  Assert.assertTrue(!layout.isValid(ImageLayout.WIDTH_MASK));
  Assert.assertTrue(!layout.isValid(ImageLayout.HEIGHT_MASK));
  Assert.assertTrue(layout.isValid(ImageLayout.TILE_HEIGHT_MASK));
  Assert.assertTrue(layout.isValid(ImageLayout.TILE_WIDTH_MASK));
  mosaic.dispose(true);
  disposeCoveragePlanarImage(mosaic);
}
