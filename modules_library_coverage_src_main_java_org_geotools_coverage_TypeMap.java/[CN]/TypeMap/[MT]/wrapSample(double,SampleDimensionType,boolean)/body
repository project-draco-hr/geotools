{
  final TypeMap map=map(type);
  int ordinal=map.size;
  if (map.real) {
    ordinal<<=16;
  }
 else   if (map.signed) {
    ordinal=-ordinal;
  }
switch (ordinal) {
case 1:
case 2:
case 4:
case -8:
{
      final byte candidate=(byte)value;
      if (candidate == value) {
        return new Byte(candidate);
      }
      if (!allowWidening)       break;
    }
case 8:
case -16:
{
    final short candidate=(short)value;
    if (candidate == value) {
      return Short.valueOf(candidate);
    }
    if (!allowWidening)     break;
  }
case 16:
case -32:
{
  final int candidate=(int)value;
  if (candidate == value) {
    return Integer.valueOf(candidate);
  }
  if (!allowWidening)   break;
}
case 32:
{
final long candidate=(long)value;
if (candidate == value) {
  return Long.valueOf(candidate);
}
if (!allowWidening) break;
}
case (32 << 16):
{
if (!allowWidening || Math.abs(value) <= Float.MAX_VALUE) {
return Float.valueOf((float)value);
}
}
case (64 << 16):
{
return Double.valueOf(value);
}
default :
{
throw new IllegalArgumentException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2,"type",type));
}
}
throw new IllegalArgumentException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2,"value",value));
}
