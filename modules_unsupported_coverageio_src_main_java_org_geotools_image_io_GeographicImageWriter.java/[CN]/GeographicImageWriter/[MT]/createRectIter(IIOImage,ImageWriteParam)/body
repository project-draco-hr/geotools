{
  Rectangle bounds;
  int[] sourceBands;
  final int sourceXSubsampling;
  final int sourceYSubsampling;
  if (parameters != null) {
    bounds=parameters.getSourceRegion();
    sourceXSubsampling=parameters.getSourceXSubsampling();
    sourceYSubsampling=parameters.getSourceYSubsampling();
    if (sourceXSubsampling != 1 || sourceYSubsampling != 1) {
      if (bounds == null) {
        if (image.hasRaster()) {
          bounds=image.getRaster().getBounds();
        }
 else {
          final RenderedImage i=image.getRenderedImage();
          bounds=new Rectangle(i.getMinX(),i.getMinY(),i.getWidth(),i.getHeight());
        }
      }
      final int xOffset=parameters.getSubsamplingXOffset();
      final int yOffset=parameters.getSubsamplingYOffset();
      bounds.x+=xOffset;
      bounds.y+=yOffset;
      bounds.width-=xOffset;
      bounds.height-=yOffset;
      bounds.width-=(bounds.width - 1) % sourceXSubsampling;
      bounds.height-=(bounds.height - 1) % sourceYSubsampling;
    }
    sourceBands=parameters.getSourceBands();
  }
 else {
    sourceBands=null;
    bounds=null;
    sourceXSubsampling=1;
    sourceYSubsampling=1;
  }
  final int numBands;
  RectIter iterator;
  if (image.hasRaster()) {
    final Raster raster=image.getRaster();
    numBands=raster.getNumBands();
    iterator=RectIterFactory.create(raster,bounds);
  }
 else {
    final RenderedImage raster=image.getRenderedImage();
    numBands=raster.getSampleModel().getNumBands();
    iterator=RectIterFactory.create(raster,bounds);
  }
  if (sourceXSubsampling == 1 && sourceYSubsampling == 1) {
    if (sourceBands == null) {
      return iterator;
    }
    if (sourceBands.length == numBands) {
      boolean identity=true;
      for (int i=0; i < numBands; i++) {
        if (sourceBands[i] != i) {
          identity=false;
          break;
        }
      }
      if (identity) {
        return iterator;
      }
    }
  }
  if (sourceBands == null) {
    sourceBands=new int[numBands];
    for (int i=0; i < numBands; i++) {
      sourceBands[i]=i;
    }
  }
  return new SubsampledRectIter(iterator,sourceXSubsampling,sourceYSubsampling,sourceBands);
}
