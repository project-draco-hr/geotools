{
  Coordinate[] coords=new Coordinate[3];
  coords[0]=new Coordinate(0,0);
  coords[1]=new Coordinate(3,0);
  coords[2]=new Coordinate(6,0);
  GeometryFactory gf=new GeometryFactory(new PrecisionModel());
  AttributeExpressionImpl expr1=new AttributeExpressionImpl(testSchema,"testGeometry");
  LineString geom=gf.createLineString(coords);
  LiteralExpressionImpl expr2=new LiteralExpressionImpl(geom);
  Disjoint disjoint=fac.disjoint(expr1,expr2);
  LOGGER.finer(disjoint.toString());
  LOGGER.finer("contains feature: " + disjoint.evaluate(testFeature));
  assertTrue(disjoint.evaluate(testFeature));
  Function function=new GeometryFunction(geom);
  disjoint=fac.disjoint(expr1,function);
  LOGGER.finer(disjoint.toString());
  LOGGER.finer("contains feature: " + disjoint.evaluate(testFeature));
  assertTrue(disjoint.evaluate(testFeature));
  disjoint=fac.disjoint(expr2,expr1);
  LOGGER.finer(disjoint.toString());
  LOGGER.finer("contains feature: " + disjoint.evaluate(testFeature));
  assertTrue(disjoint.evaluate(testFeature));
  coords[0]=new Coordinate(1,2);
  coords[1]=new Coordinate(3,0);
  coords[2]=new Coordinate(6,0);
  geom=gf.createLineString(coords);
  expr2=new LiteralExpressionImpl(geom);
  disjoint=fac.disjoint(expr1,expr2);
  LOGGER.finer(disjoint.toString());
  LOGGER.finer("contains feature: " + disjoint.evaluate(testFeature));
  assertTrue(!disjoint.evaluate(testFeature));
  expr2=new LiteralExpressionImpl(null);
  disjoint=fac.disjoint(expr1,expr2);
  LOGGER.finer(disjoint.toString());
  LOGGER.finer("contains feature: " + disjoint.evaluate(testFeature));
  assertTrue(!disjoint.evaluate(testFeature));
}
