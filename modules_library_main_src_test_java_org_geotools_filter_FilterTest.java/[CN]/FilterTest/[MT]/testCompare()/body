{
  PropertyName testAttribute=new AttributeExpressionImpl(testSchema,"testInteger");
  compareNumberRunner(testAttribute,PropertyIsEqualTo.class,false,true,false);
  compareNumberRunner(testAttribute,PropertyIsGreaterThan.class,true,false,false);
  compareNumberRunner(testAttribute,PropertyIsLessThan.class,false,false,true);
  compareNumberRunner(testAttribute,PropertyIsGreaterThanOrEqualTo.class,true,true,false);
  compareNumberRunner(testAttribute,PropertyIsLessThanOrEqualTo.class,false,true,true);
  testAttribute=new AttributeExpressionImpl(testSchema,"date");
  compareSqlDateRunner(testAttribute,PropertyIsEqualTo.class,false,true,false);
  compareSqlDateRunner(testAttribute,PropertyIsGreaterThan.class,true,false,false);
  compareSqlDateRunner(testAttribute,PropertyIsLessThan.class,false,false,true);
  compareSqlDateRunner(testAttribute,PropertyIsGreaterThanOrEqualTo.class,true,true,false);
  compareSqlDateRunner(testAttribute,PropertyIsLessThanOrEqualTo.class,false,true,true);
  testAttribute=new AttributeExpressionImpl(testSchema,"time");
  compareSqlTimeRunner(testAttribute,PropertyIsEqualTo.class,false,true,false);
  compareSqlTimeRunner(testAttribute,PropertyIsGreaterThan.class,true,false,false);
  compareSqlTimeRunner(testAttribute,PropertyIsLessThan.class,false,false,true);
  compareSqlTimeRunner(testAttribute,PropertyIsGreaterThanOrEqualTo.class,true,true,false);
  compareSqlTimeRunner(testAttribute,PropertyIsLessThanOrEqualTo.class,false,true,true);
  testAttribute=new AttributeExpressionImpl(testSchema,"testString");
  Literal testLiteral=new LiteralExpressionImpl("test string data");
  org.opengis.filter.Filter filter=compare(PropertyIsEqualTo.class,testAttribute,testLiteral);
  assertTrue(filter.evaluate(testFeature));
  testLiteral=new LiteralExpressionImpl("incorrect test string data");
  filter=compare(PropertyIsEqualTo.class,testAttribute,testLiteral);
  assertTrue(!filter.evaluate(testFeature));
  testLiteral=new LiteralExpressionImpl("zebra");
  filter=compare(PropertyIsLessThan.class,testAttribute,testLiteral);
  assertTrue(filter.evaluate(testFeature));
  testLiteral=new LiteralExpressionImpl("blorg");
  filter=compare(PropertyIsLessThan.class,testAttribute,testLiteral);
  assertTrue(!filter.evaluate(testFeature));
}
