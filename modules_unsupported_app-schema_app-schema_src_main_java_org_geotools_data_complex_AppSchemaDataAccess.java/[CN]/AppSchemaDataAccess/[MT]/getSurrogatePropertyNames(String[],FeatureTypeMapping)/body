{
  List<String> propNames=null;
  final AttributeType mappedType=mapping.getSource().getSchema();
  if (mappingProperties != null && mappingProperties.length > 0) {
    Set<String> requestedSurrogateProperties=new HashSet<String>();
    List<AttributeMapping> attMappings=mapping.getAttributeMappings();
    List<String> requestedProperties=new ArrayList<String>(Arrays.asList(mappingProperties));
    requestedProperties.add(mapping.getTargetFeature().getName().getLocalPart());
    for (    String requestedProperty : requestedProperties) {
      for (      final AttributeMapping entry : attMappings) {
        final StepList targetSteps=entry.getTargetXPath();
        if (targetSteps.get(0).getName().getLocalPart().equals(requestedProperty)) {
          final Expression sourceExpression=entry.getSourceExpression();
          final Expression idExpression=entry.getIdentifierExpression();
          final Collection<Expression> clientProperties=entry.getClientProperties().values();
          FilterAttributeExtractor extractor=new FilterAttributeExtractor();
          sourceExpression.accept(extractor,null);
          idExpression.accept(extractor,null);
          Iterator<Expression> it=clientProperties.iterator();
          while (it.hasNext()) {
            it.next().accept(extractor,null);
          }
          Set<String> exprAtts=extractor.getAttributeNameSet();
          for (          String mappedAtt : exprAtts) {
            if (!mappedAtt.equals("Expression.NIL")) {
              PropertyName propExpr=filterFac.property(mappedAtt);
              Object object=propExpr.evaluate(mappedType);
              AttributeDescriptor mappedAttribute=(AttributeDescriptor)object;
              if (mappedAttribute != null) {
                requestedSurrogateProperties.add(mappedAtt);
              }
 else {
                LOGGER.info("mapped type does not contains property " + mappedAtt);
              }
            }
          }
          LOGGER.fine("adding atts needed for : " + exprAtts);
        }
      }
    }
    propNames=new ArrayList<String>(requestedSurrogateProperties);
  }
  return propNames;
}
