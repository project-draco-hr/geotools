{
  final String name=getName(axis);
  final AxisType type=axis.getAxisType();
  String units=axis.getUnitsString();
  String direction=null;
  AxisDirection directionCode=DIRECTIONS.get(type);
  if (directionCode != null) {
    if (CoordinateAxis.POSITIVE_DOWN.equalsIgnoreCase(axis.getPositive())) {
      directionCode=directionCode.opposite();
    }
    direction=directionCode.name();
    final int offset=units.lastIndexOf('_');
    if (offset >= 0) {
      final String unitsDirection=units.substring(offset + 1).trim();
      final String opposite=directionCode.opposite().name();
      if (unitsDirection.equalsIgnoreCase(opposite)) {
        warning("addCoordinateAxis",ErrorKeys.INCONSISTENT_AXIS_ORIENTATION_$2,new String[]{name,direction});
        direction=opposite;
      }
      if (unitsDirection.equalsIgnoreCase(direction)) {
        units=units.substring(0,offset).trim();
      }
    }
  }
  final Axis axisNode=getReferencing().addAxis(name,direction,units);
  if (AxisType.Time.equals(type)) {
    String origin=null;
    final String[] unitsParts=units.split("(?i)\\s+since\\s+");
    if (unitsParts.length == 2) {
      units=unitsParts[0].trim();
      origin=unitsParts[1].trim();
    }
 else {
      final Attribute attribute=axis.findAttribute("time_origin");
      if (attribute != null) {
        origin=attribute.getStringValue();
      }
    }
    Date epoch=null;
    if (origin != null) {
      origin=MetadataAccessor.trimFractionalPart(origin);
      epoch=parse(type,origin,Date.class,"addCoordinateAxis");
    }
    axisNode.setTimeOrigin(epoch);
    axisNode.setUnits(units);
  }
  if (!axis.isNumeric()) {
    return;
  }
  if (axis instanceof CoordinateAxis1D) {
    final CoordinateAxis1D axis1D=(CoordinateAxis1D)axis;
    final ImageGeometry geometry=getGeometry();
    final double[] values=axis1D.getCoordValues();
    geometry.addOrdinates(0,values);
  }
}
