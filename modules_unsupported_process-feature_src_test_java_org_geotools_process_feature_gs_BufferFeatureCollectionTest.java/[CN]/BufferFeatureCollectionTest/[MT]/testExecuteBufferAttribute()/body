{
  SimpleFeatureTypeBuilder tb=new SimpleFeatureTypeBuilder();
  tb.setName("featureType");
  tb.add("geometry",Geometry.class);
  tb.add("integer",Integer.class);
  tb.add("buffer",Double.class);
  GeometryFactory gf=new GeometryFactory();
  SimpleFeatureBuilder b=new SimpleFeatureBuilder(tb.buildFeatureType());
  ListFeatureCollection features=new ListFeatureCollection(b.getFeatureType());
  for (int numFeatures=0; numFeatures < 5; numFeatures++) {
    Coordinate array[]=new Coordinate[4];
    int j=0;
    for (int i=0 + numFeatures; i < 3 + numFeatures; i++) {
      array[j]=new Coordinate(i,i);
      j++;
    }
    array[3]=new Coordinate(numFeatures,numFeatures);
    LinearRing shell=new LinearRing(array,new PrecisionModel(),0);
    b.add(gf.createPolygon(shell,null));
    b.add(0);
    b.add(numFeatures + 1);
    features.add(b.buildFeature(numFeatures + ""));
  }
  BufferFeatureCollection process=new BufferFeatureCollection();
  SimpleFeatureCollection output=process.execute(features,null,"buffer");
  assertEquals(5,output.size());
  SimpleFeatureIterator iterator=output.features();
  ReferencedEnvelope expectedBounds=new ReferencedEnvelope(output.getSchema().getCoordinateReferenceSystem());
  for (int numFeatures=0; numFeatures < 5; numFeatures++) {
    Coordinate[] array=new Coordinate[4];
    int j=0;
    for (int i=0 + numFeatures; i < 3 + numFeatures; i++) {
      array[j]=new Coordinate(i,i);
      j++;
    }
    array[3]=new Coordinate(numFeatures,numFeatures);
    LinearRing shell=new LinearRing(array,new PrecisionModel(),0);
    Geometry expected=gf.createPolygon(shell,null).buffer(numFeatures + 1);
    expectedBounds.expandToInclude(expected.getEnvelopeInternal());
    SimpleFeature sf=iterator.next();
    assertTrue(expected.equals((Geometry)sf.getDefaultGeometry()));
  }
  assertEquals(expectedBounds,output.getBounds());
  assertEquals(5,output.size());
}
