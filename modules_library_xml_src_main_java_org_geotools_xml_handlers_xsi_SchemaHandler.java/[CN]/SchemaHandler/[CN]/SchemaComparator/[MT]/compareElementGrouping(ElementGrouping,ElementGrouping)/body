{
  if (arg0 == arg1)   return 0;
  if (arg0 == null)   return 1;
  if (arg1 == null)   return -1;
  int i=0;
  i=arg0.getGrouping() - arg1.getGrouping();
  if (i != 0)   return i;
  i=arg0.getMaxOccurs() - arg1.getMaxOccurs();
  if (i != 0)   return i;
  i=arg0.getMinOccurs() - arg1.getMinOccurs();
  if (i != 0)   return i;
  ElementGrouping[] eg0=null;
  ElementGrouping[] eg1=null;
switch (arg0.getGrouping()) {
case ElementGrouping.ELEMENT:
    return compareElement((Element)arg0,(Element)arg1);
case ElementGrouping.GROUP:
  return compareGroup((Group)arg0,(Group)arg1);
case ElementGrouping.CHOICE:
Choice c0=(Choice)arg0;
Choice c1=(Choice)arg1;
eg0=c0.getChildren();
eg1=c1.getChildren();
case ElementGrouping.SEQUENCE:
Sequence s0=(Sequence)arg0;
Sequence s1=(Sequence)arg1;
eg0=s0.getChildren();
eg1=s1.getChildren();
case ElementGrouping.ALL:
All a0=(All)arg0;
All a1=(All)arg1;
eg0=a0.getElements();
eg1=a1.getElements();
}
if (eg0.length < eg1.length) return -1;
if (eg0.length > eg1.length) return 1;
for (int j=0; j < eg0.length && i != 0; j++) i=compareElementGrouping(eg0[j],eg1[j]);
return 0;
}
