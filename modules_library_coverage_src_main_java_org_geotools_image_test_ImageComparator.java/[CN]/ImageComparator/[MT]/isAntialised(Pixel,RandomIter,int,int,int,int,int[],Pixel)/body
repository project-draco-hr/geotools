{
  final int DISTANCE=1;
  int highContrastSibling=0;
  int siblingWithDifferentHue=0;
  int equivalentSibling=0;
  final int rowMin=Math.max(row - DISTANCE,0);
  final int rowMax=Math.min(row + DISTANCE,width);
  final int colMin=Math.max(col - DISTANCE,0);
  final int colMax=Math.min(col + DISTANCE,height);
  for (int c=colMin; c < colMax; c++) {
    for (int r=rowMin; r < rowMax; r++) {
      if (c == col && r == row) {
        continue;
      }
 else {
        it.getPixel(c,r,pixel);
        cursor.init(pixel);
        if (source.isRGBSame(cursor)) {
          equivalentSibling++;
        }
 else         if (source.isConstrasting(cursor)) {
          highContrastSibling++;
        }
        if (source.hasDifferentHue(cursor)) {
          siblingWithDifferentHue++;
        }
        if (siblingWithDifferentHue > 1 || highContrastSibling > 1) {
          return true;
        }
      }
    }
  }
  if (equivalentSibling < 2) {
    return true;
  }
  return false;
}
