{
  final CoordinateReferenceSystem crs=CRS.parseWKT(CRS_WKT);
  SimpleFeatureTypeBuilder ftb=new SimpleFeatureTypeBuilder();
  ftb.add(ID_COLUMN,Integer.class);
  ftb.add(GEOMETRY_COLUMN,Point.class,crs);
  ftb.add(LABEL_COLUMN,String.class);
  ftb.setName(MY_FEATURE);
  final SimpleFeatureType schema=ftb.buildFeatureType();
  final SimpleFeatureCollection fc=new MemoryFeatureCollection(schema);
  final PrecisionModel pm=new PrecisionModel(PrecisionModel.FLOATING);
  final GeometryFactory jtsFactory=new GeometryFactory(pm,SRID);
  final Point g1=jtsFactory.createPoint(new Coordinate(X_1,Y_1));
  fc.add(SimpleFeatureBuilder.build(schema,new Object[]{new Integer(1),g1,LABEL_1},ID_1));
  final Point g2=jtsFactory.createPoint(new Coordinate(X_2,Y_2));
  fc.add(SimpleFeatureBuilder.build(schema,new Object[]{new Integer(2),g2,LABEL_2},ID_2));
  final DataStore ds=new MemoryDataStore(fc);
  final StyleFactory sf=CommonFactoryFinder.getStyleFactory(GeoTools.getDefaultHints());
  final UserLayer layer=sf.createUserLayer();
  layer.setName(LAYER_NAME);
  layer.setInlineFeatureType(schema);
  layer.setInlineFeatureDatastore(ds);
  final Style style=sf.createStyle();
  final StyleBuilder sb=new StyleBuilder(sf);
  final ExternalGraphic overlay=sb.createExternalGraphic(IMAGE_URL,"image/" + IMAGE_EXT);
  final Graphic g=sb.createGraphic(overlay,null,null,OPACITY,Double.NaN,0.0);
  final PointSymbolizer ps=sb.createPointSymbolizer(g);
  final FeatureTypeStyle fts=sb.createFeatureTypeStyle(ps);
  fts.setFeatureTypeName(MY_NAMESPACE + ":" + MY_FEATURE);
  style.addFeatureTypeStyle(fts);
  layer.addUserStyle(style);
  final StyledLayerDescriptor sld1=sf.createStyledLayerDescriptor();
  sld1.addStyledLayer(layer);
  final Map nsMap=new HashMap();
  nsMap.put(MY_URI,MY_NAMESPACE);
  final SLDTransformer sldTransformer=new SLDTransformer(nsMap);
  sldTransformer.setIndentation(2);
  String xml=sldTransformer.transform(sld1);
  final InputStream is=new ByteArrayInputStream(xml.getBytes("UTF-8"));
  final SLDParser parser=new SLDParser(sf);
  parser.setInput(is);
  final StyledLayerDescriptor sld2=parser.parseSLD();
  xml=sldTransformer.transform(sld2);
  final StyledLayer[] layers=sld2.getStyledLayers();
  assertNotNull("Styled layers array MUST NOT be null",layers);
  assertEquals("Styled layers array MUST be 1-element long",1,layers.length);
  final StyledLayer sLayer=layers[0];
  assertNotNull("Single styled layer MUST NOT be null",sLayer);
  assertTrue("Single layer MUST be a UserLayer",UserLayer.class.isAssignableFrom(sLayer.getClass()));
  final UserLayer uLayer=(UserLayer)sLayer;
  final String lName=uLayer.getName();
  assertEquals("Read layer name MUST match",LAYER_NAME,lName);
  final SimpleFeatureType ft=uLayer.getInlineFeatureType();
  assertNotNull("Unmarshalled feature type MUST NOT be null",ft);
  final String fName=ft.getTypeName();
  assertEquals("Read feature type name MUST match",MY_FEATURE,fName);
  assertEquals(CRS.decode("EPSG:4326"),ft.getGeometryDescriptor().getCoordinateReferenceSystem());
}
