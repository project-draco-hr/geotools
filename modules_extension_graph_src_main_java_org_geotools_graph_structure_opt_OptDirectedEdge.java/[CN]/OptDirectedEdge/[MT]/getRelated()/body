{
  ArrayList related=new ArrayList(m_in.getDegree() + m_out.getDegree() - 2);
  Edge[] edges=m_in.getInEdgeArray();
  for (int i=0; i < edges.length; i++) {
    related.add(edges[i]);
  }
  edges=m_in.getOutEdgeArray();
  for (int i=0; i < edges.length; i++) {
    Edge e=edges[i];
    if (!e.equals(this) && !(e.getNodeA().equals(e.getNodeB())))     related.add(edges[i]);
  }
  edges=m_out.getInEdgeArray();
  for (int i=0; i < edges.length; i++) {
    Edge e=edges[i];
switch (compareNodes(e)) {
case Edge.EQUAL_NODE_ORIENTATION:
case Edge.OPPOSITE_NODE_ORIENTATION:
      continue;
case Edge.UNEQUAL_NODE_ORIENTATION:
    related.add(e);
}
}
edges=m_out.getOutEdgeArray();
for (int i=0; i < edges.length; i++) {
Edge e=edges[i];
switch (compareNodes(edges[i])) {
case Edge.EQUAL_NODE_ORIENTATION:
case Edge.OPPOSITE_NODE_ORIENTATION:
  continue;
case Edge.UNEQUAL_NODE_ORIENTATION:
if (!e.getNodeA().equals(e.getNodeB())) related.add(e);
}
}
return (related.iterator());
}
