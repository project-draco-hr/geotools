{
  if (!testingEnabled()) {
    return;
  }
  if (fileName.equalsIgnoreCase("")) {
    LOGGER.info("==================================================================\n" + " Warning! No valid test File has been specified.\n" + " Please provide a valid sample in the source code and repeat this test!\n"+ "========================================================================");
    return;
  }
  File file=null;
  try {
    file=TestData.file(this,fileName);
  }
 catch (  FileNotFoundException fnfe) {
    LOGGER.warning("test-data not found: " + fileName + "\nTests are skipped");
    return;
  }
catch (  IOException ioe) {
    LOGGER.warning("test-data not found: " + fileName + "\nTests are skipped");
    return;
  }
  final MrSIDReader reader=new MrSIDReader(file);
  GridCoverage2D gc=(GridCoverage2D)reader.read(null);
  forceDataLoading(gc);
  final int originalW=gc.getRenderedImage().getWidth();
  final int originalH=gc.getRenderedImage().getHeight();
  final Rectangle range=((GridEnvelope2D)reader.getOriginalGridRange());
  final GeneralEnvelope originalEnvelope=reader.getOriginalEnvelope();
  final GeneralEnvelope reducedEnvelope=new GeneralEnvelope(new double[]{originalEnvelope.getLowerCorner().getOrdinate(0),originalEnvelope.getLowerCorner().getOrdinate(1)},new double[]{originalEnvelope.getMedian().getOrdinate(0),originalEnvelope.getMedian().getOrdinate(1)});
  reducedEnvelope.setCoordinateReferenceSystem(reader.getCrs());
  final ParameterValue gg=(ParameterValue)((AbstractGridFormat)reader.getFormat()).READ_GRIDGEOMETRY2D.createValue();
  gg.setValue(new GridGeometry2D(new GridEnvelope2D(new Rectangle(0,0,(int)(range.width / 2.0),(int)(range.height / 2.0))),reducedEnvelope));
  gc=(GridCoverage2D)reader.read(new GeneralParameterValue[]{gg});
  Assert.assertNotNull(gc);
  Assert.assertTrue(reducedEnvelope.equals(gc.getEnvelope(),XAffineTransform.getScale(((AffineTransform)((GridGeometry2D)gc.getGridGeometry()).getGridToCRS2D())) / 2,true));
  Assert.assertEquals(originalW / 2.0,gc.getRenderedImage().getWidth(),1);
  Assert.assertEquals(originalH / 2.0,gc.getRenderedImage().getHeight(),1);
  forceDataLoading(gc);
  final ParameterValue policy=(ParameterValue)((AbstractGridFormat)reader.getFormat()).OVERVIEW_POLICY.createValue();
  policy.setValue(OverviewPolicy.IGNORE);
  final ParameterValue tilesize=(ParameterValue)((BaseGDALGridFormat)reader.getFormat()).SUGGESTED_TILE_SIZE.createValue();
  tilesize.setValue("512,512");
  final ParameterValue useJaiRead=(ParameterValue)((BaseGDALGridFormat)reader.getFormat()).USE_JAI_IMAGEREAD.createValue();
  useJaiRead.setValue(true);
  gc=(GridCoverage2D)reader.read(new GeneralParameterValue[]{gg,policy,tilesize,useJaiRead});
  Assert.assertNotNull(gc);
  Assert.assertTrue(reducedEnvelope.equals(gc.getEnvelope(),XAffineTransform.getScale(((AffineTransform)((GridGeometry2D)gc.getGridGeometry()).getGridToCRS2D())) / 2,true));
  Assert.assertEquals(originalW / 2,gc.getRenderedImage().getWidth(),1);
  Assert.assertEquals(originalH / 2,gc.getRenderedImage().getHeight(),1);
  forceDataLoading(gc);
  if (TestData.isInteractiveTest()) {
    LOGGER.info(gc.getCoordinateReferenceSystem().toWKT());
    LOGGER.info(gc.getEnvelope().toString());
  }
}
