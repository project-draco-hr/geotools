{
  DefaultTransaction transaction=new DefaultTransaction("indexTransaction" + System.nanoTime());
  int numImages=0;
  try {
    DataStoreConfiguration datastoreConfig=ancillaryFileManager.getDatastoreConfiguration();
    boolean isShared=datastoreConfig.isShared();
    initCatalog(datastoreConfig);
    final List<Variable> variables=dataset.getVariables();
    if (variables != null) {
      for (      final Variable var_ : variables) {
        if (var_ != null && var_ instanceof VariableDS) {
          final VariableDS variable=(VariableDS)var_;
          String varName=variable.getFullName();
          if (!ancillaryFileManager.acceptsVariable(varName)) {
            continue;
          }
          if (!NetCDFUtilities.isVariableAccepted(variable,checkType,dataset)) {
            continue;
          }
          final Name coverageName=getCoverageName(varName);
          final CoordinateSystem cs=NetCDFCRSUtilities.getCoordinateSystem(variable);
          final SimpleFeatureType indexSchema=getIndexSchema(coverageName,cs,isShared);
          final VariableAdapter vaAdapter=getCoverageDescriptor(coverageName);
          if (indexSchema == null) {
            throw new IllegalStateException("Unable to created index schema for coverage:" + coverageName);
          }
          if (LOGGER.isLoggable(Level.FINEST)) {
            LOGGER.finest("Collecting slices for: " + coverageName);
          }
          final int variableImageStartIndex=numImages;
          final int numberOfSlices=vaAdapter.getNumberOfSlices();
          numImages+=numberOfSlices;
          int startPagingIndex=0;
          final int limit=INTERNAL_INDEX_CREATION_PAGE_SIZE;
          final ListFeatureCollection collection=new ListFeatureCollection(indexSchema);
          int writtenFeatures=0;
          while (writtenFeatures < numberOfSlices) {
            vaAdapter.getFeatures(startPagingIndex,limit,collection);
            if (variableImageStartIndex != 0 || isShared) {
              updateFeaturesIndex(collection,variableImageStartIndex,isShared);
            }
            final int features=collection.size();
            if (features > 0) {
              CoverageSlicesCatalog catalog=getCatalog();
              if (catalog != null) {
                catalog.addGranules(indexSchema.getTypeName(),collection,transaction);
              }
              collection.clear();
              startPagingIndex+=features;
            }
            writtenFeatures+=features;
          }
        }
      }
    }
    ancillaryFileManager.writeToDisk();
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("Committing changes to the DB");
    }
    transaction.commit();
  }
 catch (  Throwable e) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("Rollback");
    }
    if (transaction != null) {
      transaction.rollback();
    }
    throw new IOException(e);
  }
 finally {
    try {
      if (transaction != null) {
        transaction.close();
      }
    }
 catch (    Throwable t) {
    }
  }
  return numImages;
}
