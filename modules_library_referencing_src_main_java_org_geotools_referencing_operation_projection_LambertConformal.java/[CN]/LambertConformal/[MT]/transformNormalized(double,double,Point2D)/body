{
  double rho;
  if (abs(abs(y) - PI / 2) < EPSILON) {
    if (y * n <= 0) {
      throw new ProjectionException(y);
    }
 else {
      rho=0;
    }
  }
 else   if (isSpherical) {
    rho=F * pow(tan(PI / 4 + 0.5 * y),-n);
  }
 else {
    rho=F * pow(tsfn(y,sin(y)),n);
  }
  x*=n;
  if (belgium) {
    x-=BELGE_A;
  }
  y=rho0 - rho * cos(x);
  x=rho * sin(x);
  if (ptDst != null) {
    ptDst.setLocation(x,y);
    return ptDst;
  }
  return new Point2D.Double(x,y);
}
