{
  if (mapping instanceof XmlFeatureTypeMapping) {
    return new XmlMappingFeatureIterator(store,mapping,query);
  }
  boolean isJoining=AppSchemaDataAccessConfigurator.isJoining();
  if (isJoining) {
    if (!(query instanceof JoiningQuery)) {
      query=new JoiningQuery(query);
    }
  }
  IMappingFeatureIterator iterator;
  if (unrolledFilter != null) {
    query.setFilter(Filter.INCLUDE);
    Query unrolledQuery=store.unrollQuery(query,mapping);
    unrolledQuery.setFilter(unrolledFilter);
    if (isSimpleType(mapping)) {
      iterator=new MappingAttributeIterator(store,mapping,query,unrolledQuery);
    }
 else {
      iterator=new DataAccessMappingFeatureIterator(store,mapping,query,unrolledQuery);
    }
  }
 else {
    List<AttributeMapping> listMappings=mapping.getIsListMappings();
    Filter isListFilter=null;
    if (!listMappings.isEmpty()) {
      IsListFilterVisitor listChecker=new IsListFilterVisitor(listMappings,mapping);
      Filter complexFilter=query.getFilter();
      complexFilter.accept(listChecker,null);
      if (listChecker.isListFilterExists()) {
        isListFilter=AppSchemaDataAccess.unrollFilter(complexFilter,mapping);
      }
    }
    FeatureSource mappedSource=mapping.getSource();
    if (isJoining && !(mappedSource instanceof JDBCFeatureSource || mappedSource instanceof JDBCFeatureStore)) {
      if (AppSchemaDataAccessConfigurator.isJoiningSet()) {
        throw new IllegalArgumentException("Joining queries are only supported on JDBC data stores");
      }
 else {
        isJoining=false;
      }
    }
    if (isJoining || mappedSource instanceof JDBCFeatureSource || mappedSource instanceof JDBCFeatureStore) {
      FilterCapabilities capabilities=getFilterCapabilities(mappedSource);
      ComplexFilterSplitter splitter=new ComplexFilterSplitter(capabilities,mapping);
      Filter filter=query.getFilter();
      filter.accept(splitter,null);
      Filter preFilter=splitter.getFilterPre();
      query.setFilter(preFilter);
      filter=splitter.getFilterPost();
      int maxFeatures=Query.DEFAULT_MAX;
      if (filter != null && filter != Filter.INCLUDE) {
        maxFeatures=query.getMaxFeatures();
        query.setMaxFeatures(Query.DEFAULT_MAX);
      }
      if (isJoining && isListFilter != null) {
        ((JoiningQuery)query).setSubset(true);
        if (filter == null || filter.equals(Filter.INCLUDE)) {
          isListFilter=null;
        }
      }
      boolean isFiltered=!isJoining && preFilter != null && preFilter != Filter.INCLUDE;
      iterator=new DataAccessMappingFeatureIterator(store,mapping,query,isFiltered);
      if (isListFilter == null) {
        if (filter != null && filter != Filter.INCLUDE) {
          iterator=new PostFilteringMappingFeatureIterator(iterator,filter,maxFeatures);
        }
      }
    }
 else     if (mappedSource instanceof MappingFeatureSource) {
      iterator=new DataAccessMappingFeatureIterator(store,mapping,query);
    }
 else {
      Query unrolledQuery=store.unrollQuery(query,mapping);
      Filter filter=unrolledQuery.getFilter();
      if (!filter.equals(Filter.INCLUDE) && !filter.equals(Filter.EXCLUDE) && !(filter instanceof FidFilterImpl)) {
        unrolledQuery.setFilter(Filter.INCLUDE);
        CoordinateReferenceSystem crs=query.getCoordinateSystemReproject();
        if (crs != null) {
          unrolledQuery.setCoordinateSystemReproject(null);
        }
        iterator=new FilteringMappingFeatureIterator(store,mapping,query,unrolledQuery,filter);
      }
 else {
        iterator=new DataAccessMappingFeatureIterator(store,mapping,query);
      }
    }
    if (isListFilter != null && iterator instanceof DataAccessMappingFeatureIterator) {
      ((DataAccessMappingFeatureIterator)iterator).setListFilter(isListFilter);
    }
  }
  return iterator;
}
