{
  URL url=lookup(URLP,params,URL.class);
  Boolean isMemoryMapped=lookup(MEMORY_MAPPED,params,Boolean.class);
  Boolean cacheMemoryMaps=lookup(CACHE_MEMORY_MAPS,params,Boolean.class);
  URI namespace=lookup(NAMESPACEP,params,URI.class);
  Charset dbfCharset=lookup(DBFCHARSET,params,Charset.class);
  TimeZone dbfTimeZone=lookup(DBFTIMEZONE,params,TimeZone.class);
  Boolean isCreateSpatialIndex=lookup(CREATE_SPATIAL_INDEX,params,Boolean.class);
  Boolean isEnableSpatialIndex=(Boolean)ENABLE_SPATIAL_INDEX.lookUp(params);
  if (isEnableSpatialIndex == null) {
    isEnableSpatialIndex=Boolean.TRUE;
  }
  Boolean isEnableOdbcFiltering=(Boolean)USE_ODBC_DBASE_FILTERING.lookUp(params);
  if (isEnableOdbcFiltering == null) {
    isEnableOdbcFiltering=true;
  }
  File dir=DataUtilities.urlToFile(url);
  if (dir != null && dir.isDirectory()) {
    return new DirectoryDataStore(DataUtilities.urlToFile(url),new ShpFileStoreFactory(this,params));
  }
 else {
    ShpFiles shpFiles=new ShpFiles(url);
    boolean isLocal=shpFiles.isLocal();
    boolean useMemoryMappedBuffer=isLocal && isMemoryMapped.booleanValue();
    boolean enableIndex=isEnableSpatialIndex.booleanValue() && isLocal;
    boolean createIndex=isCreateSpatialIndex.booleanValue() && enableIndex;
    ShapefileDataStore store=new ShapefileDataStore(url);
    if (namespace != null) {
      store.setNamespaceURI(namespace.toString());
    }
    store.setMemoryMapped(useMemoryMappedBuffer);
    store.setBufferCachingEnabled(cacheMemoryMaps);
    store.setCharset(dbfCharset);
    store.setTimeZone(dbfTimeZone);
    store.setIndexed(enableIndex);
    store.setIndexCreationEnabled(createIndex);
    store.setOdbcFilteringEnabled(isEnableOdbcFiltering);
    return store;
  }
}
