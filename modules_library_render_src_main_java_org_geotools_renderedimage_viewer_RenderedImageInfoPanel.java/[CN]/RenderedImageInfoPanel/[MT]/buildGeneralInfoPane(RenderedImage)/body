{
  HTMLBuilder hb=new HTMLBuilder();
  hb.title("Abstract");
  hb.dataLine("Name",getImageName(image));
  hb.dataLine("Image class",image.getClass());
  hb.dataLine("Image size",image.getWidth() + " x " + image.getHeight());
  hb.title("Tiles organisation");
  int tw=image.getTileWidth();
  int th=image.getTileHeight();
  int ytc=image.getNumYTiles();
  int xtc=image.getNumXTiles();
  hb.dataLine("Tile size",tw + " x " + th);
  hb.dataLine("Tile grid",xtc + " x " + ytc+ " ("+ tw * xtc + " x " + th * ytc + ")");
  hb.dataLine("Tile offsets x,y",image.getTileGridXOffset() + ", " + image.getTileGridYOffset());
  hb.dataLine("Min tile x,y",image.getMinTileX() + ", " + image.getMinTileY());
  hb.title("Sample model");
  SampleModel sm=image.getSampleModel();
  hb.dataLine("Sample model",sm.getClass());
  hb.dataLine("Size",sm.getWidth() + " x " + sm.getHeight());
  hb.dataLine("Bands",sm.getNumBands());
  hb.dataLine("Bands",TYPE_MAP.get(sm.getDataType()));
  hb.title("Color model");
  hb.dataLine("Color model",image.getColorModel().getClass());
switch (image.getColorModel().getTransparency()) {
case Transparency.OPAQUE:
    hb.dataLine("Transparency","Opaque");
  break;
case Transparency.TRANSLUCENT:
hb.dataLine("Transparency","Translucent");
break;
case Transparency.BITMASK:
hb.dataLine("Transparency","Bitmask");
break;
}
if (image.getColorModel() instanceof IndexColorModel) {
final IndexColorModel icm=(IndexColorModel)image.getColorModel();
hb.dataLine("Transparent Pixel",Integer.toString(icm.getTransparentPixel()));
hb.dataLine("ColorMap Size",Integer.toString(icm.getMapSize()));
final int numbands=icm.hasAlpha() ? 4 : 3;
final byte[][] cmap=new byte[numbands][icm.getMapSize()];
icm.getReds(cmap[0]);
icm.getGreens(cmap[1]);
icm.getBlues(cmap[2]);
if (numbands == 4) icm.getAlphas(cmap[3]);
final StringBuilder b=new StringBuilder();
for (int i=0; i < icm.getMapSize(); i++) {
b.append("(").append(i).append(")-").append("[").append(cmap[0][i]).append(",").append(cmap[1][i]).append(",").append(cmap[2][i]);
if (numbands == 4) b.append(",").append(cmap[3][i]);
b.append("]").append("\n");
}
hb.dataLine("ColorMap",b.toString());
}
hb.dataLine("Color space",image.getColorModel().getColorSpace().getClass());
hb.title("Sources");
List<RenderedImage> sources=image.getSources();
if (sources == null) return;
final int size=sources.size();
for (int i=0; i < size; i++) {
hb.dataLine("Source " + (i + 1),getImageName(sources.get(i)));
}
generalPanel.setText(hb.getHtml());
}
