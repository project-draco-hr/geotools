{
  final Dimension largest=new Dimension();
  final Rectangle bounds=new Rectangle(-1,-1);
  for (  final GridNode node : nodes) {
    bounds.add(node);
    if (node.width > largest.width)     largest.width=node.width;
    if (node.height > largest.height)     largest.height=node.height;
  }
  if (!bounds.isEmpty()) {
    largest.width*=2;
    largest.height*=2;
    final int[][] divisors=MosaicBuilder.suggestedNumTiles(bounds,largest,16,false);
    final int[] sx=divisors[0];
    final int[] sy=divisors[1];
    final Rectangle part=new Rectangle();
    final List<GridNode> list=new ArrayList<GridNode>();
    for (int i=0; i < sx.length; i++) {
      final int nx=sx[i];
      final int ny=sy[i];
      part.y=bounds.y;
      part.width=bounds.width / nx;
      part.height=bounds.height / ny;
      for (int y=0; y < ny; y++) {
        part.x=bounds.x;
        for (int x=0; x < nx; x++) {
          list.add(new GridNode(part));
          part.x+=part.width;
        }
        part.y+=part.height;
      }
    }
    final int size=list.size();
    final GridNode[] old=nodes;
    nodes=list.toArray(new GridNode[size + old.length]);
    System.arraycopy(old,0,nodes,size,old.length);
  }
  return nodes;
}
