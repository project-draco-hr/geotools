{
  store.autoConfigureStores(Arrays.asList("store1","store2","gt:store3"));
  Set<String> types=new LinkedHashSet<String>();
  types.addAll(Arrays.asList(store1.getTypeNames()));
  types.addAll(Arrays.asList(store2.getTypeNames()));
  types.addAll(Arrays.asList(store3.getTypeNames()));
  String[] expected=(String[])types.toArray(new String[types.size()]);
  assertArrayEquals(expected,store.getTypeNames());
  AggregateTypeConfiguration config=store.getTypeConfigurations().get(BASIC_POLYGONS);
  assertEquals(BASIC_POLYGONS,config.getName());
  assertEquals(2,config.getStoreMap().size());
  assertEquals(BASIC_POLYGONS,config.getStoreMap().get(new NameImpl("store1")));
  assertEquals(BASIC_POLYGONS,config.getStoreMap().get(new NameImpl("store2")));
  config=store.getTypeConfigurations().get("Streams");
  assertEquals("Streams",config.getName());
  assertEquals(1,config.getStoreMap().size());
  assertEquals("Streams",config.getStoreMap().get(new NameImpl("store2")));
  config=store.getTypeConfigurations().get(ROAD_SEGMENTS);
  assertEquals(ROAD_SEGMENTS,config.getName());
  assertEquals(2,config.getStoreMap().size());
  assertEquals(ROAD_SEGMENTS,config.getStoreMap().get(new NameImpl("store1")));
  assertEquals(ROAD_SEGMENTS,config.getStoreMap().get(new NameImpl("gt","store3")));
}
