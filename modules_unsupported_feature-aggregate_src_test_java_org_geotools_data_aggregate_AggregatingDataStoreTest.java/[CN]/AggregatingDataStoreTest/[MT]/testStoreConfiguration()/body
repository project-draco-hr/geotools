{
  store.autoConfigureStores(Arrays.asList("store1","store2","gt:store3"));
  Set<String> types=new LinkedHashSet<String>();
  types.addAll(Arrays.asList(store1.getTypeNames()));
  types.addAll(Arrays.asList(store2.getTypeNames()));
  types.addAll(Arrays.asList(store3.getTypeNames()));
  String[] expected=(String[])types.toArray(new String[types.size()]);
  assertArrayEquals(expected,store.getTypeNames());
  AggregateTypeConfiguration config=store.getConfigurations().get(BASIC_POLYGONS);
  assertEquals(BASIC_POLYGONS,config.getName());
  assertEquals(2,config.getSourceTypes().size());
  assertSingleSourceType(BASIC_POLYGONS,new NameImpl("store1"),config);
  assertSingleSourceType(BASIC_POLYGONS,new NameImpl("store2"),config);
  config=store.getConfigurations().get("Streams");
  assertEquals("Streams",config.getName());
  assertEquals(1,config.getSourceTypes().size());
  assertSingleSourceType("Streams",new NameImpl("store2"),config);
  config=store.getConfigurations().get(ROAD_SEGMENTS);
  assertEquals(ROAD_SEGMENTS,config.getName());
  assertEquals(2,config.getSourceTypes().size());
  assertSingleSourceType(ROAD_SEGMENTS,new NameImpl("store1"),config);
  assertSingleSourceType(ROAD_SEGMENTS,new NameImpl("gt","store3"),config);
}
