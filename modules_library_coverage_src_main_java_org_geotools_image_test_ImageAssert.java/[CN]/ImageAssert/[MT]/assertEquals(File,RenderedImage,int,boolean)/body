{
  if (!expectedFile.exists()) {
    boolean useAsReference=actualReferenceFile && INTERACTIVE && ReferenceImageDialog.show(realignImage(actualImage));
    if (useAsReference) {
      try {
        String format=getFormat(expectedFile);
        new ImageWorker(actualImage).writePNG(expectedFile,"FILTERED",0.9f,false,false);
      }
 catch (      IOException e) {
        throw (Error)new AssertionError("Failed to write the image to disk").initCause(e);
      }
    }
 else {
      throw new AssertionError("Reference image is missing: " + expectedFile);
    }
  }
 else {
    File actualFile=new File("target/actual.png");
    try {
      ImageIO.write(actualImage,"PNG",actualFile);
      Difference difference=PerceptualDiff.compareImages(expectedFile,actualFile,threshold);
      if (difference.imagesDifferent) {
        boolean overwrite=false;
        if (INTERACTIVE) {
          RenderedImage expectedImage=ImageIO.read(expectedFile);
          overwrite=CompareImageDialog.show(realignImage(expectedImage),realignImage(actualImage),actualReferenceFile);
        }
        if (overwrite) {
          ImageIO.write(actualImage,"PNG",expectedFile);
        }
 else {
          throw new AssertionError("Images are visibly different, PerceptualDiff output is: " + difference.output);
        }
      }
 else {
        LOGGER.info("Images are equals, PerceptualDiff output is: " + difference.output);
      }
    }
 catch (    IOException e) {
      throw (Error)new AssertionError("Failed to write the image to disk").initCause(e);
    }
 finally {
      actualFile.delete();
    }
  }
}
