{
  byte byteOrder=dis.readByte();
  if (byteOrder == WKBConstants.wkbNDR)   dis.setOrder(ByteOrderValues.LITTLE_ENDIAN);
  int geometryType=dis.readInt();
  if (DB2WKBConstants.zTypes.contains(geometryType)) {
    inputDimension=3;
    if (geometryType == DB2WKBConstants.wkbPointZ)     geometryType=DB2WKBConstants.wkbPoint2D;
    if (geometryType == DB2WKBConstants.wkbOGCPointZ)     geometryType=DB2WKBConstants.wkbPoint2D;
    if (geometryType == DB2WKBConstants.wkbLineStringZ)     geometryType=DB2WKBConstants.wkbLineString2D;
    if (geometryType == DB2WKBConstants.wkbOGCLineStringZ)     geometryType=DB2WKBConstants.wkbLineString2D;
    if (geometryType == DB2WKBConstants.wkbPolygonZ)     geometryType=DB2WKBConstants.wkbPolygon2D;
    if (geometryType == DB2WKBConstants.wkbOGCPolygonZ)     geometryType=DB2WKBConstants.wkbPolygon2D;
    if (geometryType == DB2WKBConstants.wkbMultiPointZ)     geometryType=DB2WKBConstants.wkbMultiPoint2D;
    if (geometryType == DB2WKBConstants.wkbOGCMultiPointZ)     geometryType=DB2WKBConstants.wkbMultiPoint2D;
    if (geometryType == DB2WKBConstants.wkbMultiLineStringZ)     geometryType=DB2WKBConstants.wkbMultiLineString2D;
    if (geometryType == DB2WKBConstants.wkbOGCMultiLineStringZ)     geometryType=DB2WKBConstants.wkbMultiLineString2D;
    if (geometryType == DB2WKBConstants.wkbMultiPolygonZ)     geometryType=DB2WKBConstants.wkbMultiPolygon2D;
    if (geometryType == DB2WKBConstants.wkbOGCMultiPolygonZ)     geometryType=DB2WKBConstants.wkbMultiPolygon2D;
    if (geometryType == DB2WKBConstants.wkbGeomCollectionZ)     geometryType=DB2WKBConstants.wkbGeomCollection2D;
    if (geometryType == DB2WKBConstants.wkbOGCGeomCollectionZ)     geometryType=DB2WKBConstants.wkbGeomCollection2D;
  }
  if (ordValues == null || ordValues.length < inputDimension)   ordValues=new double[inputDimension];
switch (geometryType) {
case DB2WKBConstants.wkbPoint2D:
    return readPoint();
case DB2WKBConstants.wkbLineString2D:
  return readLineString();
case DB2WKBConstants.wkbPolygon2D:
return readPolygon();
case DB2WKBConstants.wkbMultiPoint2D:
return readMultiPoint();
case DB2WKBConstants.wkbMultiLineString2D:
return readMultiLineString();
case DB2WKBConstants.wkbMultiPolygon2D:
return readMultiPolygon();
case DB2WKBConstants.wkbGeomCollection2D:
return readGeometryCollection();
}
throw new ParseException("Unknown WKB type " + geometryType);
}
