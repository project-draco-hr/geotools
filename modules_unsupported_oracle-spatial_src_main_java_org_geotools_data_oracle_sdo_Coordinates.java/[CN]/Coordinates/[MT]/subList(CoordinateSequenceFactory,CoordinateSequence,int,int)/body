{
  if ((fromIndex == 0) && (toIndex == sequence.size())) {
    return sequence;
  }
  if (sequence instanceof List) {
    List sublist=((List)sequence).subList(fromIndex,toIndex);
    if (sublist instanceof CoordinateSequence) {
      return (CoordinateSequence)sublist;
    }
  }
  if (sequence instanceof CoordinateAccess) {
    CoordinateAccess access=(CoordinateAccess)sequence;
    double[][] coordArray=access.toOrdinateArrays();
    Object[] attributeArray=access.toAttributeArrays();
    double[][] subCoordArray=new double[access.getDimension()][];
    Object[][] subAttributeArray=new Object[access.getNumAttributes()][];
    for (int i=0; i < access.getDimension(); i++) {
      subCoordArray[i]=new OrdinateList(coordArray[i],0,1,fromIndex,toIndex).toDoubleArray();
    }
    for (int i=0; i < access.getNumAttributes(); i++) {
      subAttributeArray[i]=new AttributeList(attributeArray[i],0,1,fromIndex,toIndex).toObjectArray();
    }
    System.out.println("subCoordArray.length = " + subCoordArray.length);
    System.out.println("subCoordArray: ");
    System.out.print("X   ");
    for (int p=0; p < subCoordArray[0].length; p++)     System.out.print(subCoordArray[0][p] + " ");
    System.out.print("\nY   ");
    for (int p=0; p < subCoordArray[1].length; p++)     System.out.print(subCoordArray[1][p] + " ");
    System.out.println("");
    System.out.println("subAttributeArray.length = " + subAttributeArray.length);
    System.out.println("subAttributeArray: ");
    System.out.print("Z   ");
    for (int p=0; p < subAttributeArray[0].length; p++)     System.out.print(subAttributeArray[0][p] + " ");
    System.out.print("\nT   ");
    for (int p=0; p < subAttributeArray[1].length; p++)     System.out.print(subAttributeArray[1][p] + " ");
    System.out.println("");
    CoordinateAccess c=(CoordinateAccess)((CoordinateAccessFactory)factory).create(subCoordArray,subAttributeArray);
    return c;
  }
  Coordinate[] array=new Coordinate[toIndex - fromIndex];
  int index=0;
  for (int i=fromIndex; i < toIndex; i++, index++) {
    array[index]=sequence.getCoordinate(i);
  }
  return factory.create(array);
}
