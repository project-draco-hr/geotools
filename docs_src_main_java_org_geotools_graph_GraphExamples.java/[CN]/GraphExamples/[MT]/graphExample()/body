{
  SimpleFeatureSource featureSource=null;
  final LineGraphGenerator generator=new BasicLineGraphGenerator();
  SimpleFeatureCollection fc=featureSource.getFeatures();
  fc.accepts(new FeatureVisitor(){
    public void visit(    Feature feature){
      generator.add(feature);
    }
  }
,null);
  Graph graph=generator.getGraph();
class OrphanVisitor implements GraphVisitor {
    private int count=0;
    public int getCount(){
      return count;
    }
    public int visit(    Graphable component){
      Iterator related=component.getRelated();
      if (related.hasNext() == false) {
        count++;
      }
      return GraphTraversal.CONTINUE;
    }
  }
  OrphanVisitor graphVisitor=new OrphanVisitor();
  SimpleGraphWalker sgv=new SimpleGraphWalker(graphVisitor);
  GraphIterator iterator=new BreadthFirstIterator();
  BasicGraphTraversal bgt=new BasicGraphTraversal(graph,sgv,iterator);
  bgt.traverse();
  System.out.println("Found orphans: " + graphVisitor.getCount());
}
