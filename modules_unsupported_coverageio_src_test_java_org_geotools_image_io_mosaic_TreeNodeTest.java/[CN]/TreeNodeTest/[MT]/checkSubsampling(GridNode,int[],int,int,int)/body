{
  final String message=node.toString();
  assertTrue(message,--level >= 0);
  final int subsampling=subsamplings[level];
  assertEquals(message,subsampling,node.getXSubsampling());
  assertEquals(message,subsampling,node.getYSubsampling());
  final GridNode parent=(GridNode)node.getParent();
  if (parent != null) {
    assertTrue(message,parent.contains(node));
    assertTrue(message,parent.getIndex(node) >= 0);
  }
  final Tile tile=node.getUserObject();
  if (tile != null) {
    final Dimension d=tile.getSubsampling();
    assertEquals(message,subsampling,d.width);
    assertEquals(message,subsampling,d.height);
    assertEquals(message,tile.getAbsoluteRegion(),node);
    assertEquals(message,node,tile.getAbsoluteRegion());
  }
 else   if (parent != null) {
    assertTrue(message,node.equals(parent));
  }
  if (level != branchPoint) {
    for (    final TreeNode child : node) {
      assertTrue(message,node.contains(child));
      checkSubsampling((GridNode)child,subsamplings,level,branchPoint,branchToSelect);
    }
  }
 else {
    assertEquals(message,2,node.getChildCount());
    final TreeNode child=node.getChildAt(branchToSelect);
    assertNull(message,child.getUserObject());
    assertTrue(message,node.contains(child));
    checkSubsampling((GridNode)child,subsamplings,level,branchPoint,branchToSelect);
  }
}
