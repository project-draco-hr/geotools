{
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest("processing external graphic ");
  }
  String format="";
  String uri="";
  String content=null;
  Map<String,Object> paramList=new HashMap<String,Object>();
  NodeList children=root.getChildNodes();
  final int length=children.getLength();
  for (int i=0; i < length; i++) {
    Node child=children.item(i);
    if ((child == null) || (child.getNodeType() != Node.ELEMENT_NODE)) {
      continue;
    }
    String childName=child.getLocalName();
    if (childName == null) {
      childName=child.getNodeName();
    }
    if (childName.equalsIgnoreCase("InlineContent")) {
      String contentEncoding=getAttribute(child,"encoding");
      if (LOGGER.isLoggable(Level.FINEST)) {
        LOGGER.finest("inline content with encoding " + contentEncoding);
      }
      if ("base64".equals(contentEncoding)) {
        content=getFirstChildValue(child);
      }
 else {
        content="";
        if (LOGGER.isLoggable(Level.WARNING)) {
          LOGGER.warning("could not process <" + contentEncoding + "> content encoding");
        }
      }
    }
 else     if (childName.equalsIgnoreCase("OnLineResource")) {
      uri=parseOnlineResource(child);
    }
    if (childName.equalsIgnoreCase("format")) {
      LOGGER.finest("format child is " + child);
      LOGGER.finest("seting ExtGraph format " + getFirstChildValue(child));
      format=(getFirstChildValue(child));
    }
 else     if (childName.equalsIgnoreCase("customProperty")) {
      if (LOGGER.isLoggable(Level.FINEST))       LOGGER.finest("custom child is " + child);
      String propName=child.getAttributes().getNamedItem("name").getNodeValue();
      if (LOGGER.isLoggable(Level.FINEST))       LOGGER.finest("seting custom property " + propName + " to "+ getFirstChildValue(child));
      Expression value=parseCssParameter(child);
      paramList.put(propName,value);
    }
  }
  ExternalGraphic extgraph;
  if (content != null) {
    Icon icon=null;
    if (content.length() > 0) {
      try {
        icon=parseIcon(content);
      }
 catch (      IOException e) {
        if (LOGGER.isLoggable(Level.WARNING)) {
          LOGGER.log(Level.WARNING,"could not parse graphic inline content: " + content,e);
        }
      }
    }
    if (icon == null) {
      LOGGER.warning("returning empty icon");
      icon=EmptyIcon.INSTANCE;
    }
    extgraph=factory.createExternalGraphic(icon,format);
  }
 else {
    URL url=onlineResourceLocator.locateResource(uri);
    if (url == null) {
      extgraph=factory.createExternalGraphic(uri,format);
    }
 else {
      extgraph=factory.createExternalGraphic(url,format);
    }
  }
  extgraph.setCustomProperties(paramList);
  return extgraph;
}
