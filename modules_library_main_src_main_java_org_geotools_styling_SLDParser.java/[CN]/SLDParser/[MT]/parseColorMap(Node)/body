{
  ColorMap symbol=factory.createColorMap();
  if (root.hasAttributes()) {
    final NamedNodeMap atts=root.getAttributes();
    Node typeAtt=atts.getNamedItem("type");
    if (typeAtt != null) {
      final String type=typeAtt.getNodeValue();
      if ("ramp".equalsIgnoreCase(type)) {
        symbol.setType(ColorMap.TYPE_RAMP);
      }
 else       if ("intervals".equalsIgnoreCase(type)) {
        symbol.setType(ColorMap.TYPE_INTERVALS);
      }
 else       if ("values".equalsIgnoreCase(type)) {
        symbol.setType(ColorMap.TYPE_VALUES);
      }
 else       if (LOGGER.isLoggable(Level.FINE))       LOGGER.fine(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2,"ColorMapType",type));
    }
    typeAtt=atts.getNamedItem("extended");
    if (typeAtt != null) {
      final String type=typeAtt.getNodeValue();
      if ("true".equalsIgnoreCase(type)) {
        symbol.setExtendedColors(true);
      }
 else       if ("false".equalsIgnoreCase(type)) {
        symbol.setExtendedColors(false);
      }
 else       if (LOGGER.isLoggable(Level.FINE))       LOGGER.fine(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2,"Extended",type));
    }
  }
  NodeList children=root.getChildNodes();
  final int length=children.getLength();
  for (int i=0; i < length; i++) {
    Node child=children.item(i);
    if ((child == null) || (child.getNodeType() != Node.ELEMENT_NODE)) {
      continue;
    }
    String childName=child.getLocalName();
    if (childName == null) {
      childName=child.getNodeName();
    }
    if (childName.equalsIgnoreCase("ColorMapEntry")) {
      symbol.addColorMapEntry(parseColorMapEntry(child));
    }
  }
  return symbol;
}
