{
  ExpressionDOMParser parser=new ExpressionDOMParser((FilterFactory2)ff);
  Expression expr=parser.expression(root);
  if (expr != null)   return expr;
  NodeList children=root.getChildNodes();
  if (children.getLength() == 1 && root.getFirstChild() instanceof CharacterData) {
    Node textNode=root.getFirstChild();
    String text=textNode.getNodeValue();
    return ff.literal(text.trim());
  }
  List<Expression> expressionList=new ArrayList<Expression>();
  for (int index=0; index < children.getLength(); index++) {
    Node child=children.item(index);
    if (child instanceof CharacterData) {
      if (mixedText) {
        String text=child.getNodeValue();
        Expression childExpr=ff.literal(text);
        expressionList.add(childExpr);
      }
    }
 else {
      Expression childExpr=parser.expression(child);
      if (childExpr != null) {
        expressionList.add(childExpr);
      }
    }
  }
  if (expressionList.isEmpty()) {
    return Expression.NIL;
  }
 else   if (expressionList.size() == 1) {
    return expressionList.get(0);
  }
 else   if (expressionList.size() == 2) {
    Expression[] expressionArray=expressionList.toArray(new Expression[0]);
    return ff.function("strConcat",expressionArray);
  }
 else {
    Expression[] expressionArray=expressionList.toArray(new Expression[0]);
    return ff.function("Concatenate",expressionArray);
  }
}
