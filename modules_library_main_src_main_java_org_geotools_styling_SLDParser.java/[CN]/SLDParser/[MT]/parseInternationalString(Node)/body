{
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest("parsingInternationalString " + root);
  }
  NodeList children=root.getChildNodes();
  final int length=children.getLength();
  StringBuilder text=new StringBuilder();
  Map<String,String> translations=new HashMap<String,String>();
  for (int i=0; i < length; i++) {
    Node child=children.item(i);
    if ((child == null)) {
      continue;
    }
 else     if (child.getNodeType() == Node.TEXT_NODE || child.getNodeType() == Node.CDATA_SECTION_NODE) {
      String value=child.getNodeValue();
      if (value == null)       continue;
      text.append(value.trim());
    }
 else     if (child.getNodeType() == Node.ELEMENT_NODE) {
      if (LOGGER.isLoggable(Level.FINEST)) {
        LOGGER.finest("about to parse " + child.getLocalName());
      }
      Element element=(Element)child;
      if (element.getTagName().equalsIgnoreCase("localized")) {
        String lang=element.getAttribute("lang");
        String translation=getFirstChildValue(element);
        translations.put(lang,translation);
      }
    }
 else     continue;
  }
  if (translations.size() > 0) {
    GrowableInternationalString intString=new GrowableInternationalString(text.toString()){
      @Override public String toString(){
        return super.toString(null);
      }
    }
;
    for (    String lang : translations.keySet()) {
      intString.add("","_" + lang,translations.get(lang));
    }
    return intString;
  }
 else {
    return new SimpleInternationalString(getFirstChildValue(root));
  }
}
