{
  Stroke stroke=factory.getDefaultStroke();
  NodeList list=findElements(((Element)root),"GraphicFill");
  int length=list.getLength();
  if (length > 0) {
    if (LOGGER.isLoggable(Level.FINEST))     LOGGER.finest("stroke: found a graphic fill " + list.item(0));
    NodeList kids=list.item(0).getChildNodes();
    for (int i=0; i < kids.getLength(); i++) {
      Node child=kids.item(i);
      if ((child == null) || (child.getNodeType() != Node.ELEMENT_NODE)) {
        continue;
      }
      String childName=child.getLocalName();
      if (childName == null) {
        childName=child.getNodeName();
      }
      if (childName.equalsIgnoreCase(graphicSt)) {
        Graphic g=parseGraphic(child);
        if (LOGGER.isLoggable(Level.FINEST))         LOGGER.finest("setting stroke graphicfill with " + g);
        stroke.setGraphicFill(g);
      }
    }
  }
  list=findElements(((Element)root),"GraphicStroke");
  length=list.getLength();
  if (length > 0) {
    if (LOGGER.isLoggable(Level.FINEST))     LOGGER.finest("stroke: found a graphic stroke " + list.item(0));
    NodeList kids=list.item(0).getChildNodes();
    for (int i=0; i < kids.getLength(); i++) {
      Node child=kids.item(i);
      if ((child == null) || (child.getNodeType() != Node.ELEMENT_NODE)) {
        continue;
      }
      String childName=child.getLocalName();
      if (childName == null) {
        childName=child.getNodeName();
      }
      if (childName.equalsIgnoreCase(graphicSt)) {
        Graphic g=parseGraphic(child);
        if (LOGGER.isLoggable(Level.FINEST))         LOGGER.finest("setting stroke graphicStroke with " + g);
        stroke.setGraphicStroke(g);
      }
    }
  }
  list=findElements(((Element)root),"CssParameter");
  length=list.getLength();
  for (int i=0; i < length; i++) {
    Node child=list.item(i);
    if ((child == null) || (child.getNodeType() != Node.ELEMENT_NODE)) {
      continue;
    }
    if (LOGGER.isLoggable(Level.FINEST)) {
      LOGGER.finest("now I am processing " + child);
    }
    Element param=(Element)child;
    org.w3c.dom.NamedNodeMap map=param.getAttributes();
    final int mapLength=map.getLength();
    if (LOGGER.isLoggable(Level.FINEST)) {
      LOGGER.finest("attributes " + map.toString());
    }
    for (int k=0; k < mapLength; k++) {
      String res=map.item(k).getNodeValue();
      if (LOGGER.isLoggable(Level.FINEST)) {
        LOGGER.finest("processing attribute " + res);
      }
      if (res.equalsIgnoreCase(strokeString)) {
        Expression color=parseCssParameter(child,true);
        stroke.setColor(color);
      }
 else       if (res.equalsIgnoreCase("width") || res.equalsIgnoreCase("stroke-width")) {
        Expression width=parseCssParameter(child,false);
        stroke.setWidth(width);
      }
 else       if (res.equalsIgnoreCase(opacityString) || res.equalsIgnoreCase("stroke-opacity")) {
        Expression opacity=parseCssParameter(child,false);
        stroke.setOpacity(opacity);
      }
 else       if (res.equalsIgnoreCase("linecap") || res.equalsIgnoreCase("stroke-linecap")) {
        stroke.setLineCap(parseCssParameter(child));
      }
 else       if (res.equalsIgnoreCase("linejoin") || res.equalsIgnoreCase("stroke-linejoin")) {
        stroke.setLineJoin(parseCssParameter(child));
      }
 else       if (res.equalsIgnoreCase("dasharray") || res.equalsIgnoreCase("stroke-dasharray")) {
        stroke.setDashArray(parseDashArray(child));
      }
 else       if (res.equalsIgnoreCase("dashoffset") || res.equalsIgnoreCase("stroke-dashoffset")) {
        stroke.setDashOffset(parseCssParameter(child));
      }
    }
  }
  return stroke;
}
