{
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest("Parsing featuretype style " + style.getLocalName());
  }
  FeatureTypeStyle ft=factory.createFeatureTypeStyle();
  ArrayList<Rule> rules=new ArrayList<Rule>();
  ArrayList<String> sti=new ArrayList<String>();
  NodeList children=style.getChildNodes();
  final int length=children.getLength();
  for (int i=0; i < length; i++) {
    Node child=children.item(i);
    if ((child == null) || (child.getNodeType() != Node.ELEMENT_NODE)) {
      continue;
    }
    if (LOGGER.isLoggable(Level.FINEST)) {
      LOGGER.finest("processing " + child.getLocalName());
    }
    String childName=child.getLocalName();
    if (childName == null) {
      childName=child.getNodeName();
    }
    if (childName.equalsIgnoreCase("Name")) {
      ft.setName(getFirstChildValue(child));
    }
 else     if (childName.equalsIgnoreCase("Title")) {
      ft.getDescription().setTitle(parseInternationalString(child));
    }
 else     if (childName.equalsIgnoreCase("Abstract")) {
      ft.getDescription().setAbstract(parseInternationalString(child));
    }
 else     if (childName.equalsIgnoreCase("FeatureTypeName")) {
      ft.setFeatureTypeName(getFirstChildValue(child));
    }
 else     if (childName.equalsIgnoreCase("SemanticTypeIdentifier")) {
      sti.add(getFirstChildValue(child));
    }
 else     if (childName.equalsIgnoreCase("Rule")) {
      rules.add(parseRule(child));
    }
 else     if (childName.equalsIgnoreCase("Transformation")) {
      ExpressionDOMParser parser=new ExpressionDOMParser(CommonFactoryFinder.getFilterFactory2(null));
      Expression tx=parser.expression(getFirstNonTextChild(child));
      ft.setTransformation(tx);
    }
 else     if (childName.equalsIgnoreCase(VendorOptionString)) {
      parseVendorOption(ft.getOptions(),child);
    }
  }
  if (sti.size() > 0) {
    ft.setSemanticTypeIdentifiers(sti.toArray(new String[0]));
  }
  ft.setRules(rules.toArray(new Rule[0]));
  return ft;
}
