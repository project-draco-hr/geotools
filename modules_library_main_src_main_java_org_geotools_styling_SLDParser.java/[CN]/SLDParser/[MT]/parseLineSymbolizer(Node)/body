{
  LineSymbolizer symbol=factory.createLineSymbolizer();
  NamedNodeMap namedNodeMap=root.getAttributes();
  Node uomNode=namedNodeMap.getNamedItem(uomString);
  if (uomNode != null) {
    UomOgcMapping uomMapping=UomOgcMapping.get(uomNode.getNodeValue());
    symbol.setUnitOfMeasure(uomMapping.getUnit());
  }
  NodeList children=root.getChildNodes();
  final int length=children.getLength();
  for (int i=0; i < length; i++) {
    Node child=children.item(i);
    if ((child == null) || (child.getNodeType() != Node.ELEMENT_NODE)) {
      continue;
    }
    String childName=child.getLocalName();
    if (childName == null) {
      childName=child.getNodeName();
    }
    if (childName.equalsIgnoreCase(geomString)) {
      symbol.setGeometry(parseGeometry(child));
    }
 else     if (childName.equalsIgnoreCase(strokeString)) {
      symbol.setStroke(parseStroke(child));
    }
 else     if (childName.equalsIgnoreCase(VendorOptionString)) {
      parseVendorOption(symbol.getOptions(),child);
    }
 else     if (childName.equalsIgnoreCase(PerpendicularOffsetString)) {
      final Expression offsetValue=parseCssParameter(child);
      symbol.setPerpendicularOffset(offsetValue);
    }
  }
  return symbol;
}
