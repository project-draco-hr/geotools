{
  List attMappings=new LinkedList();
  for (Iterator it=attDtos.iterator(); it.hasNext(); ) {
    org.geotools.data.complex.config.AttributeMapping attDto;
    attDto=(org.geotools.data.complex.config.AttributeMapping)it.next();
    String idExpr=attDto.getIdentifierExpression();
    String idXpath=null;
    if (idExpr == null) {
      idXpath=attDto.getIdentifierPath();
      if (idXpath != null) {
        final StepList inputXPathSteps=XPath.steps(root,itemXpath + "/" + idXpath,namespaces);
        validateConfiguredNamespaces(inputXPathSteps);
      }
    }
    String sourceExpr=attDto.getSourceExpression();
    String inputXPath=null;
    if (sourceExpr == null) {
      inputXPath=attDto.getInputAttributePath();
      if (inputXPath != null) {
        final StepList inputXPathSteps=XPath.steps(root,itemXpath + "/" + inputXPath,namespaces);
        validateConfiguredNamespaces(inputXPathSteps);
      }
    }
    String expectedInstanceTypeName=attDto.getTargetAttributeSchemaElement();
    final String targetXPath=attDto.getTargetAttributePath();
    final StepList targetXPathSteps=XPath.steps(root,targetXPath,namespaces);
    validateConfiguredNamespaces(targetXPathSteps);
    final boolean isMultiValued=attDto.isMultiple();
    final Expression idExpression=(idXpath == null) ? parseOgcCqlExpression(idExpr) : new AttributeExpressionImpl(idXpath,new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,this.namespaces));
    final Expression sourceExpression;
    sourceExpression=(inputXPath == null) ? parseOgcCqlExpression(sourceExpr) : new AttributeExpressionImpl(inputXPath,new Hints(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT,this.namespaces));
    final AttributeType expectedInstanceOf;
    final Map clientProperties=getClientProperties(attDto,itemXpath);
    if (expectedInstanceTypeName != null) {
      Name expectedNodeTypeName=Types.degloseName(expectedInstanceTypeName,namespaces);
      expectedInstanceOf=typeRegistry.getAttributeType(expectedNodeTypeName,null,null);
      if (expectedInstanceOf == null) {
        String msg="mapping expects and instance of " + expectedNodeTypeName + " for attribute "+ targetXPath+ " but the attribute descriptor was not found";
        throw new DataSourceException(msg);
      }
    }
 else {
      expectedInstanceOf=null;
    }
    AttributeMapping attMapping;
    String sourceElement=attDto.getLinkElement();
    if (sourceElement != null) {
      Expression elementExpr=parseOgcCqlExpression(sourceElement);
      String sourceField=attDto.getLinkField();
      StepList sourceFieldSteps=null;
      if (sourceField != null) {
        sourceFieldSteps=XPath.steps(root,sourceField,namespaces);
      }
      attMapping=new NestedAttributeMapping(idExpression,sourceExpression,targetXPathSteps,isMultiValued,clientProperties,elementExpr,sourceFieldSteps,namespaces);
    }
 else {
      attMapping=new AttributeMapping(idExpression,sourceExpression,targetXPathSteps,expectedInstanceOf,isMultiValued,clientProperties);
    }
    if (attDto.getLabel() != null) {
      attMapping.setLabel(attDto.getLabel());
    }
    if (attDto.getParentLabel() != null) {
      attMapping.setParentLabel(attDto.getParentLabel());
    }
    if (attDto.getInstancePath() != null) {
      attMapping.setInstanceXpath(attDto.getInstancePath());
    }
    attMappings.add(attMapping);
  }
  return attMappings;
}
