{
  Filter filter;
  List<Double> list=new ArrayList<Double>();
  list.add(35.2);
  list.add(202.3);
  list.add(201.7);
  list.add(10000.5);
  Expression e=new LiteralExpressionImpl(list);
  Expression empty=new LiteralExpressionImpl(new ArrayList<String>());
  filter=fac.equals(e,new LiteralExpressionImpl(201.7));
  assertTrue(filter.evaluate(null));
  filter=fac.equals(new LiteralExpressionImpl(202.3),e);
  assertTrue(filter.evaluate(null));
  filter=fac.notEqual(e,new LiteralExpressionImpl(10.7));
  assertTrue(filter.evaluate(null));
  filter=fac.notEqual(new LiteralExpressionImpl(888.8),e);
  assertTrue(filter.evaluate(null));
  filter=fac.greater(e,new LiteralExpressionImpl(9999));
  assertTrue(filter.evaluate(null));
  filter=fac.greater(e,new LiteralExpressionImpl(99999));
  assertFalse(filter.evaluate(null));
  filter=fac.greater(new LiteralExpressionImpl(50),e);
  assertTrue(filter.evaluate(null));
  filter=fac.greater(new LiteralExpressionImpl(34),e);
  assertFalse(filter.evaluate(null));
  filter=fac.less(e,new LiteralExpressionImpl(50));
  assertTrue(filter.evaluate(null));
  filter=fac.less(e,new LiteralExpressionImpl(34));
  assertFalse(filter.evaluate(null));
  filter=fac.less(new LiteralExpressionImpl(9999),e);
  assertTrue(filter.evaluate(null));
  filter=fac.less(new LiteralExpressionImpl(99999),e);
  assertFalse(filter.evaluate(null));
  filter=fac.greaterOrEqual(e,new LiteralExpressionImpl(10000.5));
  assertTrue(filter.evaluate(null));
  filter=fac.greaterOrEqual(e,new LiteralExpressionImpl(10001));
  assertFalse(filter.evaluate(null));
  filter=fac.greaterOrEqual(new LiteralExpressionImpl(35.2),e);
  assertTrue(filter.evaluate(null));
  filter=fac.greaterOrEqual(new LiteralExpressionImpl(35),e);
  assertFalse(filter.evaluate(null));
  filter=fac.lessOrEqual(e,new LiteralExpressionImpl(35.2));
  assertTrue(filter.evaluate(null));
  filter=fac.lessOrEqual(e,new LiteralExpressionImpl(35));
  assertFalse(filter.evaluate(null));
  filter=fac.lessOrEqual(new LiteralExpressionImpl(10000.5),e);
  assertTrue(filter.evaluate(null));
  filter=fac.lessOrEqual(new LiteralExpressionImpl(10001),e);
  assertFalse(filter.evaluate(null));
  filter=fac.between(e,new LiteralExpressionImpl(34),new LiteralExpressionImpl(36));
  assertTrue(filter.evaluate(null));
  filter=fac.between(e,new LiteralExpressionImpl(200),new LiteralExpressionImpl(300));
  assertTrue(filter.evaluate(null));
  filter=fac.between(e,new LiteralExpressionImpl(36),new LiteralExpressionImpl(201));
  assertFalse(filter.evaluate(null));
  filter=fac.between(e,new LiteralExpressionImpl(203),new LiteralExpressionImpl(9999));
  assertFalse(filter.evaluate(null));
  filter=fac.between(new LiteralExpressionImpl(36),e,new LiteralExpressionImpl(37));
  assertTrue(filter.evaluate(null));
  filter=fac.between(new LiteralExpressionImpl(0),e,new LiteralExpressionImpl(100000));
  assertFalse(filter.evaluate(null));
  filter=fac.between(new LiteralExpressionImpl(34),new LiteralExpressionImpl(0),e);
  assertTrue(filter.evaluate(null));
  filter=fac.between(new LiteralExpressionImpl(10001),new LiteralExpressionImpl(0),e);
  assertFalse(filter.evaluate(null));
  filter=fac.between(empty,new LiteralExpressionImpl(0),new LiteralExpressionImpl(10001));
  assertFalse(filter.evaluate(null));
  filter=fac.between(new LiteralExpressionImpl(10001),new LiteralExpressionImpl(0),empty);
  assertFalse(filter.evaluate(null));
}
