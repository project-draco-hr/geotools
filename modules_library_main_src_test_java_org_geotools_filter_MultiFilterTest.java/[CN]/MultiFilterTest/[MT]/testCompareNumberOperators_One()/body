{
  Filter filter;
  List<Double> list=new ArrayList<Double>();
  list.add(35.2);
  list.add(202.3);
  list.add(201.7);
  list.add(10000.5);
  List<Double> list2=new ArrayList<Double>();
  list2.add(35.2);
  list2.add(35.2);
  list2.add(202.3);
  Expression e1=new LiteralExpressionImpl(list);
  Expression e2=new LiteralExpressionImpl(list2);
  filter=fac.equal(e1,new LiteralExpressionImpl(35.2),false,MatchAction.ONE);
  assertTrue(filter.evaluate(null));
  filter=fac.equal(new LiteralExpressionImpl(35.2),e2,false,MatchAction.ONE);
  assertFalse(filter.evaluate(null));
  filter=fac.notEqual(e1,new LiteralExpressionImpl(35.2),false,MatchAction.ONE);
  assertFalse(filter.evaluate(null));
  filter=fac.notEqual(new LiteralExpressionImpl(35.2),e2,false,MatchAction.ONE);
  assertTrue(filter.evaluate(null));
  filter=fac.greater(e1,new LiteralExpressionImpl(100),false,MatchAction.ONE);
  assertFalse(filter.evaluate(null));
  filter=fac.greater(e1,new LiteralExpressionImpl(9000),false,MatchAction.ONE);
  assertTrue(filter.evaluate(null));
  filter=fac.greater(new LiteralExpressionImpl(40),e1,false,MatchAction.ONE);
  assertTrue(filter.evaluate(null));
  filter=fac.greater(new LiteralExpressionImpl(700),e1,false,MatchAction.ONE);
  assertFalse(filter.evaluate(null));
  filter=fac.less(e1,new LiteralExpressionImpl(40),false,MatchAction.ONE);
  assertTrue(filter.evaluate(null));
  filter=fac.less(e1,new LiteralExpressionImpl(700),false,MatchAction.ONE);
  assertFalse(filter.evaluate(null));
  filter=fac.less(new LiteralExpressionImpl(9000),e1,false,MatchAction.ONE);
  assertTrue(filter.evaluate(null));
  filter=fac.less(new LiteralExpressionImpl(100),e1,false,MatchAction.ONE);
  assertFalse(filter.evaluate(null));
  filter=fac.greaterOrEqual(e1,new LiteralExpressionImpl(10000.5),false,MatchAction.ONE);
  assertTrue(filter.evaluate(null));
  filter=fac.greaterOrEqual(e1,new LiteralExpressionImpl(201.7),false,MatchAction.ONE);
  assertFalse(filter.evaluate(null));
  filter=fac.greaterOrEqual(new LiteralExpressionImpl(35.2),e1,false,MatchAction.ONE);
  assertTrue(filter.evaluate(null));
  filter=fac.greaterOrEqual(new LiteralExpressionImpl(10001),e1,false,MatchAction.ONE);
  assertFalse(filter.evaluate(null));
  filter=fac.lessOrEqual(e1,new LiteralExpressionImpl(35.2),false,MatchAction.ONE);
  assertTrue(filter.evaluate(null));
  filter=fac.lessOrEqual(e1,new LiteralExpressionImpl(10001),false,MatchAction.ONE);
  assertFalse(filter.evaluate(null));
  filter=fac.lessOrEqual(new LiteralExpressionImpl(10000.5),e1,false,MatchAction.ONE);
  assertTrue(filter.evaluate(null));
  filter=fac.lessOrEqual(new LiteralExpressionImpl(201.7),e1,false,MatchAction.ONE);
  assertFalse(filter.evaluate(null));
  filter=fac.between(e1,new LiteralExpressionImpl(34),new LiteralExpressionImpl(300),MatchAction.ONE);
  assertFalse(filter.evaluate(null));
  filter=fac.between(e1,new LiteralExpressionImpl(34),new LiteralExpressionImpl(36),MatchAction.ONE);
  assertTrue(filter.evaluate(null));
}
