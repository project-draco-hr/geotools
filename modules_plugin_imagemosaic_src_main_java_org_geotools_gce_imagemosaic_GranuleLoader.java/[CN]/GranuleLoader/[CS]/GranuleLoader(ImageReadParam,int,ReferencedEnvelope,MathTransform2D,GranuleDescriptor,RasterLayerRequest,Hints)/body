{
  this.readParameters=ImageUtilities.cloneImageReadParam(readParameters);
  this.imageIndex=imageIndex;
  this.cropBBox=cropBBox;
  this.mosaicWorldToGrid=mosaicWorldToGrid;
  this.granuleDescriptor=granuleDescriptor;
  this.request=request;
  this.hints=new Hints(hints);
  if (request.getTileDimensions() != null) {
    final Dimension tileDimension=request.getTileDimensions();
    if (hints != null && hints.containsKey(JAI.KEY_IMAGE_LAYOUT)) {
      final Object layout=this.hints.get(JAI.KEY_IMAGE_LAYOUT);
      if (layout != null && layout instanceof ImageLayout) {
        final ImageLayout imageLayout=(ImageLayout)layout;
        imageLayout.setTileHeight(tileDimension.height);
        imageLayout.setTileWidth(tileDimension.width);
      }
    }
 else {
      final ImageLayout layout=new ImageLayout();
      layout.setTileWidth(tileDimension.width).setTileHeight(tileDimension.height);
      this.hints.add(new RenderingHints(JAI.KEY_IMAGE_LAYOUT,layout));
    }
  }
}
