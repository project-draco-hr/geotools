{
  File nc1=new File("./src/test/resources/org/geotools/coverage/io/netcdf/test-data/20130101.METOPA.GOME2.NO2.DUMMY.nc");
  File mosaic=new File("./target/nc_sampleimages");
  if (mosaic.exists()) {
    FileUtils.deleteDirectory(mosaic);
  }
  assertTrue(mosaic.mkdirs());
  FileUtils.copyFileToDirectory(nc1,mosaic);
  nc1=new File("./src/test/resources/org/geotools/coverage/io/netcdf/test-data/20130101.METOPA.GOME2.BrO.DUMMY.nc");
  FileUtils.copyFileToDirectory(nc1,mosaic);
  File xml=new File("./src/test/resources/org/geotools/coverage/io/netcdf/test-data/DUMMYGOME2.xml");
  FileUtils.copyFileToDirectory(xml,mosaic);
  String indexer="TimeAttribute=time\n" + "Schema=the_geom:Polygon,location:String,imageindex:Integer,time:java.util.Date\n" + "PropertyCollectors=TimestampFileNameExtractorSPI[timeregex](time)\n";
  indexer+=Prop.AUXILIARY_FILE + "=" + "DUMMYGOME2.xml";
  FileUtils.writeStringToFile(new File(mosaic,"indexer.properties"),indexer);
  String timeregex="regex=[0-9]{8}";
  FileUtils.writeStringToFile(new File(mosaic,"timeregex.properties"),timeregex);
  File dsp=new File("./src/test/resources/org/geotools/coverage/io/netcdf/test-data/datastore.properties");
  FileUtils.copyFileToDirectory(dsp,mosaic);
  ImageMosaicFormat format=new ImageMosaicFormat();
  ImageMosaicReader reader=format.getReader(mosaic);
  assertNotNull(reader);
  final File sampleImage1=new File("./target/nc_sampleimages/BrOsample_image");
  final File sampleImage2=new File("./target/nc_sampleimages/NO2sample_image");
  assertTrue(sampleImage1.exists());
  assertTrue(sampleImage2.exists());
  reader.dispose();
}
