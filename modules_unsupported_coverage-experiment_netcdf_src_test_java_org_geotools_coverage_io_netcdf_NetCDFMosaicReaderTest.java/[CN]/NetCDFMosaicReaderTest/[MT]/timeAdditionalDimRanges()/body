{
  final String dlrFolder="/work/data/DLR/samplesForMosaic";
  final File file=new File(dlrFolder);
  final URL url=DataUtilities.fileToURL(file);
  final Hints hints=new Hints(Hints.DEFAULT_COORDINATE_REFERENCE_SYSTEM,CRS.decode("EPSG:4326",true));
  final AbstractGridFormat format=(AbstractGridFormat)GridFormatFinder.findFormat(url,hints);
  final ImageMosaicReader reader=getReader(url,format);
  String[] names=reader.getGridCoverageNames();
  for (  String name : names) {
    LOGGER.info("Coverage: " + name);
    final String[] metadataNames=reader.getMetadataNames(name);
    assertNotNull(metadataNames);
    assertEquals(metadataNames.length,12);
    assertEquals("true",reader.getMetadataValue(name,"HAS_TIME_DOMAIN"));
    assertEquals("2012-04-01T00:00:00.000Z,2012-04-01T01:00:00.000Z,2012-04-01T02:00:00.000Z,2012-04-01T03:00:00.000Z,2012-04-01T04:00:00.000Z,2012-04-01T05:00:00.000Z,2012-04-01T06:00:00.000Z,2012-04-01T07:00:00.000Z,2012-04-01T08:00:00.000Z,2012-04-01T09:00:00.000Z,2012-04-01T10:00:00.000Z,2012-04-01T11:00:00.000Z,2012-04-01T12:00:00.000Z,2012-04-01T13:00:00.000Z,2012-04-01T14:00:00.000Z,2012-04-01T15:00:00.000Z,2012-04-01T16:00:00.000Z,2012-04-01T17:00:00.000Z,2012-04-01T18:00:00.000Z,2012-04-01T19:00:00.000Z,2012-04-01T20:00:00.000Z,2012-04-01T21:00:00.000Z,2012-04-01T22:00:00.000Z,2012-04-01T23:00:00.000Z",reader.getMetadataValue(name,"TIME_DOMAIN"));
    assertEquals("2012-04-01T00:00:00.000Z",reader.getMetadataValue(name,"TIME_DOMAIN_MINIMUM"));
    assertEquals("2012-04-01T23:00:00.000Z",reader.getMetadataValue(name,"TIME_DOMAIN_MAXIMUM"));
    assertEquals("true",reader.getMetadataValue(name,"HAS_ELEVATION_DOMAIN"));
    assertEquals("10.0,35.0,75.0,125.0,175.0,250.0,350.0,450.0,550.0,700.0,900.0,1250.0,1750.0,2500.0",reader.getMetadataValue(name,"ELEVATION_DOMAIN"));
    assertEquals("10.0",reader.getMetadataValue(name,"ELEVATION_DOMAIN_MINIMUM"));
    assertEquals("2500.0",reader.getMetadataValue(name,"ELEVATION_DOMAIN_MAXIMUM"));
    assertEquals("true",reader.getMetadataValue(name,"HAS_RUNTIME_DOMAIN"));
    assertEquals("2012-05-09T12:29:30.000Z,2013-03-30T16:15:58.648Z",reader.getMetadataValue(name,"RUNTIME_DOMAIN"));
    assertEquals("2012-05-09T12:29:30.000Z",reader.getMetadataValue(name,"RUNTIME_DOMAIN_MINIMUM"));
    assertEquals("2013-03-30T16:15:58.648Z",reader.getMetadataValue(name,"RUNTIME_DOMAIN_MAXIMUM"));
    final ParameterValue<Boolean> useJai=AbstractGridFormat.USE_JAI_IMAGEREAD.createValue();
    useJai.setValue(false);
    final ParameterValue<List> time=ImageMosaicFormat.TIME.createValue();
    final Date timeD=parseTimeStamp("2012-04-01T00:00:00.000Z");
    time.setValue(new ArrayList(){
{
        add(timeD);
      }
    }
);
    final ParameterValue<List> elevation=ImageMosaicFormat.ELEVATION.createValue();
    elevation.setValue(new ArrayList(){
{
        add(75d);
      }
    }
);
    Set<ParameterDescriptor<List>> params=reader.getDynamicParameters(name);
    ParameterValue<List<String>> runtime=null;
    final String selectedWaveLength="2013-03-30T16:15:58.648Z";
    for (    ParameterDescriptor param : params) {
      if (param.getName().getCode().equalsIgnoreCase("RUNTIME")) {
        runtime=param.createValue();
        runtime.setValue(new ArrayList<String>(){
{
            add(selectedWaveLength);
          }
        }
);
      }
    }
    assertNotNull(runtime);
    GeneralParameterValue[] values=new GeneralParameterValue[]{useJai,time,elevation,runtime};
    final GridCoverage2D coverage=(GridCoverage2D)reader.read(name,values);
    Assert.assertNotNull(coverage);
    final String fileSource=(String)coverage.getProperty(AbstractGridCoverage2DReader.FILE_SOURCE_PROPERTY);
    final String baseName=FilenameUtils.getBaseName(fileSource);
    assertEquals(baseName,"20130102polyphemus");
  }
}
