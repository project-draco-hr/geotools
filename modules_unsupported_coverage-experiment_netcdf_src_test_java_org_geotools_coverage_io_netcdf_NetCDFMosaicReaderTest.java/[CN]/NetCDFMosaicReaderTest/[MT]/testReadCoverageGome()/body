{
  File nc1=TestData.file(this,"20130101.METOPA.GOME2.NO2.DUMMY.nc");
  File mosaic=new File(TestData.file(this,"."),"nc_harvest3");
  if (mosaic.exists()) {
    FileUtils.deleteDirectory(mosaic);
  }
  assertTrue(mosaic.mkdirs());
  FileUtils.copyFileToDirectory(nc1,mosaic);
  File xml=TestData.file(this,".DUMMY.GOME2.NO2.PGL/GOME2.NO2.xml");
  FileUtils.copyFileToDirectory(xml,mosaic);
  String indexer="TimeAttribute=time\n" + "Schema=the_geom:Polygon,location:String,imageindex:Integer,time:java.util.Date\n" + "PropertyCollectors=TimestampFileNameExtractorSPI[timeregex](time)\n";
  indexer+=Prop.AUXILIARY_FILE + "=" + "GOME2.NO2.xml";
  FileUtils.writeStringToFile(new File(mosaic,"indexer.properties"),indexer);
  String timeregex="regex=[0-9]{8}";
  FileUtils.writeStringToFile(new File(mosaic,"timeregex.properties"),timeregex);
  File dsp=TestData.file(this,"datastore.properties");
  FileUtils.copyFileToDirectory(dsp,mosaic);
  ImageMosaicFormat format=new ImageMosaicFormat();
  ImageMosaicReader reader=format.getReader(mosaic);
  GridCoverage2D coverage=null;
  assertNotNull(reader);
  try {
    String[] names=reader.getGridCoverageNames();
    assertEquals(1,names.length);
    assertEquals("NO2",names[0]);
    GranuleSource source=reader.getGranules("NO2",true);
    SimpleFeatureCollection granules=source.getGranules(Query.ALL);
    assertEquals(1,granules.size());
    assertTrue(CRS.equalsIgnoreMetadata(DefaultGeographicCRS.WGS84,reader.getCoordinateReferenceSystem()));
    GeneralEnvelope envelope=reader.getOriginalEnvelope("NO2");
    assertEquals(-360,envelope.getMinimum(0),0d);
    assertEquals(360,envelope.getMaximum(0),0d);
    assertEquals(-180,envelope.getMinimum(1),0d);
    assertEquals(180,envelope.getMaximum(1),0d);
    coverage=reader.read(null);
    reader.dispose();
    reader=format.getReader(mosaic);
    coverage=reader.read(null);
    assertNotNull(coverage);
  }
  finally {
    if (coverage != null) {
      ImageUtilities.disposePlanarImageChain((PlanarImage)coverage.getRenderedImage());
      coverage.dispose(true);
    }
    reader.dispose();
  }
}
