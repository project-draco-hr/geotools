{
  Capabilities capabilities=new Capabilities();
  capabilities.addType(Beyond.class);
  capabilities.addType(PropertyIsEqualTo.class);
  capabilities.addName("NullCheck");
  capabilities.addName("Mul");
  capabilities.addName("random");
  capabilities.addName("Length",1);
  capabilities.addName("toDegrees","radians");
  capabilities.addName("length","expression");
  FilterFactory2 ff=CommonFactoryFinder.getFilterFactory2(null);
  Filter filter=ff.between(ff.literal(0),ff.property("x"),ff.literal(2));
  assertFalse("supports",capabilities.supports(filter));
  filter=ff.equals(ff.property("x"),ff.literal(2));
  assertTrue("supports",capabilities.supports(filter));
  assertTrue("fullySupports",capabilities.fullySupports(filter));
  Capabilities capabilities2=new Capabilities();
  capabilities2.addAll(capabilities);
  capabilities2.addType(And.class);
  assertTrue(capabilities2.getContents().getScalarCapabilities().hasLogicalOperators());
  assertFalse(capabilities.getContents().getScalarCapabilities().hasLogicalOperators());
}
