{
  if (!(queryFilter instanceof BinaryLogicOperator)) {
    return super.splitFilters(caps,queryFilter);
  }
  int spatialFiltersCount=0;
  List<Filter> children=((BinaryLogicOperator)queryFilter).getChildren();
  for (  Filter f : children) {
    if (f instanceof BinarySpatialOperator) {
      spatialFiltersCount++;
    }
  }
  if (spatialFiltersCount <= 1) {
    return super.splitFilters(caps,queryFilter);
  }
  Filter serverFilter;
  Filter postFilter;
  if (queryFilter instanceof Or) {
    serverFilter=Filter.INCLUDE;
    postFilter=queryFilter;
  }
 else {
    List<Filter> serverChild=new ArrayList<Filter>();
    List<Filter> postChild=new ArrayList<Filter>();
    boolean spatialAdded=false;
    for (    Filter f : children) {
      if (f instanceof BinarySpatialOperator) {
        if (spatialAdded) {
          postChild.add(f);
        }
 else {
          serverChild.add(f);
          spatialAdded=true;
        }
      }
 else {
        serverChild.add(f);
      }
    }
    FilterFactory ff=CommonFactoryFinder.getFilterFactory(null);
    serverFilter=ff.and(serverChild);
    postFilter=ff.and(postChild);
    SimplifyingFilterVisitor sfv=new SimplifyingFilterVisitor();
    serverFilter=(Filter)serverFilter.accept(sfv,null);
    postFilter=(Filter)postFilter.accept(sfv,null);
  }
  return new Filter[]{serverFilter,postFilter};
}
