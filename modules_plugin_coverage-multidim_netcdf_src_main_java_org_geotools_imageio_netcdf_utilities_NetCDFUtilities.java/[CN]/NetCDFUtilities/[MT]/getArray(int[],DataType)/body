{
  if (dimensions == null)   throw new IllegalArgumentException("Illegal dimensions");
  final int nDims=dimensions.length;
switch (nDims) {
case 6:
    if (varDataType == DataType.FLOAT) {
      return new ArrayFloat.D6(dimensions[0],dimensions[1],dimensions[2],dimensions[3],dimensions[4],dimensions[5]);
    }
 else     if (varDataType == DataType.DOUBLE) {
      return new ArrayDouble.D6(dimensions[0],dimensions[1],dimensions[2],dimensions[3],dimensions[4],dimensions[5]);
    }
 else     if (varDataType == DataType.BYTE) {
      return new ArrayByte.D6(dimensions[0],dimensions[1],dimensions[2],dimensions[3],dimensions[4],dimensions[5]);
    }
 else     if (varDataType == DataType.SHORT) {
      return new ArrayShort.D6(dimensions[0],dimensions[1],dimensions[2],dimensions[3],dimensions[4],dimensions[5]);
    }
 else     if (varDataType == DataType.INT) {
      return new ArrayInt.D6(dimensions[0],dimensions[1],dimensions[2],dimensions[3],dimensions[4],dimensions[5]);
    }
 else     throw new IllegalArgumentException("unsupported Datatype");
case 5:
  if (varDataType == DataType.FLOAT) {
    return new ArrayFloat.D5(dimensions[0],dimensions[1],dimensions[2],dimensions[3],dimensions[4]);
  }
 else   if (varDataType == DataType.DOUBLE) {
    return new ArrayDouble.D5(dimensions[0],dimensions[1],dimensions[2],dimensions[3],dimensions[4]);
  }
 else   if (varDataType == DataType.BYTE) {
    return new ArrayByte.D5(dimensions[0],dimensions[1],dimensions[2],dimensions[3],dimensions[4]);
  }
 else   if (varDataType == DataType.SHORT) {
    return new ArrayShort.D5(dimensions[0],dimensions[1],dimensions[2],dimensions[3],dimensions[4]);
  }
 else   if (varDataType == DataType.INT) {
    return new ArrayInt.D5(dimensions[0],dimensions[1],dimensions[2],dimensions[3],dimensions[4]);
  }
 else   throw new IllegalArgumentException("unsupported Datatype");
case 4:
if (varDataType == DataType.FLOAT) {
  return new ArrayFloat.D4(dimensions[0],dimensions[1],dimensions[2],dimensions[3]);
}
 else if (varDataType == DataType.DOUBLE) {
  return new ArrayDouble.D4(dimensions[0],dimensions[1],dimensions[2],dimensions[3]);
}
 else if (varDataType == DataType.BYTE) {
  return new ArrayByte.D4(dimensions[0],dimensions[1],dimensions[2],dimensions[3]);
}
 else if (varDataType == DataType.SHORT) {
  return new ArrayShort.D4(dimensions[0],dimensions[1],dimensions[2],dimensions[3]);
}
 else if (varDataType == DataType.INT) {
  return new ArrayInt.D4(dimensions[0],dimensions[1],dimensions[2],dimensions[3]);
}
 else throw new IllegalArgumentException("unsupported Datatype");
case 3:
if (varDataType == DataType.FLOAT) {
return new ArrayFloat.D3(dimensions[0],dimensions[1],dimensions[2]);
}
 else if (varDataType == DataType.DOUBLE) {
return new ArrayDouble.D3(dimensions[0],dimensions[1],dimensions[2]);
}
 else if (varDataType == DataType.BYTE) {
return new ArrayByte.D3(dimensions[0],dimensions[1],dimensions[2]);
}
 else if (varDataType == DataType.SHORT) {
return new ArrayShort.D3(dimensions[0],dimensions[1],dimensions[2]);
}
 else if (varDataType == DataType.INT) {
return new ArrayInt.D3(dimensions[0],dimensions[1],dimensions[2]);
}
 else throw new IllegalArgumentException("unsupported Datatype");
case 2:
if (varDataType == DataType.FLOAT) {
return new ArrayFloat.D2(dimensions[0],dimensions[1]);
}
 else if (varDataType == DataType.DOUBLE) {
return new ArrayDouble.D2(dimensions[0],dimensions[1]);
}
 else if (varDataType == DataType.BYTE) {
return new ArrayByte.D2(dimensions[0],dimensions[1]);
}
 else if (varDataType == DataType.SHORT) {
return new ArrayShort.D2(dimensions[0],dimensions[1]);
}
 else if (varDataType == DataType.INT) {
return new ArrayInt.D2(dimensions[0],dimensions[1]);
}
 else throw new IllegalArgumentException("unsupported Datatype");
case 1:
if (varDataType == DataType.FLOAT) {
return new ArrayFloat.D1(dimensions[0]);
}
 else if (varDataType == DataType.DOUBLE) {
return new ArrayDouble.D1(dimensions[0]);
}
 else if (varDataType == DataType.BYTE) {
return new ArrayByte.D1(dimensions[0]);
}
 else if (varDataType == DataType.SHORT) {
return new ArrayShort.D1(dimensions[0]);
}
 else if (varDataType == DataType.INT) {
return new ArrayInt.D1(dimensions[0]);
}
 else throw new IllegalArgumentException("unsupported Datatype");
}
throw new IllegalArgumentException("Unable to create a proper array unsupported Datatype");
}
