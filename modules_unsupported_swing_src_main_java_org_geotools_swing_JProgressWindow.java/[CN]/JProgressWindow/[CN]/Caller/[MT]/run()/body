{
  final BoundedRangeModel model=progressBar.getModel();
switch (task) {
case -LABEL:
{
      value=description.getText();
      return;
    }
case +LABEL:
{
    description.setText((String)value);
    return;
  }
case PROGRESS:
{
  model.setValue(((Integer)value).intValue());
  progressBar.setIndeterminate(false);
  return;
}
case STARTED:
{
model.setRangeProperties(0,1,0,100,false);
window.setVisible(true);
break;
}
case COMPLETE:
{
model.setRangeProperties(100,1,0,100,false);
window.setVisible(warningArea != null);
cancel.setEnabled(false);
break;
}
}
synchronized (JProgressWindow.this) {
if (window instanceof JDialog) {
final JDialog window=(JDialog)JProgressWindow.this.window;
switch (task) {
case -TITLE:
{
value=window.getTitle();
return;
}
case +TITLE:
{
window.setTitle((String)value);
return;
}
case STARTED:
{
window.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
return;
}
case COMPLETE:
{
window.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
return;
}
case DISPOSE:
{
window.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
if (warningArea == null || !window.isVisible()) {
window.dispose();
}
return;
}
}
}
 else {
final JInternalFrame window=(JInternalFrame)JProgressWindow.this.window;
switch (task) {
case -TITLE:
{
value=window.getTitle();
return;
}
case +TITLE:
{
window.setTitle((String)value);
return;
}
case STARTED:
{
window.setClosable(false);
return;
}
case COMPLETE:
{
window.setClosable(true);
return;
}
case DISPOSE:
{
window.setDefaultCloseOperation(JInternalFrame.DISPOSE_ON_CLOSE);
if (warningArea == null || !window.isVisible()) {
window.dispose();
}
return;
}
}
}
if (warningArea == null) {
final JTextArea warningArea=new JTextArea();
final JScrollPane scroll=new JScrollPane(warningArea);
final JPanel namedArea=new JPanel(new BorderLayout());
JProgressWindow.this.warningArea=warningArea;
warningArea.setFont(Font.getFont("Monospaced"));
warningArea.setEditable(false);
namedArea.setBorder(BorderFactory.createEmptyBorder(0,HMARGIN,VMARGIN,HMARGIN));
namedArea.add(new JLabel(getString(VocabularyKeys.WARNING)),BorderLayout.NORTH);
namedArea.add(scroll,BorderLayout.CENTER);
content.add(namedArea,BorderLayout.CENTER);
if (window instanceof JDialog) {
final JDialog window=(JDialog)JProgressWindow.this.window;
window.setResizable(true);
}
 else {
final JInternalFrame window=(JInternalFrame)JProgressWindow.this.window;
window.setResizable(true);
}
window.setSize(WIDTH,HEIGHT + WARNING_HEIGHT);
window.setVisible(true);
}
final JTextArea warningArea=(JTextArea)JProgressWindow.this.warningArea;
warningArea.append((String)value);
}
}
