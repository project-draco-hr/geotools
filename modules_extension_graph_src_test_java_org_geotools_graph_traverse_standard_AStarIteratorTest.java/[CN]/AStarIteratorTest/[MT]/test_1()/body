{
  int nnodes=100;
  Node[] ends=GraphTestUtil.buildNoBifurcations(builder(),nnodes);
  final int suspend=50;
  CountingWalker walker=new CountingWalker(){
    int m_mode=0;
    public int visit(    Graphable element,    GraphTraversal traversal){
      super.visit(element,traversal);
      if (m_mode == 0) {
        if (element.getID() == suspend) {
          m_mode++;
          return (GraphTraversal.SUSPEND);
        }
      }
 else       if (m_mode == 1) {
        assertTrue(element.getID() == suspend + 1);
        m_mode++;
      }
      return (GraphTraversal.CONTINUE);
    }
  }
;
  final AStarIterator iterator=createIterator(ends[0],ends[ends.length - 1]);
  BasicGraphTraversal traversal=new BasicGraphTraversal(builder().getGraph(),walker,iterator);
  traversal.init();
  traversal.traverse();
  GraphVisitor visitor=new GraphVisitor(){
    public int visit(    Graphable component){
      if (component.getID() <= suspend)       assertTrue(component.isVisited());
 else       assertTrue(!component.isVisited());
      return 0;
    }
  }
;
  builder().getGraph().visitNodes(visitor);
  assertTrue(walker.getCount() == nnodes - suspend + 1);
  traversal.traverse();
  visitor=new GraphVisitor(){
    public int visit(    Graphable component){
      assertTrue(component.isVisited());
      if (component.getID() == 0)       assertNull(iterator.getParent((Node)component));
 else       assertTrue(iterator.getParent((Node)component).getID() == component.getID() - 1);
      return 0;
    }
  }
;
  builder().getGraph().visitNodes(visitor);
  assertTrue(walker.getCount() == nnodes);
}
