{
  final StringBuffer stringBuffer=new StringBuffer();
  Object[] arguments=(Object[])argument;
  XSDNamedComponent named=(XSDNamedComponent)arguments[0];
  BindingConstructorArgument[] constructorArgs=(BindingConstructorArgument[])arguments[1];
  Class bindingBaseClass=(Class)arguments[2];
  XSDSchema schema=named.getSchema();
  XSDTypeDefinition type=null;
  String desc=null;
  if (named instanceof XSDTypeDefinition) {
    type=(XSDTypeDefinition)named;
    desc="type";
  }
  if (named instanceof XSDElementDeclaration) {
    type=((XSDElementDeclaration)named).getTypeDefinition();
    desc="element";
  }
  if (named instanceof XSDAttributeDeclaration) {
    type=((XSDAttributeDeclaration)named).getTypeDefinition();
    desc="attribute";
  }
  String ns=schema.getTargetNamespace();
  String prefix=Schemas.getTargetPrefix(schema);
  stringBuffer.append(TEXT_1);
  stringBuffer.append(bindingBaseClass.getName());
  stringBuffer.append(TEXT_2);
  if (constructorArgs != null) {
    for (int i=0; i < constructorArgs.length; i++) {
      Class arg=constructorArgs[i].clazz;
      stringBuffer.append(TEXT_3);
      stringBuffer.append(arg.getName());
      stringBuffer.append(TEXT_4);
    }
  }
  stringBuffer.append(TEXT_5);
  stringBuffer.append(desc);
  stringBuffer.append(TEXT_6);
  stringBuffer.append(named.getTargetNamespace());
  stringBuffer.append(TEXT_7);
  stringBuffer.append(named.getName());
  stringBuffer.append(TEXT_8);
  StringWriter writer=new StringWriter();
  SAXTransformerFactory txFactory=(SAXTransformerFactory)SAXTransformerFactory.newInstance();
  TransformerHandler xmls;
  try {
    xmls=txFactory.newTransformerHandler();
  }
 catch (  TransformerConfigurationException e) {
    throw new RuntimeException(e);
  }
  xmls.getTransformer().setOutputProperty(OutputKeys.METHOD,"XML");
  xmls.getTransformer().setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"true");
  xmls.getTransformer().setOutputProperty(OutputKeys.INDENT,"true");
  try {
    xmls.getTransformer().transform(new DOMSource(named.getElement()),new StreamResult(writer));
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  String[] lines=writer.getBuffer().toString().split("\n");
  for (int i=0; i < lines.length; i++) {
    stringBuffer.append(TEXT_9);
    stringBuffer.append(lines[i].replaceAll("<","&lt;").replaceAll(">","&gt;"));
  }
  stringBuffer.append(TEXT_10);
  String className=named.getName().substring(0,1).toUpperCase() + named.getName().substring(1) + "Binding";
  String baseClassName=bindingBaseClass.getName();
  baseClassName=baseClassName.substring(bindingBaseClass.getPackage().getName().length() + 1);
  stringBuffer.append(TEXT_11);
  stringBuffer.append(className);
  stringBuffer.append(TEXT_12);
  stringBuffer.append(baseClassName);
  stringBuffer.append(TEXT_13);
  if (constructorArgs != null) {
    List fieldNames=new ArrayList();
    StringBuffer constructor=new StringBuffer();
    constructor.append("public " + className + "( ");
    for (int i=0; i < constructorArgs.length; i++) {
      String fieldName=constructorArgs[i].getName();
      Class arg=constructorArgs[i].clazz;
      String typeName=arg.getName();
      if (typeName.lastIndexOf('.') != -1) {
        typeName=typeName.substring(typeName.lastIndexOf('.') + 1);
      }
      fieldNames.add(fieldName);
      if ("member".equals(constructorArgs[i].getMode())) {
        stringBuffer.append(TEXT_14);
        stringBuffer.append(typeName);
        stringBuffer.append(TEXT_15);
        stringBuffer.append(fieldName);
        stringBuffer.append(TEXT_16);
      }
      constructor.append(typeName + " " + fieldName);
      constructor.append(",");
    }
    constructor.setLength(constructor.length() - 1);
    constructor.append(" ) {\n");
    constructor.append("\t\tsuper(");
    boolean trim=false;
    for (int i=0; i < constructorArgs.length; i++) {
      String fieldName=(String)fieldNames.get(i);
      if ("parent".equals(constructorArgs[i].getMode())) {
        constructor.append(fieldName + ",");
        trim=true;
      }
    }
    if (trim) {
      constructor.setLength(constructor.length() - 1);
    }
    constructor.append(");\n");
    for (int i=0; i < constructorArgs.length; i++) {
      String fieldName=(String)fieldNames.get(i);
      if ("member".equals(constructorArgs[i].getMode())) {
        constructor.append("\t\tthis." + fieldName + " = "+ fieldName+ ";\n");
      }
    }
    constructor.append("\t}\n");
    stringBuffer.append(TEXT_17);
    stringBuffer.append(constructor.toString());
  }
  stringBuffer.append(TEXT_18);
  stringBuffer.append(prefix.toUpperCase());
  stringBuffer.append(TEXT_19);
  stringBuffer.append(named.getName());
  stringBuffer.append(TEXT_20);
  if (type instanceof XSDSimpleTypeDefinition) {
    stringBuffer.append(TEXT_21);
  }
 else {
    stringBuffer.append(TEXT_22);
  }
  stringBuffer.append(TEXT_23);
  return stringBuffer.toString();
}
