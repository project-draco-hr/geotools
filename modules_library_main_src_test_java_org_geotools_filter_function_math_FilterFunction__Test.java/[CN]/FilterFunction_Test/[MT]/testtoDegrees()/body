{
  try {
    FilterFunction_toDegrees toDegrees=(FilterFunction_toDegrees)ff.function("toDegrees",org.opengis.filter.expression.Expression.NIL);
    assertEquals("Name is, ","toDegrees",toDegrees.getName());
    assertEquals("Number of arguments, ",1,toDegrees.getArgCount());
    Function toDegreesFunction=ff.function("toDegrees",literal_1);
    double good0=Math.toDegrees(1.0);
    if (Double.isNaN(good0)) {
      assertTrue("toDegrees of (1.0):",Double.isNaN(((Double)toDegreesFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("toDegrees of (1.0):",(double)Math.toDegrees(1.0),((Double)toDegreesFunction.evaluate(null)).doubleValue(),0.00001);
    }
    toDegreesFunction=ff.function("toDegrees",literal_m1);
    double good1=Math.toDegrees(-1.0);
    if (Double.isNaN(good1)) {
      assertTrue("toDegrees of (-1.0):",Double.isNaN(((Double)toDegreesFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("toDegrees of (-1.0):",(double)Math.toDegrees(-1.0),((Double)toDegreesFunction.evaluate(null)).doubleValue(),0.00001);
    }
    toDegreesFunction=ff.function("toDegrees",literal_2);
    double good2=Math.toDegrees(2.0);
    if (Double.isNaN(good2)) {
      assertTrue("toDegrees of (2.0):",Double.isNaN(((Double)toDegreesFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("toDegrees of (2.0):",(double)Math.toDegrees(2.0),((Double)toDegreesFunction.evaluate(null)).doubleValue(),0.00001);
    }
    toDegreesFunction=ff.function("toDegrees",literal_m2);
    double good3=Math.toDegrees(-2.0);
    if (Double.isNaN(good3)) {
      assertTrue("toDegrees of (-2.0):",Double.isNaN(((Double)toDegreesFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("toDegrees of (-2.0):",(double)Math.toDegrees(-2.0),((Double)toDegreesFunction.evaluate(null)).doubleValue(),0.00001);
    }
    toDegreesFunction=ff.function("toDegrees",literal_pi);
    double good4=Math.toDegrees(Math.PI);
    if (Double.isNaN(good4)) {
      assertTrue("toDegrees of (3.141592653589793):",Double.isNaN(((Double)toDegreesFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("toDegrees of (3.141592653589793):",(double)Math.toDegrees(3.141592653589793),((Double)toDegreesFunction.evaluate(null)).doubleValue(),0.00001);
    }
    toDegreesFunction=ff.function("toDegrees",literal_05pi);
    double good5=Math.toDegrees(1.5707963267948966);
    if (Double.isNaN(good5)) {
      assertTrue("toDegrees of (1.5707963267948966):",Double.isNaN(((Double)toDegreesFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("toDegrees of (1.5707963267948966):",(double)Math.toDegrees(1.5707963267948966),((Double)toDegreesFunction.evaluate(null)).doubleValue(),0.00001);
    }
  }
 catch (  FactoryRegistryException e) {
    e.printStackTrace();
    fail("Unexpected exception: " + e.getMessage());
  }
}
