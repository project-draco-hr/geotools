{
  try {
    FilterFunction_sqrt sqrt=(FilterFunction_sqrt)ff.function("sqrt",org.opengis.filter.expression.Expression.NIL);
    assertEquals("Name is, ","sqrt",sqrt.getName());
    assertEquals("Number of arguments, ",1,sqrt.getFunctionName().getArgumentCount());
    Function sqrtFunction=ff.function("sqrt",literal_1);
    double good0=Math.sqrt(1.0);
    if (Double.isNaN(good0)) {
      assertTrue("sqrt of (1.0):",Double.isNaN(((Double)sqrtFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("sqrt of (1.0):",(double)Math.sqrt(1.0),((Double)sqrtFunction.evaluate(null)).doubleValue(),0.00001);
    }
    sqrtFunction=ff.function("sqrt",literal_m1);
    double good1=Math.sqrt(-1.0);
    if (Double.isNaN(good1)) {
      assertTrue("sqrt of (-1.0):",Double.isNaN(((Double)sqrtFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("sqrt of (-1.0):",(double)Math.sqrt(-1.0),((Double)sqrtFunction.evaluate(null)).doubleValue(),0.00001);
    }
    sqrtFunction=ff.function("sqrt",literal_2);
    double good2=Math.sqrt(2.0);
    if (Double.isNaN(good2)) {
      assertTrue("sqrt of (2.0):",Double.isNaN(((Double)sqrtFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("sqrt of (2.0):",(double)Math.sqrt(2.0),((Double)sqrtFunction.evaluate(null)).doubleValue(),0.00001);
    }
    sqrtFunction=ff.function("sqrt",literal_m2);
    double good3=Math.sqrt(-2.0);
    if (Double.isNaN(good3)) {
      assertTrue("sqrt of (-2.0):",Double.isNaN(((Double)sqrtFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("sqrt of (-2.0):",(double)Math.sqrt(-2.0),((Double)sqrtFunction.evaluate(null)).doubleValue(),0.00001);
    }
    sqrtFunction=ff.function("sqrt",literal_pi);
    double good4=Math.sqrt(Math.PI);
    if (Double.isNaN(good4)) {
      assertTrue("sqrt of (3.141592653589793):",Double.isNaN(((Double)sqrtFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("sqrt of (3.141592653589793):",(double)Math.sqrt(3.141592653589793),((Double)sqrtFunction.evaluate(null)).doubleValue(),0.00001);
    }
    sqrtFunction=ff.function("sqrt",literal_05pi);
    double good5=Math.sqrt(1.5707963267948966);
    if (Double.isNaN(good5)) {
      assertTrue("sqrt of (1.5707963267948966):",Double.isNaN(((Double)sqrtFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("sqrt of (1.5707963267948966):",(double)Math.sqrt(1.5707963267948966),((Double)sqrtFunction.evaluate(null)).doubleValue(),0.00001);
    }
  }
 catch (  FactoryRegistryException e) {
    e.printStackTrace();
    fail("Unexpected exception: " + e.getMessage());
  }
}
