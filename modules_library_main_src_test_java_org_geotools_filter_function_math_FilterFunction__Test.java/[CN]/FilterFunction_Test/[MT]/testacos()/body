{
  try {
    FilterFunction_acos acos=(FilterFunction_acos)ff.function("acos",org.opengis.filter.expression.Expression.NIL);
    assertEquals("Name is, ","acos",acos.getName());
    assertEquals("Number of arguments, ",1,acos.getFunctionName().getArgumentCount());
    Function acosFunction=ff.function("acos",literal_1);
    double good0=Math.acos(1.0);
    if (Double.isNaN(good0)) {
      assertTrue("acos of (1.0):",Double.isNaN(((Double)acosFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("acos of (1.0):",(double)Math.acos(1.0),((Double)acosFunction.evaluate(null)).doubleValue(),0.00001);
    }
    acosFunction=ff.function("acos",literal_m1);
    double good1=Math.acos(-1.0);
    if (Double.isNaN(good1)) {
      assertTrue("acos of (-1.0):",Double.isNaN(((Double)acosFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("acos of (-1.0):",(double)Math.acos(-1.0),((Double)acosFunction.evaluate(null)).doubleValue(),0.00001);
    }
    acosFunction=ff.function("acos",literal_2);
    double good2=Math.acos(2.0);
    if (Double.isNaN(good2)) {
      assertTrue("acos of (2.0):",Double.isNaN(((Double)acosFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("acos of (2.0):",(double)Math.acos(2.0),((Double)acosFunction.evaluate(null)).doubleValue(),0.00001);
    }
    acosFunction=ff.function("acos",literal_m2);
    double good3=Math.acos(-2.0);
    if (Double.isNaN(good3)) {
      assertTrue("acos of (-2.0):",Double.isNaN(((Double)acosFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("acos of (-2.0):",(double)Math.acos(-2.0),((Double)acosFunction.evaluate(null)).doubleValue(),0.00001);
    }
    acosFunction=ff.function("acos",literal_pi);
    double good4=Math.acos(Math.PI);
    if (Double.isNaN(good4)) {
      assertTrue("acos of (3.141592653589793):",Double.isNaN(((Double)acosFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("acos of (3.141592653589793):",(double)Math.acos(3.141592653589793),((Double)acosFunction.evaluate(null)).doubleValue(),0.00001);
    }
    acosFunction=ff.function("acos",literal_05pi);
    double good5=Math.acos(1.5707963267948966);
    if (Double.isNaN(good5)) {
      assertTrue("acos of (1.5707963267948966):",Double.isNaN(((Double)acosFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("acos of (1.5707963267948966):",(double)Math.acos(1.5707963267948966),((Double)acosFunction.evaluate(null)).doubleValue(),0.00001);
    }
  }
 catch (  FactoryRegistryException e) {
    e.printStackTrace();
    fail("Unexpected exception: " + e.getMessage());
  }
}
