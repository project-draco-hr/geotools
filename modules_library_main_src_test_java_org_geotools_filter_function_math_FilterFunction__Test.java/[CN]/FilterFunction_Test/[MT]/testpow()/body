{
  try {
    FilterFunction_pow pow=(FilterFunction_pow)ff.function("pow",org.opengis.filter.expression.Expression.NIL,org.opengis.filter.expression.Expression.NIL);
    assertEquals("Name is, ","pow",pow.getName());
    assertEquals("Number of arguments, ",2,pow.getFunctionName().getArgumentCount());
    Function powFunction=ff.function("pow",literal_1,literal_m1);
    double good0=Math.pow(1.0,-1.0);
    if (Double.isNaN(good0)) {
      assertTrue("pow of (1.0,-1.0):",Double.isNaN(((Double)powFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("pow of (1.0,-1.0):",(double)Math.pow(1.0,-1.0),((Double)powFunction.evaluate(null)).doubleValue(),0.00001);
    }
    powFunction=ff.function("pow",literal_m1,literal_2);
    double good1=Math.pow(-1.0,2.0);
    if (Double.isNaN(good1)) {
      assertTrue("pow of (-1.0,2.0):",Double.isNaN(((Double)powFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("pow of (-1.0,2.0):",(double)Math.pow(-1.0,2.0),((Double)powFunction.evaluate(null)).doubleValue(),0.00001);
    }
    powFunction=ff.function("pow",literal_2,literal_m2);
    double good2=Math.pow(2.0,-2.0);
    if (Double.isNaN(good2)) {
      assertTrue("pow of (2.0,-2.0):",Double.isNaN(((Double)powFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("pow of (2.0,-2.0):",(double)Math.pow(2.0,-2.0),((Double)powFunction.evaluate(null)).doubleValue(),0.00001);
    }
    powFunction=ff.function("pow",literal_m2,literal_pi);
    double good3=Math.pow(-2.0,3.141592653589793);
    if (Double.isNaN(good3)) {
      assertTrue("pow of (-2.0,3.141592653589793):",Double.isNaN(((Double)powFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("pow of (-2.0,3.141592653589793):",(double)Math.pow(-2.0,3.141592653589793),((Double)powFunction.evaluate(null)).doubleValue(),0.00001);
    }
    powFunction=ff.function("pow",literal_pi,literal_05pi);
    double good4=Math.pow(3.141592653589793,1.5707963267948966);
    if (Double.isNaN(good4)) {
      assertTrue("pow of (3.141592653589793,1.5707963267948966):",Double.isNaN(((Double)powFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("pow of (3.141592653589793,1.5707963267948966):",(double)Math.pow(3.141592653589793,1.5707963267948966),((Double)powFunction.evaluate(null)).doubleValue(),0.00001);
    }
    powFunction=ff.function("pow",literal_05pi,literal_1);
    double good5=Math.pow(1.5707963267948966,1.0);
    if (Double.isNaN(good5)) {
      assertTrue("pow of (1.5707963267948966,1.0):",Double.isNaN(((Double)powFunction.evaluate(null)).doubleValue()));
    }
 else {
      assertEquals("pow of (1.5707963267948966,1.0):",(double)Math.pow(1.5707963267948966,1.0),((Double)powFunction.evaluate(null)).doubleValue(),0.00001);
    }
  }
 catch (  FactoryRegistryException e) {
    e.printStackTrace();
    fail("Unexpected exception: " + e.getMessage());
  }
}
