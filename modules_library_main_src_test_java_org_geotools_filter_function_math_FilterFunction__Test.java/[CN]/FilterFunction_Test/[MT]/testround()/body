{
  try {
    FilterFunction_round round=(FilterFunction_round)ff.function("round",org.opengis.filter.expression.Expression.NIL);
    assertEquals("Name is, ","round",round.getName());
    assertEquals("Number of arguments, ",1,round.getArgCount());
    Function roundFunction=ff.function("round",literal_1);
    assertEquals("round of (1.0):",(int)Math.round(1.0),((Integer)roundFunction.evaluate(null)).intValue(),0.00001);
    roundFunction=ff.function("round",literal_m1);
    assertEquals("round of (-1.0):",(int)Math.round(-1.0),((Integer)roundFunction.evaluate(null)).intValue(),0.00001);
    roundFunction=ff.function("round",literal_2);
    assertEquals("round of (2.0):",(int)Math.round(2.0),((Integer)roundFunction.evaluate(null)).intValue(),0.00001);
    roundFunction=ff.function("round",literal_m2);
    assertEquals("round of (-2.0):",(int)Math.round(-2.0),((Integer)roundFunction.evaluate(null)).intValue(),0.00001);
    roundFunction=ff.function("round",literal_pi);
    assertEquals("round of (3.141592653589793):",(int)Math.round(3.141592653589793),((Integer)roundFunction.evaluate(null)).intValue(),0.00001);
    roundFunction=ff.function("round",literal_05pi);
    assertEquals("round of (1.5707963267948966):",(int)Math.round(1.5707963267948966),((Integer)roundFunction.evaluate(null)).intValue(),0.00001);
  }
 catch (  FactoryRegistryException e) {
    e.printStackTrace();
    fail("Unexpected exception: " + e.getMessage());
  }
}
