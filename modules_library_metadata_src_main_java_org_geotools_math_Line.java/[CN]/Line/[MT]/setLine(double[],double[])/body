{
  final int N=x.length;
  if (N != y.length) {
    throw new MismatchedSizeException();
  }
  int count=0;
  double mean_x=0;
  double mean_y=0;
  for (int i=0; i < N; i++) {
    final double xi=x[i];
    final double yi=y[i];
    if (!Double.isNaN(xi) && !Double.isNaN(yi)) {
      mean_x+=xi;
      mean_y+=yi;
      count++;
    }
  }
  mean_x/=count;
  mean_y/=count;
  double mean_x2=0;
  double mean_y2=0;
  double mean_xy=0;
  for (int i=0; i < N; i++) {
    double xi=x[i];
    double yi=y[i];
    if (!Double.isNaN(xi) && !Double.isNaN(yi)) {
      xi-=mean_x;
      mean_x2+=xi * xi;
      mean_y2+=yi * yi;
      mean_xy+=xi * yi;
    }
  }
  mean_x2/=count;
  mean_y2/=count;
  mean_xy/=count;
  slope=mean_xy / mean_x2;
  y0=mean_y - mean_x * slope;
  return mean_xy / Math.sqrt(mean_x2 * (mean_y2 - mean_y * mean_y));
}
