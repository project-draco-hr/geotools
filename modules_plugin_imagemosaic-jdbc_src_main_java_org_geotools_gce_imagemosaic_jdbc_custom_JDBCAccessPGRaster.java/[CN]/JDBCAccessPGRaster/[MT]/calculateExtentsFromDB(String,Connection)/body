{
  PreparedStatement stmt=con.prepareStatement(getConfig().getSqlUpdateMosaicStatement());
  List<ImageLevelInfo> toBeRemoved=new ArrayList<ImageLevelInfo>();
  for (  ImageLevelInfo li : getLevelInfos()) {
    if (li.getCoverageName().equals(coverageName) == false) {
      continue;
    }
    if (li.calculateExtentsNeeded() == false) {
      continue;
    }
    Date start=new Date();
    if (LOGGER.isLoggable(Level.INFO))     LOGGER.info("Calculate extent for " + li.toString());
    final String rasterAttr=getConfig().getBlobAttributeNameInTileTable();
    String envSelect="with envelopes as ( select st_envelope(" + rasterAttr + " ) as env from "+ li.getTileTableName()+ " ) select st_asbinary(st_extent(env)) from envelopes";
    Envelope envelope=null;
    PreparedStatement s=con.prepareStatement(envSelect);
    ResultSet r=s.executeQuery();
    WKBReader reader=new WKBReader();
    if (r.next()) {
      byte[] bytes=r.getBytes(1);
      Geometry g;
      try {
        g=reader.read(bytes);
      }
 catch (      ParseException e) {
        LOGGER.log(Level.SEVERE,e.getMessage(),e);
        throw new IOException(e);
      }
      envelope=g.getEnvelopeInternal();
    }
    r.close();
    s.close();
    if (envelope == null) {
      if (LOGGER.isLoggable(Level.WARNING))       LOGGER.log(Level.WARNING,"No extent, removing this level");
      toBeRemoved.add(li);
      continue;
    }
    li.setExtentMaxX(new Double(envelope.getMaxX()));
    li.setExtentMaxY(new Double(envelope.getMaxY()));
    li.setExtentMinX(new Double(envelope.getMinX()));
    li.setExtentMinY(new Double(envelope.getMinY()));
    stmt.setDouble(1,li.getExtentMaxX().doubleValue());
    stmt.setDouble(2,li.getExtentMaxY().doubleValue());
    stmt.setDouble(3,li.getExtentMinX().doubleValue());
    stmt.setDouble(4,li.getExtentMinY().doubleValue());
    stmt.setString(5,li.getCoverageName());
    stmt.setString(6,li.getTileTableName());
    stmt.execute();
    long msecs=(new Date()).getTime() - start.getTime();
    if (LOGGER.isLoggable(Level.INFO))     LOGGER.info("Calculate extent for " + li.toString() + " finished in "+ msecs+ " ms ");
  }
  getLevelInfos().removeAll(toBeRemoved);
  if (stmt != null) {
    stmt.close();
  }
}
