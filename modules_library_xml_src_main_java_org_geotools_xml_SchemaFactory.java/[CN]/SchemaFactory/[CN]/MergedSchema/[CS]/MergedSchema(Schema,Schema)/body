{
  if ((s1.getId() == null) || s1.getId().equals("")) {
    id=s2.getId();
  }
 else {
    id=s1.getId();
  }
  if ((s1.getVersion() == null) || s1.getVersion().equals("")) {
    version=s2.getVersion();
  }
 else {
    version=s1.getVersion();
  }
  if ((s1.getTargetNamespace() == null) || s1.getTargetNamespace().equals("")) {
    targetNamespace=s2.getTargetNamespace();
  }
 else {
    if ((s2.getTargetNamespace() != null) && !s1.getTargetNamespace().equals(s2.getTargetNamespace())) {
      throw new SAXException("cannot merge two target namespaces. " + s1.getTargetNamespace() + " "+ s2.getTargetNamespace());
    }
    targetNamespace=s1.getTargetNamespace();
  }
  aForm=s1.isAttributeFormDefault() || s2.isAttributeFormDefault();
  eForm=s1.isElementFormDefault() || s2.isElementFormDefault();
  HashMap m=new HashMap();
  AttributeGroup[] ag1=s1.getAttributeGroups();
  if (ag1 == null) {
    ag1=new AttributeGroup[0];
  }
  AttributeGroup[] ag2=s2.getAttributeGroups();
  if (ag2 == null) {
    ag2=new AttributeGroup[0];
  }
  for (int i=0; i < ag1.length; i++)   m.put(ag1[i].getName(),ag1[i]);
  for (int i=0; i < ag2.length; i++)   if (!m.containsKey(ag2[i].getName())) {
    m.put(ag2[i].getName(),ag2[i]);
  }
  attributeGroups=new AttributeGroup[m.size()];
  Object[] obj=m.values().toArray();
  for (int i=0; i < obj.length; i++)   attributeGroups[i]=(AttributeGroup)(obj[i]);
  m=new HashMap();
  Attribute[] a1=s1.getAttributes();
  if (a1 == null) {
    a1=new Attribute[0];
  }
  Attribute[] a2=s2.getAttributes();
  if (a2 == null) {
    a2=new Attribute[0];
  }
  for (int i=0; i < a1.length; i++)   m.put(a1[i].getName(),a1[i]);
  for (int i=0; i < a2.length; i++)   if (!m.containsKey(a2[i].getName())) {
    m.put(a2[i].getName(),a2[i]);
  }
  attributes=new Attribute[m.size()];
  obj=m.values().toArray();
  for (int i=0; i < obj.length; i++)   attributes[i]=(Attribute)(obj[i]);
  block=s1.getBlockDefault() | s2.getBlockDefault();
  finaL=s1.getFinalDefault() | s2.getFinalDefault();
  m=new HashMap();
  ComplexType[] c1=s1.getComplexTypes();
  if (c1 == null) {
    c1=new ComplexType[0];
  }
  ComplexType[] c2=s2.getComplexTypes();
  if (c2 == null) {
    c2=new ComplexType[0];
  }
  for (int i=0; i < c1.length; i++)   m.put(c1[i].getName(),c1[i]);
  for (int i=0; i < c2.length; i++)   if (!m.containsKey(c2[i].getName())) {
    m.put(c2[i].getName(),c2[i]);
  }
  complexTypes=new ComplexType[m.size()];
  obj=m.values().toArray();
  for (int i=0; i < obj.length; i++)   complexTypes[i]=(ComplexType)(obj[i]);
  m=new HashMap();
  SimpleType[] ss1=s1.getSimpleTypes();
  if (ss1 == null) {
    ss1=new SimpleType[0];
  }
  SimpleType[] ss2=s2.getSimpleTypes();
  if (ss2 == null) {
    ss2=new SimpleType[0];
  }
  for (int i=0; i < ss1.length; i++)   m.put(ss1[i].getName(),ss1[i]);
  for (int i=0; i < ss2.length; i++)   if (!m.containsKey(ss2[i].getName())) {
    m.put(ss2[i].getName(),ss2[i]);
  }
  simpleTypes=new SimpleType[m.size()];
  obj=m.values().toArray();
  for (int i=0; i < obj.length; i++)   simpleTypes[i]=(SimpleType)(obj[i]);
  m=new HashMap();
  Element[] e1=s1.getElements();
  if (e1 == null) {
    e1=new Element[0];
  }
  Element[] e2=s2.getElements();
  if (e2 == null) {
    e2=new Element[0];
  }
  for (int i=0; i < e1.length; i++)   m.put(e1[i].getName(),e1[i]);
  for (int i=0; i < e2.length; i++)   if (!m.containsKey(e2[i].getName())) {
    m.put(e2[i].getName(),e2[i]);
  }
  elements=new Element[m.size()];
  obj=m.values().toArray();
  for (int i=0; i < obj.length; i++)   elements[i]=(Element)(obj[i]);
  m=new HashMap();
  Group[] g1=s1.getGroups();
  if (g1 == null) {
    g1=new Group[0];
  }
  Group[] g2=s2.getGroups();
  if (g2 == null) {
    g2=new Group[0];
  }
  for (int i=0; i < g1.length; i++)   m.put(g1[i].getName(),g1[i]);
  for (int i=0; i < g2.length; i++)   if (!m.containsKey(g2[i].getName())) {
    m.put(g2[i].getName(),g2[i]);
  }
  groups=new Group[m.size()];
  obj=m.values().toArray();
  for (int i=0; i < obj.length; i++)   groups[i]=(Group)(obj[i]);
  m=new HashMap();
  Schema[] i1=s1.getImports();
  if (i1 == null) {
    i1=new Schema[0];
  }
  Schema[] i2=s2.getImports();
  if (i2 == null) {
    i2=new Schema[0];
  }
  for (int i=0; i < i1.length; i++)   m.put(i1[i].getTargetNamespace(),i1[i]);
  for (int i=0; i < i2.length; i++)   if (!m.containsKey(i2[i].getTargetNamespace())) {
    m.put(i2[i].getTargetNamespace(),i2[i]);
  }
  imports=new Schema[m.size()];
  obj=m.values().toArray();
  for (int i=0; i < obj.length; i++)   imports[i]=(Schema)(obj[i]);
  URI u1=s1.getURI();
  URI u2=s2.getURI();
  if (u1 == null) {
    uri=u2;
  }
 else {
    if (u2 == null) {
      uri=u1;
    }
 else {
      uri=u2.relativize(u1);
    }
  }
  if ((s1.getPrefix() == null) || s1.getPrefix().equals("")) {
    prefix=s2.getPrefix();
  }
 else {
    prefix=s1.getPrefix();
  }
}
