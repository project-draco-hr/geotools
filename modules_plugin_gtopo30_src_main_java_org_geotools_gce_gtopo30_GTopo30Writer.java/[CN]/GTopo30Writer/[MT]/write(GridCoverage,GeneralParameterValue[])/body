{
  if (coverage == null)   throw new NullPointerException("The provided source coverage is null");
  GridCoverage2D gc2D=(GridCoverage2D)coverage;
  GeoToolsWriteParams gtParams=null;
  if (params != null) {
    if (params != null) {
      Parameter<?> param;
      final int length=params.length;
      for (int i=0; i < length; i++) {
        param=(Parameter<?>)params[i];
        if (param.getDescriptor().getName().getCode().equals(AbstractGridFormat.GEOTOOLS_WRITE_PARAMS.getName().toString())) {
          gtParams=(GeoToolsWriteParams)param.getValue();
        }
      }
    }
  }
  if (gtParams == null)   gtParams=new GTopo30WriteParams();
  final boolean compressed=gtParams.getCompressionMode() == ImageWriteParam.MODE_EXPLICIT;
  int[] writeBands=gtParams.getSourceBands();
  int writeBand=CoverageUtilities.getVisibleBand(gc2D.getRenderedImage());
  if ((writeBands == null || writeBands.length == 0 || writeBands.length > 1) && (writeBand < 0 || writeBand > gc2D.getNumSampleDimensions()))   throw new IllegalArgumentException("You need to supply a valid index for deciding which band to write.");
  if (!((writeBands == null || writeBands.length == 0 || writeBands.length > 1)))   writeBand=writeBands[0];
  String fileName=gc2D.getName().toString();
  if (compressed) {
    destination=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(new File((File)destination,new StringBuffer(fileName).append(".zip").toString()))));
  }
  final ParameterValueGroup pvg=sdFactory.getParameters();
  pvg.parameter("Source").setValue(gc2D);
  pvg.parameter("SampleDimensions").setValue(new int[]{writeBand});
  pvg.parameter("VisibleSampleDimension").setValue(writeBand);
  gc2D=(GridCoverage2D)sdFactory.doOperation(pvg,hints);
  final PlanarImage reFormattedData2Short=reFormatCoverageImage(gc2D,DataBuffer.TYPE_SHORT);
  this.writeDEM(reFormattedData2Short,fileName,destination);
  this.writeStats(reFormattedData2Short,fileName,destination,gc2D);
  this.writeWorldFile(gc2D,fileName,destination);
  this.writePRJ(gc2D,fileName,destination);
  this.writeHDR(gc2D,fileName,destination);
  this.writeGIF(gc2D,fileName,destination);
  this.writeSRC(gc2D,fileName,destination);
  if (compressed) {
    ((ZipOutputStream)destination).close();
  }
}
