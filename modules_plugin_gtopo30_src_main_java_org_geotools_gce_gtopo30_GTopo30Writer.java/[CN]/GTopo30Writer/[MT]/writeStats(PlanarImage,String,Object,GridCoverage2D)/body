{
  final double[] Max=new double[]{Short.MAX_VALUE};
  final double[] Min=new double[]{Short.MIN_VALUE};
  final int[] bins=new int[]{(int)(Max[0] - Min[0] + 1)};
  ImageWorker w=new ImageWorker(image);
  w.setRenderingHint(JAI.KEY_TILE_CACHE,null);
  final Histogram hist=w.getHistogram(bins,Min,Max);
  final PlanarImage histogramImage=w.getPlanarImage();
  if (dest instanceof File) {
    if (dest instanceof File) {
      dest=new File((File)dest,new StringBuffer(name).append(".STX").toString());
    }
    final PrintWriter p=new PrintWriter(new FileOutputStream(((File)dest)));
    p.print(1);
    p.print(" ");
    p.print((int)Min[0]);
    p.print(" ");
    p.print((int)Max[0]);
    p.print(" ");
    p.print(hist.getMean()[0]);
    p.print(" ");
    p.print(hist.getStandardDeviation()[0]);
    p.close();
  }
 else {
    final ZipOutputStream outZ=(ZipOutputStream)dest;
    final ZipEntry e=new ZipEntry(name + ".STX");
    outZ.putNextEntry(e);
    outZ.write("1".getBytes());
    outZ.write(" ".getBytes());
    outZ.write(new Integer((int)Min[0]).toString().getBytes());
    outZ.write(" ".getBytes());
    outZ.write(new Integer((int)Max[0]).toString().getBytes());
    outZ.write(" ".getBytes());
    outZ.write(new Double(hist.getMean()[0]).toString().getBytes());
    outZ.write(" ".getBytes());
    outZ.write(new Double(hist.getStandardDeviation()[0]).toString().getBytes());
    ((ZipOutputStream)dest).closeEntry();
  }
  histogramImage.dispose();
}
