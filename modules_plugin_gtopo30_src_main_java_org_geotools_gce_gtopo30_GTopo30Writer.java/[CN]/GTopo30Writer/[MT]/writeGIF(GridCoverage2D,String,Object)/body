{
  ImageOutputStream out=null;
  final GridCoverage2D gc1=rescaleCoverage(gc);
  final GridCoverage2D gc2=gc1;
  RenderedImage image=gc2.getRenderedImage();
  ColorModel cm=image.getColorModel();
  SampleModel sm=image.getSampleModel();
  if (!(cm instanceof IndexColorModel)) {
    ImageLayout layout=ImageUtilities.getImageLayout(image);
    cm=ColorUtilities.getIndexColorModel(new int[]{0});
    int sourceType=sm.getDataType();
    sm=cm.createCompatibleSampleModel(layout.getTileWidth(image),layout.getTileHeight(image));
    int targetType=sm.getDataType();
    MathTransform1D transform=LinearTransform1D.create(1,9999);
    layout.setColorModel(cm).setSampleModel(sm);
    RenderingHints hints=new RenderingHints(JAI.KEY_IMAGE_LAYOUT,layout);
    hints.put(JAI.KEY_REPLACE_INDEX_COLOR_MODEL,Boolean.FALSE);
    hints.put(JAI.KEY_TRANSFORM_ON_COLORMAP,Boolean.FALSE);
    try {
      LookupTableJAI table=LookupTableFactory.create(sourceType,targetType,new MathTransform1D[]{transform});
      LookupTable lut=it.geosolutions.jaiext.lookup.LookupTableFactory.create(table);
      ImageWorker worker=new ImageWorker(image);
      worker.setRenderingHints(hints);
      worker.lookup(lut);
      image=worker.getRenderedImage();
    }
 catch (    TransformException e) {
      LOGGER.severe(e.getLocalizedMessage());
    }
  }
  if (dest instanceof File) {
    final File file=new File((File)dest,new StringBuffer(name).append(".GIF").toString());
    out=ImageIOExt.createImageOutputStream(image,file);
  }
 else {
    final ZipOutputStream outZ=(ZipOutputStream)dest;
    final ZipEntry e=new ZipEntry(gc.getName().toString() + ".GIF");
    outZ.putNextEntry(e);
    out=ImageIOExt.createImageOutputStream(image,outZ);
  }
  final ParameterBlockJAI pbj=new ParameterBlockJAI("ImageWrite");
  pbj.addSource(image);
  pbj.setParameter("Output",out);
  pbj.setParameter("Format","gif");
  JAI.create("ImageWrite",pbj,new RenderingHints(JAI.KEY_TILE_CACHE,null));
  out.close();
  if (dest instanceof ZipOutputStream) {
    ((ZipOutputStream)dest).closeEntry();
  }
  gc1.dispose(false);
}
