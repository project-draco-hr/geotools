{
  StringBuffer buffer=new StringBuffer();
  if (SDO.D(polygon) > 2) {
    LOGGER.warning("" + SDO.D(polygon) + " dimensioned geometry provided."+ " This encoder only supports 2D geometries. The query will be constructed as"+ " a 2D query.");
  }
  if (polygon.getExteriorRing() != null) {
    buffer.append("MDSYS.SDO_GEOMETRY(");
    buffer.append(SDO.D(polygon));
    buffer.append("003,");
    if (srid > 0) {
      LOGGER.fine("Using layer SRID: " + srid);
      buffer.append(srid);
    }
 else {
      LOGGER.fine("Using NULL SRID: ");
      buffer.append("NULL");
    }
    buffer.append(",NULL,MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,1),");
    buffer.append("MDSYS.SDO_ORDINATE_ARRAY(");
    CoordinateSequenceFactory fact=polygon.getFactory().getCoordinateSequenceFactory();
    CoordinateSequence exterior=polygon.getExteriorRing().getCoordinateSequence();
    CoordinateSequence coordSeq=SDO.counterClockWise(fact,exterior);
    for (int i=0, size=coordSeq.size(); i < size; i++) {
      Coordinate cur=coordSeq.getCoordinate(i);
      buffer.append(cur.x);
      buffer.append(",");
      buffer.append(cur.y);
      if (i != (size - 1)) {
        buffer.append(",");
      }
    }
    buffer.append("))");
  }
 else {
    LOGGER.warning("No Exterior ring on polygon.  " + "This encode only supports Polygons with exterior rings.");
  }
  if (polygon.getNumInteriorRing() > 0) {
    LOGGER.warning("Polygon contains Interior Rings. " + "These rings will not be included in the query.");
  }
  return buffer.toString();
}
