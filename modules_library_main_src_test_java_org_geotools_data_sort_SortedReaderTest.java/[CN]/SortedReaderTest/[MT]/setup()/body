{
  SimpleFeatureTypeBuilder typeBuilder=new SimpleFeatureTypeBuilder();
  typeBuilder.setName("test");
  typeBuilder.setNamespaceURI("test");
  typeBuilder.setCRS(DefaultGeographicCRS.WGS84);
  typeBuilder.add("defaultGeom",Point.class,DefaultGeographicCRS.WGS84);
  typeBuilder.add("PERSONS",Integer.class);
  typeBuilder.add("byte",Byte.class);
  typeBuilder.add("short",Short.class);
  typeBuilder.add("long",Long.class);
  typeBuilder.add("float",Float.class);
  typeBuilder.add("double",Double.class);
  typeBuilder.add("date",Date.class);
  typeBuilder.add("sql_date",java.sql.Date.class);
  typeBuilder.add("sql_time",java.sql.Time.class);
  typeBuilder.add("sql_timestamp",java.sql.Timestamp.class);
  typeBuilder.add("otherGeom",LineString.class);
  typeBuilder.setDefaultGeometry("defaultGeom");
  schema=(SimpleFeatureType)typeBuilder.buildFeatureType();
  SimpleFeatureBuilder builder=new SimpleFeatureBuilder(schema);
  GeometryFactory gf=new GeometryFactory();
  fc=new DefaultFeatureCollection("test",schema);
  double x=-140;
  double y=45;
  final int features=500;
  for (int i=0; i < features; i++) {
    Point point=gf.createPoint(new Coordinate(x + i,y + i));
    point.setUserData(DefaultGeographicCRS.WGS84);
    builder.add(point);
    builder.add(new Integer(i));
    builder.add(new Byte((byte)i));
    builder.add(new Short((short)i));
    builder.add(new Long(i));
    builder.add(new Float(i));
    builder.add(new Double(i));
    builder.add(new Date());
    builder.add(new java.sql.Date(System.currentTimeMillis()));
    builder.add(new java.sql.Time(System.currentTimeMillis()));
    builder.add(new java.sql.Timestamp(System.currentTimeMillis()));
    LineString line=gf.createLineString(new Coordinate[]{new Coordinate(x + i,y + i),new Coordinate(x + i + 1,y + i + 1)});
    line.setUserData(DefaultGeographicCRS.WGS84);
    builder.add(line);
    fc.add(builder.buildFeature(i + ""));
  }
  builder.add(null);
  builder.add(new Integer(-1));
  builder.add(null);
  fc.add(builder.buildFeature((features + 1) + ""));
  fr=new DelegateSimpleFeatureReader(schema,fc.features());
  ff=CommonFactoryFinder.getFilterFactory(null);
  peopleAsc=new SortBy[]{ff.sort("PERSONS",SortOrder.ASCENDING)};
  peopleDesc=new SortBy[]{ff.sort("PERSONS",SortOrder.DESCENDING)};
  dateAsc=new SortBy[]{ff.sort("date",SortOrder.ASCENDING)};
  fidAsc=new SortBy[]{SortBy.NATURAL_ORDER};
}
