{
  Comparator<SimpleFeature> comparator=getComparator(sortBy);
  if (comparator == null) {
    return reader;
  }
  SimpleFeatureType schema=reader.getFeatureType();
  if (!canSort(schema,sortBy)) {
    throw new IllegalArgumentException("The specified reader cannot be sorted, either the " + "sorting properties are not comparable or the attributes are not serializable");
  }
  int count=0;
  List<File> files=new ArrayList<File>();
  List<SimpleFeature> features=new ArrayList<SimpleFeature>();
  boolean cleanFiles=true;
  try {
    while (reader.hasNext()) {
      SimpleFeature f=reader.next();
      features.add(f);
      count++;
      if (count > maxFeatures) {
        Collections.sort(features,comparator);
        File file=storeToFile(features);
        files.add(file);
        count=0;
        features.clear();
      }
    }
    if (files.isEmpty()) {
      Collections.sort(features,comparator);
      SimpleFeatureIterator fi=new ListFeatureCollection(schema,features).features();
      return new DelegateSimpleFeatureReader(schema,fi);
    }
 else {
      if (count > 0) {
        Collections.sort(features,comparator);
        File file=storeToFile(features);
        files.add(file);
      }
      if (files.size() > maxFiles) {
        reduceFiles(files,maxFiles,schema,comparator);
      }
      cleanFiles=false;
      return new MergeSortReader(schema,files,comparator);
    }
  }
  finally {
    if (cleanFiles) {
      for (      File file : files) {
        file.delete();
      }
    }
    reader.close();
  }
}
