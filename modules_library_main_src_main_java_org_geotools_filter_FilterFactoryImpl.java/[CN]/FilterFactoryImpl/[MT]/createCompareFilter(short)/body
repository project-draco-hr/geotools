{
switch (type) {
case FilterType.COMPARE_EQUALS:
    return new IsEqualsToImpl(this);
case FilterType.COMPARE_NOT_EQUALS:
  return new IsNotEqualToImpl(this);
case FilterType.COMPARE_GREATER_THAN:
return new IsGreaterThanImpl(this);
case FilterType.COMPARE_GREATER_THAN_EQUAL:
return new IsGreaterThanOrEqualToImpl(this);
case FilterType.COMPARE_LESS_THAN:
return new IsLessThenImpl(this);
case FilterType.COMPARE_LESS_THAN_EQUAL:
return new IsLessThenOrEqualToImpl(this);
case FilterType.BETWEEN:
return new BetweenFilterImpl(this);
}
throw new IllegalFilterException("Must be one of <,<=,==,>,>=,<>");
}
