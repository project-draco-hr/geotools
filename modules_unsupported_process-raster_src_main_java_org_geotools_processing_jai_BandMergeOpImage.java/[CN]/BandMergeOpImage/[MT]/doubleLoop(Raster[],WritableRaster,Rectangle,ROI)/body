{
  int nSrcs=sources.length;
  int[] snbands=new int[nSrcs];
  PixelAccessor[] pas=new PixelAccessor[nSrcs];
  for (int i=0; i < nSrcs; i++) {
    pas[i]=new PixelAccessor(sources[i].getSampleModel(),colorModels[i]);
    if (colorModels[i] instanceof IndexColorModel) {
      snbands[i]=colorModels[i].getNumComponents();
    }
 else {
      snbands[i]=sources[i].getNumBands();
    }
  }
  int dnbands=dest.getNumBands();
  int destType=dest.getTransferType();
  PixelAccessor d=new PixelAccessor(dest.getSampleModel(),null);
  UnpackedImageData dimd=d.getPixels(dest,destRect,destType,true);
  double[][] dstdata=(double[][])dimd.data;
  if (caseA) {
    for (int sindex=0, db=0; sindex < nSrcs; sindex++) {
      UnpackedImageData simd=colorModels[sindex] instanceof IndexColorModel ? pas[sindex].getComponents(sources[sindex],destRect,sources[sindex].getSampleModel().getTransferType()) : pas[sindex].getPixels(sources[sindex],destRect,sources[sindex].getSampleModel().getTransferType(),false);
      int srcPixelStride=simd.pixelStride;
      int srcLineStride=simd.lineStride;
      int dstPixelStride=dimd.pixelStride;
      int dstLineStride=dimd.lineStride;
      int dRectWidth=destRect.width;
      for (int sb=0; sb < snbands[sindex]; sb++, db++) {
        if (db >= dnbands) {
          break;
        }
        double[] dstdatabandb=dstdata[db];
        double[][] srcdata=(double[][])simd.data;
        double[] srcdatabandsb=srcdata[sb];
        int srcstart=simd.bandOffsets[sb];
        int dststart=dimd.bandOffsets[db];
        for (int y=0; y < destRect.height; y++, srcstart+=srcLineStride, dststart+=dstLineStride) {
          for (int i=0, srcpos=srcstart, dstpos=dststart; i < dRectWidth; i++, srcpos+=srcPixelStride, dstpos+=dstPixelStride) {
            dstdatabandb[dstpos]=srcdatabandsb[srcpos];
          }
        }
      }
    }
  }
 else   if (caseB) {
    for (int sindex=0, db=0; sindex < nSrcs; sindex++) {
      UnpackedImageData simd=colorModels[sindex] instanceof IndexColorModel ? pas[sindex].getComponents(sources[sindex],destRect,sources[sindex].getSampleModel().getTransferType()) : pas[sindex].getPixels(sources[sindex],destRect,sources[sindex].getSampleModel().getTransferType(),false);
      int srcPixelStride=simd.pixelStride;
      int srcLineStride=simd.lineStride;
      int dstPixelStride=dimd.pixelStride;
      int dstLineStride=dimd.lineStride;
      int dRectWidth=destRect.width;
      int srcstart=0;
      int dststart=0;
      for (int y=0; y < destRect.height; y++, srcstart+=srcLineStride, dststart+=dstLineStride) {
        for (int i=0, srcpos=srcstart, dstpos=dststart; i < dRectWidth; i++, srcpos+=srcPixelStride, dstpos+=dstPixelStride) {
          if (roi.contains(i + minX,y + minY)) {
            for (int sb=0; sb < snbands[sindex]; sb++) {
              int dbidx=db + sb;
              double[] dstdatabandb=dstdata[dbidx];
              double[][] srcdata=(double[][])simd.data;
              double[] srcdatabandsb=srcdata[sb];
              if (db >= dnbands) {
                break;
              }
              dstdatabandb[dstpos + dimd.bandOffsets[dbidx]]=srcdatabandsb[srcpos + simd.bandOffsets[sb]];
            }
          }
 else {
            for (int sb=0; sb < snbands[sindex]; sb++) {
              int dbidx=db + sb;
              double[] dstdatabandb=dstdata[dbidx];
              dstdatabandb[dstpos + dimd.bandOffsets[dbidx]]=destNoDataDouble;
            }
          }
        }
      }
      db+=snbands[sindex];
    }
  }
 else   if (caseC) {
    for (int sindex=0, db=0; sindex < nSrcs; sindex++) {
      UnpackedImageData simd=colorModels[sindex] instanceof IndexColorModel ? pas[sindex].getComponents(sources[sindex],destRect,sources[sindex].getSampleModel().getTransferType()) : pas[sindex].getPixels(sources[sindex],destRect,sources[sindex].getSampleModel().getTransferType(),false);
      int srcPixelStride=simd.pixelStride;
      int srcLineStride=simd.lineStride;
      int dstPixelStride=dimd.pixelStride;
      int dstLineStride=dimd.lineStride;
      int dRectWidth=destRect.width;
      for (int sb=0; sb < snbands[sindex]; sb++, db++) {
        if (db >= dnbands) {
          break;
        }
        double[] dstdatabandb=dstdata[db];
        double[][] srcdata=(double[][])simd.data;
        double[] srcdatabandsb=srcdata[sb];
        int srcstart=simd.bandOffsets[sb];
        int dststart=dimd.bandOffsets[db];
        for (int y=0; y < destRect.height; y++, srcstart+=srcLineStride, dststart+=dstLineStride) {
          for (int i=0, srcpos=srcstart, dstpos=dststart; i < dRectWidth; i++, srcpos+=srcPixelStride, dstpos+=dstPixelStride) {
            if (noData[sindex].contains(srcdatabandsb[srcpos])) {
              dstdatabandb[dstpos]=destNoDataDouble;
            }
 else {
              dstdatabandb[dstpos]=srcdatabandsb[srcpos];
            }
          }
        }
      }
    }
  }
 else {
    for (int sindex=0, db=0; sindex < nSrcs; sindex++) {
      UnpackedImageData simd=colorModels[sindex] instanceof IndexColorModel ? pas[sindex].getComponents(sources[sindex],destRect,sources[sindex].getSampleModel().getTransferType()) : pas[sindex].getPixels(sources[sindex],destRect,sources[sindex].getSampleModel().getTransferType(),false);
      int srcPixelStride=simd.pixelStride;
      int srcLineStride=simd.lineStride;
      int dstPixelStride=dimd.pixelStride;
      int dstLineStride=dimd.lineStride;
      int dRectWidth=destRect.width;
      int srcstart=0;
      int dststart=0;
      for (int y=0; y < destRect.height; y++, srcstart+=srcLineStride, dststart+=dstLineStride) {
        for (int i=0, srcpos=srcstart, dstpos=dststart; i < dRectWidth; i++, srcpos+=srcPixelStride, dstpos+=dstPixelStride) {
          if (roi.contains(i + minX,y + minY)) {
            for (int sb=0; sb < snbands[sindex]; sb++) {
              int dbidx=db + sb;
              double[] dstdatabandb=dstdata[dbidx];
              double[][] srcdata=(double[][])simd.data;
              double[] srcdatabandsb=srcdata[sb];
              if (db >= dnbands) {
                break;
              }
              if (noData[sindex].contains(srcdatabandsb[srcpos])) {
                dstdatabandb[dstpos + dimd.bandOffsets[dbidx]]=destNoDataDouble;
              }
 else {
                dstdatabandb[dstpos + dimd.bandOffsets[dbidx]]=srcdatabandsb[srcpos + simd.bandOffsets[sb]];
              }
            }
          }
 else {
            for (int sb=0; sb < snbands[sindex]; sb++) {
              int dbidx=db + sb;
              double[] dstdatabandb=dstdata[dbidx];
              dstdatabandb[dstpos + dimd.bandOffsets[dbidx]]=destNoDataDouble;
            }
          }
        }
      }
      db+=snbands[sindex];
    }
  }
  d.setPixels(dimd);
}
