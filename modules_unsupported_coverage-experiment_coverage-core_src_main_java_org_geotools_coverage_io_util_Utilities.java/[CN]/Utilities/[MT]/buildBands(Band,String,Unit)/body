{
  if (sampleDim == null)   throw new IllegalArgumentException("provided metadata element is null");
  Category[] categories=null;
  Category values=null;
  Category nan=null;
  int cat=0;
  final double scale=sampleDim.getScale();
  final double offset=sampleDim.getOffset();
  final NumberRange<? extends Number> validRange=sampleDim.getValidRange();
  final double[] noDataValues=sampleDim.getNoDataValues();
  Number minO=null;
  Number maxO=null;
  if (validRange != null) {
    minO=validRange.getMinValue();
    maxO=validRange.getMaxValue();
  }
  if (!(scale == 1.0 && offset == 0.0)) {
    if (minO != null && maxO != null) {
      double min=validRange.getMinimum();
      double max=validRange.getMaximum();
      if (!Double.isInfinite(min) && !Double.isNaN(min) && !Double.isInfinite(max)&& !Double.isNaN(max)) {
        NumberRange<Double> minMax=NumberRange.create(min,false,max,true);
        values=new Category("values",null,minMax,scale,offset);
        cat++;
      }
    }
  }
  if (noDataValues != null) {
    final int size=noDataValues.length;
    if (size == 1) {
      double noData=noDataValues[0];
      double newNoData=noData;
      if (minO != null && maxO != null) {
        double min=validRange.getMinimum();
        double max=validRange.getMaximum();
        if (min == noData && minO instanceof Integer) {
          newNoData=min - 1;
        }
 else         if (max == noData && maxO instanceof Integer) {
          newNoData=max + 1;
        }
      }
      if (!Double.isNaN(noData)) {
        nan=new Category(Vocabulary.formatInternational(VocabularyKeys.NODATA),new Color[]{new Color(0,0,0,0)},NumberRange.create(noData,noData),NumberRange.create(newNoData,newNoData));
      }
    }
    cat++;
  }
  if (cat > 0) {
    categories=new Category[cat];
    if (cat == 2) {
      categories[0]=nan;
      categories[1]=values;
    }
 else     categories[0]=nan == null ? values : nan;
  }
  final GridSampleDimension band=new GridSampleDimension(elementName + ":sd",categories,unit);
  return band;
}
