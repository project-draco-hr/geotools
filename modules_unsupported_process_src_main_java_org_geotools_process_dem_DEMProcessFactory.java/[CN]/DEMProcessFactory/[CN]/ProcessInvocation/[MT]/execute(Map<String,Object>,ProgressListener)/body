{
  Method method=method();
  if (method == null) {
    return null;
  }
  TypeVariable<Method>[] PARAM_TYPE=method.getTypeParameters();
  Annotation[][] PARAM_INFO=method.getParameterAnnotations();
  Object args[]=new Object[PARAM_TYPE.length];
  for (int i=0; i < args.length; i++) {
    DescribeParameter PARAMETER=paramInfo(i,PARAM_INFO);
    String name=PARAMETER == null ? "arg" + i : PARAMETER.name();
    Object value=input.get(name);
    args[i]=value;
  }
  Object value=null;
  try {
    value=method.invoke(null,args);
  }
 catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
  if (value == null) {
    throw new IllegalArgumentException("Unable to encode null result for " + name);
  }
  if (value instanceof Object[]) {
    Object values[]=(Object[])value;
    Map<String,Object> result=new LinkedHashMap<String,Object>();
    int i=0;
    for (    Annotation annotation : method.getAnnotations()) {
      if (i >= values.length)       break;
      Object obj=values[i];
      if (annotation instanceof DescribeResult) {
        DescribeResult RESULT=(DescribeResult)annotation;
        if (RESULT.type().isInstance(obj)) {
          result.put(RESULT.name(),obj);
        }
 else {
          throw new IllegalArgumentException(name + " unable to encode result " + obj+ " as "+ RESULT.type());
        }
      }
    }
    return result;
  }
 else   if (value instanceof Map) {
    return (Map<String,Object>)value;
  }
 else {
    Map<String,Object> result=new LinkedHashMap<String,Object>();
    DescribeResult RESULT=method.getAnnotation(DescribeResult.class);
    if (RESULT != null) {
      result.put(RESULT.name(),value);
    }
 else {
      result.put("value",value);
    }
  }
  return null;
}
