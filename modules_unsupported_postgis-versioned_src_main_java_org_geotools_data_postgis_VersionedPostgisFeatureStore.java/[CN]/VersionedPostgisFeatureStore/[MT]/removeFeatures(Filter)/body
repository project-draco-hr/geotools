{
  Filter versionedFilter=(Filter)store.buildVersionedFilter(schema.getTypeName(),filter,new RevisionInfo());
  Transaction t=getTransaction();
  boolean autoCommit=false;
  if (Transaction.AUTO_COMMIT.equals(t)) {
    t=new DefaultTransaction();
    autoCommit=true;
  }
  VersionedJdbcTransactionState state=store.wrapped.getVersionedJdbcTransactionState(t);
  ReferencedEnvelope bounds=locking.getBounds(new DefaultQuery(schema.getTypeName(),versionedFilter));
  if (bounds != null) {
    if (bounds.getCoordinateReferenceSystem() == null) {
      bounds=new ReferencedEnvelope(bounds,getSchema().getCoordinateReferenceSystem());
    }
    try {
      ReferencedEnvelope wgsBounds=null;
      if (bounds.getCoordinateReferenceSystem() != null)       wgsBounds=bounds.transform(DefaultGeographicCRS.WGS84,true);
 else       wgsBounds=bounds;
      state.expandDirtyBounds(wgsBounds);
      state.setTypeNameDirty(schema.getTypeName());
    }
 catch (    Exception e) {
      throw new DataSourceException("Problems computing and storing the " + "bounds affected by this feature removal",e);
    }
  }
  locking.modifyFeatures(locking.getSchema().getDescriptor("expired"),new Long(state.getRevision()),versionedFilter);
  if (autoCommit) {
    t.commit();
    t.close();
  }
  store.listenerManager.fireFeaturesRemoved(schema.getTypeName(),t,bounds,false);
}
