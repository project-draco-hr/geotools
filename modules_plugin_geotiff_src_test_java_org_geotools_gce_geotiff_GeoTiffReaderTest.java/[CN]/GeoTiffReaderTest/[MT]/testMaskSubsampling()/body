{
  final File file=TestData.file(GeoTiffReaderTest.class,"mask/masked2.tif");
  assertNotNull(file);
  final AbstractGridFormat format=new GeoTiffFormat();
  AbstractGridCoverage2DReader reader=format.getReader(file);
  GeneralParameterValue[] params=new GeneralParameterValue[1];
  final ParameterValue<GridGeometry2D> gg=AbstractGridFormat.READ_GRIDGEOMETRY2D.createValue();
  final GeneralEnvelope envelope=reader.getOriginalEnvelope();
  final Dimension dim=new Dimension();
  dim.setSize(reader.getOriginalGridRange().getSpan(0) / 4,reader.getOriginalGridRange().getSpan(1) / 4);
  final Rectangle rasterArea=((GridEnvelope2D)reader.getOriginalGridRange());
  rasterArea.setSize(dim);
  final GridEnvelope2D range=new GridEnvelope2D(rasterArea);
  gg.setValue(new GridGeometry2D(range,envelope));
  params[0]=gg;
  GridCoverage2D coverage=reader.read(params);
  checkCoverageROI(coverage);
  ROI roi=CoverageUtilities.getROIProperty(coverage);
  Raster roiImage=roi.getAsImage().getData();
  Raster image=coverage.getRenderedImage().getData();
  int[] px=new int[3];
  int[] rpx=new int[1];
  for (int i=0; i < image.getHeight(); i++) {
    for (int j=0; j < image.getWidth(); j++) {
      image.getPixel(j,i,px);
      roiImage.getPixel(j,i,rpx);
      if (px[0] == 0 && px[1] == 0 && px[2] == 0) {
        assertEquals("Difference at " + i + ","+ j,0,rpx[0]);
      }
 else {
        assertEquals("Difference at " + i + ","+ j,1,rpx[0]);
      }
    }
  }
}
