{
  final File baseDirectory=TestData.file(GeoTiffReaderTest.class,".");
  final File writeDirectory=new File(baseDirectory,Long.toString(System.currentTimeMillis()));
  writeDirectory.mkdir();
  final File files[]=baseDirectory.listFiles();
  final int numFiles=files.length;
  final AbstractGridFormat format=new GeoTiffFormat();
  for (int i=0; i < numFiles; i++) {
    StringBuilder buffer=new StringBuilder();
    final String path=files[i].getAbsolutePath().toLowerCase();
    if (!path.endsWith("tif") && !path.endsWith("tiff") || path.contains("no_crs"))     continue;
    buffer.append(files[i].getAbsolutePath()).append("\n");
    Object o;
    if (i % 2 == 0)     o=files[i];
 else     o=files[i].toURI().toURL();
    if (format.accepts(o)) {
      buffer.append("ACCEPTED").append("\n");
      GeoTiffReader reader=new GeoTiffReader(o,new Hints(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER,Boolean.TRUE));
      if (reader != null) {
        final GridCoverage2D coverage=(GridCoverage2D)reader.read(null);
        if (TestData.isInteractiveTest()) {
          buffer.append("CRS: ").append(coverage.getCoordinateReferenceSystem2D().toWKT()).append("\n");
          buffer.append("GG: ").append(coverage.getGridGeometry().toString()).append("\n");
        }
        if (org.geotools.TestData.isExtensiveTest()) {
          IIOMetadataDumper iIOMetadataDumper=new IIOMetadataDumper(((GeoTiffReader)reader).getMetadata().getRootNode());
          buffer.append("TIFF metadata: ").append(iIOMetadataDumper.getMetadata()).append("\n");
        }
        if (TestData.isInteractiveTest()) {
          coverage.show();
        }
 else {
          PlanarImage.wrapRenderedImage(coverage.getRenderedImage()).getTiles();
        }
        final File destFile=File.createTempFile("test",".tif",writeDirectory);
        final GeoTiffWriter writer=new GeoTiffWriter(destFile);
        writer.write(coverage,null);
        writer.dispose();
        assertTrue(format.accepts(destFile));
        reader=new GeoTiffReader(destFile,new Hints(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER,Boolean.TRUE));
        final GridCoverage2D destCoverage=(GridCoverage2D)reader.read(null);
        reader.dispose();
        final double eps=XAffineTransform.getScaleX0((AffineTransform)coverage.getGridGeometry().getGridToCRS()) * 1E-2;
        assertTrue("CRS comparison failed:" + o.toString(),CRS.findMathTransform(coverage.getCoordinateReferenceSystem(),destCoverage.getCoordinateReferenceSystem(),true).isIdentity());
        assertTrue("CRS comparison failed:" + o.toString(),CRS.equalsIgnoreMetadata(coverage.getCoordinateReferenceSystem(),destCoverage.getCoordinateReferenceSystem()));
        assertTrue("GridRange comparison failed:" + o.toString(),coverage.getGridGeometry().getGridRange().equals(destCoverage.getGridGeometry().getGridRange()));
        assertTrue("Envelope comparison failed:" + o.toString(),((GeneralEnvelope)coverage.getGridGeometry().getEnvelope()).equals(destCoverage.getGridGeometry().getEnvelope(),eps,false));
        coverage.dispose(true);
        destCoverage.dispose(true);
      }
    }
 else     buffer.append("NOT ACCEPTED").append("\n");
    if (TestData.isInteractiveTest())     LOGGER.info(buffer.toString());
  }
}
