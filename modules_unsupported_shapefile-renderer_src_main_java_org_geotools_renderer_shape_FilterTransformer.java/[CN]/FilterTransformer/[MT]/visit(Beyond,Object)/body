{
  double distance=filter.getDistance();
  if (filter.getExpression1() instanceof Literal) {
    Literal transformed=bufferTransformGeometry((Literal)filter.getExpression1(),distance,extraData);
    return getFactory(extraData).disjoint(transformed,filter.getExpression2());
  }
 else   if (filter.getExpression2() instanceof Literal) {
    Literal transformed=bufferTransformGeometry((Literal)filter.getExpression2(),distance,extraData);
    return getFactory(extraData).disjoint(filter.getExpression1(),transformed);
  }
 else {
    LOGGER.log(Level.WARNING,"Could not transform this filter because " + "it does not use a geometry literal: {0}.\n" + "The resulting of filtering will be most likely wrong",new Object[]{filter});
    return filter;
  }
}
