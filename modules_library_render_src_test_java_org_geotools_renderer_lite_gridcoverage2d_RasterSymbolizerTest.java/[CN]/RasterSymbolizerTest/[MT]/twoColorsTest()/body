{
  java.net.URL surl=TestData.url(this,"raster_discretecolors.sld");
  SLDParser stylereader=new SLDParser(sf,surl);
  StyledLayerDescriptor sld=stylereader.parseSLD();
  GeneralEnvelope envelope=new GeneralEnvelope(new double[]{-180,-90},new double[]{180,90});
  envelope.setCoordinateReferenceSystem(DefaultGeographicCRS.WGS84);
  GridCoverage2D gc=CoverageFactoryFinder.getGridCoverageFactory(null).create("name",JAI.create("ImageRead",TestData.file(this,"smalldem.tif")),envelope,new GridSampleDimension[]{new GridSampleDimension("dem")},null,null);
  SubchainStyleVisitorCoverageProcessingAdapter rsh=new RasterSymbolizerHelper(gc,null);
  final RasterSymbolizer rs=extractRasterSymbolizer(sld);
  rsh.visit(rs);
  final RenderedImage ri=((GridCoverage2D)rsh.getOutput()).getRenderedImage();
  Assert.assertTrue(ri.getColorModel() instanceof IndexColorModel);
  final IndexColorModel icm=(IndexColorModel)ri.getColorModel();
  final int mapSize=icm.getMapSize();
  Assert.assertEquals(3,mapSize);
  final int rgb[]=new int[mapSize];
  rgb[0]=0xFFFFFF & icm.getRGB(0);
  rgb[1]=0xFFFFFF & icm.getRGB(1);
  rgb[2]=0xFFFFFF & icm.getRGB(2);
  int found=0;
  for (int i=0; i < mapSize; i++) {
switch (rgb[i]) {
case 0x008000:
case 0x663333:
case 0:
      found++;
    break;
default :
  throw new IllegalStateException("Found unexpected colors:" + rgb[i]);
}
}
testRasterSymbolizerHelper(rsh);
}
