{
  if (LOGGER.isLoggable(java.util.logging.Level.FINE)) {
    LOGGER.fine("Loading raster data for RasterDescriptor " + this.toString());
  }
  ImageInputStream inStream=null;
  final ReferencedEnvelope bbox=new ReferencedEnvelope(rasterBBOX);
  final ReferencedEnvelope intersection=new ReferencedEnvelope(bbox.intersection(cropBBox),cropBBox.getCoordinateReferenceSystem());
  ImageReader reader=null;
  try {
    final RasterLevelDescriptor selectedlevel=levels.get(Integer.valueOf(overviewIndex));
    final Object input=selectedlevel.source.getSource();
    inStream=selectedlevel.source.getInputStreamSPI().createInputStreamInstance(input,ImageIO.getUseCache(),ImageIO.getCacheDirectory());
    int imageChoice=selectedlevel.source.getImageIndex();
    if (inStream == null) {
      return null;
    }
    reader=GeoTiffUtils.TIFFREADERFACTORY.createReaderInstance();
    reader.setInput(inStream);
    final MathTransform2D cropGridToWorldCorner=(MathTransform2D)ProjectiveTransform.create(selectedlevel.gridToWorldTransformCorner);
    final MathTransform2D cropWorldToGrid=cropGridToWorldCorner.inverse();
    final Rectangle sourceArea=CRS.transform(cropWorldToGrid,new GeneralEnvelope(intersection)).toRectangle2D().getBounds();
    XRectangle2D.intersect(sourceArea,selectedlevel.rasterDimensions.getBounds(),sourceArea);
    if (sourceArea.isEmpty()) {
      if (LOGGER.isLoggable(java.util.logging.Level.WARNING)) {
        LOGGER.warning("Got empty area for rasterGranuleLoader " + this.toString() + " with request "+ request.toString());
      }
      return null;
    }
 else     if (LOGGER.isLoggable(java.util.logging.Level.FINE)) {
      LOGGER.fine("Loading level " + overviewIndex + " with sourceFile region "+ sourceArea);
    }
    readParameters.setSourceRegion(sourceArea);
    RenderedImage raster=request.getReadType().read(readParameters,imageChoice,(File)input,selectedlevel.rasterDimensions.getBounds(),tileDimension);
    if (raster == null) {
      return null;
    }
    try {
      raster.getWidth();
    }
 catch (    Throwable e) {
      if (LOGGER.isLoggable(java.util.logging.Level.FINE)) {
        LOGGER.log(java.util.logging.Level.FINE,"Unable to load raster for rasterGranuleLoader " + this.toString() + " with request "+ request.toString(),e);
      }
      return null;
    }
    sourceArea.setRect(readParameters.getSourceRegion());
    double decimationScaleX=((1.0 * sourceArea.width) / raster.getWidth());
    double decimationScaleY=((1.0 * sourceArea.height) / raster.getHeight());
    final AffineTransform decimationScaleTranform=XAffineTransform.getScaleInstance(decimationScaleX,decimationScaleY);
    final AffineTransform afterDecimationTranslateTranform=XAffineTransform.getTranslateInstance(sourceArea.x,sourceArea.y);
    final AffineTransform backToBaseLevelScaleTransform=selectedlevel.getBaseToLevelTransform();
    final AffineTransform finalRaster2Model=new AffineTransform(baseGridToWorld);
    finalRaster2Model.concatenate(CoverageUtilities.CENTER_TO_CORNER);
    if (!XAffineTransform.isIdentity(backToBaseLevelScaleTransform,GeoTiffUtils.AFFINE_IDENTITY_EPS))     finalRaster2Model.concatenate(backToBaseLevelScaleTransform);
    if (!XAffineTransform.isIdentity(afterDecimationTranslateTranform,GeoTiffUtils.AFFINE_IDENTITY_EPS))     finalRaster2Model.concatenate(afterDecimationTranslateTranform);
    if (!XAffineTransform.isIdentity(decimationScaleTranform,GeoTiffUtils.AFFINE_IDENTITY_EPS))     finalRaster2Model.concatenate(decimationScaleTranform);
    return new RasterLoadingResult(raster,finalRaster2Model);
  }
 catch (  IllegalStateException e) {
    if (LOGGER.isLoggable(java.util.logging.Level.WARNING)) {
      LOGGER.log(java.util.logging.Level.WARNING,"Unable to load raster for rasterGranuleLoader " + this.toString() + " with request "+ request.toString(),e);
    }
    return null;
  }
catch (  org.opengis.referencing.operation.NoninvertibleTransformException e) {
    if (LOGGER.isLoggable(java.util.logging.Level.WARNING)) {
      LOGGER.log(java.util.logging.Level.WARNING,"Unable to load raster for rasterGranuleLoader " + this.toString() + " with request "+ request.toString(),e);
    }
    return null;
  }
catch (  TransformException e) {
    if (LOGGER.isLoggable(java.util.logging.Level.WARNING)) {
      LOGGER.log(java.util.logging.Level.WARNING,"Unable to load raster for rasterGranuleLoader " + this.toString() + " with request "+ request.toString(),e);
    }
    return null;
  }
 finally {
    if (inStream != null) {
      try {
        inStream.close();
      }
 catch (      Throwable t) {
      }
    }
    if (reader != null) {
      try {
        reader.dispose();
      }
 catch (      Throwable t) {
      }
    }
  }
}
