{
  if (mapping instanceof XmlFeatureTypeMapping) {
    return new XmlMappingFeatureIterator(store,mapping,query);
  }
  boolean isFiltered=false;
  if (query.getFilter() != null) {
    Query unrolledQuery=store.unrollQuery(query,mapping);
    Filter filter=unrolledQuery.getFilter();
    if (filter instanceof MultiValuedOrImpl) {
      unrolledQuery.setFilter(Filter.INCLUDE);
      return new FilteringMappingFeatureIterator(store,mapping,unrolledQuery,filter);
    }
 else     if (!filter.equals(Filter.INCLUDE) && !filter.equals(Filter.EXCLUDE) && !(filter instanceof FidFilterImpl)) {
      isFiltered=true;
    }
  }
  DataAccessMappingFeatureIterator iterator=null;
  try {
    iterator=new DataAccessMappingFeatureIterator(store,mapping,query,isFiltered);
  }
 catch (  IOException e) {
    if (isFiltered) {
      LOGGER.info("Caught exception: " + e.getMessage() + "in DataAccessMappingFeatureIterator."+ "Assuming this is caused by filtering nested attribute."+ "Retrying with FilteringMappingFeatureIterator.");
      Query unrolledQuery=store.unrollQuery(query,mapping);
      Filter filter=unrolledQuery.getFilter();
      unrolledQuery.setFilter(Filter.INCLUDE);
      iterator=new FilteringMappingFeatureIterator(store,mapping,unrolledQuery,filter);
    }
 else {
      throw e;
    }
  }
  return iterator;
}
