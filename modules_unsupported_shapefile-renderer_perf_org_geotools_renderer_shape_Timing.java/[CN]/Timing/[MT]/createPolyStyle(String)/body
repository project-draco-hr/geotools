{
  if (typeName == null)   typeName=POLY_TYPE_NAME;
  StyleFactory sFac=StyleFactoryFinder.createStyleFactory();
  Stroke myStroke=sFac.getDefaultStroke();
  myStroke.setColor(filterFactory.createLiteralExpression("#0000ff"));
  myStroke.setWidth(filterFactory.createLiteralExpression(new Integer(2)));
  Fill myFill=sFac.getDefaultFill();
  PolygonSymbolizer lineSym=sFac.createPolygonSymbolizer(myStroke,myFill,"the_geom");
  Rule rule2=sFac.createRule();
  rule2.setSymbolizers(new Symbolizer[]{lineSym});
  if (FILTER) {
    AttributeExpression exp=filterFactory.createAttributeExpression(POLY_LABEL);
    CompareFilter filter=filterFactory.createCompareFilter(Filter.COMPARE_NOT_EQUALS);
    filter.addLeftValue(exp);
    filter.addRightValue(filterFactory.createLiteralExpression("blah"));
    rule2.setFilter(filter);
  }
  if (LABELING) {
    StyleBuilder builder=new StyleBuilder();
    TextSymbolizer textsym=sFac.createTextSymbolizer();
    textsym.setFill(sFac.createFill(filterFactory.createLiteralExpression("#000000")));
    textsym.setGeometryPropertyName("the_geom");
    textsym.setLabel(filterFactory.createAttributeExpression(POLY_LABEL));
    textsym.setFonts(new Font[]{builder.createFont(new java.awt.Font("Arial",java.awt.Font.PLAIN,10))});
    rule2.setSymbolizers(new Symbolizer[]{lineSym,textsym});
  }
  FeatureTypeStyle fts2=sFac.createFeatureTypeStyle();
  fts2.setRules(new Rule[]{rule2});
  fts2.setFeatureTypeName(typeName);
  Style style=sFac.createStyle();
  style.setFeatureTypeStyles(new FeatureTypeStyle[]{fts2});
  return style;
}
