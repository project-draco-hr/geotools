{
  MapContext context=getMapContext();
  StreamingRenderer renderer=new StreamingRenderer();
  renderer.setContext(context);
  Map basichints=new HashMap();
  basichints.put("optimizedDataLoadingEnabled",new Boolean(true));
  renderer.setRendererHints(basichints);
  if (ANTI_ALIASING) {
    RenderingHints hints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    renderer.setJava2DHints(hints);
  }
  Image image;
  Graphics2D g;
  image=createImage();
  g=createGraphics(image);
  g.setColor(Color.white);
  g.fillRect(0,0,w,h);
  Envelope bounds=context.getLayerBounds();
  if (!ALL_DATA)   bounds=new Envelope(bounds.getMinX() + bounds.getWidth() / 4,bounds.getMaxX() - bounds.getWidth() / 4,bounds.getMinY() + bounds.getHeight() / 4,bounds.getMaxY() - bounds.getHeight() / 4);
  if (ACCURATE)   renderer.paint(g,new Rectangle(w,h),bounds);
  long start=System.currentTimeMillis();
  renderer.paint(g,new Rectangle(w,h),bounds);
  if (ACCURATE) {
    for (int i=0; i < CYCLES; i++)     renderer.paint(g,new Rectangle(w,h),bounds);
  }
  long end=System.currentTimeMillis();
  if (ACCURATE) {
    if (out != null)     out.write("lite " + getTestName() + "="+ (end - start) / 3 + "\n");
  }
 else   if (out != null)   out.write("lite " + getTestName() + "="+ (end - start)+ "\n");
  if (DISPLAY)   display("lite",image,w,h);
}
