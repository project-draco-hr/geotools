{
  super.testCreateSchema();
  String featureTypeName=tname("datatypes");
  SimpleFeatureTypeBuilder ftb=new SimpleFeatureTypeBuilder();
  ftb.setName(featureTypeName);
  ftb.add(aname("string"),String.class);
  ftb.add(aname("boolean_class"),Boolean.class);
  ftb.add(aname("boolean"),boolean.class);
  ftb.add(aname("short_class"),Short.class);
  ftb.add(aname("short"),short.class);
  ftb.add(aname("integer_class"),Integer.class);
  ftb.add(aname("int"),int.class);
  ftb.add(aname("long_class"),Long.class);
  ftb.add(aname("long"),long.class);
  ftb.add(aname("float_class"),Float.class);
  ftb.add(aname("float"),float.class);
  ftb.add(aname("double_class"),Double.class);
  ftb.add(aname("double"),double.class);
  ftb.add(aname("bigdecimal"),BigDecimal.class);
  ftb.add(aname("sql_date"),Date.class);
  ftb.add(aname("time"),Time.class);
  ftb.add(aname("java_util_date"),java.util.Date.class);
  ftb.add(aname("timestamp"),Timestamp.class);
  ftb.add(aname("byte_array"),byte[].class);
  SimpleFeatureType newFT=ftb.buildFeatureType();
  dataStore.createSchema(newFT);
  SimpleFeatureType newSchema=dataStore.getSchema(featureTypeName);
  assertNotNull(newSchema);
  assertEquals(19,newSchema.getAttributeCount());
}
