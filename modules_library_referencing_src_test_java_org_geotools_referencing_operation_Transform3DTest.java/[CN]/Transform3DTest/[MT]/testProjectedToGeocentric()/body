{
  final Hints hints=new Hints();
  final CSFactory csFactory=ReferencingFactoryFinder.getCSFactory(hints);
  final CRSFactory crsFactory=ReferencingFactoryFinder.getCRSFactory(hints);
  final DatumFactory datumFactory=ReferencingFactoryFinder.getDatumFactory(hints);
  final MathTransformFactory mtFactory=ReferencingFactoryFinder.getMathTransformFactory(hints);
  final CoordinateOperationFactory opFactory=ReferencingFactoryFinder.getCoordinateOperationFactory(hints);
  final PrimeMeridian greenwichMeridian=datumFactory.createPrimeMeridian(name("Greenwich Meridian"),0,NonSI.DEGREE_ANGLE);
  final Ellipsoid wgs84Ellipsoid=datumFactory.createFlattenedSphere(name("WGS84 Ellipsoid"),6378137,298.257223563,SI.METER);
  final GeodeticDatum wgs84=datumFactory.createGeodeticDatum(name("WGS84 Datum"),wgs84Ellipsoid,greenwichMeridian);
  final VerticalDatum wgs84_height=datumFactory.createVerticalDatum(name("WGS84 Ellispoidal height"),VerticalDatumType.ELLIPSOIDAL);
  final CoordinateSystemAxis x_axis=csFactory.createCoordinateSystemAxis(name("X"),"X",AxisDirection.OTHER,SI.METER);
  final CoordinateSystemAxis y_axis=csFactory.createCoordinateSystemAxis(name("Y"),"Y",AxisDirection.WEST,SI.METER);
  final CoordinateSystemAxis z_axis=csFactory.createCoordinateSystemAxis(name("Z"),"Z",AxisDirection.NORTH,SI.METER);
  final CartesianCS world_cs=csFactory.createCartesianCS(name("Rendered Cartesian CS"),x_axis,z_axis,y_axis);
  final GeocentricCRS output_crs=crsFactory.createGeocentricCRS(name("Output Cartesian CRS"),wgs84,world_cs);
  final CoordinateSystemAxis latitude_axis=csFactory.createCoordinateSystemAxis(name("Geodetic Latitude"),"lat",AxisDirection.NORTH,NonSI.DEGREE_ANGLE);
  final CoordinateSystemAxis longitude_axis=csFactory.createCoordinateSystemAxis(name("Geodetic Longitude"),"lon",AxisDirection.EAST,NonSI.DEGREE_ANGLE);
  final CoordinateSystemAxis northing_axis=csFactory.createCoordinateSystemAxis(name("Northing"),"N",AxisDirection.NORTH,SI.METER);
  final CoordinateSystemAxis easting_axis=csFactory.createCoordinateSystemAxis(name("Easting"),"E",AxisDirection.EAST,SI.METER);
  final CoordinateSystemAxis height_axis=csFactory.createCoordinateSystemAxis(name("Ellipsoidal height"),"Up",AxisDirection.UP,SI.METER);
  final EllipsoidalCS ellipsoidal_2d_cs=csFactory.createEllipsoidalCS(name("2D ellipsoidal"),longitude_axis,latitude_axis);
  final EllipsoidalCS ellipsoidal_3d_cs=csFactory.createEllipsoidalCS(name("3D ellipsoidal"),longitude_axis,latitude_axis,height_axis);
  final GeographicCRS geographic_2d_crs=crsFactory.createGeographicCRS(name("2D geographic CRS"),wgs84,ellipsoidal_2d_cs);
  final GeographicCRS geographic_3d_crs=crsFactory.createGeographicCRS(name("3D geographic CRS"),wgs84,ellipsoidal_3d_cs);
  final CartesianCS utm_cartesian_3d_cs=csFactory.createCartesianCS(name("UTM 3D Cartesian CS"),northing_axis,easting_axis,height_axis);
  final CartesianCS utm_cartesian_2d_cs=csFactory.createCartesianCS(name("UTM 2D Cartesian CS"),northing_axis,easting_axis);
  final VerticalCS utm_height_cs=csFactory.createVerticalCS(name("Height CS"),height_axis);
  final VerticalCRS height_crs=crsFactory.createVerticalCRS(name("WGS84 Height CRS"),wgs84_height,utm_height_cs);
  final int zone_num=12;
  final ParameterValueGroup parameters=mtFactory.getDefaultParameters("Transverse_Mercator");
  parameters.parameter("central_meridian").setValue(-180 + zone_num * 6 - 3);
  parameters.parameter("latitude_of_origin").setValue(0.0);
  parameters.parameter("scale_factor").setValue(0.9996);
  parameters.parameter("false_easting").setValue(500000.0);
  parameters.parameter("false_northing").setValue(0.0);
  final ProjectedCRS proj_2d=crsFactory.createProjectedCRS(name("WGS 84 / UTM Zone 12/ 2D"),geographic_2d_crs,new DefiningConversion("Transverse_Mercator",parameters),utm_cartesian_2d_cs);
  final CompoundCRS compound_3d=crsFactory.createCompoundCRS(name("3D Compound WGS 84 / UTM Zone 12"),new CoordinateReferenceSystem[]{proj_2d,height_crs});
  final double[] out1=checkTransformation(opFactory.createOperation(compound_3d,output_crs));
  final ProjectedCRS proj_3d=crsFactory.createProjectedCRS(name("WGS 84 / UTM Zone 12/ 3D"),geographic_3d_crs,new DefiningConversion("Transverse_Mercator",parameters),utm_cartesian_3d_cs);
  final double[] out2=checkTransformation(opFactory.createOperation(proj_3d,output_crs));
  final int upper=out1.length;
  assertEquals(upper,out2.length);
  for (int i=0; i < upper; i++) {
    assertEquals(out1[i],out2[i],1E-5);
  }
}
