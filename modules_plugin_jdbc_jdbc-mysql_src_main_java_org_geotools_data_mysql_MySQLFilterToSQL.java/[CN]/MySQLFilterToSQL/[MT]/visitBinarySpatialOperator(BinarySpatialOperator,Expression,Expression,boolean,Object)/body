{
  try {
    if (!(filter instanceof Disjoint)) {
      out.write("MbrIntersects(");
      e1.accept(this,extraData);
      out.write(",");
      e2.accept(this,extraData);
      out.write(")");
      if (!(filter instanceof BBOX)) {
        out.write(" AND ");
      }
    }
    if (filter instanceof BBOX) {
      return extraData;
    }
    if (filter instanceof DistanceBufferOperator) {
      out.write("Distance(");
      e1.accept(this,extraData);
      out.write(", ");
      e2.accept(this,extraData);
      out.write(")");
      if (filter instanceof DWithin) {
        out.write("<");
      }
 else       if (filter instanceof Beyond) {
        out.write(">");
      }
 else {
        throw new RuntimeException("Unknown distance operator");
      }
      out.write(Double.toString(((DistanceBufferOperator)filter).getDistance()));
    }
 else     if (filter instanceof BBOX) {
    }
 else {
      if (filter instanceof Contains) {
        out.write("Contains(");
      }
 else       if (filter instanceof Crosses) {
        out.write("Crosses(");
      }
 else       if (filter instanceof Disjoint) {
        out.write("Disjoint(");
      }
 else       if (filter instanceof Equals) {
        out.write("Equals(");
      }
 else       if (filter instanceof Intersects) {
        out.write("Intersects(");
      }
 else       if (filter instanceof Overlaps) {
        out.write("Overlaps(");
      }
 else       if (filter instanceof Touches) {
        out.write("Touches(");
      }
 else       if (filter instanceof Within) {
        out.write("Within(");
      }
 else {
        throw new RuntimeException("Unknown operator: " + filter);
      }
      if (swapped) {
        e2.accept(this,extraData);
        out.write(", ");
        e1.accept(this,extraData);
      }
 else {
        e1.accept(this,extraData);
        out.write(", ");
        e2.accept(this,extraData);
      }
      out.write(")");
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return extraData;
}
