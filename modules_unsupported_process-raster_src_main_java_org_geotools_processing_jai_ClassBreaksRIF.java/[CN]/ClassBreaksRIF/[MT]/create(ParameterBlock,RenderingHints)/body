{
  RenderedImage src=pb.getRenderedSource(0);
  int xStart=src.getMinX();
  int yStart=src.getMinY();
  Integer numBins=pb.getIntParameter(NUM_CLASSES_ARG);
  ClassificationMethod method=(ClassificationMethod)pb.getObjectParameter(METHOD_ARG);
  Double[][] extrema=(Double[][])pb.getObjectParameter(EXTREMA_ARG);
  ROI roi=(ROI)pb.getObjectParameter(ROI_ARG);
  Integer[] bands=(Integer[])pb.getObjectParameter(BAND_ARG);
  Integer xPeriod=pb.getIntParameter(X_PERIOD_ARG);
  Integer yPeriod=pb.getIntParameter(Y_PERIOD_ARG);
  Double noData=(Double)pb.getObjectParameter(NODATA_ARG);
switch (method) {
case EQUAL_INTERVAL:
    return new EqualIntervalBreaksOpImage(src,numBins,extrema,roi,bands,xStart,yStart,xPeriod,yPeriod,noData);
case QUANTILE:
  return new QuantileBreaksOpImage(src,numBins,extrema,roi,bands,xStart,yStart,xPeriod,yPeriod,noData);
case NATURAL_BREAKS:
return new NaturalBreaksOpImage(src,numBins,extrema,roi,bands,xStart,yStart,xPeriod,yPeriod,noData);
default :
throw new IllegalArgumentException(method.name());
}
}
