{
  processImageStarted();
  final BufferedWriter out=getWriter(parameters);
  final String lineSeparator=getLineSeparator(parameters);
  final NumberFormat format=createNumberFormat(image,parameters);
  final FieldPosition pos=getExpectedFractionPosition(format);
  final int fractionWidth=pos.getEndIndex() - pos.getBeginIndex();
  final int width=pos.getEndIndex() + SEPARATOR_WIDTH;
  final StringBuffer buffer=new StringBuffer(width);
  final RectIter iterator=createRectIter(image,parameters);
  final ImageDimension size=computeSize(image,parameters);
  final float progressScale=100f / size.getNumSampleValues();
  int numSampleValues=0, nextProgress=0;
  if (!iterator.finishedBands())   do {
    if (!iterator.finishedLines())     do {
      if (numSampleValues >= nextProgress) {
        processImageProgress(progressScale * numSampleValues);
        nextProgress=numSampleValues + 2000;
      }
      if (!iterator.finishedPixels())       do {
        buffer.setLength(0);
        String n=format.format(iterator.getSampleDouble(),buffer,pos).toString();
        final int fractionOffset=Math.max(0,fractionWidth - (pos.getEndIndex() - pos.getBeginIndex()));
        out.write(Utilities.spaces(width - n.length() - fractionOffset));
        out.write(n);
        out.write(Utilities.spaces(fractionOffset));
      }
 while (!iterator.nextPixelDone());
      out.write(lineSeparator);
      numSampleValues+=size.width;
      iterator.startPixels();
    }
 while (!iterator.nextLineDone());
    out.write(lineSeparator);
    iterator.startLines();
  }
 while (!iterator.nextBandDone());
  out.flush();
  processImageComplete();
}
