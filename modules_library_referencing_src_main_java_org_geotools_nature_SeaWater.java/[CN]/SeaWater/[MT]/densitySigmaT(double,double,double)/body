{
  P/=10.0;
  final double SR=Math.sqrt(S);
  final double RHO=(EOS80_D * S + polynome(T,EOS80_C) * SR + polynome(T,EOS80_B)) * S + polynome(T,EOS80_A);
  final double V_35_0_0=1.0 / RHO_35_0_0;
  final double SVAN_S_T_0=-RHO * V_35_0_0 / (RHO + RHO_35_0_0);
  if (P <= 0) {
    return RHO + DR_35_0_0;
  }
  final double K0=(polynome(T,EOS80_F) + polynome(T,EOS80_G) * SR) * S + polynome(T,EOS80_E);
  final double DK=K0 + (((EOS80_J * SR + polynome(T,EOS80_I)) * S + polynome(T,EOS80_H)) + (polynome(T,EOS80_K) + polynome(T,EOS80_M) * S) * P) * P;
  final double K_35_0_P=polynome(P,EOS80_N);
  final double V_S_T_0=SVAN_S_T_0 + V_35_0_0;
  final double SVANS=SVAN_S_T_0 * (1.0 - P / K_35_0_P) + V_S_T_0 * P * DK / (K_35_0_P * (K_35_0_P + DK));
  final double V_35_0_P=V_35_0_0 * (1.0 - P / K_35_0_P);
  final double DR_35_0_P=P / (K_35_0_P * V_35_0_P);
  final double DVAN=SVANS / (V_35_0_P * (V_35_0_P + SVANS));
  return DR_35_0_0 + DR_35_0_P - DVAN;
}
