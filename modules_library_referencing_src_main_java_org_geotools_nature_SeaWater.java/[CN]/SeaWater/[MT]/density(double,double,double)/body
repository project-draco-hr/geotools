{
  P/=10.0;
  final double RHO_0_T_0=polynome(T,EOS80_At);
  final double SR=Math.sqrt(S);
  final double RHO_S_T_0=(EOS80_D * S + polynome(T,EOS80_C) * SR + polynome(T,EOS80_B)) * S + RHO_0_T_0;
  final double K_S_T_0=(polynome(T,EOS80_F) + polynome(T,EOS80_G) * SR) * S + polynome(T,EOS80_Et);
  final double K_S_T_P=K_S_T_0 + ((EOS80_J * SR + polynome(T,EOS80_I)) * S + polynome(T,EOS80_Ht) + (polynome(T,EOS80_Kt) + polynome(T,EOS80_M) * S) * P) * P;
  return RHO_S_T_0 / (1.0 - P / K_S_T_P);
}
