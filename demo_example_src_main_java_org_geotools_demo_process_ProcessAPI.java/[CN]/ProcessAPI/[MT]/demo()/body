{
  ReferencedEnvelope env=new ReferencedEnvelope(0.0,8.0,0.0,8.0,DefaultGeographicCRS.WGS84);
  GridCoverage2D cov=createChessboardCoverage(256,256,4,env);
  final Map<String,Object> params=new HashMap<String,Object>();
  params.put(RasterToVectorFactory.RASTER.key,cov);
  params.put(RasterToVectorFactory.BAND.key,Integer.valueOf(0));
  params.put(RasterToVectorFactory.BOUNDS.key,env);
  params.put(RasterToVectorFactory.OUTSIDE.key,Collections.singleton(0.0d));
  final Process r2v=Processors.createProcess(new NameImpl("gt","RasterToVector"));
  SwingWorker worker=new SwingWorker<Map<String,Object>,Void>(){
    @Override protected Map<String,Object> doInBackground() throws Exception {
      ProgressWindow pw=new ProgressWindow(null);
      pw.setTitle("Vectorizing coverage");
      return r2v.execute(params,pw);
    }
    @Override protected void done(){
      Map<String,Object> vectorizingResults=null;
      try {
        vectorizingResults=get();
      }
 catch (      Exception ignore) {
      }
      if (vectorizingResults != null) {
        SimpleFeatureCollection fc=(SimpleFeatureCollection)vectorizingResults.get(RasterToVectorFactory.RESULT_FEATURES.key);
        MapContext map=new DefaultMapContext();
        map.setTitle("raster to vector conversion");
        Style style=SLD.createPolygonStyle(Color.BLUE,Color.CYAN,1.0f);
        map.addLayer(fc,style);
        JMapFrame.showMap(map);
      }
    }
  }
;
  worker.execute();
}
