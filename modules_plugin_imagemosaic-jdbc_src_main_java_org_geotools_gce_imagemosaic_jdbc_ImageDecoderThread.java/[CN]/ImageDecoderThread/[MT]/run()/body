{
  if ((imageBytes == null) || (imageBytes.length == 0)) {
    return;
  }
  try {
    BufferedImage bufferedImage=null;
    boolean triedFromStream=false;
    if (levelInfo.getCanImageIOReadFromInputStream()) {
      bufferedImage=ImageIO.read(new ByteArrayInputStream(imageBytes));
      triedFromStream=true;
    }
    if (bufferedImage == null) {
      if (triedFromStream)       LOGGER.warning("Could not read " + location + " from stream, switch to JAI");
      bufferedImage=readImage2(imageBytes);
    }
    if (requestEnvelope.contains(tileEnvelope,true) == false) {
      GeneralEnvelope savedTileEnvelope=new GeneralEnvelope(tileEnvelope);
      tileEnvelope.intersect(requestEnvelope);
      double scaleX=savedTileEnvelope.getSpan(0) / bufferedImage.getWidth();
      double scaleY=savedTileEnvelope.getSpan(1) / bufferedImage.getHeight();
      int x=(int)(Math.round((tileEnvelope.getMinimum(0) - savedTileEnvelope.getMinimum(0)) / scaleX));
      int y=(int)(Math.round((savedTileEnvelope.getMaximum(1) - tileEnvelope.getMaximum(1)) / scaleY));
      int width=(int)(Math.round(bufferedImage.getWidth() / savedTileEnvelope.getSpan(0) * tileEnvelope.getSpan(0)));
      int height=(int)(Math.round(bufferedImage.getHeight() / savedTileEnvelope.getSpan(1) * tileEnvelope.getSpan(1)));
      if ((width > 0) && (height > 0)) {
        BufferedImage clippedImage=bufferedImage.getSubimage(x,y,width,height);
        tileQueue.add(new TileQueueElement(location,clippedImage,tileEnvelope));
      }
    }
 else {
      tileQueue.add(new TileQueueElement(location,bufferedImage,tileEnvelope));
    }
  }
 catch (  IOException ex) {
    LOGGER.severe("Decorde error for tile " + location);
    LOGGER.log(Level.SEVERE,ex.getLocalizedMessage(),ex);
  }
}
