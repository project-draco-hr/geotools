{
  Object arg0;
  Object arg1;
  Object arg2;
  Object arg3;
  Object arg4;
  Object arg5;
  Object arg6;
  Object arg7;
  Object arg8;
  try {
    arg0=(Object)getExpression(0).evaluate(feature);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("Filter Function problem for function in8 argument #0 - expected type Object");
  }
  try {
    arg1=(Object)getExpression(1).evaluate(feature);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("Filter Function problem for function in8 argument #1 - expected type Object");
  }
  try {
    arg2=(Object)getExpression(2).evaluate(feature);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("Filter Function problem for function in8 argument #2 - expected type Object");
  }
  try {
    arg3=(Object)getExpression(3).evaluate(feature);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("Filter Function problem for function in8 argument #3 - expected type Object");
  }
  try {
    arg4=(Object)getExpression(4).evaluate(feature);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("Filter Function problem for function in8 argument #4 - expected type Object");
  }
  try {
    arg5=(Object)getExpression(5).evaluate(feature);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("Filter Function problem for function in8 argument #5 - expected type Object");
  }
  try {
    arg6=(Object)getExpression(6).evaluate(feature);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("Filter Function problem for function in8 argument #6 - expected type Object");
  }
  try {
    arg7=(Object)getExpression(7).evaluate(feature);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("Filter Function problem for function in8 argument #7 - expected type Object");
  }
  try {
    arg8=(Object)getExpression(8).evaluate(feature);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("Filter Function problem for function in8 argument #8 - expected type Object");
  }
  return new Boolean(StaticGeometry.in8(arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8));
}
