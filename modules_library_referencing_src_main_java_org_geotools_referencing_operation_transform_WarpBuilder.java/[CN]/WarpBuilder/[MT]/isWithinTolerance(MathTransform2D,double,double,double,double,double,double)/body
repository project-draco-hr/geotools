{
  ordinates[0]=x1;
  ordinates[1]=y1;
  ordinates[2]=(x1 + x2) / 2;
  ordinates[3]=(y1 + y2) / 2;
  ordinates[4]=x2;
  ordinates[5]=y2;
  ordinates[6]=(x2 + x3) / 2;
  ordinates[7]=(y2 + y3) / 2;
  ordinates[8]=x3;
  ordinates[9]=y3;
  mt.transform(ordinates,0,ordinates,0,5);
  boolean withinTolerance=true;
  for (int i=1; i < 4 && withinTolerance; i++) {
    final double tx1=ordinates[0];
    final double ty1=ordinates[1];
    final double tx2=ordinates[i * 2];
    final double ty2=ordinates[i * 2 + 1];
    final double tx3=ordinates[8];
    final double ty3=ordinates[9];
    double dx=0;
    if (abs(x3 - x1) > EPS) {
      double xmid;
      if (i == 1) {
        xmid=(x1 + x2) / 2;
      }
 else       if (i == 2) {
        xmid=x2;
      }
 else {
        xmid=(x2 + x3) / 2;
      }
      dx=tx2 - (tx3 - tx1) / (x3 - x1) * (xmid - x1) - tx1;
    }
    double dy=0;
    if (abs(y3 - y1) > EPS) {
      double ymid;
      if (i == 1) {
        ymid=(y1 + y2) / 2;
      }
 else       if (i == 2) {
        ymid=y2;
      }
 else {
        ymid=(y2 + y3) / 2;
      }
      dy=ty2 - (ty3 - ty1) / (y3 - y1) * (ymid - y1) - ty1;
    }
    final double distance=dx * dx + dy * dy;
    withinTolerance&=distance < maxDistanceSquared;
  }
  return withinTolerance;
}
