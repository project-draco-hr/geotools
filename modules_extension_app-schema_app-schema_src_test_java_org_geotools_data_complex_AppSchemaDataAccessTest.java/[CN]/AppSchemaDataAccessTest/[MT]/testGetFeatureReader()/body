{
  FeatureSource<FeatureType,Feature> access=dataStore.getFeatureSource(targetName);
  FeatureType type=access.getSchema();
  assertEquals(targetType,type);
  FeatureCollection<FeatureType,Feature> reader=access.getFeatures();
  assertNotNull(reader);
  FeatureIterator<Feature> features=reader.features();
  assertTrue(features.hasNext());
  Feature complexFeature=(Feature)features.next();
  assertNotNull(complexFeature);
  assertEquals(targetType,complexFeature.getType());
  features.close();
  org.opengis.filter.FilterFactory ff=CommonFactoryFinder.getFilterFactory(null);
  PropertyName expr;
  Object value;
  expr=ff.property("measurement[1]");
  value=expr.evaluate(complexFeature);
  assertNotNull(value);
  expr=ff.property("measurement[1]/parameter");
  value=expr.evaluate(complexFeature);
  assertNotNull(value);
  expr=ff.property("measurement[1]/value");
  value=expr.evaluate(complexFeature);
  assertNotNull(value);
  expr=ff.property("measurement[2]/parameter");
  value=expr.evaluate(complexFeature);
  assertNotNull(value);
  expr=ff.property("measurement[2]/value");
  value=expr.evaluate(complexFeature);
  assertNotNull(value);
  expr=ff.property("measurement[3]/parameter");
  value=expr.evaluate(complexFeature);
  assertNotNull(value);
  expr=ff.property("measurement[3]/value");
  value=expr.evaluate(complexFeature);
  assertNotNull(value);
}
