{
  final List<ProcessFactory> root=new ArrayList<ProcessFactory>();
  final Map<ProcessFactory,List<Name>> branch=new HashMap<ProcessFactory,List<Name>>();
  root.addAll(factories);
  Collections.sort(root,new Comparator<ProcessFactory>(){
    @Override public int compare(    ProcessFactory o1,    ProcessFactory o2){
      String s1=o1.getTitle().toString();
      String s2=o2.getTitle().toString();
      return s1.compareTo(s2);
    }
  }
);
  return new TreeModel(){
    @Override public Object getRoot(){
      return root;
    }
    List<Name> getChildren(    ProcessFactory factory){
synchronized (factory) {
        List<Name> list=branch.get(factory);
        if (list == null) {
          list=new ArrayList<Name>();
          list.addAll(factory.getNames());
          Collections.sort(list,new Comparator<Name>(){
            @Override public int compare(            Name o1,            Name o2){
              String s1=o1.toString();
              String s2=o2.toString();
              return s1.compareTo(s2);
            }
          }
);
          branch.put(factory,list);
        }
        return list;
      }
    }
    @Override public Object getChild(    Object parent,    int index){
      if (parent == root) {
        return root.get(index);
      }
 else       if (parent instanceof ProcessFactory) {
        ProcessFactory factory=(ProcessFactory)parent;
        return getChildren(factory).get(index);
      }
      return null;
    }
    @Override public int getChildCount(    Object parent){
      if (parent == root) {
        return root.size();
      }
 else       if (parent instanceof ProcessFactory) {
        ProcessFactory factory=(ProcessFactory)parent;
        return getChildren(factory).size();
      }
      return 0;
    }
    @Override public boolean isLeaf(    Object node){
      if (node == root) {
        return false;
      }
 else       if (node instanceof ProcessFactory) {
        return false;
      }
 else       if (node instanceof Name) {
        return true;
      }
      return true;
    }
    @Override public void valueForPathChanged(    TreePath path,    Object newValue){
    }
    @Override public int getIndexOfChild(    Object parent,    Object child){
      if (parent == root) {
        return root.indexOf(child);
      }
 else       if (parent instanceof ProcessFactory) {
        ProcessFactory factory=(ProcessFactory)parent;
        return getChildren(factory).indexOf(child);
      }
      return 0;
    }
    @Override public void addTreeModelListener(    TreeModelListener l){
    }
    @Override public void removeTreeModelListener(    TreeModelListener l){
    }
  }
;
}
