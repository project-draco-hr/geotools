{
  byte[] testData=DataUtils.toBigEndian(TEST_SAMPLES[0]);
  for (int i=0; i < testData.length; i++) {
    assertEquals("Checking translation little endian bytes order to bin " + "endian bytes order",testData[i],TEST_SAMPLES[1][i]);
  }
  testData=DataUtils.toBigEndian(TEST_SAMPLES[1]);
  for (int i=0; i < testData.length; i++) {
    assertEquals("Checking translation little endian bytes order to bin " + "endian bytes order",testData[i],TEST_SAMPLES[0][i]);
  }
  testData=DataUtils.toBigEndian(TEST_SAMPLES[2]);
  for (int i=0; i < testData.length; i++) {
    assertEquals("Checking translation little endian bytes order to bin " + "endian bytes order",testData[i],TEST_SAMPLES[3][i]);
  }
  testData=DataUtils.toBigEndian(TEST_SAMPLES[3]);
  for (int i=0; i < testData.length; i++) {
    assertEquals("Checking translation little endian bytes order to bin " + "endian bytes order",testData[i],TEST_SAMPLES[2][i]);
  }
  testData=DataUtils.toBigEndian(TEST_SAMPLES[4]);
  for (int i=0; i < testData.length; i++) {
    assertEquals("Checking translation little endian bytes order to bin " + "endian bytes order",testData[i],TEST_SAMPLES[5][i]);
  }
  testData=DataUtils.toBigEndian(TEST_SAMPLES[5]);
  for (int i=0; i < testData.length; i++) {
    assertEquals("Checking translation little endian bytes order to bin " + "endian bytes order",testData[i],TEST_SAMPLES[4][i]);
  }
}
