{
  List changedTriangles=new ArrayList();
  Iterator j=triangle.getAdjacentTriangles().iterator();
  int ct=changedTriangles.size();
  while (j.hasNext() && (changedTriangles.size() == ct)) {
    TINTriangle adjacent=(TINTriangle)j.next();
    List NewTriangles=new ArrayList();
    if (triangle.getCircumCicle().contains(adjacent.p1) || triangle.getCircumCicle().contains(adjacent.p0) || triangle.getCircumCicle().contains(adjacent.p2)) {
      triangles.remove(triangle);
      triangles.remove(adjacent);
      NewTriangles.addAll(alternativeTriangles(triangle,adjacent));
      triangles.addAll(NewTriangles);
      changedTriangles=NewTriangles;
    }
 else     if (!triangles.contains(triangle)) {
      triangles.add(triangle);
    }
  }
  return changedTriangles;
}
