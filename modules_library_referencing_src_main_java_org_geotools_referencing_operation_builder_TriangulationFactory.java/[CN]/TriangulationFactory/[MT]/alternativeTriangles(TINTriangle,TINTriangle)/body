{
  ArrayList ABCvertices=new ArrayList();
  ArrayList BCDvertices=new ArrayList();
  ABCvertices.add(ABC.p0);
  ABCvertices.add(ABC.p1);
  ABCvertices.add(ABC.p2);
  BCDvertices.add(BCD.p0);
  BCDvertices.add(BCD.p1);
  BCDvertices.add(BCD.p2);
  ArrayList sharedVertices=new ArrayList();
  ArrayList unsharedVertices=new ArrayList();
  for (Iterator i=ABCvertices.iterator(); i.hasNext(); ) {
    DirectPosition vertex=(DirectPosition)i.next();
    if (!BCDvertices.contains(vertex)) {
      unsharedVertices.add(vertex);
    }
 else     if (BCDvertices.contains(vertex)) {
      sharedVertices.add(vertex);
      BCDvertices.remove(vertex);
    }
 else {
      throw new TriangulationException("should never reach here");
    }
  }
  unsharedVertices.addAll(BCDvertices);
  if (sharedVertices.size() < 2) {
    throw new TriangulationException("Unable to make alternative triangles");
  }
  ABC.removeAdjacent(BCD);
  BCD.removeAdjacent(ABC);
  TINTriangle trigA=new TINTriangle((DirectPosition)sharedVertices.get(0),(DirectPosition)unsharedVertices.get(0),(DirectPosition)unsharedVertices.get(1));
  TINTriangle trigB=new TINTriangle((DirectPosition)unsharedVertices.get(0),(DirectPosition)unsharedVertices.get(1),(DirectPosition)sharedVertices.get(1));
  trigA.addAdjacentTriangle(trigB);
  trigB.addAdjacentTriangle(trigA);
  trigA.tryToAddAdjacent(BCD.getAdjacentTriangles());
  trigA.tryToAddAdjacent(ABC.getAdjacentTriangles());
  trigB.tryToAddAdjacent(BCD.getAdjacentTriangles());
  trigB.tryToAddAdjacent(ABC.getAdjacentTriangles());
  List list=new ArrayList();
  list.add(trigA);
  list.add(trigB);
  for (Iterator i=ABC.getAdjacentTriangles().iterator(); i.hasNext(); ) {
    TINTriangle trig=(TINTriangle)i.next();
    trig.removeAdjacent(ABC);
    trig.tryToAddAdjacent(list);
  }
  for (Iterator i=BCD.getAdjacentTriangles().iterator(); i.hasNext(); ) {
    TINTriangle trig=(TINTriangle)i.next();
    trig.removeAdjacent(BCD);
    trig.tryToAddAdjacent(list);
  }
  return list;
}
