{
  if (type instanceof ComplexType) {
    ComplexType complexType=(ComplexType)type;
    ElementGrouping child=complexType.getChild();
    if (child != null) {
      Element found=child.findChildElement(localName,namespaceURI);
      if (found != null)       return found;
    }
    Element[] children=complexType.getChildElements();
    if (children == null || children.length == 0)     return null;
    for (int i=0; i < children.length; i++) {
      Element element=children[i];
      if (localName.equals(element.getName()) && namespaceURI.equals(element.getNamespace()))       return element;
    }
    if (complexType.getParent() != null) {
      Type parent=complexType.getParent();
      return findChildElement((ComplexType)parent,localName,namespaceURI);
    }
  }
 else {
    return type.findChildElement(localName);
  }
  return null;
}
