{
  try {
    if (r == null)     return;
    if (writeBuffer == null)     allocateBuffers();
    if (writeBuffer.remaining() < record_size)     drain();
switch (attributeType) {
case 'N':
case 'D':
      Object obj=r.getAttribute();
    if (attributeClass.isInstance(new Integer(0))) {
      int i=(obj instanceof Integer) ? ((Number)obj).intValue() : (int)((Number)obj).longValue();
      writeBuffer.putInt(i);
    }
 else {
      long l=(obj instanceof Integer) ? (long)((Number)obj).intValue() : ((Number)obj).longValue();
      writeBuffer.putLong(l);
    }
  break;
case 'F':
writeBuffer.putDouble(((Double)r.getAttribute()).doubleValue());
break;
case 'L':
boolean b=((Boolean)r.getAttribute()).booleanValue();
writeBuffer.put((byte)(b ? 1 : 0));
break;
case 'C':
default :
byte[] btemp=r.getAttribute().toString().getBytes("ISO-8859-1");
byte[] bres=new byte[record_size - 8];
for (int i=0; i < bres.length; i++) {
bres[i]=(i < btemp.length) ? btemp[i] : (byte)0;
}
writeBuffer.put(bres);
}
writeBuffer.putLong(r.getFeatureID());
}
 catch (UnsupportedEncodingException ex) {
throw new IOException(ex.getMessage());
}
}
