{
  dataStore.createSchema(poly3DType);
  SimpleFeatureType actualSchema=dataStore.getSchema(tname(getPoly3d()));
  assertFeatureTypesEqual(poly3DType,actualSchema);
  assertEquals(getNativeSRID(),actualSchema.getGeometryDescriptor().getUserData().get(JDBCDataStore.JDBC_NATIVE_SRID));
  try (FeatureWriter<SimpleFeatureType,SimpleFeature> fw=dataStore.getFeatureWriterAppend(tname(getPoly3d()),Transaction.AUTO_COMMIT)){
    SimpleFeature f=fw.next();
    f.setAttribute(aname(ID),0);
    f.setAttribute(aname(GEOM),poly);
    f.setAttribute(aname(NAME),"3dpolygon!");
    fw.write();
  }
   final Hints hints=new Hints();
  hints.put(Hints.JTS_COORDINATE_SEQUENCE_FACTORY,new LiteCoordinateSequenceFactory());
  Query query=new Query(tname(getPoly3d()));
  query.setHints(hints);
  try (FeatureReader<SimpleFeatureType,SimpleFeature> fr=dataStore.getFeatureReader(query,Transaction.AUTO_COMMIT)){
    assertTrue(fr.hasNext());
    SimpleFeature f=fr.next();
    Geometry fgeom=(Geometry)f.getDefaultGeometry();
    assertTrue("2D topology does not match",poly.equalsTopo(fgeom));
    assertTrue("Z values do not match",hasMatchingZValues(poly,fgeom));
  }
 }
