{
  PolygonEncoder encoder=new PolygonEncoder(gtEncoder,"gml");
  Geometry geometry=new WKTReader2().read("CURVEPOLYGON(COMPOUNDCURVE(CIRCULARSTRING(0 0, 2 0, 2 1, 2 3, 4 3),(4 3, 4 5, 1 4, 0 0)), " + "CIRCULARSTRING(1.7 1, 1.4 0.4, 1.6 0.4, 1.6 0.5, 1.7 1) )");
  Document doc=encode(encoder,geometry);
  assertEquals(1,xpath.getMatchingNodes("//gml:Polygon",doc).getLength());
  assertEquals(1,xpath.getMatchingNodes("//gml:Polygon/gml:exterior",doc).getLength());
  assertEquals(1,xpath.getMatchingNodes("//gml:Polygon/gml:interior",doc).getLength());
  String ext1="//gml:Polygon/gml:exterior/gml:Ring/gml:curveMember[1]";
  assertEquals("circularArc3Points",xpath.evaluate(ext1 + "/gml:Curve/gml:segments/gml:ArcString/@interpolation",doc));
  assertEquals("0 0 2 0 2 1 2 3 4 3",xpath.evaluate(ext1 + "/gml:Curve/gml:segments/gml:ArcString/gml:posList",doc));
  String ext2="//gml:Polygon/gml:exterior/gml:Ring/gml:curveMember[2]";
  assertEquals("4 3 4 5 1 4 0 0",xpath.evaluate(ext2 + "/gml:LineString/gml:posList",doc));
  String int1="//gml:Polygon/gml:interior/gml:Ring/gml:curveMember[1]";
  assertEquals("circularArc3Points",xpath.evaluate(int1 + "/gml:Curve/gml:segments/gml:ArcString/@interpolation",doc));
  assertEquals("1.7 1 1.4 0.4 1.6 0.4 1.6 0.5 1.7 1",xpath.evaluate(int1 + "/gml:Curve/gml:segments/gml:ArcString/gml:posList",doc));
}
