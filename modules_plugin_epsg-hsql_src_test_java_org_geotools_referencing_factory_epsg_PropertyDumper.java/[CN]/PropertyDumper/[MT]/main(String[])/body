{
  String filename="/tmp/wkt.properties";
  Properties diff=new Properties();
  String compare=null;
  if (args.length > 0) {
    filename=args[0];
  }
  File original;
  if (args.length > 1) {
    original=new File(args[1]);
  }
 else {
    original=new File("../epsg-wkt/src/main/resources/org/geotools/referencing/crs/epsg.properties");
  }
  if (original.exists()) {
    InputStream in=new FileInputStream(original);
    diff.load(in);
  }
  FileOutputStream out=new FileOutputStream(filename);
  Writer writer=new BufferedWriter(new OutputStreamWriter(out,"8859_1"));
  writer.append("Generate from EPSG database version " + ThreadedHsqlEpsgFactory.VERSION);
  Properties props=new Properties();
  List<String> codes=new ArrayList(CRS.getSupportedCodes("EPSG"));
  Collections.sort(codes,new Comparator<String>(){
    public int compare(    String c1,    String c2){
      try {
        Long n1=new Long(c1);
        Long n2=new Long(c2);
        return n1.compareTo(n2);
      }
 catch (      NumberFormatException e) {
        return c1.compareTo(c2);
      }
    }
  }
);
  for (  String code : codes) {
    try {
      CoordinateReferenceSystem crs=CRS.decode("EPSG:" + code,true);
      String wkt=crs.toString().replaceAll("\n","").replaceAll("  ","");
      CRS.parseWKT(wkt);
      props.put(code,wkt);
      diff.remove(code);
    }
 catch (    Exception e) {
      String desc="";
      try {
        desc=CRS.getAuthorityFactory(true).getDescriptionText("EPSG:" + code).toString(Locale.ENGLISH);
      }
 catch (      Exception ex) {
      }
      System.out.println("#" + code + "("+ desc+ ")"+ " -> "+ e.getMessage());
    }
  }
  props.store(out,"Generated from EPSG database version " + ThreadedHsqlEpsgFactory.VERSION);
  if (!diff.isEmpty()) {
    diff.store(out,"Extra Definitions Supplied from Community");
  }
  out.close();
}
