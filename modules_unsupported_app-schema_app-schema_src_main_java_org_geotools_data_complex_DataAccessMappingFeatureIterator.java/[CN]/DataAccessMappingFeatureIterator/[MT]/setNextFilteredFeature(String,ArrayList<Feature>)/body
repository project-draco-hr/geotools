{
  FeatureCollection<SimpleFeatureType,SimpleFeature> matchingFeatures;
  FeatureId featureId=namespaceAwareFilterFactory.featureId(fId);
  Query query=new Query();
  if (reprojection != null) {
    if (sourceFeatures.getSchema().getGeometryDescriptor() != null) {
      query.setCoordinateSystemReproject(reprojection);
    }
  }
  if (mapping.getFeatureIdExpression().equals(Expression.NIL)) {
    Set<FeatureId> ids=new HashSet<FeatureId>();
    ids.add(featureId);
    query.setFilter(namespaceAwareFilterFactory.id(ids));
    matchingFeatures=this.mappedSource.getFeatures(query);
  }
 else {
    query.setFilter(namespaceAwareFilterFactory.equals(mapping.getFeatureIdExpression(),namespaceAwareFilterFactory.literal(featureId)));
    matchingFeatures=this.mappedSource.getFeatures(query);
  }
  FeatureIterator<SimpleFeature> iterator=matchingFeatures.features();
  while (iterator.hasNext()) {
    features.add(iterator.next());
  }
  if (features.isEmpty()) {
    features.add(curSrcFeature);
  }
  filteredFeatures.add(fId);
  iterator.close();
  curSrcFeature=null;
}
