{
  Graphics2D g2d=(Graphics2D)g;
  g2d.setColor(backgroundColor);
  g2d.fillRect(0,0,getSize().width,getSize().height);
  g2d.setColor(marksColor);
  g2d.drawRect(border.left,border.top,width,height);
  g2d.setColor(barColor);
  for (int bin=0; bin < histogram.getNumBins(0); bin++) {
    int x=border.left + bin * binWidth;
    double barStarts=border.top + height * (maxCount - counts[bin]) / (1. * maxCount);
    double barEnds=Math.ceil(height * counts[bin] / (1. * maxCount));
    g2d.drawRect(x,(int)barStarts,binWidth,(int)barEnds);
  }
  g2d.setColor(marksColor);
  g2d.setFont(fontSmall);
  FontMetrics metrics=g2d.getFontMetrics();
  int halfFontHeight=metrics.getHeight() / 2;
  for (int bin=0; bin <= histogram.getNumBins(0); bin++) {
    if (bin % skipIndexes == 0) {
      String label="" + (indexMultiplier * bin);
      int textHeight=metrics.stringWidth(label);
      int x=border.left + bin * binWidth + binWidth / 2;
      g2d.translate(border.left + bin * binWidth + halfFontHeight,border.top + height + textHeight+ 2);
      g2d.rotate(-Math.PI / 2);
      g2d.drawString(label,0,0);
      g2d.rotate(Math.PI / 2);
      g2d.translate(-(border.left + bin * binWidth + halfFontHeight),-(border.top + height + textHeight+ 2));
    }
  }
  double step=(int)(maxCount / verticalTicks);
  for (int l=0; l <= verticalTicks; l++) {
    String label;
    if (l == verticalTicks)     label="" + maxCount;
 else     label="" + (l * step);
    int textWidth=metrics.stringWidth(label);
    g2d.drawString(label,border.left - 2 - textWidth,border.top + height - l * (height / verticalTicks));
  }
  g2d.setFont(fontLarge);
  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  metrics=g2d.getFontMetrics();
  int textWidth=metrics.stringWidth(title);
  g2d.drawString(title,(border.left + width + border.right - textWidth) / 2,28);
}
