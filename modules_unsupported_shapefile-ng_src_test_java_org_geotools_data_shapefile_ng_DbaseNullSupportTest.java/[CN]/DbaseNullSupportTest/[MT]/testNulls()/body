{
  File tmp=File.createTempFile("test",".dbf");
  if (!tmp.delete()) {
    throw new IllegalStateException("Unable to clear temp file");
  }
  DbaseFileHeader header=new DbaseFileHeader();
  for (int i=0; i < types.length; i++) {
    header.addColumn("" + types[i],types[i],sizes[i],decimals[i]);
  }
  header.setNumRecords(values.length);
  FileOutputStream fos=new FileOutputStream(tmp);
  WritableByteChannel channel=fos.getChannel();
  tmp.deleteOnExit();
  DbaseFileWriter writer=new DbaseFileWriter(header,channel,cs,tz);
  for (int row=0; row < values.length; row++) {
    Object[] current=new Object[values.length];
    Arrays.fill(current,null);
    current[row]=values[row];
    writer.write(current);
  }
  writer.close();
  fos.flush();
  fos.close();
  DbaseFileReader reader=new DbaseFileReader(new FileInputStream(tmp).getChannel(),false,cs,tz);
  assertTrue("Number of records does not match",values.length == reader.getHeader().getNumRecords());
  for (int row=0; row < values.length; row++) {
    Object[] current=reader.readEntry();
    assertTrue("Number of columns incorrect",current != null && current.length == values.length);
    for (int column=0; column < values.length; column++) {
      if (column == row) {
        assertTrue("Column was null and should not have been",current[column] != null);
        assertTrue("Non-null column value " + current[column] + " did not match original value "+ values[column],current[column].equals(values[column]));
      }
 else {
        assertTrue("Column that should have been null was not",current[column] == null);
      }
    }
  }
}
