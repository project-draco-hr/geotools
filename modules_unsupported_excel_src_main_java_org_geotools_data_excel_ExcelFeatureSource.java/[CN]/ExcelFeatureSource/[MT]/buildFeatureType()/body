{
  SimpleFeatureTypeBuilder tb=new SimpleFeatureTypeBuilder();
  tb.setName(entry.getName());
  tb.setCRS(dataStore.getProjection());
  Row header=sheet.getRow(dataStore.getHeaderRowIndex());
  Row data=sheet.getRow(dataStore.getHeaderRowIndex() + 1);
  Row nextData=sheet.getRow(dataStore.getHeaderRowIndex() + 2);
  boolean latColGood=false;
  boolean lonColGood=false;
  for (int i=header.getFirstCellNum(); i < header.getLastCellNum(); i++) {
    Cell cell=data.getCell(i);
    String name=header.getCell(i).getStringCellValue().trim();
    CellValue value=evaluator.evaluate(cell);
    int type=value.getCellType();
    Class<?> clazz=null;
    if (latCol == i) {
      if (type == Cell.CELL_TYPE_NUMERIC) {
        latColGood=true;
      }
    }
 else     if (lonCol == i) {
      if (type == Cell.CELL_TYPE_NUMERIC) {
        lonColGood=true;
      }
    }
 else {
switch (type) {
case Cell.CELL_TYPE_NUMERIC:
        if (HSSFDateUtil.isCellDateFormatted(cell)) {
          if (value.getNumberValue() < 1.0) {
            clazz=Time.class;
          }
 else           if (Math.floor(cell.getNumericCellValue()) == Math.ceil(cell.getNumericCellValue())) {
            Cell cell2=nextData.getCell(i);
            if (Math.floor(cell2.getNumericCellValue()) == Math.ceil(cell2.getNumericCellValue())) {
              clazz=java.sql.Date.class;
            }
 else {
              clazz=java.util.Date.class;
            }
          }
 else {
            clazz=java.util.Date.class;
          }
        }
 else {
          clazz=Double.class;
        }
      break;
case Cell.CELL_TYPE_STRING:
    clazz=String.class;
  break;
case Cell.CELL_TYPE_BOOLEAN:
clazz=Boolean.class;
break;
}
System.out.println(name + ":" + clazz);
tb.add(name,clazz);
}
}
if (latColGood && lonColGood) {
tb.add("the_geom",Point.class);
}
 else {
throw new IOException("failed to find a Lat and Lon column");
}
final SimpleFeatureType SCHEMA=tb.buildFeatureType();
return SCHEMA;
}
