{
  ArrayList includes=new ArrayList();
  ArrayList namespaces=new ArrayList();
  File file=null;
  try {
    file=findSchemaFile(schema.getSchemaLocation());
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,"",e);
  }
  if (file != null) {
    includes.add(file);
    namespaces.add(schema.getTargetNamespace());
  }
 else {
    logger.log(Level.SEVERE,"Could not find: " + schema.getSchemaLocation() + " to copy.");
  }
  List included=Schemas.getIncludes(schema);
  for (Iterator i=included.iterator(); i.hasNext(); ) {
    XSDInclude include=(XSDInclude)i.next();
    file=null;
    try {
      file=findSchemaFile(include.getSchemaLocation());
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,"",e);
    }
    if (file != null) {
      includes.add(file);
      if (include.getSchema() != null) {
        namespaces.add(include.getSchema().getTargetNamespace());
      }
 else {
        namespaces.add(schema.getTargetNamespace());
      }
    }
 else {
      logger.log(Level.SEVERE,"Could not find: " + include.getSchemaLocation() + " to copy.");
    }
  }
  try {
    for (Iterator i=includes.iterator(); i.hasNext(); ) {
      File include=(File)i.next();
      copy(include,resourceLocation);
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,"Error generating resolver",e);
  }
}
