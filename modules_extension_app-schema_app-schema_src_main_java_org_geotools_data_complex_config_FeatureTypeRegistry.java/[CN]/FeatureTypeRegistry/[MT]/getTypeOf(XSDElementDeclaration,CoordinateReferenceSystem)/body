{
  XSDTypeDefinition typeDefinition;
  if (elemDecl.isElementDeclarationReference()) {
    elemDecl=elemDecl.getResolvedElementDeclaration();
  }
  boolean hasToBeRegistered=false;
  typeDefinition=elemDecl.getAnonymousTypeDefinition();
  if (typeDefinition == null) {
    hasToBeRegistered=true;
    typeDefinition=elemDecl.getTypeDefinition();
  }
  if (typeDefinition == null) {
    QName qname=Types.toQName(Types.typeName(elemDecl.getTargetNamespace(),elemDecl.getName()));
    for (    SchemaIndex schemaIndex : schemas) {
      elemDecl=schemaIndex.getElementDeclaration(qname);
      if (elemDecl != null) {
        break;
      }
    }
    if (elemDecl != null) {
      if (elemDecl.isElementDeclarationReference()) {
        elemDecl=elemDecl.getResolvedElementDeclaration();
      }
      typeDefinition=elemDecl.getAnonymousTypeDefinition();
      if (typeDefinition == null) {
        typeDefinition=elemDecl.getTypeDefinition();
      }
    }
  }
  if (typeDefinition == null) {
    String msg="The element declaration " + elemDecl.getTargetNamespace() + "#"+ elemDecl.getName()+ " has a null type definition, can't continue, fix it on the schema";
    LOGGER.warning(msg);
    throw new NoSuchElementException(msg);
  }
  AttributeType type;
  if (hasToBeRegistered) {
    String targetNamespace=typeDefinition.getTargetNamespace();
    String name=typeDefinition.getName();
    Name typeName=Types.typeName(targetNamespace,name);
    type=getAttributeType(typeName,typeDefinition,crs);
    if (type == null) {
      type=createType(typeName,typeDefinition,crs,false);
    }
  }
 else {
    String name=elemDecl.getName();
    String targetNamespace=elemDecl.getTargetNamespace();
    Name overrideName=Types.typeName(targetNamespace,name);
    type=createType(overrideName,typeDefinition,crs,true);
  }
  return type;
}
