{
  Connection conn=pool.getConnection();
  FeatureReader<SimpleFeatureType,SimpleFeature> reader=data.getFeatureReader(new DefaultQuery("road",Filter.INCLUDE),Transaction.AUTO_COMMIT);
  ReferencedEnvelope bounds=new ReferencedEnvelope();
  try {
    SimpleFeature f;
    while (reader.hasNext()) {
      f=(SimpleFeature)reader.next();
      int index=((Integer)f.getAttribute("id")).intValue() - 1;
      roadFeatures[index]=f;
      bounds.expandToInclude((Envelope)f.getBounds());
    }
  }
  finally {
    reader.close();
    conn.close();
  }
  if (!roadBounds.equals(bounds)) {
    System.out.println("warning! Database changed bounds()");
    System.out.println("was:" + roadBounds);
    System.out.println("now:" + bounds);
    roadBounds=bounds;
  }
  ReferencedEnvelope bounds12=new ReferencedEnvelope();
  bounds12.expandToInclude((Envelope)roadFeatures[0].getBounds());
  bounds12.expandToInclude((Envelope)roadFeatures[1].getBounds());
  if (!rd12Bounds.equals(bounds12)) {
    System.out.println("warning! Database changed bounds of rd1 & rd2");
    System.out.println("was:" + rd12Bounds);
    System.out.println("now:" + bounds12);
    rd12Bounds=bounds12;
  }
  SimpleFeatureType schema=roadFeatures[0].getFeatureType();
  FilterFactory ff=FilterFactoryFinder.createFilterFactory();
  CompareFilter tFilter=ff.createCompareFilter(AbstractFilter.COMPARE_EQUALS);
  Expression rd1Literal=ff.createLiteralExpression("r1");
  tFilter.addLeftValue(rd1Literal);
  Expression rdNameAtt=ff.createAttributeExpression(schema,"name");
  tFilter.addRightValue(rdNameAtt);
  rd1Filter=tFilter;
  tFilter=ff.createCompareFilter(AbstractFilter.COMPARE_EQUALS);
  Expression rd2Literal=ff.createLiteralExpression("r2");
  tFilter.addLeftValue(rd2Literal);
  tFilter.addRightValue(rdNameAtt);
  rd2Filter=tFilter;
  rd12Filter=ff.or(rd2Filter,rd1Filter);
}
