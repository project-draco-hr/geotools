{
  GeometryFactoryImpl tCoordFactory=(GeometryFactoryImpl)builder.getGeometryFactory();
  PrimitiveFactoryImpl tPrimitiveFactory=(PrimitiveFactoryImpl)builder.getPrimitiveFactory();
  DirectPosition dp1=tCoordFactory.createDirectPosition(new double[]{0,0});
  DirectPosition dp2=tCoordFactory.createDirectPosition(new double[]{100,100});
  CurveBoundary curveBoundary1=tPrimitiveFactory.createCurveBoundary(dp1,dp2);
  DirectPosition dp=curveBoundary1.getRepresentativePoint();
  assertTrue(dp.getOrdinate(0) == 0);
  assertTrue(dp.getOrdinate(1) == 0);
  assertTrue(curveBoundary1.isCycle() == true);
  PointImpl point1=new PointImpl(dp1);
  try {
    CurveBoundaryImpl b2=new CurveBoundaryImpl(this.crs,point1,point1);
    fail();
  }
 catch (  IllegalArgumentException expected) {
  }
  PointImpl point2=new PointImpl(dp2);
  CurveBoundaryImpl b2=new CurveBoundaryImpl(curveBoundary1.getCoordinateReferenceSystem(),point1,point2);
  try {
    CurveBoundaryImpl expected=((CurveBoundaryImpl)curveBoundary1).clone();
    assertTrue(b2.equals(expected));
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
    fail();
  }
  String toS=b2.toString();
  assertTrue(toS != null);
  assertTrue(toS.length() > 0);
  EnvelopeImpl env=b2.getEnvelope();
  EnvelopeImpl exp_env=new EnvelopeImpl(dp1,dp2);
  assertTrue(env.equals(exp_env));
  assertTrue(b2.isSimple());
  assertTrue(b2.equals((Object)curveBoundary1));
  assertTrue(b2.equals((Object)b2));
  assertFalse(b2.equals((Object)dp1));
  assertFalse(b2.equals((Object)null));
  DirectPosition dp3=tCoordFactory.createDirectPosition(new double[]{3,3});
  PointImpl point3=new PointImpl(dp3);
  assertFalse(b2.equals((Object)new CurveBoundaryImpl(this.crs,point1,point3)));
  assertFalse(b2.hashCode() == ((CurveBoundaryImpl)curveBoundary1).hashCode());
}
