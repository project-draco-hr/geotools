{
  int len=source.length;
  int len34=len * 3 / 4;
  byte[] outBuff=new byte[len34];
  int outBuffPosn=0;
  byte[] b4=new byte[4];
  int b4Posn=0;
  int i=0;
  byte sbiDecode=0;
  for (i=0; i < len; i++) {
    sbiDecode=DECODABET[source[i]];
    if (sbiDecode > EQUALS_SIGN_ENC) {
      b4[b4Posn++]=sbiDecode;
      if (b4Posn > 3) {
        int temp=((b4[0] & 0xFF) << 18) | ((b4[1] & 0xFF) << 12) | ((b4[2] & 0xFF) << 6)| ((b4[3] & 0xFF));
        outBuff[outBuffPosn++]=(byte)(temp >> 16);
        outBuff[outBuffPosn++]=(byte)(temp >> 8);
        outBuff[outBuffPosn++]=(byte)(temp);
        b4Posn=0;
      }
    }
 else     if (sbiDecode == EQUALS_SIGN_ENC) {
      b4[b4Posn++]=0;
      if (b4Posn > 3) {
        int temp=((b4[0] & 0xFF) << 18) | ((b4[1] & 0xFF) << 12) | ((b4[2] & 0xFF) << 6)| ((b4[3] & 0xFF));
        outBuff[outBuffPosn++]=(byte)(temp >> 16);
        outBuff[outBuffPosn++]=(byte)(temp >> 8);
        outBuff[outBuffPosn++]=(byte)(temp);
        b4Posn=0;
      }
    }
  }
  return outBuff;
}
