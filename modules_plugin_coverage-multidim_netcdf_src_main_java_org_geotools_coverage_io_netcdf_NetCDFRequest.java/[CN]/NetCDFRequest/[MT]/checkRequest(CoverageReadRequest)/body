{
  BoundingBox requestedBoundingBox=request.getGeographicArea();
  Rectangle requestedRasterArea=request.getRasterArea();
  VariableAdapter.UnidataSpatialDomain horizontalDomain=(VariableAdapter.UnidataSpatialDomain)source.getSpatialDomain();
  VariableAdapter.UnidataTemporalDomain temporalDomain=(VariableAdapter.UnidataTemporalDomain)source.getTemporalDomain();
  VariableAdapter.UnidataVerticalDomain verticalDomain=(VariableAdapter.UnidataVerticalDomain)source.getVerticalDomain();
  if (requestedRasterArea == null || requestedBoundingBox == null) {
    boolean bothNull=true;
    if (requestedRasterArea == null) {
      requestedRasterArea=horizontalDomain.getGridGeometry().getGridRange2D().getBounds();
    }
 else {
      bothNull=false;
    }
    if (requestedBoundingBox == null) {
      requestedBoundingBox=horizontalDomain.getReferencedEnvelope();
    }
 else {
      bothNull=false;
    }
    if (bothNull) {
      try {
        request.setDomainSubset(requestedRasterArea,horizontalDomain.getGridGeometry().getGridToCRS2D(),horizontalDomain.getCoordinateReferenceSystem2D());
      }
 catch (      TransformException e) {
        request.setDomainSubset(requestedRasterArea,ReferencedEnvelope.reference(requestedBoundingBox));
        LOGGER.log(Level.SEVERE,"Transform exception while setting the domain subset to: " + requestedRasterArea,e);
      }
    }
 else {
      request.setDomainSubset(requestedRasterArea,ReferencedEnvelope.reference(requestedBoundingBox));
    }
  }
  SortedSet<DateRange> temporalSubset=request.getTemporalSubset();
  if (temporalDomain != null) {
    if (temporalSubset.isEmpty()) {
      Set<DateRange> temporalExtent=temporalDomain.getTemporalExtent();
      if (temporalExtent != null) {
        temporalSubset=new DateRangeTreeSet(temporalExtent);
      }
      request.setTemporalSubset(temporalSubset);
    }
  }
  Set<NumberRange<Double>> verticalSubset=request.getVerticalSubset();
  if (verticalDomain != null) {
    Set<NumberRange<Double>> verticalExtent=verticalDomain.getVerticalExtent();
    if (verticalSubset.isEmpty()) {
      if (verticalExtent != null) {
        verticalSubset=new HashSet<NumberRange<Double>>(verticalExtent);
      }
      request.setVerticalSubset(verticalSubset);
    }
 else {
      final NumberRange<Double> requestedVerticalEnv=verticalSubset.iterator().next();
      if (!verticalExtent.contains(requestedVerticalEnv)) {
        NumberRange<Double> nearestEnvelope=verticalExtent.iterator().next();
        double minimumDistance=Math.abs(nearestEnvelope.getMinimum() - requestedVerticalEnv.getMinimum());
        for (        NumberRange<Double> env : verticalExtent) {
          double distance=Math.abs(env.getMinimum() - requestedVerticalEnv.getMinimum());
          if (distance < minimumDistance) {
            nearestEnvelope=env;
            minimumDistance=distance;
          }
        }
        verticalSubset=new HashSet<NumberRange<Double>>(1);
        verticalSubset.add(nearestEnvelope);
        request.setVerticalSubset(verticalSubset);
      }
    }
  }
  RangeType range=request.getRangeSubset();
  if (range == null) {
    request.setRangeSubset(source.getRangeType(null));
  }
}
