{
  StringBuffer buffer=new StringBuffer(255);
  if (n != null) {
    double dval=n.doubleValue();
    if (Double.isNaN(dval) || Double.isInfinite(dval)) {
      buffer.append(n.toString());
    }
 else {
      numFormat.setMaximumFractionDigits(decimalPlaces);
      numFormat.setMinimumFractionDigits(decimalPlaces);
      FieldPosition fp=new FieldPosition(NumberFormat.FRACTION_FIELD);
      numFormat.format(n,buffer,fp);
      if (fp.getBeginIndex() >= size) {
        buffer.delete(0,buffer.length());
        buffer.append(n.toString());
        if (buffer.length() > size) {
          throw new RuntimeException("Value " + n + " cannot be represented in size "+ size);
        }
      }
    }
  }
  int diff=size - buffer.length();
  if (diff > 0) {
    buffer.insert(0,emptyString.substring(0,diff));
  }
 else   if (diff < 0) {
    buffer.setLength(size);
  }
  return buffer.toString();
}
