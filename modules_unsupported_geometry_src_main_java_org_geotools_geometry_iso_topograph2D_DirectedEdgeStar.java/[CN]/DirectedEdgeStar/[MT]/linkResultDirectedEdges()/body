{
  getResultAreaEdges();
  DirectedEdge firstOut=null;
  DirectedEdge incoming=null;
  int state=SCANNING_FOR_INCOMING;
  for (int i=0; i < resultAreaEdgeList.size(); i++) {
    DirectedEdge nextOut=(DirectedEdge)resultAreaEdgeList.get(i);
    DirectedEdge nextIn=nextOut.getSym();
    if (!nextOut.getLabel().isArea())     continue;
    if (firstOut == null && nextOut.isInResult())     firstOut=nextOut;
switch (state) {
case SCANNING_FOR_INCOMING:
      if (!nextIn.isInResult())       continue;
    incoming=nextIn;
  state=LINKING_TO_OUTGOING;
break;
case LINKING_TO_OUTGOING:
if (!nextOut.isInResult()) continue;
incoming.setNext(nextOut);
state=SCANNING_FOR_INCOMING;
break;
}
}
if (state == LINKING_TO_OUTGOING) {
if (firstOut == null) throw new TopologyException("no outgoing dirEdge found",getCoordinate());
Assert.isTrue(firstOut.isInResult(),"unable to link last incoming dirEdge");
incoming.setNext(firstOut);
}
}
