{
  ImageReader reader=null;
  try {
    reader=readerSPI.createReaderInstance();
    inStream.mark();
    reader.setInput(inStream);
    final IIOMetadata iioMetadata=reader.getImageMetadata(0);
    final GeoTiffIIOMetadataDecoder metadata=new GeoTiffIIOMetadataDecoder(iioMetadata);
    gtcs=new GeoTiffMetadata2CRSAdapter(hints);
    final Object tempCRS=this.hints.get(Hints.DEFAULT_COORDINATE_REFERENCE_SYSTEM);
    if (tempCRS != null) {
      this.crs=(CoordinateReferenceSystem)tempCRS;
      if (LOGGER.isLoggable(Level.FINE))       LOGGER.log(Level.FINE,"Using forced coordinate reference system");
    }
 else {
      if (metadata.hasGeoKey() && gtcs != null)       crs=gtcs.createCoordinateSystem(metadata);
      if (crs == null)       crs=getCRS(source);
    }
    if (crs == null) {
      if (LOGGER.isLoggable(Level.WARNING))       LOGGER.warning("Coordinate Reference System is not available");
      crs=AbstractGridFormat.getDefaultCRS();
    }
    if (metadata.hasNoData())     noData=metadata.getNoData();
    numOverviews=reader.getNumImages(true) - 1;
    int hrWidth=reader.getWidth(0);
    int hrHeight=reader.getHeight(0);
    final Rectangle actualDim=new Rectangle(0,0,hrWidth,hrHeight);
    originalGridRange=new GridEnvelope2D(actualDim);
    if (gtcs != null && metadata != null && (metadata.hasModelTrasformation() || (metadata.hasPixelScales() && metadata.hasTiePoints()))) {
      this.raster2Model=GeoTiffMetadata2CRSAdapter.getRasterToModel(metadata);
    }
 else {
      this.raster2Model=parseWorldFile(source);
    }
    if (this.raster2Model == null) {
      throw new DataSourceException("Raster to Model Transformation is not available");
    }
    final AffineTransform tempTransform=new AffineTransform((AffineTransform)raster2Model);
    tempTransform.translate(-0.5,-0.5);
    originalEnvelope=CRS.transform(ProjectiveTransform.create(tempTransform),new GeneralEnvelope(actualDim));
    originalEnvelope.setCoordinateReferenceSystem(crs);
    highestRes=new double[2];
    highestRes[0]=XAffineTransform.getScaleX0(tempTransform);
    highestRes[1]=XAffineTransform.getScaleY0(tempTransform);
    if (numOverviews >= 1) {
      overViewResolutions=new double[numOverviews][2];
      for (int i=0; i < numOverviews; i++) {
        overViewResolutions[i][0]=(highestRes[0] * this.originalGridRange.getSpan(0)) / reader.getWidth(i + 1);
        overViewResolutions[i][1]=(highestRes[1] * this.originalGridRange.getSpan(1)) / reader.getHeight(i + 1);
      }
    }
 else     overViewResolutions=null;
  }
 catch (  Throwable e) {
    throw new DataSourceException(e);
  }
 finally {
    if (reader != null)     try {
      reader.dispose();
    }
 catch (    Throwable t) {
    }
    if (inStream != null)     try {
      inStream.reset();
    }
 catch (    Throwable t) {
    }
  }
}
