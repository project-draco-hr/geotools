{
  ImageReader reader=null;
  ImageReader ovrReader=null;
  ImageInputStream ovrStream=null;
  try {
    reader=READER_SPI.createReaderInstance();
    inStream.mark();
    reader.setInput(inStream);
    final IIOMetadata iioMetadata=reader.getImageMetadata(0);
    final GeoTiffIIOMetadataDecoder metadata=new GeoTiffIIOMetadataDecoder(iioMetadata);
    gtcs=new GeoTiffMetadata2CRSAdapter(hints);
    final Object tempCRS=this.hints.get(Hints.DEFAULT_COORDINATE_REFERENCE_SYSTEM);
    if (tempCRS != null) {
      this.crs=(CoordinateReferenceSystem)tempCRS;
      if (LOGGER.isLoggable(Level.FINE))       LOGGER.log(Level.FINE,"Using forced coordinate reference system");
    }
 else {
      crs=getCRS(source);
      if (!OVERRIDE_INNER_CRS || crs == null) {
        if (metadata.hasGeoKey() && gtcs != null) {
          crs=gtcs.createCoordinateSystem(metadata);
        }
      }
    }
    if (metadata.hasNoData()) {
      noData=metadata.getNoData();
    }
    setLayout(reader);
    numOverviews=reader.getNumImages(true) - 1;
    int hrWidth=reader.getWidth(0);
    int hrHeight=reader.getHeight(0);
    final Rectangle actualDim=new Rectangle(0,0,hrWidth,hrHeight);
    originalGridRange=new GridEnvelope2D(actualDim);
    if (gtcs != null && metadata != null && (metadata.hasModelTrasformation() || (metadata.hasPixelScales() && metadata.hasTiePoints()))) {
      this.raster2Model=GeoTiffMetadata2CRSAdapter.getRasterToModel(metadata);
    }
 else {
      this.raster2Model=parseWorldFile(source);
      if (raster2Model == null) {
        MapInfoFileReader mifReader=parseMapInfoFile(source);
        if (mifReader != null) {
          raster2Model=mifReader.getTransform();
          crs=mifReader.getCRS();
        }
      }
    }
    if (crs == null) {
      if (LOGGER.isLoggable(Level.WARNING)) {
        LOGGER.warning("Coordinate Reference System is not available");
      }
      crs=AbstractGridFormat.getDefaultCRS();
    }
    if (this.raster2Model == null) {
      TiePoint[] modelTiePoints=metadata.getModelTiePoints();
      if (modelTiePoints != null && modelTiePoints.length > 1) {
        gcps=new GroundControlPoints(Arrays.asList(modelTiePoints),crs);
        raster2Model=ProjectiveTransform.create(new AffineTransform());
        crs=DefaultEngineeringCRS.GENERIC_2D;
      }
 else {
        throw new DataSourceException("Raster to Model Transformation is not available");
      }
    }
    final AffineTransform tempTransform=new AffineTransform((AffineTransform)raster2Model);
    tempTransform.concatenate(CoverageUtilities.CENTER_TO_CORNER);
    originalEnvelope=CRS.transform(ProjectiveTransform.create(tempTransform),new GeneralEnvelope(actualDim));
    originalEnvelope.setCoordinateReferenceSystem(crs);
    highestRes=new double[2];
    highestRes[0]=XAffineTransform.getScaleX0(tempTransform);
    highestRes[1]=XAffineTransform.getScaleY0(tempTransform);
    if (ovrInStreamSPI != null) {
      ovrReader=READER_SPI.createReaderInstance();
      ovrStream=ovrInStreamSPI.createInputStreamInstance(ovrSource,ImageIO.getUseCache(),ImageIO.getCacheDirectory());
      ovrReader.setInput(ovrStream);
      extOvrImgChoice=numOverviews + 1;
      numOverviews=numOverviews + ovrReader.getNumImages(true);
      if (numOverviews < extOvrImgChoice)       extOvrImgChoice=-1;
    }
    if (numOverviews >= 1) {
      overViewResolutions=new double[numOverviews][2];
      int firstExternalOverview=extOvrImgChoice == -1 ? numOverviews : extOvrImgChoice - 1;
      double spanRes0=highestRes[0] * this.originalGridRange.getSpan(0);
      double spanRes1=highestRes[1] * this.originalGridRange.getSpan(1);
      for (int i=0; i < firstExternalOverview; i++) {
        overViewResolutions[i][0]=spanRes0 / reader.getWidth(i + 1);
        overViewResolutions[i][1]=spanRes1 / reader.getHeight(i + 1);
      }
      for (int i=firstExternalOverview; i < numOverviews; i++) {
        overViewResolutions[i][0]=spanRes0 / ovrReader.getWidth(i - firstExternalOverview);
        overViewResolutions[i][1]=spanRes1 / ovrReader.getHeight(i - firstExternalOverview);
      }
    }
 else     overViewResolutions=null;
  }
 catch (  Throwable e) {
    throw new DataSourceException(e);
  }
 finally {
    if (reader != null)     try {
      reader.dispose();
    }
 catch (    Throwable t) {
    }
    if (ovrReader != null)     try {
      ovrReader.dispose();
    }
 catch (    Throwable t) {
    }
    if (ovrStream != null)     try {
      ovrStream.close();
    }
 catch (    Throwable t) {
    }
    if (inStream != null)     try {
      inStream.reset();
    }
 catch (    Throwable t) {
    }
  }
}
