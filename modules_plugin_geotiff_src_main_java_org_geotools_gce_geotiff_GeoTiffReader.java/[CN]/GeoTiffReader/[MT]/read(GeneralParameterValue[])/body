{
  GeneralEnvelope requestedEnvelope=null;
  Rectangle dim=null;
  Color inputTransparentColor=null;
  OverviewPolicy overviewPolicy=null;
  int[] suggestedTileSize=null;
  if (params != null) {
    if (params != null) {
      for (int i=0; i < params.length; i++) {
        final ParameterValue param=(ParameterValue)params[i];
        final ReferenceIdentifier name=param.getDescriptor().getName();
        if (name.equals(AbstractGridFormat.READ_GRIDGEOMETRY2D.getName())) {
          final GridGeometry2D gg=(GridGeometry2D)param.getValue();
          requestedEnvelope=new GeneralEnvelope((Envelope)gg.getEnvelope2D());
          dim=gg.getGridRange2D().getBounds();
          continue;
        }
        if (name.equals(AbstractGridFormat.OVERVIEW_POLICY.getName())) {
          overviewPolicy=(OverviewPolicy)param.getValue();
          continue;
        }
        if (name.equals(AbstractGridFormat.INPUT_TRANSPARENT_COLOR.getName())) {
          inputTransparentColor=(Color)param.getValue();
          continue;
        }
        if (name.equals(AbstractGridFormat.SUGGESTED_TILE_SIZE.getName())) {
          String suggestedTileSize_=(String)param.getValue();
          if (suggestedTileSize_ != null && suggestedTileSize_.length() > 0) {
            suggestedTileSize_=suggestedTileSize_.trim();
            int commaPosition=suggestedTileSize_.indexOf(",");
            if (commaPosition < 0) {
              int tileDim=Integer.parseInt(suggestedTileSize_);
              suggestedTileSize=new int[]{tileDim,tileDim};
            }
 else {
              int tileW=Integer.parseInt(suggestedTileSize_.substring(0,commaPosition));
              int tileH=Integer.parseInt(suggestedTileSize_.substring(commaPosition + 1));
              suggestedTileSize=new int[]{tileW,tileH};
            }
          }
          continue;
        }
      }
    }
  }
  Integer imageChoice=new Integer(0);
  final ImageReadParam readP=new ImageReadParam();
  try {
    imageChoice=setReadParams(overviewPolicy,readP,requestedEnvelope,dim);
  }
 catch (  TransformException e) {
    new DataSourceException(e);
  }
  Hints newHints=null;
  if (suggestedTileSize != null) {
    newHints=hints.clone();
    final ImageLayout layout=new ImageLayout();
    layout.setTileGridXOffset(0);
    layout.setTileGridYOffset(0);
    layout.setTileHeight(suggestedTileSize[1]);
    layout.setTileWidth(suggestedTileSize[0]);
    newHints.add(new RenderingHints(JAI.KEY_IMAGE_LAYOUT,layout));
  }
  final ParameterBlock pbjRead=new ParameterBlock();
  if (maskOvrProvider != null) {
    if (maskOvrProvider.isExternalOverview(imageChoice)) {
      pbjRead.add(maskOvrProvider.getExternalOverviewInputStreamSpi().createInputStreamInstance(maskOvrProvider.getOvrURL(),ImageIO.getUseCache(),ImageIO.getCacheDirectory()));
    }
 else {
      pbjRead.add(maskOvrProvider.getInputStreamSpi().createInputStreamInstance(maskOvrProvider.getFileURL(),ImageIO.getUseCache(),ImageIO.getCacheDirectory()));
    }
    pbjRead.add(maskOvrProvider.getOverviewIndex(imageChoice));
  }
 else {
    if (extOvrImgChoice >= 0 && imageChoice >= extOvrImgChoice) {
      pbjRead.add(ovrInStreamSPI.createInputStreamInstance(ovrSource,ImageIO.getUseCache(),ImageIO.getCacheDirectory()));
      pbjRead.add(imageChoice - extOvrImgChoice);
    }
 else {
      pbjRead.add(inStreamSPI != null ? inStreamSPI.createInputStreamInstance(source,ImageIO.getUseCache(),ImageIO.getCacheDirectory()) : ImageIO.createImageInputStream(source));
      int overviewImageIndex=dtLayout.getInternalOverviewImageIndex(imageChoice);
      int index=overviewImageIndex >= 0 ? overviewImageIndex : 0;
      pbjRead.add(index);
    }
  }
  pbjRead.add(Boolean.FALSE);
  pbjRead.add(Boolean.FALSE);
  pbjRead.add(Boolean.FALSE);
  pbjRead.add(null);
  pbjRead.add(null);
  pbjRead.add(readP);
  pbjRead.add(READER_SPI.createReaderInstance());
  RenderedOp coverageRaster=JAI.create("ImageRead",pbjRead,newHints != null ? (RenderingHints)newHints : null);
  if (inputTransparentColor != null) {
    coverageRaster=new ImageWorker(coverageRaster).setRenderingHints(newHints).makeColorTransparent(inputTransparentColor).getRenderedOperation();
  }
  final int ssWidth=coverageRaster.getWidth();
  final int ssHeight=coverageRaster.getHeight();
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.log(Level.FINE,"Coverage read: width = " + ssWidth + " height = "+ ssHeight);
  }
  ROI roi=null;
  if (hasMaskOvrProvider) {
    Rectangle sourceRegion=coverageRaster.getBounds();
    if (readP.getSourceRegion() != null) {
      sourceRegion=readP.getSourceRegion();
    }
    MaskInfo info=maskOvrProvider.getMaskInfo(imageChoice,sourceRegion);
    if (info != null) {
      RenderedOp roiRaster=readROIRaster(info.streamSpi,DataUtilities.fileToURL(info.file),info.index,newHints,info.readParameters);
      roi=MaskOverviewProvider.scaleROI(roiRaster,coverageRaster.getBounds());
    }
  }
  final double scaleX=originalGridRange.getSpan(0) / (1.0 * ssWidth);
  final double scaleY=originalGridRange.getSpan(1) / (1.0 * ssHeight);
  final AffineTransform tempRaster2Model=new AffineTransform((AffineTransform)raster2Model);
  tempRaster2Model.concatenate(new AffineTransform(scaleX,0,0,scaleY,0,0));
  try {
    return createCoverage(coverageRaster,ProjectiveTransform.create(tempRaster2Model),roi);
  }
 catch (  Exception e) {
    ImageUtilities.disposePlanarImageChain(coverageRaster);
    if (e instanceof DataSourceException) {
      throw (DataSourceException)e;
    }
    throw new DataSourceException(e);
  }
}
