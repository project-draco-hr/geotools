{
  GeoTiffIIOMetadataDecoder metadata=null;
  ImageReader reader=null;
  boolean closeMe=true;
  ImageInputStream stream=null;
  try {
    if ((source instanceof InputStream) || (source instanceof ImageInputStream)) {
      closeMe=false;
    }
    if (source instanceof ImageInputStream) {
      stream=(ImageInputStream)source;
    }
 else {
      inStreamSPI=ImageIOExt.getImageInputStreamSPI(source);
      if (inStreamSPI == null) {
        throw new IllegalArgumentException("No input stream for the provided source");
      }
      stream=inStreamSPI.createInputStreamInstance(source,ImageIO.getUseCache(),ImageIO.getCacheDirectory());
    }
    if (stream == null) {
      throw new IllegalArgumentException("No input stream for the provided source");
    }
    stream.mark();
    reader=readerSPI.createReaderInstance();
    reader.setInput(stream);
    final IIOMetadata iioMetadata=reader.getImageMetadata(0);
    metadata=new GeoTiffIIOMetadataDecoder(iioMetadata);
  }
 catch (  IOException e) {
    if (LOGGER.isLoggable(Level.SEVERE)) {
      LOGGER.log(Level.SEVERE,e.getMessage(),e);
    }
  }
 finally {
    if (reader != null)     try {
      reader.dispose();
    }
 catch (    Throwable t) {
    }
    if (stream != null) {
      try {
        stream.reset();
      }
 catch (      Throwable t) {
      }
      if (closeMe) {
        try {
          stream.close();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  return metadata;
}
