{
  super(input,uHints);
  try {
    if (input instanceof URL) {
      final URL sourceURL=(URL)input;
      source=DataUtilities.urlToFile(sourceURL);
    }
    closeMe=true;
    if ((source instanceof InputStream) || (source instanceof ImageInputStream))     closeMe=false;
    if (source instanceof ImageInputStream)     inStream=(ImageInputStream)source;
 else {
      inStreamSPI=ImageIOExt.getImageInputStreamSPI(source);
      if (inStreamSPI == null)       throw new IllegalArgumentException("No input stream for the provided source");
      inStream=inStreamSPI.createInputStreamInstance(source,ImageIO.getUseCache(),ImageIO.getCacheDirectory());
    }
    if (inStream == null)     throw new IllegalArgumentException("No input stream for the provided source");
    checkForExternalOverviews();
    getHRInfo(this.hints);
    coverageName=source instanceof File ? ((File)source).getName() : "geotiff_coverage";
    final int dotIndex=coverageName.lastIndexOf('.');
    if (dotIndex != -1 && dotIndex != coverageName.length())     coverageName=coverageName.substring(0,dotIndex);
  }
 catch (  IOException e) {
    throw new DataSourceException(e);
  }
 finally {
    if (closeMe && inStream != null)     try {
      inStream.close();
    }
 catch (    Throwable t) {
    }
  }
}
