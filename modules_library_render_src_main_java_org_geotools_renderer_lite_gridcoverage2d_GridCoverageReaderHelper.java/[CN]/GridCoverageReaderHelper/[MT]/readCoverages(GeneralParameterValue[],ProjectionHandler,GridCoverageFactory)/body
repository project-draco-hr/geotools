{
  if (handler == null) {
    GridCoverage2D readCoverage=readCoverage(readParams);
    return Arrays.asList(readCoverage);
  }
  List<GridCoverage2D> coverages=new ArrayList<GridCoverage2D>();
  List<ReferencedEnvelope> queryEnvelopes=handler.getQueryEnvelopes();
  for (  ReferencedEnvelope envelope : queryEnvelopes) {
    List<GridCoverage2D> readCoverages=readCoverageInEnvelope(envelope,readParams,handler,paddingRequired);
    if (readCoverages != null) {
      coverages.addAll(readCoverages);
    }
  }
  SingleCRS readerCRS=CRS.getHorizontalCRS(reader.getCoordinateReferenceSystem());
  if (readerCRS instanceof GeographicCRS) {
    ReferencedEnvelope readerEnvelope=ReferencedEnvelope.reference(reader.getOriginalEnvelope());
    boolean northEast=CRS.getAxisOrder(readerCRS) == AxisOrder.NORTH_EAST;
    int lonAxis=northEast ? 1 : 0;
    if (readerEnvelope.getMaximum(lonAxis) > 180) {
      ReferencedEnvelope excess;
      double tx, ty;
      if (northEast) {
        excess=new ReferencedEnvelope(-90,90,180,360,readerCRS);
        tx=0;
        ty=360;
      }
 else {
        excess=new ReferencedEnvelope(180,360,-90,90,readerCRS);
        tx=360;
        ty=0;
      }
      for (      ReferencedEnvelope envelope : queryEnvelopes) {
        ReferencedEnvelope translated=new ReferencedEnvelope(envelope);
        translated.translate(tx,ty);
        ReferencedEnvelope intersection=new ReferencedEnvelope(translated.intersection(excess),translated.getCoordinateReferenceSystem());
        boolean isEmptyEnvelope=intersection == null || intersection.isNull() || intersection.getHeight() == 0 || intersection.getWidth() == 0;
        if (isEmptyEnvelope) {
          continue;
        }
        List<GridCoverage2D> readCoverages=readCoverageInEnvelope(intersection,readParams,handler,false);
        if (readCoverages != null) {
          for (          GridCoverage2D gc : readCoverages) {
            GridCoverage2D displaced=GridCoverageRendererUtilities.displace(gc,-tx,-ty,gridCoverageFactory);
            coverages.add(displaced);
          }
        }
      }
    }
  }
  return coverages;
}
