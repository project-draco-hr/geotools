{
  doSetMapContent(content);
  doSetRenderingExecutor(executor);
  setBackground(DEFAULT_BACKGROUND_COLOR);
  paneTaskExecutor=Executors.newSingleThreadScheduledExecutor();
  paintDelay=DEFAULT_PAINT_DELAY;
  toolManager=new MapToolManager(this);
  acceptRepaintRequests=new AtomicBoolean(true);
  clearLabelCache=new AtomicBoolean(true);
  imageOrigin=new Point(0,0);
  baseImageMoved=new AtomicBoolean();
  dragBox=new MouseDragBox(this);
  this.addMouseListener(dragBox);
  this.addMouseMotionListener(dragBox);
  this.addMouseListener(toolManager);
  this.addMouseMotionListener(toolManager);
  this.addMouseWheelListener(toolManager);
  this.addMouseListener(new MouseInputAdapter(){
    @Override public void mouseEntered(    MouseEvent e){
      super.mouseEntered(e);
      CursorTool tool=toolManager.getCursorTool();
      if (tool != null) {
        setCursor(tool.getCursor());
      }
    }
  }
);
  addHierarchyListener(new HierarchyListener(){
    @Override public void hierarchyChanged(    HierarchyEvent he){
      if ((he.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) {
        if (isShowing()) {
          onShownOrResized();
        }
      }
    }
  }
);
  addHierarchyBoundsListener(new HierarchyBoundsAdapter(){
    @Override public void ancestorResized(    HierarchyEvent he){
      if (isShowing()) {
        onShownOrResized();
      }
    }
  }
);
}
