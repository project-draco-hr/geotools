{
  Indexer indexer=Utils.OBJECT_FACTORY.createIndexer();
  indexer.setParameters(params != null ? params : Utils.OBJECT_FACTORY.createParametersType());
  Coverages coverages=Utils.OBJECT_FACTORY.createIndexerCoverages();
  indexer.setCoverages(coverages);
  List<Coverage> coverageList=coverages.getCoverage();
  Coverage coverage=Utils.OBJECT_FACTORY.createIndexerCoveragesCoverage();
  coverageList.add(coverage);
  indexer.setParameters(params);
  List<Parameter> parameters=params.getParameter();
  if (props.containsKey(Utils.Prop.NAME)) {
    setParam(parameters,props,Utils.Prop.NAME);
    coverage.setName(props.getProperty(Utils.Prop.NAME));
  }
  if (props.containsKey(Utils.Prop.TYPENAME)) {
    setParam(parameters,props,Utils.Prop.TYPENAME);
    coverage.setName(props.getProperty(Utils.Prop.TYPENAME));
  }
  if (props.containsKey(Utils.Prop.ABSOLUTE_PATH))   setParam(parameters,props,Utils.Prop.ABSOLUTE_PATH);
  if (props.containsKey(Utils.Prop.RECURSIVE))   setParam(parameters,props,Utils.Prop.RECURSIVE);
  if (props.containsKey(Utils.Prop.WILDCARD))   setParam(parameters,props,Utils.Prop.WILDCARD);
  if (props.containsKey(Utils.Prop.GRANULE_ACCEPTORS)) {
    setParam(parameters,props,Utils.Prop.GRANULE_ACCEPTORS);
  }
  if (props.containsKey(Utils.Prop.GEOMETRY_HANDLER)) {
    setParam(parameters,props,Utils.Prop.GEOMETRY_HANDLER);
  }
  if (props.containsKey(Utils.Prop.COVERAGE_NAME_COLLECTOR_SPI)) {
    IndexerUtils.setParam(parameters,props,Utils.Prop.COVERAGE_NAME_COLLECTOR_SPI);
  }
  if (props.containsKey(Utils.Prop.SCHEMA)) {
    SchemasType schemas=Utils.OBJECT_FACTORY.createSchemasType();
    SchemaType schema=Utils.OBJECT_FACTORY.createSchemaType();
    indexer.setSchemas(schemas);
    schemas.getSchema().add(schema);
    schema.setAttributes(props.getProperty(Utils.Prop.SCHEMA));
    schema.setName(getParameter(Utils.Prop.INDEX_NAME,indexer));
  }
  DomainsType domains=coverage.getDomains();
  List<DomainType> domainList=null;
  if (props.containsKey(Utils.Prop.TIME_ATTRIBUTE)) {
    if (domains == null) {
      domains=Utils.OBJECT_FACTORY.createDomainsType();
      coverage.setDomains(domains);
      domainList=domains.getDomain();
    }
    DomainType domain=Utils.OBJECT_FACTORY.createDomainType();
    domain.setName(Utils.TIME_DOMAIN.toLowerCase());
    setAttributes(domain,props.getProperty(Utils.Prop.TIME_ATTRIBUTE));
    domainList.add(domain);
  }
  if (props.containsKey(Utils.Prop.ELEVATION_ATTRIBUTE)) {
    if (domains == null) {
      domains=Utils.OBJECT_FACTORY.createDomainsType();
      coverage.setDomains(domains);
      domainList=domains.getDomain();
    }
    DomainType domain=Utils.OBJECT_FACTORY.createDomainType();
    domain.setName(Utils.ELEVATION_DOMAIN.toLowerCase());
    setAttributes(domain,props.getProperty(Utils.Prop.ELEVATION_ATTRIBUTE));
    domainList.add(domain);
  }
  if (props.containsKey(Utils.Prop.ADDITIONAL_DOMAIN_ATTRIBUTES)) {
    if (domains == null) {
      domains=Utils.OBJECT_FACTORY.createDomainsType();
      coverage.setDomains(domains);
      domainList=domains.getDomain();
    }
    String attributes=props.getProperty(Utils.Prop.ADDITIONAL_DOMAIN_ATTRIBUTES);
    parseAdditionalDomains(attributes,domainList);
  }
  if (props.containsKey(Utils.Prop.ENVELOPE2D))   setParam(parameters,props,Utils.Prop.ENVELOPE2D);
  if (props.containsKey(Utils.Prop.RESOLUTION_LEVELS))   setParam(parameters,props,Utils.Prop.RESOLUTION_LEVELS);
  if (props.containsKey(Utils.Prop.PROPERTY_COLLECTORS)) {
    setPropertyCollectors(indexer,props.getProperty(Utils.Prop.PROPERTY_COLLECTORS));
  }
  if (props.containsKey(Utils.Prop.CACHING))   setParam(parameters,props,Utils.Prop.CACHING);
  if (props.containsKey(Utils.Prop.ROOT_MOSAIC_DIR)) {
    setParam(parameters,props,Utils.Prop.ROOT_MOSAIC_DIR);
  }
  if (props.containsKey(Utils.Prop.INDEXING_DIRECTORIES)) {
    setParam(parameters,props,Utils.Prop.INDEXING_DIRECTORIES);
  }
  if (props.containsKey(Utils.Prop.AUXILIARY_FILE)) {
    setParam(parameters,props,Utils.Prop.AUXILIARY_FILE);
  }
  if (props.containsKey(Utils.Prop.AUXILIARY_DATASTORE_FILE)) {
    setParam(parameters,props,Utils.Prop.AUXILIARY_DATASTORE_FILE);
  }
  if (props.containsKey(Utils.Prop.CAN_BE_EMPTY)) {
    setParam(parameters,props,Utils.Prop.CAN_BE_EMPTY);
  }
  if (props.containsKey(Utils.Prop.WRAP_STORE)) {
    setParam(parameters,props,Utils.Prop.WRAP_STORE);
  }
  if (props.containsKey(Utils.Prop.USE_EXISTING_SCHEMA)) {
    setParam(parameters,props,Utils.Prop.USE_EXISTING_SCHEMA);
  }
  if (props.containsKey(Utils.Prop.CHECK_AUXILIARY_METADATA)) {
    setParam(parameters,props,Utils.Prop.CHECK_AUXILIARY_METADATA);
  }
  if (props.containsKey(Utils.Prop.GRANULE_COLLECTOR_FACTORY)) {
    setParam(parameters,props,Utils.Prop.GRANULE_COLLECTOR_FACTORY);
  }
  if (props.containsKey(Utils.Prop.HETEROGENEOUS_CRS)) {
    setParam(parameters,props,Utils.Prop.HETEROGENEOUS_CRS);
  }
  return indexer;
}
