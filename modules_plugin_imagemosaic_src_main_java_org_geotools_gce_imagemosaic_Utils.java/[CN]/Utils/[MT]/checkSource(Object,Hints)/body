{
  SourceGetter sourceGetter=new SourceGetter(source);
  URL sourceURL=sourceGetter.getUrl();
  File sourceFile=sourceGetter.getFile();
  if (sourceFile != null) {
    if (!sourceFile.isDirectory())     sourceURL=DataUtilities.fileToURL(sourceFile);
 else {
      final String locationPath=sourceFile.getAbsolutePath();
      final String defaultIndexName=getDefaultIndexName(locationPath);
      boolean datastoreFound=false;
      boolean buildMosaic=false;
      File dataStoreProperties=new File(locationPath,"datastore.properties");
      final File[] properties=sourceFile.listFiles((FilenameFilter)FileFilterUtils.and(FileFilterUtils.notFileFilter(FileFilterUtils.nameFileFilter("datastore.properties")),FileFilterUtils.makeFileOnly(FileFilterUtils.suffixFileFilter(".properties"))));
      if (Utils.checkFileReadable(dataStoreProperties)) {
        datastoreFound=true;
        boolean found=false;
        for (        File propFile : properties)         if (Utils.checkFileReadable(propFile)) {
          if (null != Utils.loadMosaicProperties(DataUtilities.fileToURL(propFile),Utils.DEFAULT_LOCATION_ATTRIBUTE)) {
            found=true;
            break;
          }
        }
        if (!found)         buildMosaic=true;
      }
 else {
        buildMosaic=true;
        datastoreFound=false;
      }
      File shapeFile=null;
      if (!datastoreFound) {
        for (        File propFile : properties) {
          if (null == Utils.loadMosaicProperties(DataUtilities.fileToURL(propFile),Utils.DEFAULT_LOCATION_ATTRIBUTE))           continue;
          shapeFile=new File(locationPath,FilenameUtils.getBaseName(propFile.getName()) + ".shp");
          if (!Utils.checkFileReadable(shapeFile) && Utils.checkFileReadable(propFile))           buildMosaic=true;
 else {
            buildMosaic=false;
            break;
          }
        }
      }
      if (buildMosaic) {
        final File mosaicDirectory=new File(locationPath);
        if (!mosaicDirectory.exists() || mosaicDirectory.isFile() || !mosaicDirectory.canWrite()) {
          if (LOGGER.isLoggable(Level.SEVERE)) {
            LOGGER.log(Level.SEVERE,"Unable to create the mosaic, check the location:\n" + "location is:" + locationPath + "\n"+ "location exists:"+ mosaicDirectory.exists()+ "\n"+ "location is a directory:"+ mosaicDirectory.isDirectory()+ "\n"+ "location is writable:"+ mosaicDirectory.canWrite()+ "\n"+ "location is readable:"+ mosaicDirectory.canRead()+ "\n"+ "location is hidden:"+ mosaicDirectory.isHidden()+ "\n");
          }
          return null;
        }
        createMosaic(locationPath,defaultIndexName,DEFAULT_WILCARD,DEFAULT_PATH_BEHAVIOR,hints);
        final File propertiesFile=new File(locationPath,defaultIndexName + ".properties");
        if (!Utils.checkFileReadable(propertiesFile)) {
          if (!checkMosaicHasBeenInitialized(locationPath,defaultIndexName)) {
            sourceURL=null;
            return sourceURL;
          }
        }
        sourceURL=updateSourceURL(sourceURL,datastoreFound,locationPath,defaultIndexName);
      }
 else       sourceURL=datastoreFound ? DataUtilities.fileToURL(dataStoreProperties) : DataUtilities.fileToURL(shapeFile);
    }
  }
 else {
  }
  return sourceURL;
}
