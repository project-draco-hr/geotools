{
  final CatalogBuilderConfiguration configuration=new CatalogBuilderConfiguration();
  configuration.setHints(hints);
  List<Parameter> parameterList=configuration.getIndexer().getParameters().getParameter();
  IndexerUtils.setParam(parameterList,Prop.ABSOLUTE_PATH,Boolean.toString(absolutePath));
  IndexerUtils.setParam(parameterList,Prop.ROOT_MOSAIC_DIR,location);
  IndexerUtils.setParam(parameterList,Prop.INDEX_NAME,indexName);
  IndexerUtils.setParam(parameterList,Prop.WILDCARD,wildcard);
  IndexerUtils.setParam(parameterList,Prop.INDEXING_DIRECTORIES,location);
  final ImageMosaicEventHandlers eventHandler=new ImageMosaicEventHandlers();
  final ImageMosaicConfigHandler catalogHandler=new ImageMosaicConfigHandler(configuration,eventHandler);
  final ImageMosaicWalker walker;
  if (catalogHandler.isUseExistingSchema()) {
    walker=new ImageMosaicDatastoreWalker(catalogHandler,eventHandler);
  }
 else {
    walker=new ImageMosaicDirectoryWalker(catalogHandler,eventHandler);
  }
  final Queue<Throwable> exceptions=new LinkedList<Throwable>();
  try {
    final ImageMosaicEventHandlers.ProcessingEventListener listener=new ImageMosaicEventHandlers.ProcessingEventListener(){
      @Override public void exceptionOccurred(      ImageMosaicEventHandlers.ExceptionEvent event){
        final Throwable t=event.getException();
        exceptions.add(t);
        if (LOGGER.isLoggable(Level.SEVERE))         LOGGER.log(Level.SEVERE,t.getLocalizedMessage(),t);
      }
      @Override public void getNotification(      ImageMosaicEventHandlers.ProcessingEvent event){
        if (LOGGER.isLoggable(Level.FINE))         LOGGER.fine(event.getMessage());
      }
    }
;
    eventHandler.addProcessingEventListener(listener);
    walker.run();
  }
 catch (  Throwable e) {
    LOGGER.log(Level.SEVERE,"Unable to build mosaic",e);
    return false;
  }
 finally {
    catalogHandler.dispose();
  }
  if (exceptions.size() > 0)   return false;
  return true;
}
