{
  final CatalogBuilderConfiguration configuration=new CatalogBuilderConfiguration();
  configuration.setAbsolute(absolutePath);
  configuration.setHints(hints);
  configuration.setRootMosaicDirectory(location);
  configuration.setIndexingDirectories(Arrays.asList(location));
  configuration.setIndexName(indexName);
  final File parent=new File(location);
  final File indexerProperties=new File(parent,INDEXER_PROPERTIES);
  if (Utils.checkFileReadable(indexerProperties)) {
    final Properties props=Utils.loadPropertiesFromURL(DataUtilities.fileToURL(indexerProperties));
    if (props.containsKey(Prop.NAME))     configuration.setIndexName(props.getProperty(Prop.NAME));
    if (props.containsKey(Prop.ABSOLUTE))     configuration.setAbsolute(Boolean.valueOf(props.getProperty(Prop.ABSOLUTE)));
    if (props.containsKey(Prop.RECURSIVE))     configuration.setRecursive(Boolean.valueOf(props.getProperty(Prop.RECURSIVE)));
    if (props.containsKey(Prop.WILDCARD))     configuration.setWildcard(props.getProperty(Prop.WILDCARD));
    if (props.containsKey(Prop.SCHEMA))     configuration.setSchema(props.getProperty(Prop.SCHEMA));
    if (props.containsKey(Prop.TIME_ATTRIBUTE))     configuration.setTimeAttribute(props.getProperty(Prop.TIME_ATTRIBUTE));
    if (props.containsKey(Prop.ELEVATION_ATTRIBUTE))     configuration.setElevationAttribute(props.getProperty(Prop.ELEVATION_ATTRIBUTE));
    if (props.containsKey(Prop.RUNTIME_ATTRIBUTE))     configuration.setRuntimeAttribute(props.getProperty(Prop.RUNTIME_ATTRIBUTE));
    if (props.containsKey(Prop.ENVELOPE2D))     configuration.setEnvelope2D(props.getProperty(Prop.ENVELOPE2D));
    if (props.containsKey(Prop.RESOLUTION_LEVELS))     configuration.setResolutionLevels(props.getProperty(Prop.RESOLUTION_LEVELS));
    if (props.containsKey(Prop.PROPERTY_COLLECTORS))     configuration.setPropertyCollectors(props.getProperty(Prop.PROPERTY_COLLECTORS));
    if (props.containsKey(Prop.CACHING))     configuration.setCaching(Boolean.valueOf(props.getProperty(Prop.CACHING)));
  }
  final CatalogBuilder catalogBuilder=new CatalogBuilder(configuration);
  final Queue<Throwable> exceptions=new LinkedList<Throwable>();
  try {
    final CatalogBuilder.ProcessingEventListener listener=new CatalogBuilder.ProcessingEventListener(){
      @Override public void exceptionOccurred(      ExceptionEvent event){
        final Throwable t=event.getException();
        exceptions.add(t);
        if (LOGGER.isLoggable(Level.SEVERE))         LOGGER.log(Level.SEVERE,t.getLocalizedMessage(),t);
      }
      @Override public void getNotification(      ProcessingEvent event){
        if (LOGGER.isLoggable(Level.FINE))         LOGGER.fine(event.getMessage());
      }
    }
;
    catalogBuilder.addProcessingEventListener(listener);
    catalogBuilder.run();
  }
 catch (  Throwable e) {
    LOGGER.log(Level.SEVERE,"Unable to build mosaic",e);
    return false;
  }
 finally {
    catalogBuilder.dispose();
  }
  if (exceptions.size() > 0)   return false;
  return true;
}
