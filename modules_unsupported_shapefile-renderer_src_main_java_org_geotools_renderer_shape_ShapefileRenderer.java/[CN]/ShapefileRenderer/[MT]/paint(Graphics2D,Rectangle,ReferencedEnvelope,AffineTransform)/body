{
  if (transform == null) {
    throw new NullPointerException("Transform is required");
  }
  if (hints != null) {
    graphics.setRenderingHints(hints);
  }
  if ((graphics == null) || (paintArea == null)) {
    LOGGER.info("renderer passed null arguments");
    return;
  }
  renderingStopRequested=false;
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("Affine Transform is " + transform);
  }
  if (concatTransforms) {
    AffineTransform atg=graphics.getTransform();
    atg.concatenate(transform);
    transform=atg;
  }
  try {
    setScaleDenominator(computeScale(envelope,context.getCoordinateReferenceSystem(),paintArea,transform,this.rendererHints));
  }
 catch (  Exception e) {
    LOGGER.throwing("RendererUtilities","calculateScale(envelope, coordinateReferenceSystem, imageWidth, imageHeight, hints)",e);
    setScaleDenominator(1 / transform.getScaleX());
  }
  MapLayer[] layers=context.getLayers();
  CoordinateReferenceSystem destinationCrs=context.getCoordinateReferenceSystem();
  labelCache.start();
  labelCache.clear();
  if (labelCache instanceof LabelCacheImpl) {
    ((LabelCacheImpl)labelCache).setLabelRenderingMode(LabelRenderingMode.valueOf(getTextRenderingMethod()));
  }
  for (int i=0; i < layers.length; i++) {
    MapLayer currLayer=layers[i];
    if (!currLayer.isVisible()) {
      continue;
    }
    if (renderingStopRequested) {
      return;
    }
    if (layerIndexInfo[i] == STREAMING_RENDERER_INFO) {
      renderWithStreamingRenderer(currLayer,graphics,paintArea,envelope,transform);
      continue;
    }
    labelCache.startLayer("" + i);
    ReferencedEnvelope bbox=envelope;
    try {
      FeatureSource featureSource=currLayer.getFeatureSource();
      if (featureSource instanceof DirectoryFeatureSource) {
        featureSource=((DirectoryFeatureSource)featureSource).unwrap();
      }
      GeometryDescriptor geom=featureSource.getSchema().getGeometryDescriptor();
      CoordinateReferenceSystem dataCRS;
      if (getForceCRSHint() == null) {
        dataCRS=geom.getCoordinateReferenceSystem();
      }
 else {
        dataCRS=getForceCRSHint();
      }
      MathTransform mt=null;
      CoordinateOperation op=null;
      if (dataCRS != null) {
        try {
          if (dataCRS != null) {
            op=CRS.getCoordinateOperationFactory(true).createOperation(dataCRS,destinationCrs);
            mt=op.getMathTransform();
            bbox=bbox.transform(dataCRS,true,10);
          }
 else {
            LOGGER.log(Level.WARNING,"Could not reproject the bounding boxes as data CRS was null, proceeding in non reprojecting mode");
            op=null;
            mt=null;
          }
        }
 catch (        Exception e) {
          fireErrorEvent(e);
          LOGGER.log(Level.WARNING,"Could not reproject the bounding boxes, proceeding in non reprojecting mode",e);
          op=null;
          mt=null;
        }
      }
 else {
        LOGGER.log(Level.WARNING,"Data CRS is unknown, proceeding in non reprojecting mode");
      }
      MathTransform at=ReferencingFactoryFinder.getMathTransformFactory(null).createAffineTransform(new GeneralMatrix(transform));
      if (mt == null) {
        mt=at;
      }
 else {
        mt=ReferencingFactoryFinder.getMathTransformFactory(null).createConcatenatedTransform(mt,at);
      }
      ShapefileDataStore ds=(ShapefileDataStore)featureSource.getDataStore();
      Transaction transaction=Transaction.AUTO_COMMIT;
      if (featureSource instanceof FeatureStore) {
        transaction=((SimpleFeatureStore)featureSource).getTransaction();
      }
      DefaultQuery query=new DefaultQuery(currLayer.getQuery());
      if (query.getFilter() != null) {
        FilterTransformer transformer=new FilterTransformer(mt);
        Filter transformedFilter=(Filter)query.getFilter().accept(transformer,null);
        query.setFilter(transformedFilter);
      }
      processStylers(graphics,ds,query,bbox,paintArea,mt,currLayer.getStyle(),layerIndexInfo[i],transaction,"" + i);
    }
 catch (    Exception exception) {
      Exception e=new Exception("Exception rendering layer " + currLayer,exception);
      fireErrorEvent(e);
    }
    labelCache.endLayer("" + i,graphics,paintArea);
  }
  labelCache.end(graphics,paintArea);
  if (LOGGER.isLoggable(Level.FINE))   LOGGER.fine("Style cache hit ratio: " + styleFactory.getHitRatio() + " , hits "+ styleFactory.getHits()+ ", requests "+ styleFactory.getRequests());
}
