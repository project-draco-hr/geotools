{
  for (int m=0; m < symbolizers.length; m++) {
    if (LOGGER.isLoggable(Level.FINER)) {
      LOGGER.finer("applying symbolizer " + symbolizers[m]);
    }
    if (renderingStopRequested) {
      break;
    }
    if (symbolizers[m] instanceof TextSymbolizer) {
      try {
        labelCache.put(layerId,(TextSymbolizer)symbolizers[m],feature,new LiteShape2((Geometry)feature.getDefaultGeometry(),null,null,false,false),scaleRange);
      }
 catch (      Exception e) {
        fireErrorEvent(e);
      }
    }
 else {
      Shape shape;
      try {
        Style2D style=styleFactory.createStyle(feature,symbolizers[m],scaleRange);
        if (isJTS) {
          Geometry g;
          if (symbolizers[m] instanceof PointSymbolizer) {
            g=RendererUtilities.getCentroid((Geometry)geom);
          }
 else {
            g=(Geometry)geom;
          }
          double size=RendererUtilities.getStyle2DSize(style) + 10;
          Envelope env=new Envelope(screenSize.getMinX(),screenSize.getMaxX(),screenSize.getMinY(),screenSize.getMaxY());
          env.expandBy(size);
          final GeometryClipper clipper=new GeometryClipper(env);
          Geometry clipped=clipper.clip(g,false);
          if (clipped == null)           continue;
          shape=new LiteShape2(clipped,null,null,false);
          painter.paint(graphics,shape,style,scaleDenominator);
        }
 else {
          if (symbolizers[m] instanceof PointSymbolizer) {
            shape=new LiteShape2(RendererUtilities.getCentroid((Geometry)feature.getDefaultGeometry()),null,null,false,false);
          }
 else {
            shape=getShape((SimpleGeometry)geom);
          }
          painter.paint(graphics,shape,style,scaleDenominator);
        }
      }
 catch (      Exception e) {
        fireErrorEvent(e);
      }
    }
  }
  fireFeatureRenderedEvent(feature);
}
