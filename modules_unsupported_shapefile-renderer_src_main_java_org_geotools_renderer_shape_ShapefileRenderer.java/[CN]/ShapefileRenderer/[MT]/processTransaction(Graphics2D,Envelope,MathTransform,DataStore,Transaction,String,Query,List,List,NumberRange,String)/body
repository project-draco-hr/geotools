{
  if (transaction == Transaction.AUTO_COMMIT) {
    return Collections.EMPTY_SET;
  }
  TransactionStateDiff state=(TransactionStateDiff)transaction.getState(ds);
  if (state == null) {
    return Collections.EMPTY_SET;
  }
  Set fids=new HashSet();
  Map modified=null;
  Map added=null;
  Diff diff=null;
  try {
    diff=state.diff(typename);
    modified=diff.modified2;
    added=diff.added;
    fids=new HashSet();
  }
 catch (  IOException e) {
    fids=Collections.EMPTY_SET;
    return fids;
  }
  if (!diff.isEmpty()) {
    SimpleFeature feature;
    for (Iterator modifiedIter=modified.keySet().iterator(), addedIter=added.values().iterator(); modifiedIter.hasNext() || addedIter.hasNext(); ) {
      try {
        if (renderingStopRequested) {
          break;
        }
        boolean doElse=true;
        if (modifiedIter.hasNext()) {
          String fid=(String)modifiedIter.next();
          feature=(SimpleFeature)modified.get(fid);
          fids.add(fid);
        }
 else {
          feature=(SimpleFeature)addedIter.next();
        }
        if (feature == TransactionStateDiff.NULL) {
          continue;
        }
        if (!query.getFilter().evaluate(feature)) {
          continue;
        }
        for (Iterator it=ruleList.iterator(); it.hasNext(); ) {
          Rule r=(Rule)it.next();
          if (LOGGER.isLoggable(Level.FINER)) {
            LOGGER.finer("applying rule: " + r.toString());
          }
          if (LOGGER.isLoggable(Level.FINER)) {
            LOGGER.finer("this rule applies ...");
          }
          Filter filter=r.getFilter();
          if ((filter == null) || filter.evaluate(feature)) {
            doElse=false;
            if (LOGGER.isLoggable(Level.FINER)) {
              LOGGER.finer("processing Symobolizer ...");
            }
            Symbolizer[] symbolizers=r.getSymbolizers();
            try {
              processSymbolizers(graphics,feature,symbolizers,scaleRange,transform,layerId);
            }
 catch (            Exception e) {
              fireErrorEvent(e);
              continue;
            }
            if (LOGGER.isLoggable(Level.FINER)) {
              LOGGER.finer("... done!");
            }
          }
        }
        if (doElse) {
          if (LOGGER.isLoggable(Level.FINER)) {
            LOGGER.finer("rules with an else filter");
          }
          for (Iterator it=elseRuleList.iterator(); it.hasNext(); ) {
            Rule r=(Rule)it.next();
            Symbolizer[] symbolizers=r.getSymbolizers();
            if (LOGGER.isLoggable(Level.FINER)) {
              LOGGER.finer("processing Symobolizer ...");
            }
            try {
              processSymbolizers(graphics,feature,symbolizers,scaleRange,transform,layerId);
            }
 catch (            Exception e) {
              fireErrorEvent(e);
              continue;
            }
            if (LOGGER.isLoggable(Level.FINER)) {
              LOGGER.finer("... done!");
            }
          }
        }
        if (LOGGER.isLoggable(Level.FINER)) {
          LOGGER.finer("feature rendered event ...");
        }
      }
 catch (      RuntimeException e) {
        fireErrorEvent(e);
      }
    }
  }
  return fids;
}
