{
  RenderListener listener;
  if (expectedFeatureCount > -1) {
    listener=new CountingRenderListener(testName);
  }
 else {
    listener=new LogginRenderListener(testName);
  }
  renderer.addRenderListener(listener);
  int w=300;
  int h=300;
  final BufferedImage image=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);
  Graphics g=image.getGraphics();
  g.setColor(Color.white);
  g.fillRect(0,0,w,h);
  TestUtilites.render(renderer,g,new Rectangle(w,h),bounds);
  g.dispose();
  if (!GraphicsEnvironment.isHeadless() && TestUtilites.INTERACTIVE) {
    Frame frame=new Frame(testName);
    frame.addWindowListener(new WindowAdapter(){
      public void windowClosing(      WindowEvent e){
        e.getWindow().dispose();
      }
    }
);
    Panel p=new Panel(){
      /** 
 * <code>serialVersionUID</code> field 
 */
      private static final long serialVersionUID=1L;
      public void paint(      Graphics g){
        g.drawImage(image,0,0,this);
      }
    }
;
    frame.add(p);
    frame.setSize(w,h);
    frame.setVisible(true);
    Thread.sleep(timeOut);
    frame.dispose();
  }
  boolean hasData=false;
  for (int y=0; !hasData && y < h; y++) {
    for (int x=0; !hasData && x < w; x++) {
      if (image.getRGB(x,y) != -1) {
        hasData=true;
      }
    }
  }
  TestCase.assertTrue("image is blank and should not be",hasData);
  renderer.removeRenderListener(listener);
  if (expectedFeatureCount > -1) {
    TestCase.assertEquals(expectedFeatureCount,((CountingRenderListener)listener).count);
  }
  return image;
}
