{
  if (attribute instanceof String) {
    String propName=(String)attribute;
    AttributeDescriptor attDesc=features.getSchema().getDescriptor(propName);
    if (attDesc == null) {
      throw new VectorToRasterException(propName + " not found");
    }
    Class<?> attClass=attDesc.getType().getBinding();
    if (!Number.class.isAssignableFrom(attClass)) {
      throw new VectorToRasterException(propName + " is not numeric");
    }
    if (Float.class.isAssignableFrom(attClass)) {
      transferType=TransferType.FLOAT;
    }
 else     if (Double.class.isAssignableFrom(attClass)) {
      transferType=TransferType.FLOAT;
      Logger.getLogger(VectorToRasterProcess.class.getName()).log(Level.WARNING,"coercing double feature values to float raster values");
    }
 else     if (Long.class.isAssignableFrom(attClass)) {
      transferType=TransferType.INTEGRAL;
      Logger.getLogger(VectorToRasterProcess.class.getName()).log(Level.WARNING,"coercing long feature values to int raster values");
    }
 else {
      transferType=TransferType.INTEGRAL;
    }
    valueSource=ValueSource.PROPERTY_NAME;
  }
 else   if (attribute instanceof Expression) {
    valueSource=ValueSource.EXPRESSION;
    SimpleFeature feature=features.features().next();
    Object value=((Expression)attribute).evaluate(feature);
    if (value.getClass().equals(String.class)) {
      Boolean hasException=false;
      try {
        Integer.valueOf((String)value);
        transferType=TransferType.INTEGRAL;
      }
 catch (      NumberFormatException e) {
        hasException=true;
      }
      if (hasException) {
        hasException=false;
        try {
          Float.valueOf((String)value);
          transferType=TransferType.FLOAT;
        }
 catch (        NumberFormatException e) {
          hasException=true;
        }
      }
      if (hasException) {
        throw new VectorToRasterException(((Expression)attribute).toString() + " does not evaluate to a number");
      }
    }
 else     if (!Number.class.isAssignableFrom(value.getClass())) {
      throw new VectorToRasterException(((Expression)attribute).toString() + " does not evaluate to a number");
    }
 else     if (Float.class.isAssignableFrom(value.getClass())) {
      transferType=TransferType.FLOAT;
    }
 else     if (Double.class.isAssignableFrom(value.getClass())) {
      transferType=TransferType.FLOAT;
      Logger.getLogger(VectorToRasterProcess.class.getName()).log(Level.WARNING,"coercing double feature values to float raster values");
    }
 else     if (Long.class.isAssignableFrom(value.getClass())) {
      transferType=TransferType.INTEGRAL;
      Logger.getLogger(VectorToRasterProcess.class.getName()).log(Level.WARNING,"coercing long feature values to int raster values");
    }
 else {
      transferType=TransferType.INTEGRAL;
    }
  }
 else {
    throw new VectorToRasterException("value attribute must be a feature property name" + "or an org.opengis.filter.expression.Expression object");
  }
  minAttValue=maxAttValue=null;
  setBounds(features,bounds,gridDim);
  createImage(gridDim);
  gridGeom=new GridGeometry2D(new GridEnvelope2D(0,0,gridDim.width,gridDim.height),extent);
}
