{
  Object attribute=input.get(VectorToRasterFactory.ATTRIBUTE.key);
  Geometry geometry=(Geometry)feature.getDefaultGeometry();
  if (geometry.intersects(extentGeometry)) {
    Number value=getFeatureValue(feature,attribute);
switch (transferType) {
case FLOAT:
      if (minAttValue == null) {
        minAttValue=maxAttValue=Float.valueOf(value.floatValue());
      }
 else       if (Float.compare(value.floatValue(),minAttValue.floatValue()) < 0) {
        minAttValue=value.floatValue();
      }
 else       if (Float.compare(value.floatValue(),maxAttValue.floatValue()) > 0) {
        maxAttValue=value.floatValue();
      }
    break;
case INTEGRAL:
  if (minAttValue == null) {
    minAttValue=maxAttValue=Integer.valueOf(value.intValue());
  }
 else   if (value.intValue() < minAttValue.intValue()) {
    minAttValue=value.intValue();
  }
 else   if (value.intValue() > maxAttValue.intValue()) {
    maxAttValue=value.intValue();
  }
break;
}
graphics.setColor(valueToColor(value));
Geometries geomType=Geometries.get(geometry);
switch (geomType) {
case MULTIPOLYGON:
case MULTILINESTRING:
case MULTIPOINT:
final int numGeom=geometry.getNumGeometries();
for (int i=0; i < numGeom; i++) {
Geometry geomN=geometry.getGeometryN(i);
drawGeometry(Geometries.get(geomN),geomN);
}
break;
case POLYGON:
case LINESTRING:
case POINT:
drawGeometry(geomType,geometry);
default :
throw new UnsupportedOperationException("Unsupported geometry type: " + geomType.getName());
}
}
}
