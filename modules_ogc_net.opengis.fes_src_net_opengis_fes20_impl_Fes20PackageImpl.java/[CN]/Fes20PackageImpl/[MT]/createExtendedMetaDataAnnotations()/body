{
  String source="http:///org/eclipse/emf/ecore/util/ExtendedMetaData";
  addAnnotation(abstractAdhocQueryExpressionTypeEClass,source,new String[]{"name","AbstractAdhocQueryExpressionType","kind","elementOnly"});
  addAnnotation(abstractIdTypeEClass,source,new String[]{"name","AbstractIdType","kind","empty"});
  addAnnotation(abstractProjectionClauseTypeEClass,source,new String[]{"name","AbstractProjectionClauseType","kind","empty"});
  addAnnotation(abstractQueryExpressionTypeEClass,source,new String[]{"name","AbstractQueryExpressionType","kind","empty"});
  addAnnotation(getAbstractQueryExpressionType_Handle(),source,new String[]{"kind","attribute","name","handle"});
  addAnnotation(abstractSelectionClauseTypeEClass,source,new String[]{"name","AbstractSelectionClauseType","kind","empty"});
  addAnnotation(abstractSortingClauseTypeEClass,source,new String[]{"name","AbstractSortingClauseType","kind","empty"});
  addAnnotation(additionalOperatorsTypeEClass,source,new String[]{"name","AdditionalOperatorsType","kind","elementOnly"});
  addAnnotation(getAdditionalOperatorsType_Operator(),source,new String[]{"kind","element","name","Operator","namespace","##targetNamespace"});
  addAnnotation(argumentsTypeEClass,source,new String[]{"name","ArgumentsType","kind","elementOnly"});
  addAnnotation(getArgumentsType_Argument(),source,new String[]{"kind","element","name","Argument","namespace","##targetNamespace"});
  addAnnotation(argumentTypeEClass,source,new String[]{"name","ArgumentType","kind","elementOnly"});
  addAnnotation(getArgumentType_Metadata(),source,new String[]{"kind","element","name","Metadata","namespace","http://www.opengis.net/ows/1.1"});
  addAnnotation(getArgumentType_Type(),source,new String[]{"kind","element","name","Type","namespace","##targetNamespace"});
  addAnnotation(getArgumentType_Name(),source,new String[]{"kind","attribute","name","name"});
  addAnnotation(availableFunctionsTypeEClass,source,new String[]{"name","AvailableFunctionsType","kind","elementOnly"});
  addAnnotation(getAvailableFunctionsType_Function(),source,new String[]{"kind","element","name","Function","namespace","##targetNamespace"});
  addAnnotation(availableFunctionTypeEClass,source,new String[]{"name","AvailableFunctionType","kind","elementOnly"});
  addAnnotation(getAvailableFunctionType_Metadata(),source,new String[]{"kind","element","name","Metadata","namespace","http://www.opengis.net/ows/1.1"});
  addAnnotation(getAvailableFunctionType_Returns(),source,new String[]{"kind","element","name","Returns","namespace","##targetNamespace"});
  addAnnotation(getAvailableFunctionType_Arguments(),source,new String[]{"kind","element","name","Arguments","namespace","##targetNamespace"});
  addAnnotation(getAvailableFunctionType_Name(),source,new String[]{"kind","attribute","name","name"});
  addAnnotation(bboxTypeEClass,source,new String[]{"name","BBOXType","kind","elementOnly"});
  addAnnotation(getBBOXType_ExpressionGroup(),source,new String[]{"kind","group","name","expression:group","namespace","##targetNamespace"});
  addAnnotation(getBBOXType_Expression(),source,new String[]{"kind","element","name","expression","namespace","##targetNamespace","group","expression:group"});
  addAnnotation(getBBOXType_Any(),source,new String[]{"kind","elementWildcard","wildcards","##other","name",":2","processing","strict"});
  addAnnotation(binaryComparisonOpTypeEClass,source,new String[]{"name","BinaryComparisonOpType","kind","elementOnly"});
  addAnnotation(getBinaryComparisonOpType_ExpressionGroup(),source,new String[]{"kind","group","name","expression:group","namespace","##targetNamespace"});
  addAnnotation(getBinaryComparisonOpType_Expression(),source,new String[]{"kind","element","name","expression","namespace","##targetNamespace","group","expression:group"});
  addAnnotation(getBinaryComparisonOpType_MatchAction(),source,new String[]{"kind","attribute","name","matchAction"});
  addAnnotation(getBinaryComparisonOpType_MatchCase(),source,new String[]{"kind","attribute","name","matchCase"});
  addAnnotation(binaryLogicOpTypeEClass,source,new String[]{"name","BinaryLogicOpType","kind","elementOnly"});
  addAnnotation(getBinaryLogicOpType_FilterPredicates(),source,new String[]{"kind","group","name","FilterPredicates:0"});
  addAnnotation(getBinaryLogicOpType_ComparisonOpsGroup(),source,new String[]{"kind","group","name","comparisonOps:group","namespace","##targetNamespace","group","#FilterPredicates:0"});
  addAnnotation(getBinaryLogicOpType_ComparisonOps(),source,new String[]{"kind","element","name","comparisonOps","namespace","##targetNamespace","group","comparisonOps:group"});
  addAnnotation(getBinaryLogicOpType_SpatialOpsGroup(),source,new String[]{"kind","group","name","spatialOps:group","namespace","##targetNamespace","group","#FilterPredicates:0"});
  addAnnotation(getBinaryLogicOpType_SpatialOps(),source,new String[]{"kind","element","name","spatialOps","namespace","##targetNamespace","group","spatialOps:group"});
  addAnnotation(getBinaryLogicOpType_TemporalOpsGroup(),source,new String[]{"kind","group","name","temporalOps:group","namespace","##targetNamespace","group","#FilterPredicates:0"});
  addAnnotation(getBinaryLogicOpType_TemporalOps(),source,new String[]{"kind","element","name","temporalOps","namespace","##targetNamespace","group","temporalOps:group"});
  addAnnotation(getBinaryLogicOpType_LogicOpsGroup(),source,new String[]{"kind","group","name","logicOps:group","namespace","##targetNamespace","group","#FilterPredicates:0"});
  addAnnotation(getBinaryLogicOpType_LogicOps(),source,new String[]{"kind","element","name","logicOps","namespace","##targetNamespace","group","logicOps:group"});
  addAnnotation(getBinaryLogicOpType_ExtensionOpsGroup(),source,new String[]{"kind","group","name","extensionOps:group","namespace","##targetNamespace","group","#FilterPredicates:0"});
  addAnnotation(getBinaryLogicOpType_ExtensionOps(),source,new String[]{"kind","element","name","extensionOps","namespace","##targetNamespace","group","extensionOps:group"});
  addAnnotation(getBinaryLogicOpType_Function(),source,new String[]{"kind","element","name","Function","namespace","##targetNamespace","group","#FilterPredicates:0"});
  addAnnotation(getBinaryLogicOpType_IdGroup(),source,new String[]{"kind","group","name","_Id:group","namespace","##targetNamespace","group","#FilterPredicates:0"});
  addAnnotation(getBinaryLogicOpType_Id(),source,new String[]{"kind","element","name","_Id","namespace","##targetNamespace","group","_Id:group"});
  addAnnotation(binarySpatialOpTypeEClass,source,new String[]{"name","BinarySpatialOpType","kind","elementOnly"});
  addAnnotation(getBinarySpatialOpType_ValueReference(),source,new String[]{"kind","element","name","ValueReference","namespace","##targetNamespace"});
  addAnnotation(getBinarySpatialOpType_ExpressionGroup(),source,new String[]{"kind","group","name","expression:group","namespace","##targetNamespace"});
  addAnnotation(getBinarySpatialOpType_Expression(),source,new String[]{"kind","element","name","expression","namespace","##targetNamespace","group","expression:group"});
  addAnnotation(getBinarySpatialOpType_Any(),source,new String[]{"kind","elementWildcard","wildcards","##other","name",":3","processing","strict"});
  addAnnotation(binaryTemporalOpTypeEClass,source,new String[]{"name","BinaryTemporalOpType","kind","elementOnly"});
  addAnnotation(getBinaryTemporalOpType_ValueReference(),source,new String[]{"kind","element","name","ValueReference","namespace","##targetNamespace"});
  addAnnotation(getBinaryTemporalOpType_ExpressionGroup(),source,new String[]{"kind","group","name","expression:group","namespace","##targetNamespace"});
  addAnnotation(getBinaryTemporalOpType_Expression(),source,new String[]{"kind","element","name","expression","namespace","##targetNamespace","group","expression:group"});
  addAnnotation(getBinaryTemporalOpType_Any(),source,new String[]{"kind","elementWildcard","wildcards","##other","name",":3","processing","strict"});
  addAnnotation(comparisonOperatorsTypeEClass,source,new String[]{"name","ComparisonOperatorsType","kind","elementOnly"});
  addAnnotation(getComparisonOperatorsType_Group(),source,new String[]{"kind","group","name","group:0"});
  addAnnotation(getComparisonOperatorsType_ComparisonOperator(),source,new String[]{"kind","element","name","ComparisonOperator","namespace","##targetNamespace","group","#group:0"});
  addAnnotation(comparisonOperatorTypeEClass,source,new String[]{"name","ComparisonOperatorType","kind","empty"});
  addAnnotation(getComparisonOperatorType_Name(),source,new String[]{"kind","attribute","name","name"});
  addAnnotation(comparisonOpsTypeEClass,source,new String[]{"name","ComparisonOpsType","kind","empty"});
  addAnnotation(conformanceTypeEClass,source,new String[]{"name","ConformanceType","kind","elementOnly"});
  addAnnotation(getConformanceType_Constraint(),source,new String[]{"kind","element","name","Constraint","namespace","##targetNamespace"});
  addAnnotation(distanceBufferTypeEClass,source,new String[]{"name","DistanceBufferType","kind","elementOnly"});
  addAnnotation(getDistanceBufferType_ExpressionGroup(),source,new String[]{"kind","group","name","expression:group","namespace","##targetNamespace"});
  addAnnotation(getDistanceBufferType_Expression(),source,new String[]{"kind","element","name","expression","namespace","##targetNamespace","group","expression:group"});
  addAnnotation(getDistanceBufferType_Any(),source,new String[]{"kind","elementWildcard","wildcards","##other","name",":2","processing","strict"});
  addAnnotation(getDistanceBufferType_Distance(),source,new String[]{"kind","element","name","Distance","namespace","##targetNamespace"});
  addAnnotation(documentRootEClass,source,new String[]{"name","","kind","mixed"});
  addAnnotation(getDocumentRoot_Mixed(),source,new String[]{"kind","elementWildcard","name",":mixed"});
  addAnnotation(getDocumentRoot_XMLNSPrefixMap(),source,new String[]{"kind","attribute","name","xmlns:prefix"});
  addAnnotation(getDocumentRoot_XSISchemaLocation(),source,new String[]{"kind","attribute","name","xsi:schemaLocation"});
  addAnnotation(getDocumentRoot_Id(),source,new String[]{"kind","element","name","_Id","namespace","##targetNamespace"});
  addAnnotation(getDocumentRoot_AbstractAdhocQueryExpression(),source,new String[]{"kind","element","name","AbstractAdhocQueryExpression","namespace","##targetNamespace","affiliation","AbstractQueryExpression"});
  addAnnotation(getDocumentRoot_AbstractQueryExpression(),source,new String[]{"kind","element","name","AbstractQueryExpression","namespace","##targetNamespace"});
  addAnnotation(getDocumentRoot_AbstractProjectionClause(),source,new String[]{"kind","element","name","AbstractProjectionClause","namespace","##targetNamespace"});
  addAnnotation(getDocumentRoot_AbstractSelectionClause(),source,new String[]{"kind","element","name","AbstractSelectionClause","namespace","##targetNamespace"});
  addAnnotation(getDocumentRoot_AbstractSortingClause(),source,new String[]{"kind","element","name","AbstractSortingClause","namespace","##targetNamespace"});
  addAnnotation(getDocumentRoot_After(),source,new String[]{"kind","element","name","After","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_TemporalOps(),source,new String[]{"kind","element","name","temporalOps","namespace","##targetNamespace"});
  addAnnotation(getDocumentRoot_And(),source,new String[]{"kind","element","name","And","namespace","##targetNamespace","affiliation","logicOps"});
  addAnnotation(getDocumentRoot_LogicOps(),source,new String[]{"kind","element","name","logicOps","namespace","##targetNamespace"});
  addAnnotation(getDocumentRoot_AnyInteracts(),source,new String[]{"kind","element","name","AnyInteracts","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_BBOX(),source,new String[]{"kind","element","name","BBOX","namespace","##targetNamespace","affiliation","spatialOps"});
  addAnnotation(getDocumentRoot_SpatialOps(),source,new String[]{"kind","element","name","spatialOps","namespace","##targetNamespace"});
  addAnnotation(getDocumentRoot_Before(),source,new String[]{"kind","element","name","Before","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_Begins(),source,new String[]{"kind","element","name","Begins","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_BegunBy(),source,new String[]{"kind","element","name","BegunBy","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_Beyond(),source,new String[]{"kind","element","name","Beyond","namespace","##targetNamespace","affiliation","spatialOps"});
  addAnnotation(getDocumentRoot_ComparisonOps(),source,new String[]{"kind","element","name","comparisonOps","namespace","##targetNamespace"});
  addAnnotation(getDocumentRoot_Contains(),source,new String[]{"kind","element","name","Contains","namespace","##targetNamespace","affiliation","spatialOps"});
  addAnnotation(getDocumentRoot_Crosses(),source,new String[]{"kind","element","name","Crosses","namespace","##targetNamespace","affiliation","spatialOps"});
  addAnnotation(getDocumentRoot_Disjoint(),source,new String[]{"kind","element","name","Disjoint","namespace","##targetNamespace","affiliation","spatialOps"});
  addAnnotation(getDocumentRoot_During(),source,new String[]{"kind","element","name","During","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_DWithin(),source,new String[]{"kind","element","name","DWithin","namespace","##targetNamespace","affiliation","spatialOps"});
  addAnnotation(getDocumentRoot_EndedBy(),source,new String[]{"kind","element","name","EndedBy","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_Ends(),source,new String[]{"kind","element","name","Ends","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_Equals(),source,new String[]{"kind","element","name","Equals","namespace","##targetNamespace","affiliation","spatialOps"});
  addAnnotation(getDocumentRoot_Expression(),source,new String[]{"kind","element","name","expression","namespace","##targetNamespace"});
  addAnnotation(getDocumentRoot_ExtensionOps(),source,new String[]{"kind","element","name","extensionOps","namespace","##targetNamespace"});
  addAnnotation(getDocumentRoot_Filter(),source,new String[]{"kind","element","name","Filter","namespace","##targetNamespace","affiliation","AbstractSelectionClause"});
  addAnnotation(getDocumentRoot_FilterCapabilities(),source,new String[]{"kind","element","name","Filter_Capabilities","namespace","##targetNamespace"});
  addAnnotation(getDocumentRoot_Function(),source,new String[]{"kind","element","name","Function","namespace","##targetNamespace","affiliation","expression"});
  addAnnotation(getDocumentRoot_Intersects(),source,new String[]{"kind","element","name","Intersects","namespace","##targetNamespace","affiliation","spatialOps"});
  addAnnotation(getDocumentRoot_Literal(),source,new String[]{"kind","element","name","Literal","namespace","##targetNamespace","affiliation","expression"});
  addAnnotation(getDocumentRoot_LogicalOperators(),source,new String[]{"kind","element","name","LogicalOperators","namespace","##targetNamespace"});
  addAnnotation(getDocumentRoot_Meets(),source,new String[]{"kind","element","name","Meets","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_MetBy(),source,new String[]{"kind","element","name","MetBy","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_Not(),source,new String[]{"kind","element","name","Not","namespace","##targetNamespace","affiliation","logicOps"});
  addAnnotation(getDocumentRoot_Or(),source,new String[]{"kind","element","name","Or","namespace","##targetNamespace","affiliation","logicOps"});
  addAnnotation(getDocumentRoot_OverlappedBy(),source,new String[]{"kind","element","name","OverlappedBy","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_Overlaps(),source,new String[]{"kind","element","name","Overlaps","namespace","##targetNamespace","affiliation","spatialOps"});
  addAnnotation(getDocumentRoot_PropertyIsBetween(),source,new String[]{"kind","element","name","PropertyIsBetween","namespace","##targetNamespace","affiliation","comparisonOps"});
  addAnnotation(getDocumentRoot_PropertyIsEqualTo(),source,new String[]{"kind","element","name","PropertyIsEqualTo","namespace","##targetNamespace","affiliation","comparisonOps"});
  addAnnotation(getDocumentRoot_PropertyIsGreaterThan(),source,new String[]{"kind","element","name","PropertyIsGreaterThan","namespace","##targetNamespace","affiliation","comparisonOps"});
  addAnnotation(getDocumentRoot_PropertyIsGreaterThanOrEqualTo(),source,new String[]{"kind","element","name","PropertyIsGreaterThanOrEqualTo","namespace","##targetNamespace","affiliation","comparisonOps"});
  addAnnotation(getDocumentRoot_PropertyIsLessThan(),source,new String[]{"kind","element","name","PropertyIsLessThan","namespace","##targetNamespace","affiliation","comparisonOps"});
  addAnnotation(getDocumentRoot_PropertyIsLessThanOrEqualTo(),source,new String[]{"kind","element","name","PropertyIsLessThanOrEqualTo","namespace","##targetNamespace","affiliation","comparisonOps"});
  addAnnotation(getDocumentRoot_PropertyIsLike(),source,new String[]{"kind","element","name","PropertyIsLike","namespace","##targetNamespace","affiliation","comparisonOps"});
  addAnnotation(getDocumentRoot_PropertyIsNil(),source,new String[]{"kind","element","name","PropertyIsNil","namespace","##targetNamespace","affiliation","comparisonOps"});
  addAnnotation(getDocumentRoot_PropertyIsNotEqualTo(),source,new String[]{"kind","element","name","PropertyIsNotEqualTo","namespace","##targetNamespace","affiliation","comparisonOps"});
  addAnnotation(getDocumentRoot_PropertyIsNull(),source,new String[]{"kind","element","name","PropertyIsNull","namespace","##targetNamespace","affiliation","comparisonOps"});
  addAnnotation(getDocumentRoot_ResourceId(),source,new String[]{"kind","element","name","ResourceId","namespace","##targetNamespace","affiliation","_Id"});
  addAnnotation(getDocumentRoot_SortBy(),source,new String[]{"kind","element","name","SortBy","namespace","##targetNamespace","affiliation","AbstractSortingClause"});
  addAnnotation(getDocumentRoot_TContains(),source,new String[]{"kind","element","name","TContains","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_TEquals(),source,new String[]{"kind","element","name","TEquals","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_Touches(),source,new String[]{"kind","element","name","Touches","namespace","##targetNamespace","affiliation","spatialOps"});
  addAnnotation(getDocumentRoot_TOverlaps(),source,new String[]{"kind","element","name","TOverlaps","namespace","##targetNamespace","affiliation","temporalOps"});
  addAnnotation(getDocumentRoot_ValueReference(),source,new String[]{"kind","element","name","ValueReference","namespace","##targetNamespace","affiliation","expression"});
  addAnnotation(getDocumentRoot_Within(),source,new String[]{"kind","element","name","Within","namespace","##targetNamespace","affiliation","spatialOps"});
  addAnnotation(extendedCapabilitiesTypeEClass,source,new String[]{"name","Extended_CapabilitiesType","kind","elementOnly"});
  addAnnotation(getExtendedCapabilitiesType_AdditionalOperators(),source,new String[]{"kind","element","name","AdditionalOperators","namespace","##targetNamespace"});
  addAnnotation(extensionOperatorTypeEClass,source,new String[]{"name","ExtensionOperatorType","kind","empty"});
  addAnnotation(getExtensionOperatorType_Name(),source,new String[]{"kind","attribute","name","name"});
  addAnnotation(extensionOpsTypeEClass,source,new String[]{"name","ExtensionOpsType","kind","empty"});
  addAnnotation(filterCapabilitiesTypeEClass,source,new String[]{"name","Filter_Capabilities_._type","kind","elementOnly"});
  addAnnotation(getFilterCapabilitiesType_Conformance(),source,new String[]{"kind","element","name","Conformance","namespace","##targetNamespace"});
  addAnnotation(getFilterCapabilitiesType_IdCapabilities(),source,new String[]{"kind","element","name","Id_Capabilities","namespace","##targetNamespace"});
  addAnnotation(getFilterCapabilitiesType_ScalarCapabilities(),source,new String[]{"kind","element","name","Scalar_Capabilities","namespace","##targetNamespace"});
  addAnnotation(getFilterCapabilitiesType_SpatialCapabilities(),source,new String[]{"kind","element","name","Spatial_Capabilities","namespace","##targetNamespace"});
  addAnnotation(getFilterCapabilitiesType_TemporalCapabilities(),source,new String[]{"kind","element","name","Temporal_Capabilities","namespace","##targetNamespace"});
  addAnnotation(getFilterCapabilitiesType_Functions(),source,new String[]{"kind","element","name","Functions","namespace","##targetNamespace"});
  addAnnotation(getFilterCapabilitiesType_ExtendedCapabilities(),source,new String[]{"kind","element","name","Extended_Capabilities","namespace","##targetNamespace"});
  addAnnotation(filterTypeEClass,source,new String[]{"name","FilterType","kind","elementOnly"});
  addAnnotation(getFilterType_ComparisonOpsGroup(),source,new String[]{"kind","group","name","comparisonOps:group","namespace","##targetNamespace"});
  addAnnotation(getFilterType_ComparisonOps(),source,new String[]{"kind","element","name","comparisonOps","namespace","##targetNamespace","group","comparisonOps:group"});
  addAnnotation(getFilterType_SpatialOpsGroup(),source,new String[]{"kind","group","name","spatialOps:group","namespace","##targetNamespace"});
  addAnnotation(getFilterType_SpatialOps(),source,new String[]{"kind","element","name","spatialOps","namespace","##targetNamespace","group","spatialOps:group"});
  addAnnotation(getFilterType_TemporalOpsGroup(),source,new String[]{"kind","group","name","temporalOps:group","namespace","##targetNamespace"});
  addAnnotation(getFilterType_TemporalOps(),source,new String[]{"kind","element","name","temporalOps","namespace","##targetNamespace","group","temporalOps:group"});
  addAnnotation(getFilterType_LogicOpsGroup(),source,new String[]{"kind","group","name","logicOps:group","namespace","##targetNamespace"});
  addAnnotation(getFilterType_LogicOps(),source,new String[]{"kind","element","name","logicOps","namespace","##targetNamespace","group","logicOps:group"});
  addAnnotation(getFilterType_ExtensionOpsGroup(),source,new String[]{"kind","group","name","extensionOps:group","namespace","##targetNamespace"});
  addAnnotation(getFilterType_ExtensionOps(),source,new String[]{"kind","element","name","extensionOps","namespace","##targetNamespace","group","extensionOps:group"});
  addAnnotation(getFilterType_Function(),source,new String[]{"kind","element","name","Function","namespace","##targetNamespace"});
  addAnnotation(getFilterType_IdGroup(),source,new String[]{"kind","group","name","_Id:group","namespace","##targetNamespace"});
  addAnnotation(getFilterType_Id(),source,new String[]{"kind","element","name","_Id","namespace","##targetNamespace","group","_Id:group"});
  addAnnotation(functionTypeEClass,source,new String[]{"name","FunctionType","kind","elementOnly"});
  addAnnotation(getFunctionType_ExpressionGroup(),source,new String[]{"kind","group","name","expression:group","namespace","##targetNamespace"});
  addAnnotation(getFunctionType_Expression(),source,new String[]{"kind","element","name","expression","namespace","##targetNamespace","group","expression:group"});
  addAnnotation(getFunctionType_Name(),source,new String[]{"kind","attribute","name","name"});
  addAnnotation(geometryOperandsTypeEClass,source,new String[]{"name","GeometryOperandsType","kind","elementOnly"});
  addAnnotation(getGeometryOperandsType_GeometryOperand(),source,new String[]{"kind","element","name","GeometryOperand","namespace","##targetNamespace"});
  addAnnotation(geometryOperandTypeEClass,source,new String[]{"name","GeometryOperand_._type","kind","empty"});
  addAnnotation(getGeometryOperandType_Name(),source,new String[]{"kind","attribute","name","name"});
  addAnnotation(idCapabilitiesTypeEClass,source,new String[]{"name","Id_CapabilitiesType","kind","elementOnly"});
  addAnnotation(getIdCapabilitiesType_ResourceIdentifier(),source,new String[]{"kind","element","name","ResourceIdentifier","namespace","##targetNamespace"});
  addAnnotation(literalTypeEClass,source,new String[]{"name","LiteralType","kind","mixed"});
  addAnnotation(getLiteralType_Mixed(),source,new String[]{"kind","elementWildcard","name",":mixed"});
  addAnnotation(getLiteralType_Any(),source,new String[]{"kind","elementWildcard","wildcards","##any","name",":1","processing","strict"});
  addAnnotation(getLiteralType_Type(),source,new String[]{"kind","attribute","name","type"});
  addAnnotation(logicalOperatorsTypeEClass,source,new String[]{"name","LogicalOperators_._type","kind","empty"});
  addAnnotation(logicOpsTypeEClass,source,new String[]{"name","LogicOpsType","kind","empty"});
  addAnnotation(lowerBoundaryTypeEClass,source,new String[]{"name","LowerBoundaryType","kind","elementOnly"});
  addAnnotation(getLowerBoundaryType_ExpressionGroup(),source,new String[]{"kind","group","name","expression:group","namespace","##targetNamespace"});
  addAnnotation(getLowerBoundaryType_Expression(),source,new String[]{"kind","element","name","expression","namespace","##targetNamespace","group","expression:group"});
  addAnnotation(measureTypeEClass,source,new String[]{"name","MeasureType","kind","simple"});
  addAnnotation(getMeasureType_Value(),source,new String[]{"name",":0","kind","simple"});
  addAnnotation(getMeasureType_Uom(),source,new String[]{"kind","attribute","name","uom"});
  addAnnotation(propertyIsBetweenTypeEClass,source,new String[]{"name","PropertyIsBetweenType","kind","elementOnly"});
  addAnnotation(getPropertyIsBetweenType_ExpressionGroup(),source,new String[]{"kind","group","name","expression:group","namespace","##targetNamespace"});
  addAnnotation(getPropertyIsBetweenType_Expression(),source,new String[]{"kind","element","name","expression","namespace","##targetNamespace","group","expression:group"});
  addAnnotation(getPropertyIsBetweenType_LowerBoundary(),source,new String[]{"kind","element","name","LowerBoundary","namespace","##targetNamespace"});
  addAnnotation(getPropertyIsBetweenType_UpperBoundary(),source,new String[]{"kind","element","name","UpperBoundary","namespace","##targetNamespace"});
  addAnnotation(propertyIsLikeTypeEClass,source,new String[]{"name","PropertyIsLikeType","kind","elementOnly"});
  addAnnotation(getPropertyIsLikeType_ExpressionGroup(),source,new String[]{"kind","group","name","expression:group","namespace","##targetNamespace"});
  addAnnotation(getPropertyIsLikeType_Expression(),source,new String[]{"kind","element","name","expression","namespace","##targetNamespace","group","expression:group"});
  addAnnotation(getPropertyIsLikeType_EscapeChar(),source,new String[]{"kind","attribute","name","escapeChar"});
  addAnnotation(getPropertyIsLikeType_SingleChar(),source,new String[]{"kind","attribute","name","singleChar"});
  addAnnotation(getPropertyIsLikeType_WildCard(),source,new String[]{"kind","attribute","name","wildCard"});
  addAnnotation(propertyIsNilTypeEClass,source,new String[]{"name","PropertyIsNilType","kind","elementOnly"});
  addAnnotation(getPropertyIsNilType_ExpressionGroup(),source,new String[]{"kind","group","name","expression:group","namespace","##targetNamespace"});
  addAnnotation(getPropertyIsNilType_Expression(),source,new String[]{"kind","element","name","expression","namespace","##targetNamespace","group","expression:group"});
  addAnnotation(getPropertyIsNilType_NilReason(),source,new String[]{"kind","attribute","name","nilReason"});
  addAnnotation(propertyIsNullTypeEClass,source,new String[]{"name","PropertyIsNullType","kind","elementOnly"});
  addAnnotation(getPropertyIsNullType_ExpressionGroup(),source,new String[]{"kind","group","name","expression:group","namespace","##targetNamespace"});
  addAnnotation(getPropertyIsNullType_Expression(),source,new String[]{"kind","element","name","expression","namespace","##targetNamespace","group","expression:group"});
  addAnnotation(resourceIdentifierTypeEClass,source,new String[]{"name","ResourceIdentifierType","kind","elementOnly"});
  addAnnotation(getResourceIdentifierType_Metadata(),source,new String[]{"kind","element","name","Metadata","namespace","http://www.opengis.net/ows/1.1"});
  addAnnotation(getResourceIdentifierType_Name(),source,new String[]{"kind","attribute","name","name"});
  addAnnotation(resourceIdTypeEClass,source,new String[]{"name","ResourceIdType","kind","empty"});
  addAnnotation(getResourceIdType_EndDate(),source,new String[]{"kind","attribute","name","endDate"});
  addAnnotation(getResourceIdType_PreviousRid(),source,new String[]{"kind","attribute","name","previousRid"});
  addAnnotation(getResourceIdType_Rid(),source,new String[]{"kind","attribute","name","rid"});
  addAnnotation(getResourceIdType_StartDate(),source,new String[]{"kind","attribute","name","startDate"});
  addAnnotation(getResourceIdType_Version(),source,new String[]{"kind","attribute","name","version"});
  addAnnotation(scalarCapabilitiesTypeEClass,source,new String[]{"name","Scalar_CapabilitiesType","kind","elementOnly"});
  addAnnotation(getScalarCapabilitiesType_LogicalOperators(),source,new String[]{"kind","element","name","LogicalOperators","namespace","##targetNamespace"});
  addAnnotation(getScalarCapabilitiesType_ComparisonOperators(),source,new String[]{"kind","element","name","ComparisonOperators","namespace","##targetNamespace"});
  addAnnotation(sortByTypeEClass,source,new String[]{"name","SortByType","kind","elementOnly"});
  addAnnotation(getSortByType_SortProperty(),source,new String[]{"kind","element","name","SortProperty","namespace","##targetNamespace"});
  addAnnotation(sortPropertyTypeEClass,source,new String[]{"name","SortPropertyType","kind","elementOnly"});
  addAnnotation(getSortPropertyType_ValueReference(),source,new String[]{"kind","element","name","ValueReference","namespace","##targetNamespace"});
  addAnnotation(getSortPropertyType_SortOrder(),source,new String[]{"kind","element","name","SortOrder","namespace","##targetNamespace"});
  addAnnotation(spatialCapabilitiesTypeEClass,source,new String[]{"name","Spatial_CapabilitiesType","kind","elementOnly"});
  addAnnotation(getSpatialCapabilitiesType_GeometryOperands(),source,new String[]{"kind","element","name","GeometryOperands","namespace","##targetNamespace"});
  addAnnotation(getSpatialCapabilitiesType_SpatialOperators(),source,new String[]{"kind","element","name","SpatialOperators","namespace","##targetNamespace"});
  addAnnotation(spatialOperatorsTypeEClass,source,new String[]{"name","SpatialOperatorsType","kind","elementOnly"});
  addAnnotation(getSpatialOperatorsType_SpatialOperator(),source,new String[]{"kind","element","name","SpatialOperator","namespace","##targetNamespace"});
  addAnnotation(spatialOperatorTypeEClass,source,new String[]{"name","SpatialOperatorType","kind","elementOnly"});
  addAnnotation(getSpatialOperatorType_GeometryOperands(),source,new String[]{"kind","element","name","GeometryOperands","namespace","##targetNamespace"});
  addAnnotation(getSpatialOperatorType_Name(),source,new String[]{"kind","attribute","name","name"});
  addAnnotation(spatialOpsTypeEClass,source,new String[]{"name","SpatialOpsType","kind","empty"});
  addAnnotation(temporalCapabilitiesTypeEClass,source,new String[]{"name","Temporal_CapabilitiesType","kind","elementOnly"});
  addAnnotation(getTemporalCapabilitiesType_TemporalOperands(),source,new String[]{"kind","element","name","TemporalOperands","namespace","##targetNamespace"});
  addAnnotation(getTemporalCapabilitiesType_TemporalOperators(),source,new String[]{"kind","element","name","TemporalOperators","namespace","##targetNamespace"});
  addAnnotation(temporalOperandsTypeEClass,source,new String[]{"name","TemporalOperandsType","kind","elementOnly"});
  addAnnotation(getTemporalOperandsType_TemporalOperand(),source,new String[]{"kind","element","name","TemporalOperand","namespace","##targetNamespace"});
  addAnnotation(temporalOperandTypeEClass,source,new String[]{"name","TemporalOperand_._type","kind","empty"});
  addAnnotation(getTemporalOperandType_Name(),source,new String[]{"kind","attribute","name","name"});
  addAnnotation(temporalOperatorsTypeEClass,source,new String[]{"name","TemporalOperatorsType","kind","elementOnly"});
  addAnnotation(getTemporalOperatorsType_TemporalOperator(),source,new String[]{"kind","element","name","TemporalOperator","namespace","##targetNamespace"});
  addAnnotation(temporalOperatorTypeEClass,source,new String[]{"name","TemporalOperatorType","kind","elementOnly"});
  addAnnotation(getTemporalOperatorType_TemporalOperands(),source,new String[]{"kind","element","name","TemporalOperands","namespace","##targetNamespace"});
  addAnnotation(getTemporalOperatorType_Name(),source,new String[]{"kind","attribute","name","name"});
  addAnnotation(temporalOpsTypeEClass,source,new String[]{"name","TemporalOpsType","kind","empty"});
  addAnnotation(unaryLogicOpTypeEClass,source,new String[]{"name","UnaryLogicOpType","kind","elementOnly"});
  addAnnotation(getUnaryLogicOpType_ComparisonOpsGroup(),source,new String[]{"kind","group","name","comparisonOps:group","namespace","##targetNamespace"});
  addAnnotation(getUnaryLogicOpType_ComparisonOps(),source,new String[]{"kind","element","name","comparisonOps","namespace","##targetNamespace","group","comparisonOps:group"});
  addAnnotation(getUnaryLogicOpType_SpatialOpsGroup(),source,new String[]{"kind","group","name","spatialOps:group","namespace","##targetNamespace"});
  addAnnotation(getUnaryLogicOpType_SpatialOps(),source,new String[]{"kind","element","name","spatialOps","namespace","##targetNamespace","group","spatialOps:group"});
  addAnnotation(getUnaryLogicOpType_TemporalOpsGroup(),source,new String[]{"kind","group","name","temporalOps:group","namespace","##targetNamespace"});
  addAnnotation(getUnaryLogicOpType_TemporalOps(),source,new String[]{"kind","element","name","temporalOps","namespace","##targetNamespace","group","temporalOps:group"});
  addAnnotation(getUnaryLogicOpType_LogicOpsGroup(),source,new String[]{"kind","group","name","logicOps:group","namespace","##targetNamespace"});
  addAnnotation(getUnaryLogicOpType_LogicOps(),source,new String[]{"kind","element","name","logicOps","namespace","##targetNamespace","group","logicOps:group"});
  addAnnotation(getUnaryLogicOpType_ExtensionOpsGroup(),source,new String[]{"kind","group","name","extensionOps:group","namespace","##targetNamespace"});
  addAnnotation(getUnaryLogicOpType_ExtensionOps(),source,new String[]{"kind","element","name","extensionOps","namespace","##targetNamespace","group","extensionOps:group"});
  addAnnotation(getUnaryLogicOpType_Function(),source,new String[]{"kind","element","name","Function","namespace","##targetNamespace"});
  addAnnotation(getUnaryLogicOpType_IdGroup(),source,new String[]{"kind","group","name","_Id:group","namespace","##targetNamespace"});
  addAnnotation(getUnaryLogicOpType_Id(),source,new String[]{"kind","element","name","_Id","namespace","##targetNamespace","group","_Id:group"});
  addAnnotation(upperBoundaryTypeEClass,source,new String[]{"name","UpperBoundaryType","kind","elementOnly"});
  addAnnotation(getUpperBoundaryType_ExpressionGroup(),source,new String[]{"kind","group","name","expression:group","namespace","##targetNamespace"});
  addAnnotation(getUpperBoundaryType_Expression(),source,new String[]{"kind","element","name","expression","namespace","##targetNamespace","group","expression:group"});
  addAnnotation(comparisonOperatorNameTypeMember0EEnum,source,new String[]{"name","ComparisonOperatorNameType_._member_._0"});
  addAnnotation(matchActionTypeEEnum,source,new String[]{"name","MatchActionType"});
  addAnnotation(sortOrderTypeEEnum,source,new String[]{"name","SortOrderType"});
  addAnnotation(spatialOperatorNameTypeMember0EEnum,source,new String[]{"name","SpatialOperatorNameType_._member_._0"});
  addAnnotation(temporalOperatorNameTypeMember0EEnum,source,new String[]{"name","TemporalOperatorNameType_._member_._0"});
  addAnnotation(versionActionTokensEEnum,source,new String[]{"name","VersionActionTokens"});
  addAnnotation(aliasesTypeEDataType,source,new String[]{"name","AliasesType","itemType","http://www.eclipse.org/emf/2003/XMLType#NCName"});
  addAnnotation(comparisonOperatorNameTypeEDataType,source,new String[]{"name","ComparisonOperatorNameType","memberTypes","ComparisonOperatorNameType_._member_._0 ComparisonOperatorNameType_._member_._1"});
  addAnnotation(comparisonOperatorNameTypeMember0ObjectEDataType,source,new String[]{"name","ComparisonOperatorNameType_._member_._0:Object","baseType","ComparisonOperatorNameType_._member_._0"});
  addAnnotation(comparisonOperatorNameTypeMember1EDataType,source,new String[]{"name","ComparisonOperatorNameType_._member_._1","baseType","http://www.eclipse.org/emf/2003/XMLType#string","pattern","extension:\\w{2,}"});
  addAnnotation(matchActionTypeObjectEDataType,source,new String[]{"name","MatchActionType:Object","baseType","MatchActionType"});
  addAnnotation(schemaElementEDataType,source,new String[]{"name","SchemaElement","baseType","http://www.eclipse.org/emf/2003/XMLType#string","pattern","schema\\-element\\(.+\\)"});
  addAnnotation(sortOrderTypeObjectEDataType,source,new String[]{"name","SortOrderType:Object","baseType","SortOrderType"});
  addAnnotation(spatialOperatorNameTypeEDataType,source,new String[]{"name","SpatialOperatorNameType","memberTypes","SpatialOperatorNameType_._member_._0 SpatialOperatorNameType_._member_._1"});
  addAnnotation(spatialOperatorNameTypeMember0ObjectEDataType,source,new String[]{"name","SpatialOperatorNameType_._member_._0:Object","baseType","SpatialOperatorNameType_._member_._0"});
  addAnnotation(spatialOperatorNameTypeMember1EDataType,source,new String[]{"name","SpatialOperatorNameType_._member_._1","baseType","http://www.eclipse.org/emf/2003/XMLType#string","pattern","extension:\\w{2,}"});
  addAnnotation(temporalOperatorNameTypeEDataType,source,new String[]{"name","TemporalOperatorNameType","memberTypes","TemporalOperatorNameType_._member_._0 TemporalOperatorNameType_._member_._1"});
  addAnnotation(temporalOperatorNameTypeMember0ObjectEDataType,source,new String[]{"name","TemporalOperatorNameType_._member_._0:Object","baseType","TemporalOperatorNameType_._member_._0"});
  addAnnotation(temporalOperatorNameTypeMember1EDataType,source,new String[]{"name","TemporalOperatorNameType_._member_._1","baseType","http://www.eclipse.org/emf/2003/XMLType#string","pattern","extension:\\w{2,}"});
  addAnnotation(typeNamesListTypeEDataType,source,new String[]{"name","TypeNamesListType","itemType","TypeNamesType"});
  addAnnotation(typeNamesTypeEDataType,source,new String[]{"name","TypeNamesType","memberTypes","SchemaElement http://www.eclipse.org/emf/2003/XMLType#QName"});
  addAnnotation(uomIdentifierEDataType,source,new String[]{"name","UomIdentifier","memberTypes","UomSymbol UomURI"});
  addAnnotation(uomSymbolEDataType,source,new String[]{"name","UomSymbol","baseType","http://www.eclipse.org/emf/2003/XMLType#string","pattern","[^:%20\\n\\r\\t]+"});
  addAnnotation(uomURIEDataType,source,new String[]{"name","UomURI","baseType","http://www.eclipse.org/emf/2003/XMLType#anyURI","pattern","([a-zA-Z][a-zA-Z0-9\\-\\+\\.]*:|\\.\\./|\\./|#).*"});
  addAnnotation(versionActionTokensObjectEDataType,source,new String[]{"name","VersionActionTokens:Object","baseType","VersionActionTokens"});
  addAnnotation(versionTypeEDataType,source,new String[]{"name","VersionType","memberTypes","VersionActionTokens http://www.eclipse.org/emf/2003/XMLType#positiveInteger http://www.eclipse.org/emf/2003/XMLType#dateTime"});
}
