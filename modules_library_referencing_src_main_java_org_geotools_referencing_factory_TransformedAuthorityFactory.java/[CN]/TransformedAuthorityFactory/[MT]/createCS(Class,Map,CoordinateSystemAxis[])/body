{
  final int dimension=axis.length;
  final ReferencingFactoryContainer factories=getFactoryContainer(false);
  final CSFactory csFactory=factories.getCSFactory();
  if (CartesianCS.class.isAssignableFrom(type)) {
switch (dimension) {
case 2:
      return csFactory.createCartesianCS(properties,axis[0],axis[1]);
case 3:
    return csFactory.createCartesianCS(properties,axis[0],axis[1],axis[2]);
}
}
 else if (EllipsoidalCS.class.isAssignableFrom(type)) {
switch (dimension) {
case 2:
  return csFactory.createEllipsoidalCS(properties,axis[0],axis[1]);
case 3:
return csFactory.createEllipsoidalCS(properties,axis[0],axis[1],axis[2]);
}
}
 else if (SphericalCS.class.isAssignableFrom(type)) {
switch (dimension) {
case 3:
return csFactory.createSphericalCS(properties,axis[0],axis[1],axis[2]);
}
}
 else if (CylindricalCS.class.isAssignableFrom(type)) {
switch (dimension) {
case 3:
return csFactory.createCylindricalCS(properties,axis[0],axis[1],axis[2]);
}
}
 else if (PolarCS.class.isAssignableFrom(type)) {
switch (dimension) {
case 2:
return csFactory.createPolarCS(properties,axis[0],axis[1]);
}
}
 else if (VerticalCS.class.isAssignableFrom(type)) {
switch (dimension) {
case 1:
return csFactory.createVerticalCS(properties,axis[0]);
}
}
 else if (TimeCS.class.isAssignableFrom(type)) {
switch (dimension) {
case 1:
return csFactory.createTimeCS(properties,axis[0]);
}
}
 else if (LinearCS.class.isAssignableFrom(type)) {
switch (dimension) {
case 1:
return csFactory.createLinearCS(properties,axis[0]);
}
}
 else if (UserDefinedCS.class.isAssignableFrom(type)) {
switch (dimension) {
case 2:
return csFactory.createUserDefinedCS(properties,axis[0],axis[1]);
case 3:
return csFactory.createUserDefinedCS(properties,axis[0],axis[1],axis[2]);
}
}
throw new FactoryException(Errors.format(ErrorKeys.UNSUPPORTED_COORDINATE_SYSTEM_$1,type));
}
