{
  Preconditions.checkNotNull(featureType);
  SimpleFeatureType createType=featureType;
  LOGGER.info("Creating FeatureType " + createType.getName());
  if (getNames().contains(createType.getName())) {
    throw new IOException(createType.getName() + " already exists");
  }
{
    final String ignoreNamespace="http://www.opengis.net/gml";
    Name name=createType.getName();
    if ((ignoreNamespace.equals(name.getNamespaceURI()) || null == name.getNamespaceURI()) && null != defaultNamespace) {
      LOGGER.info("FeatureType to be created has no namespace, assigning DataStore's default: '" + defaultNamespace + "'");
      SimpleFeatureTypeBuilder builder=new SimpleFeatureTypeBuilder();
      builder.setName(createType.getName().getLocalPart());
      builder.setNamespaceURI(defaultNamespace);
      builder.addAll(createType.getAttributeDescriptors());
      createType=builder.buildFeatureType();
    }
  }
  final Name typeName=createType.getName();
  final RefDatabase refDatabase=repo.getRefDatabase();
  final ObjectDatabase objectDatabase=repo.getObjectDatabase();
  final Ref typesTreeRef=refDatabase.getRef(TYPE_NAMES_REF_TREE);
  Preconditions.checkState(typesTreeRef != null);
  final RevTree namespacesRootTree=objectDatabase.getTree(typesTreeRef.getObjectId());
  Preconditions.checkState(namespacesRootTree != null);
  final String namespace=null == typeName.getNamespaceURI() ? NULL_NAMESPACE : typeName.getNamespaceURI();
  final String localName=typeName.getLocalPart();
  try {
    final ObjectId featureTypeBlobId;
    featureTypeBlobId=objectDatabase.put(new HessianSimpleFeatureTypeWriter(createType));
    final List<String> namespaceTreePath=Collections.singletonList(namespace);
    MutableTree namespaceTree=objectDatabase.getOrCreateSubTree(namespacesRootTree,namespaceTreePath);
    namespaceTree.put(new Ref(localName,featureTypeBlobId,TYPE.BLOB));
    final MutableTree root=namespacesRootTree.mutable();
    final ObjectId newTypeRefsTreeId;
    newTypeRefsTreeId=objectDatabase.writeBack(root,namespaceTree,namespaceTreePath);
    final Ref newTypesTreeRef=new Ref(TYPE_NAMES_REF_TREE,newTypeRefsTreeId,TYPE.TREE);
    refDatabase.put(newTypesTreeRef);
  }
 catch (  IOException e) {
    throw e;
  }
catch (  Exception e) {
    Throwables.propagate(e);
  }
}
