{
  if (executorService == null) {
    ThreadFactory threadFactory=new ThreadFactory(){
      final AtomicInteger threadNumber=new AtomicInteger(1);
      public Thread newThread(      final Runnable r){
        StringBuilder name=new StringBuilder("SwingWorker-pool-");
        name.append(System.identityHashCode(this));
        name.append("-thread-");
        name.append(threadNumber.getAndIncrement());
        Thread t=new Thread(r,name.toString());
        ;
        if (t.isDaemon())         t.setDaemon(false);
        if (t.getPriority() != Thread.NORM_PRIORITY)         t.setPriority(Thread.NORM_PRIORITY);
        return t;
      }
    }
;
    executorService=new ThreadPoolExecutor(0,MAX_WORKER_THREADS,5L,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),threadFactory){
      private final ReentrantLock pauseLock=new ReentrantLock();
      private final Condition unpaused=pauseLock.newCondition();
      private boolean isPaused=false;
      private final ReentrantLock executeLock=new ReentrantLock();
      @Override public void execute(      Runnable command){
        executeLock.lock();
        try {
          pauseLock.lock();
          try {
            isPaused=true;
          }
  finally {
            pauseLock.unlock();
          }
          setCorePoolSize(MAX_WORKER_THREADS);
          super.execute(command);
          setCorePoolSize(0);
          pauseLock.lock();
          try {
            isPaused=false;
            unpaused.signalAll();
          }
  finally {
            pauseLock.unlock();
          }
        }
  finally {
          executeLock.unlock();
        }
      }
      @Override protected void afterExecute(      Runnable r,      Throwable t){
        super.afterExecute(r,t);
        pauseLock.lock();
        try {
          while (isPaused) {
            unpaused.await();
          }
        }
 catch (        InterruptedException ignore) {
        }
 finally {
          pauseLock.unlock();
        }
      }
    }
;
  }
  return executorService;
}
