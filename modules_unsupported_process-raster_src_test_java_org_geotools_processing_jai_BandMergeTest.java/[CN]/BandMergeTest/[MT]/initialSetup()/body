{
  images=new RenderedImage[6][4];
  byte noDataB=50;
  short noDataS=50;
  int noDataI=50;
  float noDataF=50;
  double noDataD=50;
  for (int band=0; band < BAND_NUMBER; band++) {
    images[DataBuffer.TYPE_BYTE][band]=createTestImage(DataBuffer.TYPE_BYTE,IMAGE_WIDTH,IMAGE_HEIGHT,noDataB,1);
    images[DataBuffer.TYPE_USHORT][band]=createTestImage(DataBuffer.TYPE_USHORT,IMAGE_WIDTH,IMAGE_HEIGHT,noDataS,1);
    images[DataBuffer.TYPE_SHORT][band]=createTestImage(DataBuffer.TYPE_SHORT,IMAGE_WIDTH,IMAGE_HEIGHT,noDataS,1);
    images[DataBuffer.TYPE_INT][band]=createTestImage(DataBuffer.TYPE_INT,IMAGE_WIDTH,IMAGE_HEIGHT,noDataI,1);
    images[DataBuffer.TYPE_FLOAT][band]=createTestImage(DataBuffer.TYPE_FLOAT,IMAGE_WIDTH,IMAGE_HEIGHT,noDataF,1);
    images[DataBuffer.TYPE_DOUBLE][band]=createTestImage(DataBuffer.TYPE_DOUBLE,IMAGE_WIDTH,IMAGE_HEIGHT,noDataD,1);
  }
  boolean minIncluded=true;
  boolean maxIncluded=true;
  noDataByte=new Range[]{RangeFactory.create(noDataB,minIncluded,noDataB,maxIncluded)};
  noDataUShort=new Range[]{RangeFactory.createU(noDataS,minIncluded,noDataS,maxIncluded)};
  noDataShort=new Range[]{RangeFactory.create(noDataS,minIncluded,noDataS,maxIncluded)};
  noDataInt=new Range[]{RangeFactory.create(noDataI,minIncluded,noDataI,maxIncluded)};
  noDataFloat=new Range[]{RangeFactory.create(noDataF,minIncluded,noDataF,maxIncluded,true)};
  noDataDouble=new Range[]{RangeFactory.create(noDataD,minIncluded,noDataD,maxIncluded,true)};
  destNoData=100;
  roiData=new ROIShape(new Rectangle(0,0,ROI_WIDTH,ROI_HEIGHT));
}
