{
  LOGGER.finer("Generating EnvelopesIntersect WHERE clause for " + filter);
  try {
    String spatialColumn=filter.getPropertyName();
    if (spatialColumn == null || spatialColumn.trim().length() == 0) {
      spatialColumn=featureType.getGeometryDescriptor().getLocalName();
    }
    Integer srid=getSRID(spatialColumn);
    if (srid == null) {
      throw new RuntimeException("Attribute: " + spatialColumn + " is not registered");
    }
    double minx=filter.getMinX();
    double maxx=filter.getMaxX();
    double miny=filter.getMinY();
    double maxy=filter.getMaxY();
    if (isLooseBBOXEnabled()) {
      this.out.write("db2gse.EnvelopesIntersect(");
      this.out.write(escapeName(spatialColumn));
      this.out.write(", ");
      this.out.write(minx + ", " + miny+ ", "+ maxx+ ", "+ maxy+ ", "+ srid);
      this.out.write(") = 1");
    }
 else {
      this.out.write("db2gse.st_intersects(");
      this.out.write(escapeName(spatialColumn));
      this.out.write(", ");
      GeometryFactory fac=new GeometryFactory();
      LinearRing linearRing=fac.createLinearRing(new Coordinate[]{new Coordinate(minx,miny),new Coordinate(maxx,miny),new Coordinate(maxx,maxy),new Coordinate(minx,maxy),new Coordinate(minx,miny)});
      Polygon poly=fac.createPolygon(linearRing,null);
      this.out.write("db2gse.st_polyfromtext('");
      WKTWriter writer=new WKTWriter();
      this.out.write(writer.write(poly));
      this.out.write("',");
      this.out.write(srid.toString());
      this.out.write(")) = 1");
    }
    addSelectivity();
  }
 catch (  java.io.IOException e) {
    LOGGER.warning("Filter not generated; I/O problem of some sort" + e);
  }
  return extraData;
}
