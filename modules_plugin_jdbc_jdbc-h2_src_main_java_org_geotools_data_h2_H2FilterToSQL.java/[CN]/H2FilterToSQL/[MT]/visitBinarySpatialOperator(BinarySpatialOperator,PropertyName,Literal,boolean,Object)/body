{
  try {
    if (filter instanceof DistanceBufferOperator) {
      out.write("ST_Distance(");
      property.accept(this,extraData);
      out.write(", ");
      geometry.accept(this,extraData);
      out.write(")");
      if (filter instanceof DWithin) {
        out.write("<");
      }
 else       if (filter instanceof Beyond) {
        out.write(">");
      }
 else {
        throw new RuntimeException("Unknown distance operator");
      }
      out.write(Double.toString(((DistanceBufferOperator)filter).getDistance()));
    }
 else     if (filter instanceof BBOX) {
      out.write("ST_Intersects(");
      property.accept(this,extraData);
      out.write(",");
      geometry.accept(this,extraData);
      out.write(")");
    }
 else {
      if (filter instanceof Contains) {
        out.write("ST_Contains(");
      }
 else       if (filter instanceof Crosses) {
        out.write("ST_Crosses(");
      }
 else       if (filter instanceof Disjoint) {
        out.write("ST_Disjoint(");
      }
 else       if (filter instanceof Equals) {
        out.write("ST_Equals(");
      }
 else       if (filter instanceof Intersects) {
        out.write("ST_Intersects(");
      }
 else       if (filter instanceof Overlaps) {
        out.write("ST_Overlaps(");
      }
 else       if (filter instanceof Touches) {
        out.write("ST_Touches(");
      }
 else       if (filter instanceof Within) {
        out.write("ST_Within(");
      }
 else {
        throw new RuntimeException("Unknown operator: " + filter);
      }
      if (swapped) {
        geometry.accept(this,extraData);
        out.write(", ");
        property.accept(this,extraData);
      }
 else {
        property.accept(this,extraData);
        out.write(", ");
        geometry.accept(this,extraData);
      }
      out.write(")");
    }
    if (!(filter instanceof Disjoint)) {
      String spatialIndex=(String)currentGeometry.getUserData().get(H2Dialect.H2_SPATIAL_INDEX);
      if (spatialIndex != null) {
        if (primaryKey.getColumns().size() == 1 && Number.class.isAssignableFrom(primaryKey.getColumns().get(0).getType())) {
          Envelope e=geometry.evaluate(null,Envelope.class);
          out.write(" AND ");
          out.write("\"" + primaryKey.getColumns().get(0).getName() + "\" ");
          out.write("IN (");
          out.write("SELECT CAST(HATBOX_JOIN_ID AS INT)");
          out.write(" FROM HATBOX_MBR_INTERSECTS_ENV(");
          if (databaseSchema != null) {
            out.write("'" + databaseSchema + "', ");
          }
 else {
            out.write("'PUBLIC', ");
          }
          out.write("'" + featureType.getTypeName() + "', ");
          out.write(e.getMinX() + ", " + e.getMaxX()+ ", "+ e.getMinY()+ ", "+ e.getMaxY());
          out.write(")");
          out.write(")");
        }
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return extraData;
}
