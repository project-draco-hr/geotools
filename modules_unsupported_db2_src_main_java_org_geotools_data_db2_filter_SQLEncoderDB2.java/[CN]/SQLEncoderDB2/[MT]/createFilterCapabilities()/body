{
  FilterCapabilities capabilities=new FilterCapabilities();
  capabilities.addAll(FilterCapabilities.SIMPLE_COMPARISONS_OPENGIS);
  for (Iterator i=getPredicateTable().keySet().iterator(); i.hasNext(); ) {
    capabilities.addType((Class)i.next());
  }
  capabilities.addType(PropertyIsLike.class);
  capabilities.addType(Id.class);
  capabilities.addType(FilterCapabilities.LOGIC_OR);
  capabilities.addType(FilterCapabilities.LOGIC_AND);
  capabilities.addType(FilterCapabilities.LOGIC_NOT);
  capabilities.addType(FilterCapabilities.COMPARE_EQUALS);
  capabilities.addType(FilterCapabilities.COMPARE_NOT_EQUALS);
  capabilities.addType(FilterCapabilities.COMPARE_LESS_THAN);
  capabilities.addType(FilterCapabilities.COMPARE_GREATER_THAN);
  capabilities.addType(FilterCapabilities.COMPARE_LESS_THAN_EQUAL);
  capabilities.addType(FilterCapabilities.COMPARE_GREATER_THAN_EQUAL);
  capabilities.addType(FilterCapabilities.LIKE);
  capabilities.addType(FilterCapabilities.NULL_CHECK);
  capabilities.addType(FilterCapabilities.BETWEEN);
  capabilities.addType(FilterCapabilities.FID);
  capabilities.addType(FilterCapabilities.NONE);
  capabilities.addType(FilterCapabilities.ALL);
  capabilities.addType(FilterCapabilities.SPATIAL_BBOX);
  capabilities.addType(FilterCapabilities.SPATIAL_CONTAINS);
  capabilities.addType(FilterCapabilities.SPATIAL_CROSSES);
  capabilities.addType(FilterCapabilities.SPATIAL_DISJOINT);
  capabilities.addType(FilterCapabilities.SPATIAL_EQUALS);
  capabilities.addType(FilterCapabilities.SPATIAL_INTERSECT);
  capabilities.addType(FilterCapabilities.SPATIAL_OVERLAPS);
  capabilities.addType(FilterCapabilities.SPATIAL_TOUCHES);
  capabilities.addType(FilterCapabilities.SPATIAL_WITHIN);
  capabilities.addType(FilterCapabilities.SPATIAL_DWITHIN);
  capabilities.addType(FilterCapabilities.SPATIAL_BEYOND);
  return capabilities;
}
