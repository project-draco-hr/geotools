{
  final int k=5;
  Object[] obj=GraphTestUtil.buildPerfectBinaryTree(builder(),k);
  final Node root=(Node)obj[0];
  final Map obj2node=(Map)obj[1];
  try {
    File victim=File.createTempFile("graph",null);
    victim.deleteOnExit();
    serializer().setProperty(SerializedReaderWriter.FILENAME,victim.getAbsolutePath());
    serializer().write(builder().getGraph());
    Graph before=builder().getGraph();
    Graph after=serializer().read();
    assertTrue(before.getNodes().size() == after.getNodes().size());
    assertTrue(before.getEdges().size() == after.getEdges().size());
    GraphVisitor visitor=new GraphVisitor(){
      public int visit(      Graphable component){
        DirectedNode n=(DirectedNode)component;
        String id=(String)n.getObject();
        assertTrue(obj2node.get(id) != null);
        StringTokenizer st=new StringTokenizer(id,".");
        if (st.countTokens() == 1) {
          assertTrue(n.getDegree() == 2);
          Node n0=((Edge)n.getEdges().get(0)).getOtherNode(n);
          Node n1=((Edge)n.getEdges().get(1)).getOtherNode(n);
          assertTrue(n0.getObject().equals("0.0") && n1.getObject().equals("0.1") || n0.getObject().equals("0.1") && n1.getObject().equals("0.0"));
        }
 else         if (st.countTokens() == k + 1) {
          assertTrue(n.getDegree() == 1);
          Node parent=((DirectedEdge)n.getInEdges().get(0)).getInNode();
          String parentid=(String)parent.getObject();
          assertTrue(parentid.equals(id.substring(0,id.length() - 2)));
        }
 else {
          assertTrue(n.getDegree() == 3);
          String parent=((DirectedEdge)n.getInEdges().get(0)).getInNode().getObject().toString();
          String c0=((DirectedEdge)n.getOutEdges().get(0)).getOutNode().getObject().toString();
          String c1=((DirectedEdge)n.getOutEdges().get(1)).getOutNode().getObject().toString();
          String parentid=id.substring(0,id.length() - 2);
          assertTrue(parent.equals(parentid) && c0.equals(id + ".0") && c1.equals(id + ".1") || parent.equals(parentid) && c1.equals(id + ".0") && c0.equals(id + ".1"));
        }
        return (0);
      }
    }
;
    after.visitNodes(visitor);
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(false);
  }
}
