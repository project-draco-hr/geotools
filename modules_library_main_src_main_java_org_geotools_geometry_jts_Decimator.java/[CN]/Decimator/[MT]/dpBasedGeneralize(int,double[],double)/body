{
  while (coords[0] == coords[(ncoords - 1) * 2] && coords[1] == coords[2 * ncoords - 1] && ncoords > 0) {
    ncoords--;
  }
  if (ncoords == 0) {
    return 0;
  }
  dpSimplifySection(0,ncoords - 1,coords,maxDistance);
  int actualCoords=1;
  for (int i=1; i < ncoords - 1; i++) {
    final double x=coords[i * 2];
    final double y=coords[i * 2 + 1];
    if (!Double.isNaN(x)) {
      coords[actualCoords * 2]=x;
      coords[actualCoords * 2 + 1]=y;
      actualCoords++;
    }
  }
  return actualCoords;
}
