{
  if (last - 1 <= first) {
    return;
  }
  double x0=coords[first * 2];
  double y0=coords[first * 2 + 1];
  double x1=coords[last * 2];
  double y1=coords[last * 2 + 1];
  double dx=x1 - x0;
  double dy=y1 - y0;
  double ls=dx * dx + dy * dy;
  int idx=-1;
  double dsmax=-1;
  for (int i=first + 1; i < last; i++) {
    double x=coords[i * 2];
    double y=coords[i * 2 + 1];
    double ds;
    double r=((x - x0) * dx + (y - y0) * dy) / ls;
    if (r <= 0.0) {
      ds=(x - x0) * (x - x0) + (y - y0) * (y - y0);
    }
 else     if (r >= 1.0) {
      ds=(x - x1) * (x - x1) + (y - y1) * (y - y1);
    }
 else {
      double s=((y0 - y) * dx - (x0 - x) * dy) / ls;
      ds=s * s * ls;
    }
    if (idx == -1 || ds > dsmax) {
      idx=i;
      dsmax=ds;
    }
  }
  if (dsmax <= maxDistanceSquared) {
    for (int i=first + 1; i < last; i++) {
      coords[i * 2]=Double.NaN;
      coords[i * 2 + 1]=Double.NaN;
    }
  }
 else {
    dpSimplifySection(first,idx,coords,maxDistanceSquared);
    dpSimplifySection(idx,last,coords,maxDistanceSquared);
  }
}
