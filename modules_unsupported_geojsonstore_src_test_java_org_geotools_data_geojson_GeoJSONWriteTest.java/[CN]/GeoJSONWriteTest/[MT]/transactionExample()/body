{
  Map<String,Serializable> params=new HashMap<String,Serializable>();
  params.put("url",url);
  DataStore store=DataStoreFinder.getDataStore(params);
  Transaction t1=new DefaultTransaction("transaction 1");
  Transaction t2=new DefaultTransaction("transactoin 2");
  SimpleFeatureType type=store.getSchema("locations");
  SimpleFeatureStore auto=(SimpleFeatureStore)store.getFeatureSource("locations");
  SimpleFeatureStore featureStore1=(SimpleFeatureStore)store.getFeatureSource("locations");
  SimpleFeatureStore featureStore2=(SimpleFeatureStore)store.getFeatureSource("locations");
  featureStore1.setTransaction(t1);
  featureStore2.setTransaction(t2);
  assertEquals("featureStore1 before",9,featureStore1.getFeatures().size());
  assertEquals("featureStore2 before",9,featureStore2.getFeatures().size());
  SimpleFeature first=DataUtilities.first(featureStore1.getFeatures());
  System.out.println(first);
  FilterFactory ff=CommonFactoryFinder.getFilterFactory(null);
  Filter filter1=ff.equal(ff.property("CITY"),ff.literal("Trento"),false);
  featureStore1.removeFeatures(filter1);
  assertEquals("auto after featureStore1 removes fid1",9,auto.getFeatures().size());
  assertEquals("featureStore1 after featureStore1 removes fid1",8,featureStore1.getFeatures().size());
  assertEquals("featureStore2 after featureStore1 removes fid1",9,featureStore2.getFeatures().size());
  SimpleFeature feature=SimpleFeatureBuilder.build(type,new Object[]{45.52,-122.681944,"Portland",800,2014},"locations-fid10");
  SimpleFeatureCollection collection=DataUtilities.collection(feature);
  featureStore2.addFeatures(collection);
  assertEquals("auto after featureStore1 removes fid1 and featureStore2 adds fid5",9,auto.getFeatures().size());
  assertEquals("featureStore1 after featureStore1 removes fid1 and featureStore2 adds fid5",8,featureStore1.getFeatures().size());
  assertEquals("featureStore2 after featureStore1 removes fid1 and featureStore2 adds fid5",10,featureStore2.getFeatures().size());
  t1.commit();
  assertEquals("auto after featureStore1 commits removal of fid1 (featureStore2 has added fid5)",8,auto.getFeatures().size());
  assertEquals("featureStore1 after commiting removal of fid1 (featureStore2 has added fid5)",8,featureStore1.getFeatures().size());
  assertEquals("featureStore2 after featureStore1 commits removal of fid1 (featureStore2 has added fid5)",9,featureStore2.getFeatures().size());
  t2.commit();
  assertEquals("auto after featureStore2 commits addition of fid5 (fid1 previously removed)",9,auto.getFeatures().size());
  assertEquals("featureStore1 after featureStore2 commits addition of fid5 (fid1 previously removed)",9,featureStore1.getFeatures().size());
  assertEquals("featureStore2 after commiting addition of fid5 (fid1 previously removed)",9,featureStore2.getFeatures().size());
  t1.close();
  t2.close();
  store.dispose();
}
