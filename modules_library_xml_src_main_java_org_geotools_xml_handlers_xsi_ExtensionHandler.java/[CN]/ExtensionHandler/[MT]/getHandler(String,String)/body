{
  if (SchemaHandler.namespaceURI.equalsIgnoreCase(namespaceURI)) {
    logger.fine("Getting Handler for " + localName + " inside Extension");
    if (AllHandler.LOCALNAME.equalsIgnoreCase(localName)) {
      AllHandler ah=new AllHandler();
      if (child == null) {
        child=ah;
      }
 else {
        throw new SAXNotRecognizedException(getLocalName() + " may only have one '" + AllHandler.LOCALNAME+ "' declaration.");
      }
      return ah;
    }
    if (AttributeHandler.LOCALNAME.equalsIgnoreCase(localName)) {
      if (attributeDec == null) {
        attributeDec=new LinkedList();
      }
      AttributeHandler ah=new AttributeHandler();
      attributeDec.add(ah);
      return ah;
    }
    if (AttributeGroupHandler.LOCALNAME.equalsIgnoreCase(localName)) {
      if (attributeDec == null) {
        attributeDec=new LinkedList();
      }
      AttributeGroupHandler ah=new AttributeGroupHandler();
      attributeDec.add(ah);
      return ah;
    }
    if (ChoiceHandler.LOCALNAME.equalsIgnoreCase(localName)) {
      ChoiceHandler ah=new ChoiceHandler();
      if (child == null) {
        child=ah;
      }
 else {
        throw new SAXNotRecognizedException(getLocalName() + " may only have one '" + ChoiceHandler.LOCALNAME+ "' declaration.");
      }
      return ah;
    }
    if (GroupHandler.LOCALNAME.equalsIgnoreCase(localName)) {
      GroupHandler ah=new GroupHandler();
      if (child == null) {
        child=ah;
      }
 else {
        throw new SAXNotRecognizedException(getLocalName() + " may only have one '" + GroupHandler.LOCALNAME+ "' declaration.");
      }
      return ah;
    }
    if (SequenceHandler.LOCALNAME.equalsIgnoreCase(localName)) {
      SequenceHandler ah=new SequenceHandler();
      if (child == null) {
        child=ah;
      }
 else {
        throw new SAXNotRecognizedException(getLocalName() + " may only have one '" + SequenceHandler.LOCALNAME+ "' declaration.");
      }
      return ah;
    }
  }
  logger.info("Handler not found for " + localName + " in Extension");
  return null;
}
