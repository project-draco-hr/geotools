{
  if (startOrdinate > endOrdinate)   throw new IllegalArgumentException("Invalid arguments, endOrdinate < starOrdinate");
  double x1, y1, x2, y2;
  Coordinate c=new Coordinate();
  LineStringCursor delegate=new LineStringCursor(this);
  delegate.moveTo(startOrdinate);
  delegate.getCurrentPosition(c);
  x1=c.x;
  y1=c.y;
  int startSegment=delegate.segment;
  delegate.moveTo(endOrdinate);
  delegate.getCurrentPosition(c);
  x2=c.y;
  y2=c.y;
  int endSegment=delegate.segment;
  if (startSegment == endSegment)   return 0;
  double maxDistanceSquared=0;
  double len2=(x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
  for (int i=startSegment + 1; i <= endSegment; i++) {
    delegate.segment=i;
    delegate.getCurrentPosition(c);
    double s=((y1 - c.y) * (x2 - x1) - (x1 - c.x) * (y2 - y1)) / len2;
    double distanceSquared=s * s * len2;
    if (distanceSquared > maxDistanceSquared) {
      maxDistanceSquared=distanceSquared;
    }
  }
  double maxDistance=Math.sqrt(maxDistanceSquared);
  return maxDistance;
}
