{
  DataStore store=null;
  TIFFImageReader reader=null;
  GridCoverage2D coverage2D=null;
  GridCoverage2D covClassificator=null;
  SimpleFeatureIterator iterator=null;
  try {
    final File fileshp=TestData.file(this,"testpolygon.shp");
    store=FileDataStoreFinder.getDataStore(fileshp.toURI().toURL());
    assertNotNull(store);
    assertTrue(store instanceof ShapefileDataStore);
    FeatureSource<SimpleFeatureType,SimpleFeature> featureSource=store.getFeatureSource(store.getNames().get(0));
    SimpleFeatureCollection featureCollection=(SimpleFeatureCollection)featureSource.getFeatures();
    final File tiff=TestData.file(this,"test.tif");
    final File tfw=TestData.file(this,"test.tfw");
    reader=(it.geosolutions.imageioimpl.plugins.tiff.TIFFImageReader)new TIFFImageReaderSpi().createReaderInstance();
    assertNotNull(reader);
    reader.setInput(ImageIO.createImageInputStream(tiff));
    final BufferedImage image=reader.read(0);
    final MathTransform transform=new WorldFileReader(tfw).getTransform();
    coverage2D=CoverageFactoryFinder.getGridCoverageFactory(null).create("coverage",image,new GridGeometry2D(new GridEnvelope2D(PlanarImage.wrapRenderedImage(image).getBounds()),transform,DefaultGeographicCRS.WGS84),new GridSampleDimension[]{new GridSampleDimension("coverage")},null,null);
    assertNotNull(coverage2D);
    final BufferedImage imageClassificator=new BufferedImage(120,80,BufferedImage.TYPE_BYTE_INDEXED);
    final WritableRaster raster=imageClassificator.getRaster();
    for (int i=raster.getWidth(); --i >= 0; ) {
      for (int j=raster.getHeight(); --j >= 0; ) {
        int sampleValue=(i % 2 == 0) ? 1 : 2;
        raster.setSample(i,j,0,sampleValue);
      }
    }
    covClassificator=CoverageFactoryFinder.getGridCoverageFactory(null).create("coverageClassificator",imageClassificator,new GridGeometry2D(new GridEnvelope2D(PlanarImage.wrapRenderedImage(imageClassificator).getBounds()),coverage2D.getEnvelope()),new GridSampleDimension[]{new GridSampleDimension("coverage")},null,null);
    assertNotNull(coverage2D);
    SimpleFeatureCollection sfc=process.execute(coverage2D,null,featureCollection,covClassificator);
    iterator=sfc.features();
    assertNotNull(iterator);
    while (iterator.hasNext()) {
      SimpleFeature feature=iterator.next();
      assertTrue((feature.toString()).equals(results.get(feature.getID() + feature.getAttribute("classification"))));
    }
  }
  finally {
    try {
      if (store != null) {
        store.dispose();
      }
    }
 catch (    Exception e) {
    }
    try {
      if (reader != null) {
        reader.dispose();
      }
    }
 catch (    Exception e) {
    }
    try {
      if (coverage2D != null) {
        coverage2D.dispose(true);
      }
    }
 catch (    Exception e) {
    }
    try {
      if (covClassificator != null) {
        covClassificator.dispose(true);
      }
    }
 catch (    Exception e) {
    }
    try {
      if (iterator != null) {
        iterator.close();
      }
    }
 catch (    Exception e) {
    }
  }
}
