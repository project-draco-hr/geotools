{
  final Map<String,Serializable> params=new HashMap<String,Serializable>();
  params.put("ScanTypeNames",Boolean.valueOf(true));
  final URL url=new URL("file:" + DataUtilities.urlToFile(TestData.url(this,".IASI_C_EUMP_20121120062959_31590_eps_o_l2")));
  params.put("ParentLocation",url);
  params.put("database",url + "/IASI_C_EUMP_20121120062959_31590_eps_o_l2");
  params.put("dbtype","h2");
  params.put("user","geotools");
  params.put("passwd","geotools");
  assertTrue(CoverageSlicesCatalog.INTERNAL_STORE_SPI.canProcess(params));
  DataStore ds=null;
  SimpleFeatureIterator it=null;
  try {
    ds=CoverageSlicesCatalog.INTERNAL_STORE_SPI.createDataStore(params);
    assertNotNull(ds);
    final String[] typeNames=ds.getTypeNames();
    assertNotNull(typeNames);
    assertEquals(20,typeNames.length);
    assertEquals("atmospheric_water_vapor",typeNames[2]);
    assertEquals("cloud_top_temperature",typeNames[5]);
    assertEquals("integrated_ozone",typeNames[11]);
    final SimpleFeatureSource fs=ds.getFeatureSource("surface_emissivity");
    assertNotNull(fs);
    final SimpleFeatureType schema=fs.getSchema();
    assertNotNull(schema);
    assertTrue(fs.getCount(Query.ALL) > 0);
    final Query q=new Query();
    q.setTypeName("surface_emissivity");
    q.setFilter(ff.greaterOrEqual(ff.property("new"),ff.literal(0)));
    assertTrue(fs.getCount(q) > 0);
    final SimpleFeatureCollection fc=fs.getFeatures(q);
    assertFalse(fc.isEmpty());
    it=fc.features();
    while (it.hasNext()) {
      final SimpleFeature feat=it.next();
      System.out.println(feat.getAttribute("new"));
      assertTrue((Integer)feat.getAttribute("new") >= 0);
    }
  }
  finally {
    if (ds != null) {
      ds.dispose();
    }
    if (it != null) {
      it.close();
    }
  }
}
