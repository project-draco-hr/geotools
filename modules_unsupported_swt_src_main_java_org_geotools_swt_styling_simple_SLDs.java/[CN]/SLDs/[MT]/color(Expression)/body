{
  if (expr == null) {
    return null;
  }
  try {
    return expr.evaluate(null,Color.class);
  }
 catch (  Throwable t) {
class ColorVisitor implements ExpressionVisitor {
      Color found;
      public Object visit(      Literal expr,      Object data){
        if (found != null)         return null;
        try {
          Color color=expr.evaluate(expr,Color.class);
          if (color != null) {
            found=color;
          }
        }
 catch (        Throwable t) {
        }
        return data;
      }
      public Object visit(      NilExpression arg0,      Object data){
        return data;
      }
      public Object visit(      Add arg0,      Object data){
        return data;
      }
      public Object visit(      Divide arg0,      Object data){
        return null;
      }
      public Object visit(      Function function,      Object data){
        for (        Expression param : function.getParameters()) {
          param.accept(this,data);
        }
        return data;
      }
      public Object visit(      Multiply arg0,      Object data){
        return data;
      }
      public Object visit(      PropertyName arg0,      Object data){
        return data;
      }
      public Object visit(      Subtract arg0,      Object data){
        return data;
      }
    }
    ColorVisitor search=new ColorVisitor();
    expr.accept(search,null);
    return search.found;
  }
}
