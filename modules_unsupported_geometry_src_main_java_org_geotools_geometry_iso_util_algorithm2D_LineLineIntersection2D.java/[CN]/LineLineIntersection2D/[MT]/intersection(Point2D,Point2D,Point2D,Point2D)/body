{
  if (AlgoLine2D.isParallel(p0,p1,q0,q1)) {
    double[] result=new double[4];
    result[0]=java.lang.Double.NaN;
    result[1]=java.lang.Double.NaN;
    result[2]=java.lang.Double.NaN;
    result[3]=java.lang.Double.NaN;
    result[0]=AlgoLine2D.constrParamForPoint(p0,p1,q0);
    result[1]=AlgoLine2D.constrParamForPoint(p0,p1,q1);
    result[2]=AlgoLine2D.constrParamForPoint(q0,q1,p0);
    result[3]=AlgoLine2D.constrParamForPoint(q0,q1,p1);
    for (int i=0; i <= 3; ++i) {
      if (result[i] < 0.0 || result[i] > 1.0)       result[i]=java.lang.Double.NaN;
    }
    return result;
  }
 else {
    double[] result=new double[2];
    result[0]=java.lang.Double.NaN;
    result[1]=java.lang.Double.NaN;
    Point2D ep=AlgoPoint2D.subtract(p1,p0);
    Point2D eq=AlgoPoint2D.subtract(q1,q0);
    Point2D pq=AlgoPoint2D.subtract(q0,p0);
    double det=AlgoPoint2D.cross(ep,eq);
    double rp=AlgoPoint2D.cross(pq,eq) / det;
    double rq=AlgoPoint2D.cross(pq,ep) / det;
    double eps=AlgoPoint2D.EPSILONSQ;
    if (Math.abs(rp) < eps)     rp=0.0;
    if (Math.abs(rp - 1.0) < eps)     rp=1.0;
    if (Math.abs(rq) < eps)     rq=0.0;
    if (Math.abs(rq - 1.0) < eps)     rq=1.0;
    if (rp < 0.0 || rp > 1.0)     rp=java.lang.Double.NaN;
    if (rq < 0.0 || rq > 1.0)     rq=java.lang.Double.NaN;
    result[0]=rp;
    result[1]=rq;
    return result;
  }
}
