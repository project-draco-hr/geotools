{
  Selector selector=rule.getSelector();
  List<SLDSelector> ruleCoverage=toSLDSelectors(selector,targetFeatureType);
  if (generatedSelectors.contains(ruleCoverage)) {
    return Collections.emptyList();
  }
 else {
    generatedSelectors.add(ruleCoverage);
  }
  if (!exclusiveRulesEnabled) {
    return coverageToRules(rule,ruleCoverage);
  }
  if (elements.isEmpty()) {
    elements.addAll(ruleCoverage);
    return coverageToRules(rule,ruleCoverage);
  }
 else {
    List<SLDSelector> reducedCoverage=new ArrayList<>(ruleCoverage);
    for (    SLDSelector element : elements) {
      List<SLDSelector> difference=new ArrayList<>();
      for (      SLDSelector rc : reducedCoverage) {
        List<SLDSelector> ruleDifference=rc.difference(element);
        difference.addAll(ruleDifference);
      }
      reducedCoverage=difference;
      if (reducedCoverage.isEmpty()) {
        break;
      }
    }
    if (!reducedCoverage.isEmpty()) {
      List<CssRule> derivedRules=new ArrayList<>();
      for (      SLDSelector rc : reducedCoverage) {
        derivedRules.add(new CssRule(rc.toSelector(simplifier),rule.getProperties(),rule.getComment()));
      }
      elements.addAll(reducedCoverage);
      Collections.sort(elements,new SLDSelectorComparator());
      List<SLDSelector> combined=new ArrayList<>();
      SLDSelector prev=null;
      for (      SLDSelector ss : elements) {
        if (prev == null) {
          prev=ss;
        }
 else         if (prev.scaleRange.equals(ss.scaleRange)) {
          org.opengis.filter.Or or=FF.or(ss.filter,prev.filter);
          Filter simplified=simplify(or);
          prev=new SLDSelector(prev.scaleRange,simplified);
        }
 else {
          combined.add(prev);
          prev=ss;
        }
      }
      if (prev != null) {
        combined.add(prev);
      }
      this.elements=combined;
      return derivedRules;
    }
 else {
      return Collections.emptyList();
    }
  }
}
