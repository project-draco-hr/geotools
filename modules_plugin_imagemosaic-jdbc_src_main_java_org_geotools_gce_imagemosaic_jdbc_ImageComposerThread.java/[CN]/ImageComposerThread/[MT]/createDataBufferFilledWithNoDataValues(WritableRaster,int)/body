{
  int dataType=raster.getDataBuffer().getDataType();
  Number noDataValue=levelInfo.getNoDataValue();
  int dataBufferSize=raster.getDataBuffer().getSize();
  int nrBanks=raster.getDataBuffer().getNumBanks();
  DataBuffer dataBuffer;
switch (dataType) {
case DataBuffer.TYPE_INT:
    int[][] intDataArray=new int[nrBanks][dataBufferSize];
  if (noDataValue != null) {
    for (int i=0; i < nrBanks; i++)     Arrays.fill(intDataArray[i],noDataValue.intValue());
  }
dataBuffer=new DataBufferInt(intDataArray,dataBufferSize);
break;
case DataBuffer.TYPE_FLOAT:
float[][] floatDataArray=new float[nrBanks][dataBufferSize];
if (noDataValue != null) {
for (int i=0; i < nrBanks; i++) Arrays.fill(floatDataArray[i],noDataValue.floatValue());
}
dataBuffer=new DataBufferFloat(floatDataArray,dataBufferSize);
break;
case DataBuffer.TYPE_DOUBLE:
double[][] doubleDataArray=new double[nrBanks][dataBufferSize];
if (noDataValue != null) {
for (int i=0; i < nrBanks; i++) Arrays.fill(doubleDataArray[i],noDataValue.doubleValue());
}
dataBuffer=new DataBufferDouble(doubleDataArray,dataBufferSize);
break;
case DataBuffer.TYPE_SHORT:
short[][] shortDataArray=new short[nrBanks][dataBufferSize];
if (noDataValue != null) {
for (int i=0; i < nrBanks; i++) Arrays.fill(shortDataArray[i],noDataValue.shortValue());
}
dataBuffer=new DataBufferShort(shortDataArray,dataBufferSize);
break;
case DataBuffer.TYPE_BYTE:
byte[][] byteDataArray=new byte[nrBanks][dataBufferSize];
if (noDataValue != null) {
for (int i=0; i < nrBanks; i++) Arrays.fill(byteDataArray[i],noDataValue.byteValue());
}
dataBuffer=new DataBufferByte(byteDataArray,dataBufferSize);
break;
case DataBuffer.TYPE_USHORT:
short[][] ushortDataArray=new short[nrBanks][dataBufferSize];
if (noDataValue != null) {
for (int i=0; i < nrBanks; i++) Arrays.fill(ushortDataArray[i],noDataValue.shortValue());
}
dataBuffer=new DataBufferUShort(ushortDataArray,dataBufferSize);
break;
default :
throw new IllegalStateException("Couldn't create DataBuffer for  data type " + dataType + " and "+ pixelSize+ " pixel size");
}
return dataBuffer;
}
