{
  Utilities.ensureNonNull("params",params);
  try {
    slicesIndexStore=INTERNAL_STORE_SPI.createDataStore(params);
    String typeName=null;
    boolean scanForTypeNames=false;
    if (params.containsKey("TypeName")) {
      typeName=(String)params.get("TypeName");
    }
    if (params.containsKey(SCAN_FOR_TYPENAMES)) {
      scanForTypeNames=(Boolean)params.get(SCAN_FOR_TYPENAMES);
    }
    if (scanForTypeNames) {
      String[] typeNames=slicesIndexStore.getTypeNames();
      if (typeNames != null) {
        for (        String tn : typeNames) {
          this.typeNames.add(tn);
        }
      }
    }
 else     if (typeName != null) {
      addTypeName(typeName,false);
    }
    if (this.typeNames.size() > 0) {
      extractBasicProperties(typeNames.iterator().next());
    }
 else {
      extractBasicProperties(typeName);
    }
  }
 catch (  Throwable e) {
    try {
      if (slicesIndexStore != null) {
        slicesIndexStore.dispose();
      }
    }
 catch (    Throwable e1) {
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.log(Level.FINE,e1.getLocalizedMessage(),e1);
      }
    }
 finally {
      slicesIndexStore=null;
    }
    throw new IllegalArgumentException(e);
  }
}
