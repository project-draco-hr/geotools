{
  if (!super.parseArgs(args))   return false;
  inputLocation=new File((String)getOptionValue(locationOpt));
  if (hasOption(outputLocationOpt))   outputLocation=new File((String)getOptionValue(outputLocationOpt));
 else   outputLocation=new File(inputLocation.getParentFile(),"pyramid");
  if (hasOption(nameOpt))   name=(String)getOptionValue(nameOpt);
 else   name="pyramid";
  overwriteOutputDirs=hasOption(overwriteOpt);
  final String tileDim=(String)getOptionValue(tileDimOpt);
  String[] pairs=tileDim.split(",");
  tileW=Integer.parseInt(pairs[0]);
  tileH=Integer.parseInt(pairs[1]);
  final String scaleF=(String)getOptionValue(scaleFactorOpt);
  scaleFactor=Integer.parseInt(scaleF);
  scaleAlgorithm=(String)getOptionValue(scaleAlgorithmOpt);
  if (scaleAlgorithm == null)   scaleAlgorithm="nn";
  numSteps=Integer.parseInt((String)getOptionValue(numStepsOpt));
  if (hasOption(compressionTypeOpt)) {
    compressionScheme=(String)getOptionValue(compressionTypeOpt);
    if (compressionScheme == "")     compressionScheme=null;
  }
  if (hasOption(compressionRatioOpt)) {
    try {
      compressionRatio=Double.parseDouble((String)getOptionValue(compressionRatioOpt));
    }
 catch (    Exception e) {
      compressionRatio=Double.NaN;
    }
  }
  final String internalTileDim=(String)getOptionValue(internalTileDimOpt);
  if (internalTileDim != null && internalTileDim.length() > 0) {
    pairs=internalTileDim.split(",");
    internalTileWidth=Integer.parseInt(pairs[0]);
    internalTileHeight=Integer.parseInt(pairs[1]);
  }
 else {
    internalTileWidth=tileW;
    internalTileHeight=tileH;
  }
  return true;
}
