{
  if (hostnameDefined) {
    CatalogBuilder builder=null;
    ImageMosaicReader reader=null;
    FileInputStream inStream=null;
    CatalogBuilderConfiguration c1=new CatalogBuilderConfiguration();
    c1.setIndexName("shpindex");
    c1.setLocationAttribute("location");
    c1.setAbsolute(false);
    c1.setRootMosaicDirectory(TestData.file(this,"/caching").toString());
    c1.setIndexingDirectories(Arrays.asList(TestData.file(this,"/caching").toString()));
    Properties prop=new Properties();
    try {
      c1.setCaching(false);
      builder=new CatalogBuilder(c1);
      builder.addProcessingEventListener(new CatalogBuilderListener());
      builder.run();
      final File relativeMosaic=TestData.file(this,"/caching/" + c1.getIndexName() + ".shp");
      final File propertiesFile=TestData.file(this,"/caching/" + c1.getIndexName() + ".properties");
      assertTrue(relativeMosaic.exists());
      inStream=new FileInputStream(propertiesFile);
      prop.load(inStream);
      String value=prop.getProperty("Caching");
      assertNotNull(value);
      assertTrue(value.toLowerCase().equals("false"));
      assertTrue(new ImageMosaicFormat().accepts(relativeMosaic));
      reader=(ImageMosaicReader)new ImageMosaicReader(relativeMosaic);
      GranuleCatalog catalog=reader.rasterManager.granuleCatalog;
      assertTrue(catalog.getClass().toString().endsWith("GTDataStoreGranuleCatalog"));
    }
  finally {
      if (inStream != null) {
        IOUtils.closeQuietly(inStream);
      }
      try {
        if (reader != null) {
          reader.dispose();
        }
      }
 catch (      Throwable t) {
      }
    }
    try {
      c1.setCaching(true);
      builder=new CatalogBuilder(c1);
      builder.addProcessingEventListener(new CatalogBuilderListener());
      builder.run();
      final File relativeMosaic=TestData.file(this,"/caching/" + c1.getIndexName() + ".shp");
      final File propertiesFile=TestData.file(this,"/caching/" + c1.getIndexName() + ".properties");
      inStream=new FileInputStream(propertiesFile);
      prop.load(inStream);
      String value=prop.getProperty("Caching");
      assertNotNull(value);
      assertTrue(value.toLowerCase().equals("true"));
      assertTrue(relativeMosaic.exists());
      assertTrue(new ImageMosaicFormat().accepts(relativeMosaic));
      reader=(ImageMosaicReader)new ImageMosaicReader(relativeMosaic);
      GranuleCatalog catalog=reader.rasterManager.granuleCatalog;
      assertTrue(catalog.getClass().toString().endsWith("STRTreeGranuleCatalog"));
    }
  finally {
      if (inStream != null) {
        IOUtils.closeQuietly(inStream);
      }
      try {
        if (reader != null) {
          reader.dispose();
        }
      }
 catch (      Throwable t) {
      }
    }
  }
}
