{
  if (hostnameDefined) {
    ImageMosaicDirectoryWalker builder=null;
    ImageMosaicReader reader=null;
    FileInputStream inStream=null;
    CatalogBuilderConfiguration c1=new CatalogBuilderConfiguration();
    c1.setParameter(Prop.INDEX_NAME,"shpindex");
    c1.setParameter(Prop.LOCATION_ATTRIBUTE,"location");
    c1.setParameter(Prop.ABSOLUTE_PATH,"false");
    c1.setParameter(Prop.ROOT_MOSAIC_DIR,TestData.file(this,"/caching").toString());
    c1.setParameter(Prop.INDEXING_DIRECTORIES,TestData.file(this,"/caching").toString());
    Properties prop=new Properties();
    try {
      c1.setParameter(Prop.CACHING,"false");
      ImageMosaicEventHandlers eventHandler=new ImageMosaicEventHandlers();
      final ImageMosaicConfigHandler catalogHandler=new ImageMosaicConfigHandler(c1,eventHandler);
      builder=new ImageMosaicDirectoryWalker(catalogHandler,eventHandler);
      eventHandler.addProcessingEventListener(new CatalogBuilderListener());
      builder.run();
      final File relativeMosaic=TestData.file(this,"/caching/" + c1.getIndexName() + ".shp");
      final File propertiesFile=TestData.file(this,"/caching/" + c1.getIndexName() + ".properties");
      assertTrue(relativeMosaic.exists());
      inStream=new FileInputStream(propertiesFile);
      prop.load(inStream);
      String value=prop.getProperty("Caching");
      assertNotNull(value);
      assertTrue(value.toLowerCase().equals("false"));
      assertTrue(new ImageMosaicFormat().accepts(relativeMosaic));
      reader=(ImageMosaicReader)new ImageMosaicReader(relativeMosaic);
      GranuleCatalog catalog=reader.getRasterManager(reader.defaultName).granuleCatalog;
      assertTrue(catalog.getClass().toString().endsWith("GTDataStoreGranuleCatalog"));
    }
  finally {
      if (inStream != null) {
        IOUtils.closeQuietly(inStream);
      }
      try {
        if (reader != null) {
          reader.dispose();
        }
      }
 catch (      Throwable t) {
      }
    }
    try {
      c1.setParameter(Prop.CACHING,"true");
      ImageMosaicEventHandlers eventHandler=new ImageMosaicEventHandlers();
      final ImageMosaicConfigHandler catalogHandler=new ImageMosaicConfigHandler(c1,eventHandler);
      builder=new ImageMosaicDirectoryWalker(catalogHandler,eventHandler);
      eventHandler.addProcessingEventListener(new CatalogBuilderListener());
      builder.run();
      final File relativeMosaic=TestData.file(this,"/caching/" + c1.getIndexName() + ".shp");
      final File propertiesFile=TestData.file(this,"/caching/" + c1.getIndexName() + ".properties");
      inStream=new FileInputStream(propertiesFile);
      prop.load(inStream);
      String value=prop.getProperty("Caching");
      assertNotNull(value);
      assertTrue(value.toLowerCase().equals("true"));
      assertTrue(relativeMosaic.exists());
      assertTrue(new ImageMosaicFormat().accepts(relativeMosaic));
      reader=(ImageMosaicReader)new ImageMosaicReader(relativeMosaic);
      GranuleCatalog catalog=reader.getRasterManager(reader.defaultName).granuleCatalog;
      assertTrue(catalog.getClass().toString().endsWith("STRTreeGranuleCatalog"));
    }
  finally {
      if (inStream != null) {
        IOUtils.closeQuietly(inStream);
      }
      try {
        if (reader != null) {
          reader.dispose();
        }
      }
 catch (      Throwable t) {
      }
    }
  }
}
