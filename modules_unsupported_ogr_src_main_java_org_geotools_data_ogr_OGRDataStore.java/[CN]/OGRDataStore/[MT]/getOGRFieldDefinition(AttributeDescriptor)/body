{
  final Class type=at.getType().getBinding();
  final FieldDefn def;
  if (Boolean.class.equals(type)) {
    def=new FieldDefn(at.getLocalName(),ogr.OFTString);
    def.SetWidth(5);
  }
 else   if (Byte.class.equals(type)) {
    def=new FieldDefn(at.getLocalName(),ogr.OFTInteger);
    def.SetWidth(3);
    def.SetJustify(ogr.OJRight);
  }
 else   if (Short.class.equals(type)) {
    def=new FieldDefn(at.getLocalName(),ogr.OFTInteger);
    def.SetWidth(5);
    def.SetJustify(ogr.OJRight);
  }
 else   if (Integer.class.equals(type)) {
    def=new FieldDefn(at.getLocalName(),ogr.OFTInteger);
    def.SetWidth(9);
    def.SetJustify(ogr.OJRight);
  }
 else   if (Long.class.equals(type)) {
    def=new FieldDefn(at.getLocalName(),ogr.OFTInteger);
    def.SetWidth(19);
    def.SetJustify(ogr.OJRight);
  }
 else   if (BigInteger.class.equals(type)) {
    def=new FieldDefn(at.getLocalName(),ogr.OFTInteger);
    def.SetWidth(32);
    def.SetJustify(ogr.OJRight);
  }
 else   if (BigDecimal.class.equals(type)) {
    def=new FieldDefn(at.getLocalName(),ogr.OFTReal);
    def.SetWidth(32);
    def.SetPrecision(15);
    def.SetJustify(ogr.OJRight);
  }
 else   if (Float.class.equals(type)) {
    def=new FieldDefn(at.getLocalName(),ogr.OFTReal);
    def.SetWidth(12);
    def.SetPrecision(7);
    def.SetJustify(ogr.OJRight);
  }
 else   if (Double.class.equals(type) || Number.class.isAssignableFrom(type)) {
    def=new FieldDefn(at.getLocalName(),ogr.OFTReal);
    def.SetWidth(22);
    def.SetPrecision(16);
    def.SetJustify(ogr.OJRight);
  }
 else   if (String.class.equals(type)) {
    def=new FieldDefn(at.getLocalName(),ogr.OFTString);
    def.SetWidth(255);
  }
 else   if (byte[].class.equals(type)) {
    def=new FieldDefn(at.getLocalName(),ogr.OFTBinary);
  }
 else   if (java.util.Date.class.isAssignableFrom(type)) {
    def=new FieldDefn(at.getLocalName(),ogr.OFTDateTime);
  }
 else {
    throw new IOException("Cannot map " + type + " to an OGR type");
  }
  return def;
}
