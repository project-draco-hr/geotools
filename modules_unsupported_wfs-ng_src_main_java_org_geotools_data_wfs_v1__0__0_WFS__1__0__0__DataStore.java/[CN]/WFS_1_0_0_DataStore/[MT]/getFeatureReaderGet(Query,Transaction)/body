{
  URL getUrl=capabilities.getGetFeature().getGet();
  if (getUrl == null) {
    return null;
  }
  String query=getUrl.getQuery();
  query=query == null ? null : query.toUpperCase();
  String url=getUrl.toString();
  if ((query == null) || "".equals(query)) {
    if ((url == null) || !url.endsWith("?")) {
      url+="?";
    }
    url+="SERVICE=WFS";
  }
 else {
    if (query.indexOf("SERVICE=WFS") == -1) {
      url+="&SERVICE=WFS";
    }
  }
  if ((query == null) || (query.indexOf("VERSION") == -1)) {
    url+="&VERSION=1.0.0";
  }
  if ((query == null) || (query.indexOf("REQUEST") == -1)) {
    url+="&REQUEST=GetFeature";
  }
  if (request != null) {
    if (request.getMaxFeatures() != Query.DEFAULT_MAX) {
      url+=("&MAXFEATURES=" + request.getMaxFeatures());
    }
    if (request.getFilter() != null) {
      if (Filters.getFilterType(request.getFilter()) == FilterType.GEOMETRY_BBOX) {
        String bb=printBBoxGet(((GeometryFilter)request.getFilter()),request.getTypeName());
        if (bb != null)         url+=("&BBOX=" + URLEncoder.encode(bb,protocolHandler.getEncoding()));
      }
 else {
        if (Filters.getFilterType(request.getFilter()) == FilterType.FID) {
          FidFilter ff=(FidFilter)request.getFilter();
          if ((ff.getFids() != null) && (ff.getFids().length > 0)) {
            url+=("&FEATUREID=" + ff.getFids()[0]);
            for (int i=1; i < ff.getFids().length; i++) {
              url+=("," + ff.getFids()[i]);
            }
          }
        }
 else {
          if (request.getFilter() != Filter.INCLUDE && request.getFilter() != Filter.EXCLUDE) {
            url+="&FILTER=" + URLEncoder.encode(printFilter(request.getFilter()),protocolHandler.getEncoding());
          }
        }
      }
    }
  }
  url+=("&TYPENAME=" + URLEncoder.encode(request.getTypeName(),protocolHandler.getEncoding()));
  Logging.getLogger("org.geotools.data.wfs").fine(url);
  Logging.getLogger("org.geotools.data.communication").fine("Output: " + url);
  getUrl=new URL(url);
  HttpURLConnection hc=protocolHandler.getConnectionFactory().getConnection(getUrl,GET);
  InputStream is=protocolHandler.getConnectionFactory().getInputStream(hc);
  WFSTransactionState ts=null;
  if (!(transaction == Transaction.AUTO_COMMIT)) {
    ts=(WFSTransactionState)transaction.getState(this);
    if (ts == null) {
      ts=new WFSTransactionState(this);
      transaction.putState(this,ts);
    }
  }
  SimpleFeatureType schema=getSchema(request.getTypeName());
  SimpleFeatureType featureType;
  try {
    featureType=DataUtilities.createSubType(schema,request.getPropertyNames(),request.getCoordinateSystem());
  }
 catch (  SchemaException e) {
    featureType=schema;
  }
  schema.getUserData().put("lenient",true);
  WFSFeatureReader ft=WFSFeatureReader.getFeatureReader(is,bufferSize,timeout,ts,schema);
  if (!featureType.equals(ft.getFeatureType())) {
    LOGGER.fine("Recasting feature type to subtype by using a ReTypeFeatureReader");
    return new ReTypeFeatureReader(ft,featureType,false);
  }
 else   return ft;
}
