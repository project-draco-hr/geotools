{
  if (hasFidFilter(startOfFilterStack)) {
    Set fids;
switch (filterType) {
case FilterType.LOGIC_AND:
      fids=andFids(startOfFilterStack);
    Data filter=buildFilter(filterType,startOfFilterStack);
  filter.fids.addAll(fids);
return filter;
case FilterType.LOGIC_OR:
{
if (hasNonFidFilter(startOfFilterStack)) {
  throw new UnsupportedFilterException("Maximum compliance does not allow Logic filters to contain FidFilters");
}
fids=orFids(startOfFilterStack);
pop(startOfFilterStack);
Data data=new Data();
data.fids.addAll(fids);
return data;
}
case FilterType.LOGIC_NOT:
return buildFilter(filterType,startOfFilterStack);
default :
return Data.ALL;
}
}
 else {
return buildFilter(filterType,startOfFilterStack);
}
}
