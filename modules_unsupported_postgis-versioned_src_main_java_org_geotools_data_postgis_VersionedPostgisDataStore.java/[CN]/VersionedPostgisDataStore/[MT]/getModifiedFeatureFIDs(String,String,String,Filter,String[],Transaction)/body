{
  if (originalFilter == null)   originalFilter=Filter.INCLUDE;
  RevisionInfo r1=new RevisionInfo(version1);
  RevisionInfo r2=new RevisionInfo(version2);
  if (!isVersioned(typeName)) {
    return new ModifiedFeatureIds(r1,r2);
  }
 else   if (r1.revision > r2.revision) {
    RevisionInfo tmp=r1;
    r1=r2;
    r2=tmp;
  }
  Filter filter=transformFidFilter(typeName,originalFilter);
  long baseRevision=getBaseRevision(typeName,transaction);
  if (baseRevision > r2.revision)   return new ModifiedFeatureIds(r1,r2);
  if (baseRevision > r1.revision)   r1.revision=baseRevision;
  Set userRevisions=getRevisionsCreatedBy(typeName,r1,r2,users,transaction);
  Set columns=new HashSet();
  SQLBuilder builder=wrapped.getSqlBuilder(typeName);
  SimpleFeatureType internalType=wrapped.getSchema(typeName);
  Filter preFilter=builder.getPreQueryFilter(filter);
  Filter postFilter=builder.getPostQueryFilter(filter);
  columns.addAll(Arrays.asList(DataUtilities.attributeNames(postFilter,internalType)));
  VersionedFIDMapper mapper=(VersionedFIDMapper)wrapped.getFIDMapper(typeName);
  for (int i=0; i < mapper.getColumnCount(); i++) {
    columns.add(mapper.getColumnName(i));
  }
  columns.add("revision");
  columns.add("expired");
  Filter revLeR1=ff.lessOrEqual(ff.property("revision"),ff.literal(r1.revision));
  Filter expGtR1=ff.greater(ff.property("expired"),ff.literal(r1.revision));
  Filter expLeR2=ff.lessOrEqual(ff.property("expired"),ff.literal(r2.revision));
  Filter expLtR2=ff.less(ff.property("expired"),ff.literal(r2.revision));
  Filter revGtR1=ff.greater(ff.property("revision"),ff.literal(r1.revision));
  Filter revLeR2=ff.lessOrEqual(ff.property("revision"),ff.literal(r2.revision));
  Filter versionFilter;
  if (r2.isLast())   versionFilter=ff.or(ff.and(revLeR1,ff.and(expGtR1,expLtR2)),revGtR1);
 else   versionFilter=ff.or(ff.and(revLeR1,ff.and(expGtR1,expLeR2)),ff.and(revGtR1,revLeR2));
  Filter newFilter=null;
  if (Filter.EXCLUDE.equals(preFilter)) {
    return new ModifiedFeatureIds(r1,r2);
  }
 else   if (Filter.INCLUDE.equals(preFilter)) {
    newFilter=versionFilter;
  }
 else {
    Filter clone=transformFidFilter(typeName,preFilter);
    newFilter=ff.and(versionFilter,clone);
  }
  if (userRevisions != null) {
    if (userRevisions.isEmpty())     return new ModifiedFeatureIds(r1,r2);
    List urFilters=new ArrayList(userRevisions.size());
    PropertyName revisionProperty=ff.property("revision");
    for (Iterator it=userRevisions.iterator(); it.hasNext(); ) {
      Long revision=(Long)it.next();
      urFilters.add(ff.equals(revisionProperty,ff.literal(revision)));
    }
    newFilter=ff.and(newFilter,ff.or(urFilters));
  }
  FeatureReader<SimpleFeatureType,SimpleFeature> fr=null;
  Set matched=new HashSet();
  Set createdBefore=new HashSet();
  Set expiredAfter=new HashSet();
  try {
    String[] colArray=(String[])columns.toArray(new String[columns.size()]);
    DefaultQuery q=new DefaultQuery(typeName,newFilter,colArray);
    fr=wrapped.getFeatureReader(q,transaction);
    while (fr.hasNext()) {
      SimpleFeature f=fr.next();
      long revision=((Long)f.getAttribute("revision")).longValue();
      long expired=((Long)f.getAttribute("expired")).longValue();
      String id=mapper.getUnversionedFid(f.getID());
      if (!matched.contains(id) && (revision > r1.revision || (expired > r1.revision && expired <= r2.revision)) && postFilter.evaluate(f)) {
        matched.add(id);
      }
      if (revision <= r1.revision)       createdBefore.add(id);
      if (expired > r2.revision)       expiredAfter.add(id);
    }
    fr.close();
    fr=null;
    Set created=new HashSet(matched);
    created.removeAll(createdBefore);
    if (!created.isEmpty()) {
      Filter r1FidFilter=buildFidFilter(created);
      Filter r1Filter=buildVersionedFilter(typeName,r1FidFilter,r1);
      DefaultQuery r1q=new DefaultQuery(typeName,r1Filter,colArray);
      fr=wrapped.getFeatureReader(r1q,transaction);
      while (fr.hasNext()) {
        String versionedId=fr.next().getID();
        String unversionedId=mapper.getUnversionedFid(versionedId);
        created.remove(unversionedId);
      }
      fr.close();
      fr=null;
    }
    Set deleted=new HashSet(matched);
    deleted.removeAll(expiredAfter);
    if (!deleted.isEmpty()) {
      Filter r2FidFilter=buildFidFilter(deleted);
      Filter r2Filter=buildVersionedFilter(typeName,r2FidFilter,r2);
      DefaultQuery r2q=new DefaultQuery(typeName,r2Filter,colArray);
      fr=wrapped.getFeatureReader(r2q,transaction);
      while (fr.hasNext()) {
        String versionedId=fr.next().getID();
        String unversionedId=mapper.getUnversionedFid(versionedId);
        deleted.remove(unversionedId);
      }
      fr.close();
      fr=null;
    }
    Set modified=new HashSet(matched);
    modified.removeAll(created);
    modified.removeAll(deleted);
    return new ModifiedFeatureIds(r1,r2,created,deleted,modified);
  }
 catch (  Exception e) {
    throw new DataSourceException("Error occurred while computing modified fids",e);
  }
 finally {
    if (fr != null)     fr.close();
  }
}
