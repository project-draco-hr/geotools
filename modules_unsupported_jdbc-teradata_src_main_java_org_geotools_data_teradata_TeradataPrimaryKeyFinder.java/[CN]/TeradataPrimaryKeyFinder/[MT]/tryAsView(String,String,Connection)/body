{
  List<PrimaryKeyColumn> columns=new ArrayList<PrimaryKeyColumn>();
  StringBuilder sql=new StringBuilder("SELECT RequestText FROM DBC.tables WHERE ");
  if (schema != null) {
    sql.append("DatabaseName = '").append(schema).append("' AND ");
  }
  sql.append("TableName = '").append(table).append("' AND TableKind='V'");
  Statement st=cx.createStatement();
  java.sql.ResultSet result=st.executeQuery(sql.toString());
  if (result.next()) {
    String createViewSql=result.getString("RequestText");
    int as=createViewSql.toLowerCase().indexOf("as");
    String[] parts=new String[]{createViewSql.substring(0,as),createViewSql.substring(as + 2)};
    String viewID=parts[0];
    String[] viewColumnNames=null;
    String select=parts[1].substring(parts[1].toLowerCase().indexOf("sel"));
    try {
      ResultSet viewResults=st.executeQuery(select);
      ResultSetMetaData md=viewResults.getMetaData();
      for (int i=1; i <= md.getColumnCount(); i++) {
        if (md.isAutoIncrement(i)) {
          String columnLabel;
          columnLabel=viewColumnNames[i - 1];
          Class<?> columnType;
          try {
            columnType=Thread.currentThread().getContextClassLoader().loadClass(md.getColumnClassName(i));
          }
 catch (          ClassNotFoundException e) {
            columnType=Object.class;
          }
          columns.add(new AutoGeneratedPrimaryKeyColumn(columnLabel,columnType));
        }
      }
    }
 catch (    SQLException e) {
      String from="'" + table + "'";
      if (schema != null) {
        from="'" + schema + "'."+ from;
      }
      LOGGER.warning("Unable to perform select used to create view " + from + ".\nSQL: "+ select);
    }
  }
  return columns;
}
