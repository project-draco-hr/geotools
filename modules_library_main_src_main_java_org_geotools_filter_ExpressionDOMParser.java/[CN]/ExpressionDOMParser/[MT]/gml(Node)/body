{
  LOGGER.finer("processing gml " + root);
  List coordList;
  int type=0;
  Node child=root;
  String childName=child.getNodeName();
  if (childName == null) {
    childName=child.getLocalName();
  }
  if (!childName.startsWith("gml:")) {
    childName="gml:" + childName;
  }
  if (childName.equalsIgnoreCase("gml:box")) {
    type=GML_BOX;
    coordList=parseCoords(child);
    com.vividsolutions.jts.geom.Envelope env=new com.vividsolutions.jts.geom.Envelope();
    for (int i=0; i < coordList.size(); i++) {
      env.expandToInclude((Coordinate)coordList.get(i));
    }
    Coordinate[] coords=new Coordinate[NUM_BOX_COORDS];
    coords[0]=new Coordinate(env.getMinX(),env.getMinY());
    coords[1]=new Coordinate(env.getMinX(),env.getMaxY());
    coords[2]=new Coordinate(env.getMaxX(),env.getMaxY());
    coords[3]=new Coordinate(env.getMaxX(),env.getMinY());
    coords[4]=new Coordinate(env.getMinX(),env.getMinY());
    com.vividsolutions.jts.geom.LinearRing ring=null;
    try {
      ring=gfac.createLinearRing(coords);
    }
 catch (    com.vividsolutions.jts.geom.TopologyException tope) {
      LOGGER.fine("Topology Exception in GMLBox" + tope);
      return null;
    }
    return gfac.createPolygon(ring,null);
  }
  if (childName.equalsIgnoreCase("gml:polygonmember") || childName.equalsIgnoreCase("gml:pointmember") || childName.equalsIgnoreCase("gml:linestringmember")|| childName.equalsIgnoreCase("gml:linearringmember")) {
    for (int i=0; i < child.getChildNodes().getLength(); i++) {
      Node newChild=child.getChildNodes().item(i);
      if (newChild.getNodeType() == Node.ELEMENT_NODE) {
        childName=newChild.getNodeName();
        if (!childName.startsWith("gml:")) {
          childName="gml:" + childName;
        }
        root=newChild;
        child=newChild;
        break;
      }
    }
  }
  if (childName.equalsIgnoreCase("gml:polygon")) {
    LOGGER.finer("polygon");
    type=GML_POLYGON;
    LinearRing outer=null;
    List inner=new ArrayList();
    NodeList kids=root.getChildNodes();
    for (int i=0; i < kids.getLength(); i++) {
      Node kid=kids.item(i);
      LOGGER.finer("doing " + kid);
      String kidName=kid.getNodeName();
      if (kidName == null) {
        kidName=child.getLocalName();
      }
      if (!kidName.startsWith("gml:")) {
        kidName="gml:" + kidName;
      }
      if (kidName.equalsIgnoreCase("gml:outerBoundaryIs")) {
        outer=(LinearRing)parseGML(kid);
      }
      if (kidName.equalsIgnoreCase("gml:innerBoundaryIs")) {
        inner.add((LinearRing)parseGML(kid));
      }
    }
    if (inner.size() > 0) {
      return gfac.createPolygon(outer,(LinearRing[])inner.toArray(new LinearRing[0]));
    }
 else {
      return gfac.createPolygon(outer,null);
    }
  }
  if (childName.equalsIgnoreCase("gml:outerBoundaryIs") || childName.equalsIgnoreCase("gml:innerBoundaryIs")) {
    LOGGER.finer("Boundary layer");
    NodeList kids=((Element)child).getElementsByTagName("gml:LinearRing");
    if (kids.getLength() == 0)     kids=((Element)child).getElementsByTagName("LinearRing");
    return parseGML(kids.item(0));
  }
  if (childName.equalsIgnoreCase("gml:linearRing")) {
    LOGGER.finer("LinearRing");
    coordList=parseCoords(child);
    com.vividsolutions.jts.geom.LinearRing ring=null;
    try {
      ring=gfac.createLinearRing((Coordinate[])coordList.toArray(new Coordinate[]{}));
    }
 catch (    TopologyException te) {
      LOGGER.finer("Topology Exception build linear ring: " + te);
      return null;
    }
    return ring;
  }
  if (childName.equalsIgnoreCase("gml:linestring")) {
    LOGGER.finer("linestring");
    type=GML_LINESTRING;
    coordList=parseCoords(child);
    com.vividsolutions.jts.geom.LineString line=null;
    line=gfac.createLineString((Coordinate[])coordList.toArray(new Coordinate[]{}));
    return line;
  }
  if (childName.equalsIgnoreCase("gml:point")) {
    LOGGER.finer("point");
    type=GML_POINT;
    coordList=parseCoords(child);
    com.vividsolutions.jts.geom.Point point=null;
    point=gfac.createPoint((Coordinate)coordList.get(0));
    return point;
  }
  if (childName.toLowerCase().startsWith("gml:multipolygon") || childName.toLowerCase().startsWith("gml:multilinestring") || childName.toLowerCase().startsWith("gml:multipoint")) {
    List multi=new ArrayList();
    NodeList kids=child.getChildNodes();
    for (int i=0; i < kids.getLength(); i++) {
      if (kids.item(i).getNodeType() == Node.ELEMENT_NODE) {
        multi.add(parseGML(kids.item(i)));
      }
    }
    if (childName.toLowerCase().startsWith("gml:multipolygon")) {
      LOGGER.finer("MultiPolygon");
      return gfac.createMultiPolygon((Polygon[])multi.toArray(new Polygon[0]));
    }
 else     if (childName.toLowerCase().startsWith("gml:multilinestring")) {
      LOGGER.finer("MultiLineString");
      return gfac.createMultiLineString((LineString[])multi.toArray(new LineString[0]));
    }
 else {
      LOGGER.finer("MultiPoint");
      return gfac.createMultiPoint((Point[])multi.toArray(new Point[0]));
    }
  }
  return null;
}
