{
  if (policy == null)   policy=extractOverviewPolicy();
  ArrayList<Resolution> resolutionsLevels;
synchronized (this) {
    resolutionsLevels=resolutionsLevelsMap.get(coverageName);
    if (resolutionsLevels == null) {
      resolutionsLevels=new ArrayList<Resolution>();
      resolutionsLevelsMap.put(coverageName,resolutionsLevels);
      resolutionsLevels.add(new Resolution(1,getHighestRes()[0],getHighestRes()[1],0));
      if (numOverviews > 0) {
        for (int i=0; i < overViewResolutions.length; i++)         resolutionsLevels.add(new Resolution(overViewResolutions[i][0] / getHighestRes()[0],overViewResolutions[i][0],overViewResolutions[i][1],i + 1));
        Collections.sort(resolutionsLevels);
      }
    }
  }
  final double reqx=requestedRes[0];
  final double reqy=requestedRes[1];
  final Resolution max=resolutionsLevels.get(0);
  final double requestedScaleFactorX=reqx / max.resolutionX;
  final double requestedScaleFactorY=reqy / max.resolutionY;
  final int leastReduceAxis=requestedScaleFactorX <= requestedScaleFactorY ? 0 : 1;
  final double requestedScaleFactor=leastReduceAxis == 0 ? requestedScaleFactorX : requestedScaleFactorY;
  if (requestedScaleFactor <= 1)   return max.imageChoice;
  final Resolution min=resolutionsLevels.get(resolutionsLevels.size() - 1);
  if (requestedScaleFactor >= min.scaleFactor)   return min.imageChoice;
  Resolution prev=max;
  final int size=resolutionsLevels.size();
  for (int i=1; i < size; i++) {
    final Resolution curr=resolutionsLevels.get(i);
    if (curr.scaleFactor == requestedScaleFactor) {
      return curr.imageChoice;
    }
    if (curr.scaleFactor > requestedScaleFactor || i == size - 1) {
      if (policy == OverviewPolicy.QUALITY)       return prev.imageChoice;
 else       if (policy == OverviewPolicy.SPEED)       return curr.imageChoice;
 else       if (requestedScaleFactor - prev.scaleFactor < curr.scaleFactor - requestedScaleFactor)       return prev.imageChoice;
 else       return curr.imageChoice;
    }
    prev=curr;
  }
  return max.imageChoice;
}
