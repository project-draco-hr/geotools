{
  if (error == null) {
    return false;
  }
  if (logger == null && classe != null) {
    final int separator=classe.lastIndexOf('.');
    final String paquet=(separator >= 1) ? classe.substring(0,separator - 1) : "";
    logger=getLogger(paquet);
  }
  if (logger != null && !logger.isLoggable(level)) {
    return false;
  }
  if (logger == null || classe == null || method == null) {
    String paquet=(logger != null) ? logger.getName() : null;
    final StackTraceElement[] elements=error.getStackTrace();
    for (int i=0; i < elements.length; i++) {
      final StackTraceElement element=elements[i];
      final String classname=element.getClassName();
      if (classe != null) {
        if (!classname.equals(classe)) {
          continue;
        }
      }
 else       if (paquet != null) {
        if (!classname.startsWith(paquet)) {
          continue;
        }
        final int length=paquet.length();
        if (classname.length() > length) {
          final char separator=classname.charAt(length);
          if (Character.isJavaIdentifierPart(separator)) {
            continue;
          }
        }
      }
      final String methodName=element.getMethodName();
      if (method != null && !methodName.equals(method)) {
        continue;
      }
      if (paquet == null) {
        final int separator=classname.lastIndexOf('.');
        paquet=(separator >= 1) ? classname.substring(0,separator - 1) : "";
        logger=getLogger(paquet);
        if (!logger.isLoggable(level)) {
          return false;
        }
      }
      if (classe == null) {
        classe=classname;
      }
      if (method == null) {
        method=methodName;
      }
      break;
    }
    if (logger == null) {
      logger=getLogger("global");
      if (!logger.isLoggable(level)) {
        return false;
      }
    }
  }
  final StringBuilder buffer=new StringBuilder(Classes.getShortClassName(error));
  final String message=error.getLocalizedMessage();
  if (message != null) {
    buffer.append(": ").append(message);
  }
  final LogRecord record=new LogRecord(level,buffer.toString());
  if (classe != null) {
    record.setSourceClassName(classe);
  }
  if (method != null) {
    record.setSourceMethodName(method);
  }
  if (level.intValue() > 500) {
    record.setThrown(error);
  }
  record.setLoggerName(logger.getName());
  logger.log(record);
  return true;
}
