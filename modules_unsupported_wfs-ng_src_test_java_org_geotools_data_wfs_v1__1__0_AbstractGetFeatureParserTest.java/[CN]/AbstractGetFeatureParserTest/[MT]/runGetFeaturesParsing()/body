{
  GetFeatureParser reader;
{
    final String[] properties={"geometry","instanceName","instanceCode","governmentalUnitType"};
    final URL getFeatures=new URL("http://frameworkwfs.usgs.gov/framework/wfs/wfs.cgi?DATASTORE=Framework&DATASTORE=Framework&" + "SERVICE=WFS&VERSION=1.1.0&REQUEST=GetFeature&TYPENAME=gubs:GovernmentalUnitCE&" + "PROPERTYNAME=geometry,instanceName,instanceCode,governmentalUnitType&maxFeatures=100");
    final SimpleFeatureType featureType=getTypeView(CUBEWERX_GOVUNITCE.TYPENAME,CUBEWERX_GOVUNITCE.SCHEMA,CUBEWERX_GOVUNITCE.CRS,properties);
    System.out.println("Getting parser for " + getFeatures.toExternalForm());
    reader=getParser(CUBEWERX_GOVUNITCE.TYPENAME,CUBEWERX_GOVUNITCE.SCHEMA,featureType,getFeatures);
    System.out.println("Got " + reader.getClass().getSimpleName());
  }
  int count=0;
  SimpleFeature feature;
  Object defaultGeometry;
  System.out.println("Parsing features...");
  Runtime runtime=Runtime.getRuntime();
  long initialMem=runtime.totalMemory() - runtime.freeMemory();
  long startTime=System.currentTimeMillis();
  while ((feature=reader.parse()) != null) {
    defaultGeometry=feature.getDefaultGeometry();
    count++;
    System.out.print('.');
    if (count % 100 == 0) {
      System.out.print('\n');
    }
  }
  long endTime=System.currentTimeMillis();
  long totalTime=endTime - startTime;
  long endMem=runtime.totalMemory() - runtime.freeMemory();
  long memUsed=(endMem - initialMem) / (1024 * 1024);
  System.out.println("\nFetched " + count + " features "+ " in "+ totalTime+ "ms. (avg. "+ (totalTime / count)+ "ms/feature) Mem. used: "+ memUsed+ "MB.");
}
