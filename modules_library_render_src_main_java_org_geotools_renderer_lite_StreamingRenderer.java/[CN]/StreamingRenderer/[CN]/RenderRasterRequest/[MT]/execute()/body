{
  final Object grid=gridPropertyName.evaluate(content);
  if (LOGGER.isLoggable(Level.FINE))   LOGGER.fine(new StringBuffer("rendering Raster for feature ").append(content.toString()).append(" - ").append(grid).toString());
  GridCoverage2D coverage=null;
  try {
    final GridCoverageRenderer gcr=new GridCoverageRenderer(destinationCRS,originalMapExtent,screenSize,worldToScreen,java2dHints);
    if (grid instanceof GridCoverage) {
      gcr.paint(graphics,(GridCoverage2D)grid,symbolizer);
    }
 else     if (grid instanceof AbstractGridCoverage2DReader) {
      final Object params=paramsPropertyName.evaluate(content);
      GridGeometry2D readGG=new GridGeometry2D(new GridEnvelope2D(screenSize),mapExtent);
      AbstractGridCoverage2DReader reader=(AbstractGridCoverage2DReader)grid;
      coverage=readCoverage(reader,params,readGG);
      try {
        if (coverage != null)         gcr.paint(graphics,coverage,symbolizer);
      }
  finally {
        if (coverage != null)         coverage.dispose(true);
      }
    }
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.fine("Raster rendered");
  }
 catch (  FactoryException e) {
    LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
    fireErrorEvent(e);
  }
catch (  TransformException e) {
    LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
    fireErrorEvent(e);
  }
catch (  NoninvertibleTransformException e) {
    LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
    fireErrorEvent(e);
  }
catch (  IllegalArgumentException e) {
    LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
    fireErrorEvent(e);
  }
catch (  IOException e) {
    LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
    fireErrorEvent(e);
  }
}
