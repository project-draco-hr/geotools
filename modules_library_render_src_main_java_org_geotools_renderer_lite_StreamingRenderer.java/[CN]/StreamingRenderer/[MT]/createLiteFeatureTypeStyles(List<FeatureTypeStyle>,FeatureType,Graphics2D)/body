{
  if (LOGGER.isLoggable(Level.FINE))   LOGGER.fine("creating rules for scale denominator - " + NumberFormat.getNumberInstance().format(scaleDenominator));
  ArrayList<LiteFeatureTypeStyle> result=new ArrayList<LiteFeatureTypeStyle>();
  LiteFeatureTypeStyle lfts;
  for (  FeatureTypeStyle fts : featureStyles) {
    if (isFeatureTypeStyleActive(ftype,fts)) {
      List[] splittedRules=splitRules(fts);
      List ruleList=splittedRules[0];
      List elseRuleList=splittedRules[1];
      if ((ruleList.isEmpty()) && (elseRuleList.isEmpty()))       continue;
      if (result.isEmpty() || !isOptimizedFTSRenderingEnabled()) {
        lfts=new LiteFeatureTypeStyle(graphics,ruleList,elseRuleList,fts.getTransformation());
      }
 else {
        lfts=new LiteFeatureTypeStyle(new DelayedBackbufferGraphic(graphics,screenSize),ruleList,elseRuleList,fts.getTransformation());
      }
      if (FeatureTypeStyle.VALUE_EVALUATION_MODE_FIRST.equals(fts.getOptions().get(FeatureTypeStyle.KEY_EVALUATION_MODE))) {
        lfts.matchFirst=true;
      }
      if (screenMapEnabled(lfts)) {
        int renderingBuffer=getRenderingBuffer();
        lfts.screenMap=new ScreenMap(screenSize.x - renderingBuffer,screenSize.y - renderingBuffer,screenSize.width + renderingBuffer * 2,screenSize.height + renderingBuffer * 2);
      }
      result.add(lfts);
    }
  }
  return result;
}
