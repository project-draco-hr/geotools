{
  final LiteFeatureTypeStyle[] fts_array=lfts.toArray(new LiteFeatureTypeStyle[lfts.size()]);
  for (  LiteFeatureTypeStyle liteFeatureTypeStyle : fts_array) {
    Iterator<?> iterator=null;
    if (collection != null) {
      iterator=collection.iterator();
      if (iterator == null) {
        return;
      }
    }
 else     if (features != null) {
      FeatureIterator<?> featureIterator=((FeatureCollection<?,?>)features).features();
      if (featureIterator == null) {
        return;
      }
      iterator=DataUtilities.iterator(featureIterator);
    }
 else {
      return;
    }
    try {
      boolean clone=isCloningRequired(currLayer,fts_array);
      RenderableFeature rf=new RenderableFeature(currLayer,clone);
      rf.setScreenMap(liteFeatureTypeStyle.screenMap);
      while (iterator.hasNext() && !renderingStopRequested) {
        try {
          rf.setFeature(iterator.next());
          process(rf,liteFeatureTypeStyle,scaleRange,at,destinationCrs,layerId);
        }
 catch (        Throwable tr) {
          fireErrorEvent(tr);
        }
      }
    }
  finally {
      DataUtilities.close(iterator);
    }
    if (liteFeatureTypeStyle.composite != null) {
      try {
        requests.put(new MergeLayersRequest(graphics,new LiteFeatureTypeStyle[]{liteFeatureTypeStyle}));
      }
 catch (      InterruptedException e) {
        fireErrorEvent(e);
      }
    }
  }
}
