{
  Query query=new Query(Query.ALL);
  Filter filter=null;
  if (getRenderingBuffer() == 0) {
    metaBuffer=findRenderingBuffer(styleList);
    if (metaBuffer > 0) {
      mapArea=expandEnvelope(mapArea,worldToScreenTransform,metaBuffer);
      LOGGER.fine("Expanding rendering area by " + metaBuffer + " pixels to consider stroke width");
      for (      LiteFeatureTypeStyle lfts : styleList) {
        if (lfts.screenMap != null) {
          lfts.screenMap=new ScreenMap(lfts.screenMap,metaBuffer);
        }
      }
    }
  }
  mapArea=expandEnvelopeByTransformations(styleList,new ReferencedEnvelope(mapArea,mapCRS));
  List<PropertyName> attributes;
  if (styleList == null) {
    attributes=null;
  }
 else {
    attributes=findStyleAttributes(styleList,schema);
  }
  ReferencedEnvelope envelope=new ReferencedEnvelope(mapArea,mapCRS);
  try {
    List<ReferencedEnvelope> envelopes=null;
    if (isAdvancedProjectionHandlingEnabled()) {
      projectionHandler=ProjectionHandlerFinder.getHandler(envelope,featCrs,isMapWrappingEnabled());
      if (projectionHandler != null) {
        envelopes=projectionHandler.getQueryEnvelopes();
      }
    }
    if (envelopes == null) {
      if (mapCRS != null && featCrs != null && !CRS.equalsIgnoreMetadata(featCrs,mapCRS)) {
        envelopes=Collections.singletonList(envelope.transform(featCrs,true,10));
      }
 else {
        envelopes=Collections.singletonList(envelope);
      }
    }
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.fine("Querying layer " + schema.getName() + " with bbox: "+ envelope);
    filter=createBBoxFilters(schema,attributes,envelopes);
    query=new Query(schema.getName().getLocalPart());
    query.setFilter(filter);
    query.setProperties(attributes);
    processRuleForQuery(styleList,query);
    SortBy[] sortBy=getSortByFromLiteStyles(styleList);
    query.setSortBy(sortBy);
  }
 catch (  Exception e) {
    final Exception txException=new Exception("Error transforming bbox",e);
    LOGGER.log(Level.SEVERE,"Error querying layer",txException);
    fireErrorEvent(txException);
    canTransform=false;
    query=new Query(schema.getName().getLocalPart());
    query.setProperties(attributes);
    Envelope bounds=source.getBounds();
    if (bounds != null && envelope.intersects(bounds)) {
      LOGGER.log(Level.WARNING,"Got a tranform exception while trying to de-project the current " + "envelope, bboxs intersect therefore using envelope)",e);
      filter=null;
      filter=createBBoxFilters(schema,attributes,Collections.singletonList(envelope));
      query.setFilter(filter);
    }
 else {
      LOGGER.log(Level.WARNING,"Got a tranform exception while trying to de-project the current " + "envelope, falling back on full data loading (no bbox query)",e);
      query.setFilter(Filter.INCLUDE);
    }
    processRuleForQuery(styleList,query);
  }
  LiteCoordinateSequenceFactory csFactory=new LiteCoordinateSequenceFactory();
  GeometryFactory gFactory=new SimpleGeometryFactory(csFactory);
  Hints hints=new Hints(Hints.JTS_COORDINATE_SEQUENCE_FACTORY,csFactory);
  hints.put(Hints.JTS_GEOMETRY_FACTORY,gFactory);
  hints.put(Hints.FEATURE_2D,Boolean.TRUE);
  try {
    CoordinateReferenceSystem crs=getNativeCRS(schema,attributes);
    if (crs != null) {
      Set<RenderingHints.Key> fsHints=source.getSupportedHints();
      SingleCRS crs2D=crs == null ? null : CRS.getHorizontalCRS(crs);
      MathTransform mt=buildFullTransform(crs2D,mapCRS,worldToScreenTransform);
      double[] spans=Decimator.computeGeneralizationDistances(mt.inverse(),screenSize,generalizationDistance);
      double distance=spans[0] < spans[1] ? spans[0] : spans[1];
      for (      LiteFeatureTypeStyle fts : styleList) {
        if (fts.screenMap != null) {
          fts.screenMap.setTransform(mt);
          fts.screenMap.setSpans(spans[0],spans[1]);
          if (fsHints.contains(Hints.SCREENMAP)) {
            hints.put(Hints.SCREENMAP,fts.screenMap);
            fts.screenMap=null;
          }
        }
      }
      if (renderingTransformation) {
        if (fsHints.contains(Hints.GEOMETRY_GENERALIZATION)) {
          hints.put(Hints.GEOMETRY_GENERALIZATION,distance);
          inMemoryGeneralization=false;
        }
      }
 else {
        if (fsHints.contains(Hints.GEOMETRY_SIMPLIFICATION)) {
          hints.put(Hints.GEOMETRY_SIMPLIFICATION,distance);
          inMemoryGeneralization=false;
        }
 else         if (fsHints.contains(Hints.GEOMETRY_DISTANCE)) {
          hints.put(Hints.GEOMETRY_DISTANCE,distance);
        }
      }
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.INFO,"Error computing the generalization hints",e);
  }
  if (query.getHints() == null) {
    query.setHints(hints);
  }
 else {
    query.getHints().putAll(hints);
  }
  SimplifyingFilterVisitor simplifier=new SimplifyingFilterVisitor();
  simplifier.setFeatureType(source.getSchema());
  Filter simplifiedFilter=(Filter)query.getFilter().accept(simplifier,null);
  query.setFilter(simplifiedFilter);
  return query;
}
