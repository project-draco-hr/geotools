{
  final MapLayer currLayer=new MapLayer(layer);
  final Style style=currLayer.getStyle();
  final FeatureSource featureSource=currLayer.getFeatureSource();
  final CoordinateReferenceSystem sourceCrs;
  final NumberRange scaleRange=NumberRange.create(scaleDenominator,scaleDenominator);
  final ArrayList<LiteFeatureTypeStyle> lfts;
  if (featureSource != null) {
    final FeatureType schema=featureSource.getSchema();
    final GeometryDescriptor geometryAttribute=schema.getGeometryDescriptor();
    if (geometryAttribute != null && geometryAttribute.getType() != null) {
      sourceCrs=geometryAttribute.getType().getCoordinateReferenceSystem();
    }
 else {
      sourceCrs=null;
    }
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("Processing " + style.featureTypeStyles().size() + " stylers for "+ featureSource.getSchema().getName());
    }
    lfts=createLiteFeatureTypeStyles(style.featureTypeStyles(),schema,graphics);
    if (lfts.isEmpty())     return;
    reprojectSpatialFilters(lfts,featureSource);
    applyUnitRescale(lfts);
    List<List<LiteFeatureTypeStyle>> txClassified=classifyByFeatureProduction(lfts);
    for (    List<LiteFeatureTypeStyle> uniform : txClassified) {
      FeatureCollection features=getFeatures(layer,at,destinationCrs,mapArea,screenSize,currLayer,featureSource,sourceCrs,schema,geometryAttribute,uniform);
      if (isOptimizedFTSRenderingEnabled() && lfts.size() > 1) {
        drawOptimized(graphics,currLayer,at,destinationCrs,layerId,null,features,scaleRange,uniform);
      }
 else {
        drawPlain(graphics,currLayer,at,destinationCrs,layerId,null,features,scaleRange,uniform);
      }
    }
  }
 else {
    Collection collection=null;
    CollectionSource source=currLayer.getSource();
    collection=queryLayer(currLayer,currLayer.getSource());
    sourceCrs=null;
    lfts=createLiteFeatureTypeStyles(style.featureTypeStyles(),source.describe(),graphics);
    applyUnitRescale(lfts);
    if (lfts.isEmpty())     return;
    if (isOptimizedFTSRenderingEnabled() && lfts.size() > 1) {
      drawOptimized(graphics,currLayer,at,destinationCrs,layerId,collection,null,scaleRange,lfts);
    }
 else {
      drawPlain(graphics,currLayer,at,destinationCrs,layerId,collection,null,scaleRange,lfts);
    }
  }
}
