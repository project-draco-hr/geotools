{
  if (graphics == null) {
    LOGGER.severe("renderer passed null graphics argument");
    throw new NullPointerException("renderer requires graphics");
  }
 else   if (paintArea == null) {
    LOGGER.severe("renderer passed null paintArea argument");
    throw new NullPointerException("renderer requires paintArea");
  }
 else   if (mapArea == null) {
    LOGGER.severe("renderer passed null mapArea argument");
    throw new NullPointerException("renderer requires mapArea");
  }
 else   if (worldToScreen == null) {
    worldToScreen=RendererUtilities.worldToScreenTransform(mapArea,paintArea);
    if (worldToScreen == null)     return;
  }
  destinationCrs=mapArea.getCoordinateReferenceSystem();
  mapExtent=new ReferencedEnvelope(mapArea);
  this.screenSize=paintArea;
  this.worldToScreenTransform=worldToScreen;
  error=0;
  if (java2dHints != null)   graphics.setRenderingHints(java2dHints);
  Point2D textureAnchor=new Point2D.Double(worldToScreenTransform.getTranslateX(),worldToScreenTransform.getTranslateY());
  graphics.setRenderingHint(StyledShapePainter.TEXTURE_ANCHOR_HINT_KEY,textureAnchor);
  renderingStopRequested=false;
  graphics.setClip(paintArea);
  if (concatTransforms) {
    AffineTransform atg=graphics.getTransform();
    atg.concatenate(worldToScreenTransform);
    worldToScreenTransform=atg;
    graphics.setTransform(worldToScreenTransform);
  }
  scaleDenominator=computeScale(mapArea,paintArea,worldToScreenTransform,rendererHints);
  if (LOGGER.isLoggable(Level.FINE))   LOGGER.fine("Computed scale denominator: " + scaleDenominator);
  int buffer=getRenderingBuffer();
  originalMapExtent=mapExtent;
  if (buffer > 0) {
    mapExtent=new ReferencedEnvelope(expandEnvelope(mapExtent,worldToScreen,buffer),mapExtent.getCoordinateReferenceSystem());
  }
  requests=getRequestsQueue();
  painterThread=new PainterThread(requests);
  ExecutorService localThreadPool=threadPool;
  boolean localPool=false;
  if (localThreadPool == null) {
    localThreadPool=Executors.newSingleThreadExecutor();
    localPool=true;
  }
  Future painterFuture=localThreadPool.submit(painterThread);
  try {
    if (mapContent == null) {
      throw new IllegalStateException("Cannot call paint, you did not set a MapContent in this renderer");
    }
    MapContent zGroupedMapContent=ZGroupLayerFactory.filter(mapContent);
    List<CompositingGroup> compositingGroups=CompositingGroup.splitOnCompositingBase(graphics,paintArea,zGroupedMapContent);
    int layerCounter=0;
    for (    CompositingGroup compositingGroup : compositingGroups) {
      MapContent currentMapContent=compositingGroup.mapContent;
      Graphics2D compositingGraphic=compositingGroup.graphics;
      labelCache.start();
      if (labelCache instanceof LabelCacheImpl) {
        ((LabelCacheImpl)labelCache).setLabelRenderingMode(LabelRenderingMode.valueOf(getTextRenderingMethod()));
      }
      for (      Layer layer : currentMapContent.layers()) {
        layerCounter++;
        String layerId=String.valueOf(layerCounter);
        if (!layer.isVisible()) {
          continue;
        }
        if (renderingStopRequested) {
          return;
        }
        labelCache.startLayer(layerId);
        if (layer instanceof DirectLayer) {
          RenderingRequest request=new RenderDirectLayerRequest(compositingGraphic,(DirectLayer)layer);
          try {
            requests.put(request);
          }
 catch (          InterruptedException e) {
            fireErrorEvent(e);
          }
        }
 else         if (layer instanceof ZGroupLayer) {
          try {
            ZGroupLayer zGroup=(ZGroupLayer)layer;
            zGroup.drawFeatures(compositingGraphic,this,layerId);
          }
 catch (          Throwable t) {
            fireErrorEvent(t);
          }
        }
 else {
          try {
            processStylers(compositingGraphic,layer,layerId);
          }
 catch (          Throwable t) {
            fireErrorEvent(t);
          }
        }
        labelCache.endLayer(layerId,graphics,screenSize);
      }
      if (compositingGraphic instanceof DelayedBackbufferGraphic) {
        RenderingRequest request=new MargeCompositingGroupRequest(graphics,compositingGroup);
        try {
          requests.put(request);
        }
 catch (        InterruptedException e) {
          fireErrorEvent(e);
        }
      }
      compositingGroup.mapContent.dispose();
    }
  }
  finally {
    try {
      if (!renderingStopRequested) {
        requests.put(new EndRequest());
        painterFuture.get();
      }
    }
 catch (    Exception e) {
      painterFuture.cancel(true);
      fireErrorEvent(e);
    }
 finally {
      if (localPool) {
        localThreadPool.shutdown();
      }
    }
  }
  if (!renderingStopRequested) {
    labelCache.end(graphics,paintArea);
  }
 else {
    labelCache.clear();
  }
  if (LOGGER.isLoggable(Level.FINE))   LOGGER.fine(new StringBuffer("Style cache hit ratio: ").append(styleFactory.getHitRatio()).append(" , hits ").append(styleFactory.getHits()).append(", requests ").append(styleFactory.getRequests()).toString());
  if (error > 0) {
    LOGGER.warning(new StringBuffer("Number of Errors during paint(Graphics2D, AffineTransform) = ").append(error).toString());
  }
}
