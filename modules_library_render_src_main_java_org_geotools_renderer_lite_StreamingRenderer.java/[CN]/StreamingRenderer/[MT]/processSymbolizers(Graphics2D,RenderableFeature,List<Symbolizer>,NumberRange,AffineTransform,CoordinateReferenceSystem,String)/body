{
  int paintCommands=0;
  for (  Symbolizer symbolizer : symbolizers) {
    if (symbolizer instanceof RasterSymbolizer) {
      GridCoverage2D coverage=null;
      boolean disposeCoverage=false;
      try {
        final Object grid=gridPropertyName.evaluate(drawMe.content);
        if (grid instanceof GridCoverage2D) {
          coverage=(GridCoverage2D)grid;
          if (coverage != null) {
            disposeCoverage=grid instanceof DisposableGridCoverage;
            requests.put(new RenderRasterRequest(graphics,coverage,disposeCoverage,(RasterSymbolizer)symbolizer,destinationCrs,at));
            paintCommands++;
          }
        }
 else         if (grid instanceof GridCoverage2DReader) {
          final GeneralParameterValue[] params=(GeneralParameterValue[])paramsPropertyName.evaluate(drawMe.content);
          GridCoverage2DReader reader=(GridCoverage2DReader)grid;
          requests.put(new RenderCoverageReaderRequest(graphics,reader,params,(RasterSymbolizer)symbolizer,destinationCrs,at,getRenderingInterpolation(drawMe.layer != null ? drawMe.layer.toLayer() : null)));
        }
      }
 catch (      IllegalArgumentException e) {
        LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
        fireErrorEvent(e);
      }
    }
 else {
      LiteShape2 shape=drawMe.getShape(symbolizer,at);
      if (shape == null) {
        continue;
      }
      if (symbolizer instanceof TextSymbolizer && drawMe.content instanceof Feature) {
        labelCache.put(layerId,(TextSymbolizer)symbolizer,(Feature)drawMe.content,shape,scaleRange);
        paintCommands++;
      }
 else {
        Style2D style=styleFactory.createStyle(drawMe.content,symbolizer,scaleRange);
        double size=RendererUtilities.getStyle2DSize(style);
        double clipBuffer=Math.max(size / 2,metaBuffer) + 10;
        Envelope env=new Envelope(screenSize.getMinX(),screenSize.getMaxX(),screenSize.getMinY(),screenSize.getMaxY());
        env.expandBy(clipBuffer);
        final GeometryClipper clipper=new GeometryClipper(env);
        Geometry g=clipper.clip(shape.getGeometry(),false);
        if (g == null) {
          continue;
        }
        if (g != shape.getGeometry()) {
          shape=new LiteShape2(g,null,null,false);
        }
        PaintShapeRequest paintShapeRequest=new PaintShapeRequest(graphics,shape,style,scaleDenominator);
        if (symbolizer.hasOption("labelObstacle")) {
          paintShapeRequest.setLabelObstacle(true);
        }
        requests.put(paintShapeRequest);
        paintCommands++;
      }
    }
  }
  if (paintCommands > 0) {
    requests.put(new FeatureRenderedRequest(drawMe.content));
  }
}
