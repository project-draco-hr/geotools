{
  List<List<LiteFeatureTypeStyle>> txClassified=new ArrayList<List<LiteFeatureTypeStyle>>();
  txClassified.add(new ArrayList<LiteFeatureTypeStyle>());
  Expression transformation=null;
  SortBy[] sortBy=null;
  for (int i=0; i < lfts.size(); i++) {
    LiteFeatureTypeStyle curr=lfts.get(i);
    if (i == 0) {
      transformation=curr.transformation;
      sortBy=curr.sortBy;
    }
 else {
      boolean differentTransformation=(transformation != curr.transformation) || (transformation != null && curr.transformation != null && !curr.transformation.equals(transformation));
      boolean incompatibleSort=false;
      if (curr.sortBy != null) {
        if (sortBy == null) {
          sortBy=curr.sortBy;
        }
 else {
          incompatibleSort=true;
        }
      }
      if (differentTransformation || incompatibleSort) {
        txClassified.add(new ArrayList<LiteFeatureTypeStyle>());
        transformation=curr.transformation;
        sortBy=curr.sortBy;
      }
    }
    txClassified.get(txClassified.size() - 1).add(curr);
  }
  return txClassified;
}
