{
  ArrayList<LiteFeatureTypeStyle> result=new ArrayList<LiteFeatureTypeStyle>();
  List<Rule> rules;
  List<Rule> ruleList;
  List<Rule> elseRuleList;
  LiteFeatureTypeStyle lfts;
  BufferedImage image;
  boolean foundComposite=false;
  for (  FeatureTypeStyle fts : featureStyles) {
    if (typeDescription == null || typeDescription.toString().indexOf(fts.getFeatureTypeName()) == -1)     continue;
    rules=fts.rules();
    ruleList=new ArrayList<Rule>();
    elseRuleList=new ArrayList<Rule>();
    for (    Rule r : rules) {
      if (isWithInScale(r)) {
        if (r.isElseFilter()) {
          elseRuleList.add(r);
        }
 else {
          ruleList.add(r);
        }
      }
    }
    if ((ruleList.isEmpty()) && (elseRuleList.isEmpty()))     continue;
    Composite composite=SLDStyleFactory.getComposite(fts.getOptions());
    foundComposite|=composite != null;
    if (!foundComposite && (result.isEmpty() || !isOptimizedFTSRenderingEnabled())) {
      lfts=new LiteFeatureTypeStyle(graphics,ruleList,elseRuleList,fts.getTransformation());
    }
 else {
      lfts=new LiteFeatureTypeStyle(new DelayedBackbufferGraphic(graphics,screenSize),ruleList,elseRuleList,fts.getTransformation());
    }
    lfts.composite=composite;
    if (FeatureTypeStyle.VALUE_EVALUATION_MODE_FIRST.equals(fts.getOptions().get(FeatureTypeStyle.KEY_EVALUATION_MODE))) {
      lfts.matchFirst=true;
    }
    result.add(lfts);
  }
  return result;
}
