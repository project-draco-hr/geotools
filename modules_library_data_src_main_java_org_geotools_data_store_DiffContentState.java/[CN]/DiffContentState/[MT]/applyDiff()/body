{
  if (diff.isEmpty()) {
    return;
  }
  FeatureWriter<SimpleFeatureType,SimpleFeature> writer;
  ContentFeatureStore store;
  ContentEntry entry=DiffContentState.this.getEntry();
  Name name=entry.getName();
  ContentDataStore dataStore=entry.getDataStore();
  ContentFeatureSource source=(ContentFeatureSource)dataStore.getFeatureSource(name);
  if (source instanceof ContentFeatureStore) {
    store=(ContentFeatureStore)dataStore.getFeatureSource(name);
    writer=store.getWriter(Filter.INCLUDE);
  }
 else {
    throw new UnsupportedOperationException("not writable");
  }
  SimpleFeature feature;
  SimpleFeature update;
  Throwable cause=null;
  try {
    while (writer.hasNext()) {
      feature=(SimpleFeature)writer.next();
      String fid=feature.getID();
      if (diff.modified2.containsKey(fid)) {
        update=(SimpleFeature)diff.modified2.get(fid);
        if (update == Diff.NULL) {
          writer.remove();
          ContentState state=store.getEntry().getState(getTransaction());
          state.fireFeatureRemoved(store,feature);
        }
 else {
          try {
            feature.setAttributes(update.getAttributes());
            writer.write();
            ReferencedEnvelope bounds=ReferencedEnvelope.reference(feature.getBounds());
            fireFeatureUpdated(store,update,bounds);
          }
 catch (          IllegalAttributeException e) {
            throw new DataSourceException("Could update " + fid,e);
          }
        }
      }
    }
    SimpleFeature addedFeature;
    SimpleFeature nextFeature;
synchronized (diff) {
      for (      String fid : diff.getAddedOrder()) {
        addedFeature=diff.getAdded().get(fid);
        nextFeature=(SimpleFeature)writer.next();
        if (nextFeature == null) {
          throw new DataSourceException("Could not add " + fid);
        }
 else {
          try {
            nextFeature.setAttributes(addedFeature.getAttributes());
            nextFeature.getUserData().put(Hints.USE_PROVIDED_FID,true);
            if (addedFeature.getUserData().containsKey(Hints.PROVIDED_FID)) {
              String providedFid=(String)addedFeature.getUserData().get(Hints.PROVIDED_FID);
              nextFeature.getUserData().put(Hints.PROVIDED_FID,providedFid);
            }
 else {
              nextFeature.getUserData().put(Hints.PROVIDED_FID,addedFeature.getID());
            }
            writer.write();
            fireFeatureAdded(store,nextFeature);
          }
 catch (          IllegalAttributeException e) {
            throw new DataSourceException("Could update " + fid,e);
          }
        }
      }
    }
  }
 catch (  IOException e) {
    cause=e;
    throw e;
  }
catch (  RuntimeException e) {
    cause=e;
    throw e;
  }
 finally {
    try {
      writer.close();
      fireBatchFeatureEvent(true);
      diff.clear();
    }
 catch (    IOException e) {
      if (cause != null) {
        e.initCause(cause);
      }
      throw e;
    }
catch (    RuntimeException e) {
      if (cause != null) {
        e.initCause(cause);
      }
      throw e;
    }
  }
}
