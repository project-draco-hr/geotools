{
  m_node.setInDegree(2);
  m_node.setOutDegree(2);
  m_node.addIn(m_inEdge1);
  m_node.addIn(m_inEdge2);
  m_node.addOut(m_outEdge1);
  m_node.addOut(m_outEdge2);
  Iterator related=m_node.getRelated();
  OptDirectedNode dn=(OptDirectedNode)related.next();
  assertTrue(dn == m_inNode1 || dn == m_inNode2 || dn == m_outNode1 || dn == m_outNode2);
  dn=(OptDirectedNode)related.next();
  assertTrue(dn == m_inNode1 || dn == m_inNode2 || dn == m_outNode1 || dn == m_outNode2);
  dn=(OptDirectedNode)related.next();
  assertTrue(dn == m_inNode1 || dn == m_inNode2 || dn == m_outNode1 || dn == m_outNode2);
  dn=(OptDirectedNode)related.next();
  assertTrue(dn == m_inNode1 || dn == m_inNode2 || dn == m_outNode1 || dn == m_outNode2);
  assertTrue(!related.hasNext());
  m_node.setInDegree(3);
  m_node.setOutDegree(3);
  m_node.addIn(m_inEdge1);
  m_node.addIn(m_inEdge2);
  m_node.addOut(m_outEdge1);
  m_node.addOut(m_outEdge2);
  m_node.addIn(m_loop);
  m_node.addOut(m_loop);
  related=m_node.getRelated();
  dn=(OptDirectedNode)related.next();
  assertTrue(dn == m_inNode1 || dn == m_inNode2 || dn == m_outNode1 || dn == m_outNode2 || dn == m_node);
  dn=(OptDirectedNode)related.next();
  assertTrue(dn == m_inNode1 || dn == m_inNode2 || dn == m_outNode1 || dn == m_outNode2 || dn == m_node);
  dn=(OptDirectedNode)related.next();
  assertTrue(dn == m_inNode1 || dn == m_inNode2 || dn == m_outNode1 || dn == m_outNode2 || dn == m_node);
  dn=(OptDirectedNode)related.next();
  assertTrue(dn == m_inNode1 || dn == m_inNode2 || dn == m_outNode1 || dn == m_outNode2 || dn == m_node);
  dn=(OptDirectedNode)related.next();
  assertTrue(dn == m_inNode1 || dn == m_inNode2 || dn == m_outNode1 || dn == m_outNode2 || dn == m_node);
  dn=(OptDirectedNode)related.next();
  assertTrue(dn == m_inNode1 || dn == m_inNode2 || dn == m_outNode1 || dn == m_outNode2 || dn == m_node);
  assertTrue(!related.hasNext());
}
