{
  try {
    if (BBOX.NAME.equals(name)) {
      return new EGeometryValueBBox(eAttribute,geometry,swapped);
    }
 else     if (Beyond.NAME.equals(name)) {
      double distance=convert((Beyond)filter,descriptor);
      return new EGeometryValueBeyond(eAttribute,geometry,distance);
    }
 else     if (DWithin.NAME.equals(name)) {
      double distance=convert((DWithin)filter,descriptor);
      return new EGeometryValueDWithin(eAttribute,geometry,distance);
    }
 else     if (Contains.NAME.equals(name)) {
      return new EGeometryValueContains(eAttribute,geometry,swapped);
    }
 else     if (Crosses.NAME.equals(name)) {
      return new EGeometryValueCrosses(eAttribute,geometry,swapped);
    }
 else     if (Disjoint.NAME.equals(name)) {
      return new EGeometryValueDisjoint(eAttribute,geometry,swapped);
    }
 else     if (Equals.NAME.equals(name)) {
      return new EGeometryValueEquals(eAttribute,geometry,swapped);
    }
 else     if (Intersects.NAME.equals(name)) {
      return new EGeometryValueIntersects(eAttribute,geometry,swapped);
    }
 else     if (Overlaps.NAME.equals(name)) {
      return new EGeometryValueOverlaps(eAttribute,geometry,swapped);
    }
 else     if (Touches.NAME.equals(name)) {
      return new EGeometryValueTouches(eAttribute,geometry,swapped);
    }
 else     if (Within.NAME.equals(name)) {
      return new EGeometryValueWithin(eAttribute,geometry,swapped);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Spatial operation " + name + " is not supported",e);
  }
  throw new IllegalArgumentException("Spatial operation " + name + " is not supported");
}
