{
  if (offset == 0) {
    int idx=getAfterSelectInsertPoint(sql.toString());
    sql.insert(idx," top " + limit);
  }
 else {
    int lastClosed=sql.lastIndexOf(")");
    int orderByIndex=sql.lastIndexOf("ORDER BY");
    CharSequence orderBy;
    if (orderByIndex > 0 && orderByIndex > lastClosed) {
      orderBy=sql.subSequence(orderByIndex,sql.length());
      sql.delete(orderByIndex,orderByIndex + orderBy.length());
    }
 else {
      orderBy="ORDER BY CURRENT_TIMESTAMP";
    }
    Matcher fromMatcher=FROM_PATTERN.matcher(sql);
    fromMatcher.find();
    int fromStart=fromMatcher.start(2);
    sql.insert(fromStart - 1,", ROW_NUMBER() OVER (" + orderBy + ") AS _GT_ROW_NUMBER ");
    sql.insert(0,"SELECT * FROM (");
    sql.append(") AS _GT_PAGING_SUBQUERY WHERE ");
    if (offset > 0) {
      sql.append("_GT_ROW_NUMBER > " + offset);
    }
    if (limit >= 0 && limit < Integer.MAX_VALUE) {
      int max=limit;
      if (offset > 0) {
        max+=offset;
        sql.append(" AND ");
      }
      sql.append("_GT_ROW_NUMBER <= " + max);
    }
  }
}
