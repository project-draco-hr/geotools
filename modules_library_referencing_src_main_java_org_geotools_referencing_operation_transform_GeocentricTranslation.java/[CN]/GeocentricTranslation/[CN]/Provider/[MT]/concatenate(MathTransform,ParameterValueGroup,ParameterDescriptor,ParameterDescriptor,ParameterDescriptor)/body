{
  double semiMajor=doubleValue(major,values);
  double semiMinor=doubleValue(minor,values);
  int dimension=intValue(dim,values);
switch (dimension) {
case 0:
    if (Double.isNaN(semiMajor) && Double.isNaN(semiMinor))     return transform;
case 2:
case 3:
  break;
default :
throw new IllegalArgumentException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2,dim.getName().getCode(),dimension));
}
ensureValid(major,semiMajor);
ensureValid(minor,semiMinor);
final GeocentricTransform step;
step=new GeocentricTransform(semiMajor,semiMinor,SI.METER,dimension == 3);
if (dim == SRC_DIM) {
return ConcatenatedTransform.create(step,transform);
}
 else {
return ConcatenatedTransform.create(transform,step.inverse());
}
}
