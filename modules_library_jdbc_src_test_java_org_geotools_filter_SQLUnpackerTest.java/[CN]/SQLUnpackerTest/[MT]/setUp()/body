{
  super.setUp();
  setup=true;
  capabilities=new FilterCapabilities();
  capabilities.addType(AbstractFilter.LOGIC_OR);
  capabilities.addType(AbstractFilter.LOGIC_AND);
  capabilities.addType(AbstractFilter.LOGIC_NOT);
  capabilities.addType(AbstractFilter.COMPARE_EQUALS);
  capabilities.addType(AbstractFilter.COMPARE_LESS_THAN);
  capabilities.addType(AbstractFilter.COMPARE_GREATER_THAN);
  capabilities.addType(AbstractFilter.COMPARE_LESS_THAN_EQUAL);
  capabilities.addType(AbstractFilter.COMPARE_GREATER_THAN_EQUAL);
  capabilities.addType(AbstractFilter.NULL);
  capabilities.addType(AbstractFilter.BETWEEN);
  unpacker=new SQLUnpacker(capabilities);
  try {
    attrExp1=new AttributeExpressionImpl(testSchema,"testInteger");
    attrExp2=new AttributeExpressionImpl(testSchema,"testGeometry");
    litExp1=new LiteralExpressionImpl(new Integer(65));
    litExp2=new LiteralExpressionImpl(new Integer(35));
    mathExp1=new AddImpl(null,null);
    mathExp1.addLeftValue(litExp1);
    mathExp1.addRightValue(litExp2);
    btwnFilter=new BetweenFilterImpl();
    btwnFilter.addLeftValue(litExp1);
    btwnFilter.addMiddleValue(attrExp1);
    btwnFilter.addRightValue(mathExp1);
    FilterFactory factory=FilterFactoryFinder.createFilterFactory();
    compFilter=factory.createCompareFilter(AbstractFilter.COMPARE_LESS_THAN);
    compFilter.addLeftValue(attrExp1);
    compFilter.addRightValue(litExp2);
    geomFilter=factory.createGeometryFilter(AbstractFilter.GEOMETRY_TOUCHES);
    geomFilter.addLeftGeometry(attrExp2);
    geomFilter.addRightGeometry(litExp2);
    likeFilter=new LikeFilterImpl();
    likeFilter.setValue(attrExp1);
    likeFilter.setPattern(pattern,wcMulti,wcSingle,escape);
    nullFilter=new NullFilterImpl();
    nullFilter.nullCheckValue(attrExp2);
  }
 catch (  IllegalFilterException e) {
    fail(e.getMessage());
  }
  LOGGER.finer("...set up complete");
}
