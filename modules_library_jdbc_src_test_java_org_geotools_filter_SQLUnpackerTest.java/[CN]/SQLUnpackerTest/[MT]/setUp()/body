{
  super.setUp();
  setup=true;
  capabilities=new FilterCapabilities();
  capabilities.addType(AbstractFilter.LOGIC_OR);
  capabilities.addType(AbstractFilter.LOGIC_AND);
  capabilities.addType(AbstractFilter.LOGIC_NOT);
  capabilities.addType(AbstractFilter.COMPARE_EQUALS);
  capabilities.addType(AbstractFilter.COMPARE_LESS_THAN);
  capabilities.addType(AbstractFilter.COMPARE_GREATER_THAN);
  capabilities.addType(AbstractFilter.COMPARE_LESS_THAN_EQUAL);
  capabilities.addType(AbstractFilter.COMPARE_GREATER_THAN_EQUAL);
  capabilities.addType(AbstractFilter.NULL);
  capabilities.addType(AbstractFilter.BETWEEN);
  unpacker=new SQLUnpacker(capabilities);
  try {
    FilterFactory2 ff=CommonFactoryFinder.getFilterFactory2();
    attrExp1=ff.property("testInteger");
    attrExp2=ff.property("testGeometry");
    litExp1=ff.literal(new Integer(65));
    litExp2=ff.literal(new Integer(35));
    mathExp1=ff.add(litExp1,litExp2);
    btwnFilter=ff.between(attrExp1,litExp1,mathExp1);
    compFilter=ff.less(attrExp1,litExp2);
    geomFilter=ff.touches(attrExp2,litExp2);
    likeFilter=ff.like(attrExp1,pattern,wcMulti,wcSingle,escape);
    nullFilter=ff.isNull(attrExp2);
  }
 catch (  IllegalFilterException e) {
    fail(e.getMessage());
  }
  LOGGER.finer("...set up complete");
}
