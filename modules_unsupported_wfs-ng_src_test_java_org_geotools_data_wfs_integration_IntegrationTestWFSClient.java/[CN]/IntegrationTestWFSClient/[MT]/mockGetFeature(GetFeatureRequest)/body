{
  final QName typeName=request.getTypeName();
  String resource="GetFeature_" + typeName.getLocalPart() + ".xml";
  URL contentUrl=new URL(baseDirectory,resource);
  String outputFormat=request.getOutputFormat();
  HTTPResponse httpResponse=new TestHttpResponse(outputFormat,"UTF-8",contentUrl);
  WFSResponse response=request.createResponse(httpResponse);
  if (!(response instanceof GetFeatureResponse)) {
    return response;
  }
  final GetFeatureResponse gfr=(GetFeatureResponse)response;
  final GetFeatureParser allFeatures=gfr.getFeatures();
  if (allFeatures instanceof PullParserFeatureReader) {
    ((PullParserFeatureReader)allFeatures).setContextCustomizer(new ContextCustomizer(){
      @Override public void customizeContext(      MutablePicoContainer context){
        QName key=new QName("http://www.openplans.org/spearfish","schemaLocationResolver");
        context.registerComponentInstance(key,new XSDSchemaLocationResolver(){
          @Override public String resolveSchemaLocation(          XSDSchema xsdSchema,          String namespaceURI,          String schemaLocationURI){
            if (schemaLocationURI.startsWith("DescribeFeatureType")) {
              try {
                return new URL(baseDirectory,schemaLocationURI).toString();
              }
 catch (              MalformedURLException e) {
                return null;
              }
            }
            return schemaLocationURI;
          }
        }
);
      }
    }
);
  }
  final List<SimpleFeature> originalFeatures=new ArrayList<SimpleFeature>();
{
    SimpleFeature feature;
    while ((feature=allFeatures.parse()) != null) {
      originalFeatures.add(feature);
    }
  }
  WFSStrategy strategy=getStrategy();
  final Filter serverFiler=((AbstractWFSStrategy)strategy).splitFilters(typeName,request.getFilter())[0];
  final Diff diff=diff(typeName);
  for (Iterator<SimpleFeature> it=originalFeatures.iterator(); it.hasNext(); ) {
    if (!serverFiler.evaluate(it.next())) {
      it.remove();
    }
  }
  FeatureReader<SimpleFeatureType,SimpleFeature> allFeaturesReader=null;
  if (originalFeatures.size() > 0) {
    allFeaturesReader=DataUtilities.reader(originalFeatures);
  }
  final DiffFeatureReader<SimpleFeatureType,SimpleFeature> serverFilteredReader;
  serverFilteredReader=new DiffFeatureReader<SimpleFeatureType,SimpleFeature>(allFeaturesReader,diff,serverFiler);
  final GetFeatureParser filteredParser=new GetFeatureParser(){
    @Override public void setGeometryFactory(    GeometryFactory geometryFactory){
    }
    @Override public SimpleFeature parse() throws IOException {
      if (!serverFilteredReader.hasNext()) {
        return null;
      }
      return serverFilteredReader.next();
    }
    @Override public int getNumberOfFeatures(){
      if (-1 != allFeatures.getNumberOfFeatures()) {
        FeatureReader<SimpleFeatureType,SimpleFeature> all=null;
        try {
          if (originalFeatures.size() > 0) {
            all=DataUtilities.reader(originalFeatures);
          }
          final DiffFeatureReader<SimpleFeatureType,SimpleFeature> serverFiltered;
          serverFiltered=new DiffFeatureReader<SimpleFeatureType,SimpleFeature>(all,diff);
          try {
            int count=0;
            while (serverFiltered.hasNext()) {
              serverFiltered.next();
              count++;
            }
            return count;
          }
  finally {
            serverFiltered.close();
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
      }
      return -1;
    }
    @Override public FeatureType getFeatureType(){
      return allFeatures.getFeatureType();
    }
    @Override public void close() throws IOException {
      serverFilteredReader.close();
    }
  }
;
  try {
    return new GetFeatureResponse(request,httpResponse,filteredParser);
  }
 catch (  ServiceException e) {
    throw new IOException(e);
  }
}
