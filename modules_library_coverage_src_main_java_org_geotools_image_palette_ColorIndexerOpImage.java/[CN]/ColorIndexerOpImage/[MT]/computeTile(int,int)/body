{
  final RenderedImage sourceImage=getSourceImage(0);
  final Raster src=sourceImage.getTile(tx,ty);
  if (src == null) {
    return null;
  }
  final WritableRaster dest=icm.createCompatibleWritableRaster(src.getWidth(),src.getHeight()).createWritableTranslatedChild(src.getMinX(),src.getMinY());
  final int w=dest.getWidth();
  final int h=dest.getHeight();
  final int srcMinX=Math.max(sourceImage.getMinX(),src.getMinX());
  final int srcMinY=Math.max(sourceImage.getMinY(),src.getMinY());
  final int srcMaxX=Math.min(sourceImage.getMinX() + sourceImage.getWidth(),src.getMinX() + w);
  final int srcMaxY=Math.min(sourceImage.getMinY() + sourceImage.getHeight(),src.getMinY() + h);
  final int dstMinX=Math.max(src.getMinX(),sourceImage.getMinX());
  final int dstMinY=Math.max(src.getMinY(),sourceImage.getMinY());
  int srcBands=src.getNumBands();
  final int[] pixel=new int[srcBands];
  final byte[] bytes=new byte[srcBands];
  for (int y=srcMinY, y_=dstMinY; y < srcMaxY; y++, y_++) {
    for (int x=srcMinX, x_=dstMinX; x < srcMaxX; x++, x_++) {
      src.getPixel(x,y,pixel);
      for (int i=0; i < srcBands; i++) {
        bytes[i]=(byte)(pixel[i] & 0xFF);
      }
      int r, g, b, a;
      if (srcBands == 1 || srcBands == 2) {
        r=g=b=pixel[0] & 0xFF;
        a=srcBands == 2 ? pixel[1] & 0xFF : 255;
      }
 else {
        r=pixel[0] & 0xFF;
        g=pixel[1] & 0xFF;
        b=pixel[2] & 0xFF;
        a=srcBands == 4 ? pixel[3] & 0xFF : 255;
      }
      int idx=palette.getClosestIndex(r,g,b,a);
      dest.setSample(x_,y_,0,(byte)(idx & 0xff));
    }
  }
  return dest;
}
