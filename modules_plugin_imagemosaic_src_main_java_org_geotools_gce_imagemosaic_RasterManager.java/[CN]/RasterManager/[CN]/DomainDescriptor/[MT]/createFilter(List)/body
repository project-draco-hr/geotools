{
  final int size=values.size();
  final List<Filter> filters=new ArrayList<Filter>();
  FilterFactory2 ff=FeatureUtilities.DEFAULT_FILTER_FACTORY;
  for (int i=0; i < size; i++) {
    Object value=values.get(i);
    if (value == null) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Ignoring null date for the filter:" + this.identifier);
      }
      continue;
    }
    if (domainType == DomainType.SINGLE_VALUE) {
      if (value instanceof Range) {
        final Range range=(Range)value;
        filters.add(ff.and(ff.lessOrEqual(ff.property(propertyName),ff.literal(range.getMaxValue())),ff.greaterOrEqual(ff.property(propertyName),ff.literal(range.getMinValue()))));
      }
 else {
        filters.add(ff.equal(ff.property(propertyName),ff.literal(value),true));
      }
    }
 else {
      if (value instanceof Range) {
        final Range range=(Range)value;
        final Comparable maxValue=range.getMaxValue();
        final Comparable minValue=range.getMinValue();
        if (maxValue.compareTo(minValue) != 0) {
          Filter maxCondition=ff.greaterOrEqual(ff.literal(maxValue),ff.property(propertyName));
          Filter minCondition=ff.lessOrEqual(ff.literal(minValue),ff.property(additionalPropertyName));
          filters.add(ff.and(Arrays.asList(maxCondition,minCondition)));
          continue;
        }
 else {
          value=maxValue;
        }
      }
      filters.add(ff.and(ff.lessOrEqual(ff.property(propertyName),ff.literal(value)),ff.greaterOrEqual(ff.property(additionalPropertyName),ff.literal(value))));
    }
  }
  return ff.or(filters);
}
