{
  double[] src=new double[]{1,1,2,2,3,3,4,4,5,5};
  double[] dest=new double[8];
  MathTransform mt=ReferencingFactoryFinder.getMathTransformFactory(null).createAffineTransform(new GeneralMatrix(at));
  GeometryHandlerUtilities.transform(ShapeType.ARC,mt,src,dest,dest.length / 2);
  assertEquals(2d,dest[0],ACCURACY);
  assertEquals(.5d,dest[1],ACCURACY);
  assertEquals(4d,dest[2],ACCURACY);
  assertEquals(1d,dest[3],ACCURACY);
  assertEquals(6d,dest[4],ACCURACY);
  assertEquals(1.5d,dest[5],ACCURACY);
  assertEquals(8d,dest[6],ACCURACY);
  assertEquals(2d,dest[7],ACCURACY);
  src=new double[]{1,1,2,2,3,3,4,4,5,5};
  dest=new double[8];
  mt=NEVER_TRANSFORM;
  try {
    GeometryHandlerUtilities.transform(ShapeType.ARC,mt,src,dest,dest.length / 2);
    assertFalse("Shouldn't get here",true);
  }
 catch (  Exception e) {
  }
  dest=new double[]{1,1,2,2,3,3,4,4};
  mt=CANT_TRANSFORM_FIRST_ELEMENT;
  GeometryHandlerUtilities.transform(ShapeType.POLYGON,mt,src,dest,dest.length / 2);
  assertEquals(2d,dest[0],ACCURACY);
  assertEquals(2d,dest[1],ACCURACY);
  assertEquals(2d,dest[2],ACCURACY);
  assertEquals(2d,dest[3],ACCURACY);
  assertEquals(3d,dest[4],ACCURACY);
  assertEquals(3d,dest[5],ACCURACY);
  assertEquals(4d,dest[6],ACCURACY);
  assertEquals(4d,dest[7],ACCURACY);
  dest=new double[]{1,1,2,2,3,3,4,4};
  mt=CANT_TRANSFORM_3RD_ELEMENT;
  GeometryHandlerUtilities.transform(ShapeType.POLYGON,mt,src,dest,dest.length / 2);
  assertEquals(1d,dest[0],ACCURACY);
  assertEquals(1d,dest[1],ACCURACY);
  assertEquals(2d,dest[2],ACCURACY);
  assertEquals(2d,dest[3],ACCURACY);
  assertEquals(2d,dest[4],ACCURACY);
  assertEquals(2d,dest[5],ACCURACY);
  assertEquals(4d,dest[6],ACCURACY);
  assertEquals(4d,dest[7],ACCURACY);
}
