{
switch (eDataType.getClassifierID()) {
case Wfs20Package.ALL_SOME_TYPE:
    return convertAllSomeTypeToString(eDataType,instanceValue);
case Wfs20Package.NON_NEGATIVE_INTEGER_OR_UNKNOWN_MEMBER0:
  return convertNonNegativeIntegerOrUnknownMember0ToString(eDataType,instanceValue);
case Wfs20Package.RESOLVE_VALUE_TYPE:
return convertResolveValueTypeToString(eDataType,instanceValue);
case Wfs20Package.RESULT_TYPE_TYPE:
return convertResultTypeTypeToString(eDataType,instanceValue);
case Wfs20Package.STAR_STRING_TYPE:
return convertStarStringTypeToString(eDataType,instanceValue);
case Wfs20Package.STATE_VALUE_TYPE_MEMBER0:
return convertStateValueTypeMember0ToString(eDataType,instanceValue);
case Wfs20Package.UPDATE_ACTION_TYPE:
return convertUpdateActionTypeToString(eDataType,instanceValue);
case Wfs20Package.ALL_SOME_TYPE_OBJECT:
return convertAllSomeTypeObjectToString(eDataType,instanceValue);
case Wfs20Package.NON_NEGATIVE_INTEGER_OR_UNKNOWN:
return convertNonNegativeIntegerOrUnknownToString(eDataType,instanceValue);
case Wfs20Package.NON_NEGATIVE_INTEGER_OR_UNKNOWN_MEMBER0_OBJECT:
return convertNonNegativeIntegerOrUnknownMember0ObjectToString(eDataType,instanceValue);
case Wfs20Package.NON_NEGATIVE_INTEGER_OR_UNKNOWN_MEMBER1:
return convertNonNegativeIntegerOrUnknownMember1ToString(eDataType,instanceValue);
case Wfs20Package.POSITIVE_INTEGER_WITH_STAR:
return convertPositiveIntegerWithStarToString(eDataType,instanceValue);
case Wfs20Package.RESOLVE_VALUE_TYPE_OBJECT:
return convertResolveValueTypeObjectToString(eDataType,instanceValue);
case Wfs20Package.RESULT_TYPE_TYPE_OBJECT:
return convertResultTypeTypeObjectToString(eDataType,instanceValue);
case Wfs20Package.RETURN_FEATURE_TYPES_LIST_TYPE:
return convertReturnFeatureTypesListTypeToString(eDataType,instanceValue);
case Wfs20Package.STAR_STRING_TYPE_OBJECT:
return convertStarStringTypeObjectToString(eDataType,instanceValue);
case Wfs20Package.STATE_VALUE_TYPE:
return convertStateValueTypeToString(eDataType,instanceValue);
case Wfs20Package.STATE_VALUE_TYPE_MEMBER0_OBJECT:
return convertStateValueTypeMember0ObjectToString(eDataType,instanceValue);
case Wfs20Package.STATE_VALUE_TYPE_MEMBER1:
return convertStateValueTypeMember1ToString(eDataType,instanceValue);
case Wfs20Package.UPDATE_ACTION_TYPE_OBJECT:
return convertUpdateActionTypeObjectToString(eDataType,instanceValue);
case Wfs20Package.URI:
return convertURIToString(eDataType,instanceValue);
case Wfs20Package.MAP:
return convertMapToString(eDataType,instanceValue);
case Wfs20Package.FILTER:
return convertFilterToString(eDataType,instanceValue);
case Wfs20Package.QNAME:
return convertQNameToString(eDataType,instanceValue);
case Wfs20Package.SORT_BY:
return convertSortByToString(eDataType,instanceValue);
case Wfs20Package.CALENDAR:
return convertCalendarToString(eDataType,instanceValue);
case Wfs20Package.FEATURE_COLLECTION:
return convertFeatureCollectionToString(eDataType,instanceValue);
case Wfs20Package.PROPERTY_NAME:
return convertPropertyNameToString(eDataType,instanceValue);
case Wfs20Package.FEATURE_ID:
return convertFeatureIdToString(eDataType,instanceValue);
default :
throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
}
}
