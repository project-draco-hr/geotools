{
  Tile.ensureNonNull("tiles",tiles);
  Tile[] modifiedOrder=tiles;
  final Map<Dimension,OverviewLevel> levelsBySubsampling=new HashMap<Dimension,OverviewLevel>();
  for (int i=0; i < modifiedOrder.length; i++) {
    Tile tile=modifiedOrder[i];
    Dimension subsampling=tile.getSubsampling();
    OverviewLevel level=levelsBySubsampling.get(subsampling);
    if (level == null) {
      for (int j=i; ++j < modifiedOrder.length; ) {
        final Tile candidate=modifiedOrder[j];
        if (candidate.isLargerThan(tile)) {
          if (modifiedOrder == tiles) {
            modifiedOrder=modifiedOrder.clone();
          }
          modifiedOrder[j]=tile;
          tile=candidate;
          subsampling=tile.getSubsampling();
        }
      }
      level=new OverviewLevel(tile,subsampling);
      levelsBySubsampling.put(subsampling,level);
    }
 else {
      level.add(tile,subsampling);
    }
  }
  final OverviewLevel[] levels;
  levels=levelsBySubsampling.values().toArray(new OverviewLevel[levelsBySubsampling.size()]);
  Arrays.sort(levels);
  region=new Rectangle(-1,-1);
  int count=0;
  for (int i=0; i < levels.length; i++) {
    final OverviewLevel level=levels[i];
    level.createLinkedList(i,(i != 0) ? levels[i - 1] : null);
    region.add(level.getAbsoluteRegion());
    count+=level.getNumTiles();
  }
  this.count=count;
  root=(levels.length != 0) ? levels[levels.length - 1] : null;
}
