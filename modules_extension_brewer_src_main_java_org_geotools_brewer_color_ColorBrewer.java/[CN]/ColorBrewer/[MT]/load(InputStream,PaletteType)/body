{
  try {
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document document=builder.parse(stream);
    this.name=fixToString(document.getElementsByTagName("name").item(0).getFirstChild().toString());
    this.description=fixToString(document.getElementsByTagName("description").item(0).getFirstChild().toString());
    SampleScheme scheme=new SampleScheme();
    NodeList samples=document.getElementsByTagName("sample");
    for (int i=0; i < samples.getLength(); i++) {
      Node sample=samples.item(i);
      int size=Integer.parseInt(sample.getAttributes().getNamedItem("size").getNodeValue());
      String values=fixToString(sample.getFirstChild().toString());
      int[] list=new int[size];
      StringTokenizer tok=new StringTokenizer(values);
      for (int j=0; j < size; j++) {
        list[j]=Integer.parseInt(tok.nextToken(","));
      }
      scheme.setSampleScheme(size,list);
    }
    NodeList palettes=document.getElementsByTagName("palette");
    for (int i=0; i < palettes.getLength(); i++) {
      BrewerPalette pal=new BrewerPalette();
      PaletteSuitability suitability=new PaletteSuitability();
      NodeList paletteInfo=palettes.item(i).getChildNodes();
      for (int j=0; j < paletteInfo.getLength(); j++) {
        Node item=paletteInfo.item(j);
        if (item.getNodeName().equals("name")) {
          pal.setName(fixToString(item.getFirstChild().toString()));
        }
        if (item.getNodeName().equals("description")) {
          pal.setDescription(fixToString(item.getFirstChild().toString()));
        }
        if (item.getNodeName().equals("colors")) {
          StringTokenizer oTok=new StringTokenizer(fixToString(item.getFirstChild().toString()));
          int numColors=0;
          Color[] colors=new Color[15];
          for (int k=0; k < 15; k++) {
            if (!oTok.hasMoreTokens()) {
              break;
            }
            String entry=oTok.nextToken(":");
            StringTokenizer iTok=new StringTokenizer(entry);
            int r=Integer.parseInt(iTok.nextToken(",").trim());
            int g=Integer.parseInt(iTok.nextToken(",").trim());
            int b=Integer.parseInt(iTok.nextToken(",").trim());
            colors[numColors]=new Color(r,g,b);
            numColors++;
          }
          pal.setColors(colors);
        }
        if (item.getNodeName().equals("suitability")) {
          NodeList schemeSuitability=item.getChildNodes();
          for (int k=0; k < schemeSuitability.getLength(); k++) {
            Node palScheme=schemeSuitability.item(k);
            if (palScheme.getNodeName().equals("scheme")) {
              int paletteSize=Integer.parseInt(palScheme.getAttributes().getNamedItem("size").getNodeValue());
              String values=fixToString(palScheme.getFirstChild().toString());
              String[] list=new String[6];
              StringTokenizer tok=new StringTokenizer(values);
              for (int m=0; m < 6; m++) {
                list[m]=tok.nextToken(",");
              }
              suitability.setSuitability(paletteSize,list);
            }
          }
        }
      }
      pal.setType(type);
      pal.setColorScheme(scheme);
      pal.setPaletteSuitability(suitability);
      registerPalette(pal);
    }
  }
 catch (  SAXException sxe) {
    LOGGER.log(Level.SEVERE,"Error during palette parsing",sxe);
  }
catch (  ParserConfigurationException pce) {
    LOGGER.log(Level.SEVERE,"Parser with specified options can't be built",pce);
  }
catch (  IOException ioe) {
    LOGGER.log(Level.SEVERE,"i/o error during palette parsing",ioe);
  }
}
