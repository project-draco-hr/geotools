{
  final QName featureName=GEOS_STATES_11.TYPENAME;
  final int expectedCount=2;
  final URL schemaLocation=GEOS_STATES_11.SCHEMA;
  final String[] properties={"the_geom","STATE_NAME","STATE_FIPS","SUB_REGION","SAMP_POP"};
  final SimpleFeatureType featureType;
  featureType=getTypeView(featureName,schemaLocation,GEOS_STATES_11.CRS,properties);
  final FeatureVisitor assertor=new FeatureAssertor(featureType){
    @Override public void visit(    final Feature feature){
      super.visit(feature);
      final String fid=feature.getIdentifier().getID();
      final int numPolygons;
      final int expectedHoles;
      if ("states.1".equals(fid)) {
        numPolygons=2;
        expectedHoles=1;
      }
 else       if ("states.2".equals(fid)) {
        numPolygons=1;
        expectedHoles=2;
      }
 else {
        throw new IllegalArgumentException("Expected states.1 or states.2, got " + fid);
      }
      GeometryAttribute defaultGeometryProperty=feature.getDefaultGeometryProperty();
      assertNotNull(defaultGeometryProperty);
      final Object value=defaultGeometryProperty.getValue();
      assertNotNull(value);
      assertTrue("value: " + value,value instanceof MultiPolygon);
      MultiPolygon mp=(MultiPolygon)value;
      assertEquals(numPolygons,mp.getNumGeometries());
      for (int i=0; i < numPolygons; i++) {
        Polygon p=(Polygon)mp.getGeometryN(i);
        assertEquals(expectedHoles,p.getNumInteriorRing());
      }
    }
  }
;
  GetFeatureParser parser=getParser(featureName,schemaLocation,featureType,GEOS_STATES_11.DATA);
  int nof=parser.getNumberOfFeatures();
  assertEquals(expectedCount,nof);
  testParseGetFeatures(featureName,featureType,parser,assertor,expectedCount);
}
