{
  needsOrdering=true;
  try {
    if (symbolizer.getLabel() == null) {
      return;
    }
    String label=(String)symbolizer.getLabel().evaluate(feature,String.class);
    if (label == null)     return;
    if (label.length() == 0) {
      return;
    }
    double priorityValue=getPriority(symbolizer,feature);
    boolean group=voParser.getBooleanOption(symbolizer,TextSymbolizer.GROUP_KEY,false);
    LabelCacheItem item=buildLabelCacheItem(layerId,symbolizer,feature,shape,scaleRange,label,priorityValue);
    if (!(group)) {
      labelCache.add(item);
    }
 else {
      LabelCacheItem groupItem=groupedLabelsLookup.get(item);
      if (groupItem == null) {
        labelCache.add(item);
        groupedLabelsLookup.put(item,item);
      }
 else {
        Expression priority=symbolizer.getPriority();
        if ((priority != null) && (!(priority instanceof Literal))) {
          groupItem.setPriority(groupItem.getPriority() + priorityValue);
        }
        groupItem.getGeoms().add(shape.getGeometry());
      }
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,"Error adding label to the label cache",e);
  }
}
