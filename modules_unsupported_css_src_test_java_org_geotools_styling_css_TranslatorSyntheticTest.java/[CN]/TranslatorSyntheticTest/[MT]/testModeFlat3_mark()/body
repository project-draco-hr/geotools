{
  String css="@mode \"Flat\"; " + "* { fill: blue; } " + "[value1=1] { fill: green; } "+ "[value2=2] { stroke: red; } "+ "[value3=3] { mark: symbol(circle); mark-size: 10; mark-rotation: 45; mark-geometry: [centroid(the_geom)];} [value3=3] :mark { fill: blue; }";
  Style style=translate(css);
  assertEquals(1,style.featureTypeStyles().size());
  assertEquals(4,style.featureTypeStyles().get(0).rules().size());
  assertEquals(ECQL.toFilter("include"),style.featureTypeStyles().get(0).rules().get(0).getFilter());
  assertEquals(ECQL.toFilter("value1=1"),style.featureTypeStyles().get(0).rules().get(1).getFilter());
  assertEquals(ECQL.toFilter("value2=2"),style.featureTypeStyles().get(0).rules().get(2).getFilter());
  assertEquals(ECQL.toFilter("value3=3"),style.featureTypeStyles().get(0).rules().get(3).getFilter());
  PointSymbolizer ps=assertSingleSymbolizer(style.featureTypeStyles().get(0).rules().get(3),PointSymbolizer.class);
  assertExpression("centroid(the_geom)",ps.getGeometry());
  Graphic g=ps.getGraphic();
  assertLiteral("10",g.getSize());
  assertLiteral("45",g.getRotation());
  assertNotNull(g);
  assertEquals(1,g.graphicalSymbols().size());
  Mark mark=(Mark)g.graphicalSymbols().get(0);
  assertLiteral("circle",mark.getWellKnownName());
  assertLiteral("#0000ff",mark.getFill().getColor());
}
