{
  StringBuffer sql=new StringBuffer();
  sql.append("SELECT ");
  selectColumns(featureType,null,query,sql);
  sql.setLength(sql.length() - 1);
  dialect.encodePostSelect(featureType,sql);
  sql.append(" FROM ");
  encodeTableName(featureType.getTypeName(),sql,query.getHints());
  PreparedFilterToSQL toSQL=null;
  Filter filter=query.getFilter();
  if (filter != null && !Filter.INCLUDE.equals(filter)) {
    sql.append(" WHERE ");
    toSQL=(PreparedFilterToSQL)filter(featureType,filter,sql);
  }
  sort(featureType,query.getSortBy(),null,sql);
  applyLimitOffset(sql,query);
  applySearchHints(featureType,query,sql);
  LOGGER.fine(sql.toString());
  PreparedStatement ps=cx.prepareStatement(sql.toString(),ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
  ps.setFetchSize(fetchSize);
  if (toSQL != null) {
    setPreparedFilterValues(ps,toSQL,0,cx);
  }
  return ps;
}
