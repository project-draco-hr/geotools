{
  if ((sort != null) && (sort.length > 0)) {
    PrimaryKey key=getPrimaryKey(featureType);
    sql.append(" ORDER BY ");
    for (int i=0; i < sort.length; i++) {
      String order;
      if (sort[i].getSortOrder() == SortOrder.DESCENDING) {
        order=" DESC";
      }
 else {
        order=" ASC";
      }
      if (SortBy.NATURAL_ORDER.equals(sort[i]) || SortBy.REVERSE_ORDER.equals(sort[i])) {
        if (key instanceof NullPrimaryKey)         throw new IOException("Cannot do natural order without a primary key");
        for (        PrimaryKeyColumn col : key.getColumns()) {
          dialect.encodeColumnName(prefix,col.getName(),sql);
          sql.append(order);
          sql.append(",");
        }
      }
 else {
        dialect.encodeColumnName(prefix,getPropertyName(featureType,sort[i].getPropertyName()),sql);
        sql.append(order);
        sql.append(",");
      }
    }
    sql.setLength(sql.length() - 1);
  }
}
