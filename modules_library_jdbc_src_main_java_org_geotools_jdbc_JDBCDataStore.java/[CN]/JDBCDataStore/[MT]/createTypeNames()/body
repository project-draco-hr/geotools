{
  Connection cx=createConnection();
  List typeNames=new ArrayList();
  try {
    DatabaseMetaData metaData=cx.getMetaData();
    Set<String> availableTableTypes=new HashSet<String>();
    ResultSet tableTypes=null;
    try {
      tableTypes=metaData.getTableTypes();
      while (tableTypes.next()) {
        availableTableTypes.add(tableTypes.getString("TABLE_TYPE"));
      }
    }
  finally {
      closeSafe(tableTypes);
    }
    Set<String> queryTypes=new HashSet<String>();
    for (    String desiredTableType : dialect.getDesiredTablesType()) {
      if (availableTableTypes.contains(desiredTableType)) {
        queryTypes.add(desiredTableType);
      }
    }
    ResultSet tables=metaData.getTables(null,escapeNamePattern(metaData,databaseSchema),"%",queryTypes.toArray(new String[0]));
    if (fetchSize > 1) {
      tables.setFetchSize(fetchSize);
    }
    try {
      while (tables.next()) {
        String schemaName=tables.getString("TABLE_SCHEM");
        String tableName=tables.getString("TABLE_NAME");
        if (!dialect.includeTable(schemaName,tableName,cx)) {
          continue;
        }
        typeNames.add(new NameImpl(namespaceURI,tableName));
      }
    }
  finally {
      closeSafe(tables);
    }
  }
 catch (  SQLException e) {
    throw (IOException)new IOException("Error occurred getting table name list.").initCause(e);
  }
 finally {
    closeSafe(cx);
  }
  for (  String virtualTable : virtualTables.keySet()) {
    typeNames.add(new NameImpl(namespaceURI,virtualTable));
  }
  return typeNames;
}
