{
  BasicSQLDialect dialect=(BasicSQLDialect)getSQLDialect();
  PrimaryKey key=null;
  try {
    key=getPrimaryKey(featureType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Set<String> pkColumnNames=getColumnNames(key);
  StringBuffer sql=new StringBuffer();
  sql.append("UPDATE ");
  encodeTableName(featureType.getTypeName(),sql,null);
  sql.append(" SET ");
  for (int i=0; i < attributes.length; i++) {
    AttributeDescriptor att=attributes[i];
    String attName=att.getLocalName();
    if (pkColumnNames.contains(attName)) {
      continue;
    }
    dialect.encodeColumnName(attName,sql);
    sql.append(" = ");
    if (Geometry.class.isAssignableFrom(att.getType().getBinding())) {
      try {
        Geometry g=(Geometry)values[i];
        int srid=getGeometrySRID(g,att);
        int dimension=getGeometryDimension(g,att);
        dialect.encodeGeometryValue(g,dimension,srid,sql);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
 else {
      dialect.encodeValue(values[i],att.getType().getBinding(),sql);
    }
    sql.append(",");
  }
  sql.setLength(sql.length() - 1);
  sql.append(" ");
  if (filter != null && !Filter.INCLUDE.equals(filter)) {
    try {
      FilterToSQL toSQL=createFilterToSQL(featureType);
      sql.append(" ").append(toSQL.encodeToString(filter));
    }
 catch (    FilterToSQLException e) {
      throw new RuntimeException(e);
    }
  }
  return sql.toString();
}
