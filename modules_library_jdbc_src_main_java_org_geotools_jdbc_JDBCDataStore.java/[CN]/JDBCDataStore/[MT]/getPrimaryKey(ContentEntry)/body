{
  JDBCState state=(JDBCState)entry.getState(Transaction.AUTO_COMMIT);
  if (state.getPrimaryKey() == null) {
synchronized (this) {
      if (state.getPrimaryKey() == null) {
        Connection cx=createConnection();
        try {
          PrimaryKey pkey=null;
          String tableName=entry.getName().getLocalPart();
          if (virtualTables.containsKey(tableName)) {
            VirtualTable vt=virtualTables.get(tableName);
            if (vt.getPrimaryKeyColumns().size() == 0) {
              pkey=new NullPrimaryKey(tableName);
            }
 else {
              List<ColumnMetadata> metas=JDBCFeatureSource.getColumnMetadata(cx,vt,dialect,this);
              List<PrimaryKeyColumn> kcols=new ArrayList<PrimaryKeyColumn>();
              for (              String pkName : vt.getPrimaryKeyColumns()) {
                Class binding=null;
                for (                ColumnMetadata meta : metas) {
                  if (meta.name.equals(pkName)) {
                    binding=meta.binding;
                  }
                }
                kcols.add(new NonIncrementingPrimaryKeyColumn(pkName,binding));
              }
              pkey=new PrimaryKey(tableName,kcols);
            }
          }
 else {
            try {
              pkey=primaryKeyFinder.getPrimaryKey(this,databaseSchema,tableName,cx);
            }
 catch (            SQLException e) {
              LOGGER.log(Level.WARNING,"Failure occurred while looking up the primary key with " + "finder: " + primaryKeyFinder,e);
            }
            if (pkey == null) {
              String msg="No primary key or unique index found for " + tableName + ".";
              LOGGER.info(msg);
              pkey=new NullPrimaryKey(tableName);
            }
          }
          state.setPrimaryKey(pkey);
        }
 catch (        SQLException e) {
          String msg="Error looking up primary key";
          throw (IOException)new IOException(msg).initCause(e);
        }
 finally {
          closeSafe(cx);
        }
      }
    }
  }
  return state.getPrimaryKey();
}
