{
  Integer mapping=getClassToSqlTypeMappings().get(clazz);
  if (mapping == null) {
    List<Map.Entry<Class<?>,Integer>> matches=new ArrayList();
    for (    Map.Entry<Class<?>,Integer> e : getClassToSqlTypeMappings().entrySet()) {
      if (e.getKey().isAssignableFrom(clazz)) {
        matches.add(e);
      }
    }
    if (!matches.isEmpty()) {
      if (matches.size() == 1) {
        mapping=matches.get(0).getValue();
      }
 else {
        Collections.sort(matches,new Comparator<Map.Entry<Class<?>,Integer>>(){
          public int compare(          Entry<Class<?>,Integer> o1,          Entry<Class<?>,Integer> o2){
            if (o1.getKey().isAssignableFrom(o2.getKey())) {
              return 1;
            }
            if (o2.getKey().isAssignableFrom(o1.getKey())) {
              return -1;
            }
            return 0;
          }
        }
);
        if (matches.get(1).getKey().isAssignableFrom(matches.get(0).getKey())) {
          mapping=matches.get(0).getValue();
        }
      }
    }
  }
  if (mapping == null) {
    mapping=Types.OTHER;
    LOGGER.warning("No mapping for " + clazz.getName());
  }
  return mapping;
}
