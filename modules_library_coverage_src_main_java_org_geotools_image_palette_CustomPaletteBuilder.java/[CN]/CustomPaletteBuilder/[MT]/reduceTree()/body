{
  if (LOGGER.isLoggable(Level.FINER)) {
    LOGGER.finer("reduceTree called");
  }
  int level=reduceList.length - 1;
  while ((reduceList[level] == null) && (level >= 0)) {
    level--;
  }
  ColorNode thisNode=reduceList[level];
  if (thisNode == null) {
    return;
  }
  ColorNode pList=thisNode;
  int minColorCount=pList.colorCount;
  int cnt=1;
  while (pList.nextReducible != null) {
    if (minColorCount > pList.nextReducible.colorCount) {
      thisNode=pList;
      minColorCount=pList.colorCount;
    }
    pList=pList.nextReducible;
    cnt++;
  }
  if (thisNode == reduceList[level]) {
    reduceList[level]=thisNode.nextReducible;
  }
 else {
    pList=thisNode.nextReducible;
    thisNode.nextReducible=pList.nextReducible;
    thisNode=pList;
  }
  if (thisNode.isLeaf) {
    return;
  }
  int leafChildCount=thisNode.getLeafChildCount();
  thisNode.isLeaf=true;
  currSize-=(leafChildCount - 1);
  final int aDepth=thisNode.level;
  for (int i=0; i < 8; i++) {
    thisNode.children[i]=freeTree(thisNode.children[i]);
  }
  thisNode.childCount=0;
}
