{
  UniqueVisitor uniqueVisitor=new UniqueVisitor(0,ft);
  fc.accepts(uniqueVisitor,null);
  UniqueVisitor uniqueVisitor2=new UniqueVisitor(3,ft2);
  fc2.accepts(uniqueVisitor2,null);
  Set value1=uniqueVisitor.getResult().toSet();
  assertEquals(3,value1.size());
  Object[] value2=uniqueVisitor2.getResult().toArray();
  assertEquals(2,value2.length);
  CalcResult uniqueResult1=uniqueVisitor.getResult();
  CalcResult uniqueResult2=uniqueVisitor2.getResult();
  CalcResult uniqueResult3=uniqueResult1.merge(uniqueResult2);
  assertEquals(5,uniqueResult3.toSet().size());
  assertEquals(3,uniqueResult1.toSet().size());
  Set anotherSet=new HashSet();
  anotherSet.add(new Integer(2));
  anotherSet.add(new Integer(4));
  CalcResult uniqueResult4=new UniqueResult(anotherSet);
  CalcResult uniqueResult5=uniqueResult1.merge(uniqueResult4);
  assertEquals(4,uniqueResult5.toSet().size());
  uniqueVisitor.setValue(anotherSet);
  uniqueResult1=uniqueVisitor.getResult();
  assertEquals(anotherSet,uniqueResult1.toSet());
  uniqueResult3=uniqueResult2.merge(uniqueResult1);
  Set<Object> set=uniqueResult3.toSet();
  assertTrue(set.size() == 4);
  assertTrue(set.contains(3.0));
  assertTrue(set.contains(4.5));
  assertTrue(set.contains(2));
  assertTrue(set.contains(4));
  assertFalse(set.contains(6));
  uniqueVisitor.reset();
  empty.accepts(uniqueVisitor,null);
  assertEquals(CalcResult.NULL_RESULT,uniqueVisitor.getResult());
  assertSame(uniqueResult2,uniqueVisitor.getResult().merge(uniqueResult2));
  assertSame(uniqueResult2,uniqueResult2.merge(uniqueVisitor.getResult()));
}
