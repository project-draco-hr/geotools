{
  if (filterType == FilterType.BETWEEN) {
    if (curState.equals("attribute")) {
      ((BetweenFilterImpl)curFilter).setExpression(expression);
      curState="LowerBoundary";
    }
 else     if (curState.equals("LowerBoundary")) {
      ((BinaryComparisonAbstract)curFilter).setExpression1(expression);
      curState="UpperBoundary";
    }
 else     if (curState.equals("UpperBoundary")) {
      ((BinaryComparisonAbstract)curFilter).setExpression2(expression);
      curState="complete";
    }
 else {
      throw new IllegalFilterException("Got expression for Between Filter in illegal state: " + curState);
    }
  }
 else   if (AbstractFilter.isCompareFilter(filterType)) {
    if (curState.equals("leftValue")) {
      ((BinaryComparisonAbstract)curFilter).setExpression1(expression);
      curState="rightValue";
    }
 else     if (curState.equals("rightValue")) {
      ((BinaryComparisonAbstract)curFilter).setExpression2(expression);
      curState="complete";
    }
 else {
      throw new IllegalFilterException("Got expression for Compare Filter in illegal state: " + curState);
    }
  }
 else   if (filterType == FilterType.NULL) {
    if (curState.equals("attribute")) {
      ((NullFilterImpl)curFilter).setExpression(expression);
      curState="complete";
    }
 else {
      throw new IllegalFilterException("Got expression for Null Filter in illegal state: " + curState);
    }
  }
 else   if (AbstractFilter.isGeometryFilter(filterType)) {
    if (curState.equals("leftValue")) {
      ((BinaryComparisonAbstract)curFilter).setExpression1(expression);
      curState="rightValue";
    }
 else     if (curState.equals("rightValue")) {
      ((BinaryComparisonAbstract)curFilter).setExpression2(expression);
      if (AbstractFilter.isGeometryDistanceFilter(filterType)) {
        curState="distance";
      }
 else {
        curState="complete";
      }
      LOGGER.finer("expression called on geometry, curState = " + curState);
    }
 else {
      throw new IllegalFilterException("Got expression for Geometry Filter in illegal state: " + curState);
    }
  }
 else   if (filterType == AbstractFilter.LIKE) {
    if (curState.equals("attribute")) {
      ((LikeFilterImpl)curFilter).setExpression(expression);
      curState="pattern";
    }
 else     if (curState.equals("pattern")) {
      if (attributes.size() < NUM_LIKE_ATTS) {
        throw new IllegalFilterException("Got wrong number of attributes (expecting minimum 3): " + attributes.size() + "\n"+ attributes);
      }
      String wildcard=(String)attributes.get("wildCard");
      if ((wildcard == null) || (wildcard.length() != 1)) {
        throw new IllegalFilterException("like filter -- required attribute 'wildCard' missing or not exactly 1 char long.  Capitalization?");
      }
      String singleChar=(String)attributes.get("singleChar");
      if ((singleChar == null) || (singleChar.length() != 1)) {
        throw new IllegalFilterException("like filter -- required attribute 'singleChar' missing  or not exactly 1 char long.  Capitalization?");
      }
      String escapeChar=(String)attributes.get("escape");
      if (escapeChar == null)       escapeChar=(String)attributes.get("escapeChar");
      if ((escapeChar == null) || (escapeChar.length() != 1)) {
        throw new IllegalFilterException("like filter -- required attribute 'escape' missing  or not exactly 1 char long.  Capitalization?");
      }
      LOGGER.fine("escape char is " + escapeChar);
      String matchCase=(String)attributes.get("matchCase");
      if (matchCase != null) {
        ((LikeFilterImpl)curFilter).setMatchingCase(Boolean.parseBoolean(matchCase));
      }
      ((LikeFilterImpl)curFilter).setPattern(expression,wildcard,singleChar,escapeChar);
      curState="complete";
    }
 else {
      throw new IllegalFilterException("Got expression for Like Filter in illegal state: " + curState);
    }
  }
  LOGGER.finer("current state (end): " + curState);
}
