{
  Map<String,Object> processInputs=new HashMap<String,Object>();
  for (  Expression input : inputExpressions) {
    Object result=input.evaluate(object,Map.class);
    if (result != null) {
      Map map=(Map)result;
      if (map.size() > 1) {
        throw new InvalidParameterException("The parameters to a ProcessFunction " + "must all be maps with a single entry, " + "the key is the process argument name, "+ "the value is the argument value");
      }
 else {
        Iterator it=map.entrySet().iterator();
        Map.Entry<String,Object> entry=(Entry<String,Object>)it.next();
        final String paramName=entry.getKey();
        final Object paramValue=entry.getValue();
        Parameter param=parameters.get(paramName);
        if (param == null) {
          throw new InvalidParameterException("Parameter " + paramName + " is not among the process parameters: "+ parameters.keySet());
        }
 else {
          if (paramValue != null) {
            Object converted;
            if (param.maxOccurs > 1) {
              if (!(paramValue instanceof Collection) && !(paramValue.getClass().isArray())) {
                List<Object> collection=Collections.singletonList(paramValue);
                converted=Converters.convert(collection,Array.newInstance(param.type,0).getClass());
              }
 else {
                converted=Converters.convert(paramValue,Array.newInstance(param.type,0).getClass());
              }
            }
 else {
              converted=Converters.convert(paramValue,param.type);
            }
            if (converted == null) {
              if (param.maxOccurs > 1 && Collection.class.isAssignableFrom(paramValue.getClass())) {
                final Collection collection=(Collection)paramValue;
                Collection convertedCollection=new ArrayList(collection.size());
                for (                Object original : collection) {
                  Object convertedItem=Converters.convert(original,param.type);
                  if (original != null && convertedItem == null) {
                    throw new InvalidParameterException("Could not convert the value " + original + " into the expected type "+ param.type+ " for parameter "+ paramName);
                  }
                  convertedCollection.add(convertedItem);
                }
                Object array=Array.newInstance(param.type,convertedCollection.size());
                int i=0;
                for (                Object item : convertedCollection) {
                  Array.set(array,i,item);
                  i++;
                }
                converted=array;
              }
 else {
                throw new InvalidParameterException("Could not convert the value " + paramValue + " into the expected type "+ param.type+ " for parameter "+ paramName);
              }
            }
            processInputs.put(paramName,converted);
          }
        }
      }
    }
  }
  return processInputs;
}
