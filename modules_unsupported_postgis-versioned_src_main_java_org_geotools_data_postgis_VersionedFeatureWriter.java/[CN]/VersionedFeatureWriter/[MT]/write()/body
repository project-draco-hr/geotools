{
  Statement st=null;
  try {
    boolean dirtyFeature=false;
    if (oldFeature != null) {
      boolean dirty=false;
      for (int i=0; i < liveFeature.getAttributeCount(); i++) {
        AttributeDescriptor at=liveFeature.getFeatureType().getDescriptor(i);
        Object newValue=liveFeature.getAttribute(at.getLocalName());
        Object oldValue=oldFeature.getAttribute(at.getLocalName());
        newFeature.setAttribute(at.getLocalName(),newValue);
        if (!DataUtilities.attributesEqual(newValue,oldValue)) {
          dirty=true;
        }
      }
      if (!dirty)       return;
    }
    String typeName=liveFeature.getFeatureType().getTypeName();
    String fid=liveFeature.getID();
    dirtyFeature=state.isFidDirty(typeName,fid);
    SimpleFeature writtenFeature=null;
    if (dirtyFeature) {
      for (int i=0; i < liveFeature.getAttributeCount(); i++) {
        AttributeDescriptor at=liveFeature.getFeatureType().getDescriptor(i);
        oldFeature.setAttribute(at.getLocalName(),liveFeature.getAttribute(at.getLocalName()));
      }
      writeOldFeature(false);
      writtenFeature=oldFeature;
    }
 else {
      if (oldFeature != null)       writeOldFeature(true);
      for (int i=0; i < liveFeature.getAttributeCount(); i++) {
        AttributeDescriptor at=liveFeature.getFeatureType().getDescriptor(i);
        newFeature.setAttribute(at.getLocalName(),liveFeature.getAttribute(at.getLocalName()));
      }
      newFeature.setAttribute("expired",NON_EXPIRED);
      newFeature.setAttribute("revision",new Long(state.getRevision()));
      if (oldFeature != null) {
        newFeature.setAttribute("created",oldFeature.getAttribute("created"));
      }
 else {
        newFeature.setAttribute("created",new Long(state.getRevision()));
      }
      String id=null;
      if (oldFeature != null) {
        id=mapper.createVersionedFid(liveFeature.getID(),state.getRevision());
        newFeature.setAttribute("created",oldFeature.getAttribute("created"));
      }
 else       if (!mapper.hasAutoIncrementColumns()) {
        ((MutableFIDFeature)newFeature).setID(liveFeature.getID());
        id=mapper.createID(state.getConnection(),newFeature,null);
        newFeature.setAttribute("created",new Long(state.getRevision()));
      }
      if (id != null) {
        ((MutableFIDFeature)newFeature).setID(id);
        Object[] pkatts=mapper.getPKAttributes(id);
        for (int i=0; i < pkatts.length; i++) {
          newFeature.setAttribute(mapper.getColumnName(i),pkatts[i]);
        }
      }
 else {
      }
      appendWriter.write();
      if (oldFeature == null && mapper.hasAutoIncrementColumns()) {
        st=state.getConnection().createStatement();
        id=mapper.createID(state.getConnection(),newFeature,st);
      }
      ((MutableFIDFeature)newFeature).setID(id);
      ((MutableFIDFeature)liveFeature).setID(mapper.getUnversionedFid(id));
      state.setFidDirty(liveFeature.getFeatureType().getTypeName(),liveFeature.getID());
      writtenFeature=newFeature;
    }
    state.expandDirtyBounds(getWgs84FeatureEnvelope(writtenFeature));
    if (oldFeature != null) {
      ReferencedEnvelope bounds=ReferencedEnvelope.reference(oldFeature.getBounds());
      bounds.include(liveFeature.getBounds());
      listenerManager.fireFeaturesChanged(getFeatureType().getTypeName(),state.getTransaction(),bounds,false);
    }
 else {
      listenerManager.fireFeaturesAdded(getFeatureType().getTypeName(),state.getTransaction(),ReferencedEnvelope.reference(liveFeature.getBounds()),false);
    }
  }
 catch (  IllegalAttributeException e) {
    throw new DataSourceException("Error writing expiration tag on old feature. " + "Should not happen, there's a bug at work.",e);
  }
catch (  SQLException e) {
    throw new DataSourceException("Error creating a new statement for primary key generation",e);
  }
 finally {
    JDBCUtils.close(st);
  }
}
