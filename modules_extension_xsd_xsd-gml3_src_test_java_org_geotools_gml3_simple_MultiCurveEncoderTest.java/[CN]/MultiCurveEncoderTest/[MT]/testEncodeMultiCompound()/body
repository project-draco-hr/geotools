{
  MultiLineStringEncoder encoder=new MultiLineStringEncoder(gtEncoder,"gml");
  Geometry geometry=new WKTReader2().read("MULTICURVE((100 100, 120 120), COMPOUNDCURVE(CIRCULARSTRING(0 0, 2 0, 2 1, 2 3, 4 3),(4 3, 4 5, 1 4, 0 0)))");
  Document doc=encode(encoder,geometry);
  assertEquals(1,xpath.getMatchingNodes("//gml:MultiCurve",doc).getLength());
  assertEquals(2,xpath.getMatchingNodes("//gml:MultiCurve/gml:curveMember",doc).getLength());
  assertEquals("100 100 120 120",xpath.evaluate("//gml:MultiCurve/gml:curveMember[1]/gml:LineString/gml:posList",doc));
  assertEquals(2,xpath.getMatchingNodes("//gml:MultiCurve/gml:curveMember[2]/gml:Curve/gml:segments/*",doc).getLength());
  assertEquals("circularArc3Points",xpath.evaluate("/gml:MultiCurve/gml:curveMember[2]/gml:Curve/gml:segments/gml:ArcString/@interpolation",doc));
  assertEquals("0 0 2 0 2 1 2 3 4 3",xpath.evaluate("/gml:MultiCurve/gml:curveMember[2]/gml:Curve/gml:segments/gml:ArcString/gml:posList",doc));
  assertEquals("linear",xpath.evaluate("/gml:MultiCurve/gml:curveMember[2]/gml:Curve/gml:segments/gml:LineStringSegment/@interpolation",doc));
  assertEquals("4 3 4 5 1 4 0 0",xpath.evaluate("/gml:MultiCurve/gml:curveMember[2]/gml:Curve/gml:segments/gml:LineStringSegment/gml:posList",doc));
}
