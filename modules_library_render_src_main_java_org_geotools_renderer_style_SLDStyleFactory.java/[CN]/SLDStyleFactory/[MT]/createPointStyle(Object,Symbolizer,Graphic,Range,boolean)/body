{
  Style2D retval=null;
  float opacity=evalOpacity(sldGraphic.getOpacity(),feature);
  Composite composite=getComposite(symbolizer.getOptions(),opacity);
  if (composite == null) {
    composite=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,opacity);
  }
  float displacementX=0;
  float displacementY=0;
  Displacement displacement=sldGraphic.getDisplacement();
  if (displacement != null) {
    displacementX=evalToFloat(displacement.getDisplacementX(),feature,0f);
    displacementY=evalToFloat(displacement.getDisplacementY(),feature,0f);
  }
  float anchorPointX=0.5f;
  float anchorPointY=0.5f;
  AnchorPoint anchorPoint=sldGraphic.getAnchorPoint();
  if (anchorPoint != null) {
    anchorPointX=evalToFloat(anchorPoint.getAnchorPointX(),feature,0.5f);
    anchorPointY=evalToFloat(anchorPoint.getAnchorPointY(),feature,0.5f);
  }
  double size=0;
  try {
    if (sldGraphic.getSize() != null && !Expression.NIL.equals(sldGraphic.getSize()))     size=evalToDouble(sldGraphic.getSize(),feature,0);
  }
 catch (  NumberFormatException nfe) {
  }
  float rotation=(float)Math.toRadians(evalToDouble(sldGraphic.getRotation(),feature,0));
  List<GraphicalSymbol> symbols=sldGraphic.graphicalSymbols();
  if (symbols == null || symbols.isEmpty()) {
    return null;
  }
  final int length=symbols.size();
  ExternalGraphic eg;
  BufferedImage img=null;
  double dsize;
  AffineTransform scaleTx;
  AffineTransformOp ato;
  BufferedImage scaledImage;
  Mark mark;
  Shape shape;
  MarkStyle2D ms2d;
  for (  GraphicalSymbol symbol : symbols) {
    if (LOGGER.isLoggable(Level.FINER)) {
      LOGGER.finer("trying to render symbol " + symbol);
    }
    if (symbol instanceof ExternalGraphic) {
      if (LOGGER.isLoggable(Level.FINER)) {
        LOGGER.finer("rendering External graphic");
      }
      eg=(ExternalGraphic)symbol;
      if (vectorRenderingEnabled || forceVector || size > MAX_RASTERIZATION_SIZE) {
        Icon icon=getIcon(eg,feature,-1);
        if (icon == null) {
          continue;
        }
 else         if (icon instanceof ImageIcon) {
          GraphicStyle2D g2d=getGraphicStyle(eg,feature,size,1);
          if (g2d != null) {
            g2d.setRotation(rotation);
            retval=g2d;
            break;
          }
        }
 else {
          if (icon.getIconHeight() != size && size != 0) {
            double scale=(size) / icon.getIconHeight();
            icon=new RescaledIcon(icon,scale);
          }
          retval=new IconStyle2D(icon,feature);
          break;
        }
      }
 else {
        GraphicStyle2D g2d=getGraphicStyle(eg,feature,size,1);
        if (g2d != null) {
          g2d.setRotation(rotation);
          retval=g2d;
          break;
        }
      }
    }
    if (symbol instanceof Mark) {
      if (LOGGER.isLoggable(Level.FINER)) {
        LOGGER.finer("rendering mark @ PointRenderer " + symbol.toString());
      }
      retval=createMarkStyle((Mark)symbol,feature,symbolizer,size);
      break;
    }
  }
  if (retval == null) {
    StyleFactory sf=CommonFactoryFinder.getStyleFactory();
    Mark defaultMark=sf.mark(ff.literal("square"),sf.fill(null,ff.literal("#808080"),null),sf.createStroke(ff.literal("#000000"),ff.literal(1)));
    if (size <= 0) {
      size=6;
    }
    retval=createMarkStyle(defaultMark,feature,symbolizer,size);
  }
  setScaleRange(retval,scaleRange);
  PointStyle2D ps=(PointStyle2D)retval;
  ps.setDisplacementX(displacementX);
  ps.setDisplacementY(displacementY);
  ps.setAnchorPointX(anchorPointX);
  ps.setAnchorPointY(anchorPointY);
  ps.setRotation(rotation);
  ps.setComposite(composite);
  return retval;
}
