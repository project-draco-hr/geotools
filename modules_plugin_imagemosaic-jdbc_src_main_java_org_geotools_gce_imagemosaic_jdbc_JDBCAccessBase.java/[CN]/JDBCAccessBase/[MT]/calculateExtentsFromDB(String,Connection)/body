{
  PreparedStatement stmt=con.prepareStatement(config.getSqlUpdateMosaicStatement());
  List<ImageLevelInfo> toBeRemoved=new ArrayList<ImageLevelInfo>();
  for (  ImageLevelInfo li : levelInfos) {
    if (li.getCoverageName().equals(coverageName) == false) {
      continue;
    }
    if (li.calculateExtentsNeeded() == false) {
      continue;
    }
    Date start=new Date();
    if (LOGGER.isLoggable(Level.INFO))     LOGGER.info("Calculate extent for " + li.toString());
    Envelope env=getExtent(li,con);
    if (env == null) {
      if (LOGGER.isLoggable(Level.WARNING))       LOGGER.log(Level.WARNING,"No extent, removing this level");
      toBeRemoved.add(li);
      continue;
    }
    li.setExtentMaxX(new Double(env.getMaxX()));
    li.setExtentMaxY(new Double(env.getMaxY()));
    li.setExtentMinX(new Double(env.getMinX()));
    li.setExtentMinY(new Double(env.getMinY()));
    stmt.setDouble(1,li.getExtentMaxX().doubleValue());
    stmt.setDouble(2,li.getExtentMaxY().doubleValue());
    stmt.setDouble(3,li.getExtentMinX().doubleValue());
    stmt.setDouble(4,li.getExtentMinY().doubleValue());
    stmt.setString(5,li.getCoverageName());
    stmt.setString(6,li.getTileTableName());
    stmt.setString(7,li.getSpatialTableName());
    stmt.execute();
    long msecs=(new Date()).getTime() - start.getTime();
    if (LOGGER.isLoggable(Level.INFO))     LOGGER.info("Calculate extent for " + li.toString() + " finished in "+ msecs+ " ms ");
  }
  levelInfos.removeAll(toBeRemoved);
  if (stmt != null) {
    stmt.close();
  }
}
