{
  final InputStream responseContent=TestData.openStream(this,GEOS_ARCHSITES.DATA);
  final TestHttpResponse httpResponse;
  final String defaultWfs11OutputFormat="text/xml; subtype=gml/3.1.1";
  httpResponse=new TestHttpResponse(defaultWfs11OutputFormat,"UTF-16",responseContent);
  TestHttpProtocol mockHttp=new TestHttpProtocol(httpResponse);
  createTestProtocol(GEOS_ARCHSITES.CAPABILITIES,mockHttp);
  WFSStrategy strategy=new GeoServerStrategy();
  wfs.setStrategy(strategy);
  DefaultQuery query=new DefaultQuery(GEOS_ARCHSITES.FEATURETYPENAME);
  GetFeature getFeature=new GetFeatureQueryAdapter(query,defaultWfs11OutputFormat,"EPSG:4326",ResultType.RESULTS);
  WFSResponse response;
  response=wfs.issueGetFeatureGET(getFeature);
  assertNotNull(response);
  assertEquals(defaultWfs11OutputFormat,response.getContentType());
  assertNotNull(response.getInputStream());
  assertEquals(Charset.forName("UTF-16"),response.getCharacterEncoding());
  URL baseUrl=mockHttp.targetUrl;
  Map<String,String> kvp=mockHttp.issueGetKvp;
  assertNotNull(baseUrl);
  assertNotNull(kvp);
  assertEquals("http://localhost:8080/geoserver/wfs?",baseUrl.toExternalForm());
  assertEquals("WFS",kvp.get("SERVICE"));
  assertEquals("1.1.0",kvp.get("VERSION"));
  assertEquals("GetFeature",kvp.get("REQUEST"));
  assertEquals(GEOS_ARCHSITES.FEATURETYPENAME,kvp.get("TYPENAME"));
  assertEquals(defaultWfs11OutputFormat,kvp.get("OUTPUTFORMAT"));
  assertNotNull(kvp.get("SRSNAME"));
  assertNull(kvp.get("PROPERTYNAME"));
  assertNull(kvp.get("MAXFEATURES"));
  assertNull(kvp.get("FEATUREID"));
  assertNull(kvp.get("FILTER"));
}
