{
  if (node.getNumShapeIds() > leafSize && node.getNumSubNodes() == 0 && level < max * 2) {
    int[] shapeIds=node.getShapesId();
    int numShapesId=node.getNumShapeIds();
    node.clean();
    int extraLevels=2;
    int nodes=4;
    while (nodes * leafSize < numShapesId) {
      extraLevels++;
      nodes*=4;
    }
    for (int i=0; i < numShapesId; i++) {
      final int shapeId=shapeIds[i];
      int offset=index.getOffsetInBytes(shapeId);
      reader.goTo(offset);
      Record rec=reader.nextRecord();
      Envelope env=new Envelope(rec.minX,rec.maxX,rec.minY,rec.maxY);
      tree.insert(node,shapeId,env,extraLevels);
    }
  }
  node.pack();
  for (int i=0; i < node.getNumSubNodes(); i++) {
    optimizeTree(tree,node.getSubNode(i),level + 1,reader,index);
  }
  for (int i=0; i < node.getNumSubNodes(); ) {
    Node child=node.getSubNode(i);
    if (child != null && child.getNumShapeIds() == 0 && child.getNumSubNodes() == 0) {
      node.removeSubNode(child);
    }
 else {
      i++;
    }
  }
  if (node.getNumSubNodes() == 1 && node.getNumShapeIds() == 0) {
    Node subnode=node.getSubNode(0);
    node.clearSubNodes();
    node.setShapesId(subnode);
    node.setBounds(subnode.getBounds());
    for (int i=0; i < subnode.getNumSubNodes(); i++) {
      node.addSubNode(subnode.getSubNode(i));
    }
  }
 else {
    Envelope bounds=new Envelope();
    if (node.getNumShapeIds() > 0) {
      int[] shapeIds=node.getShapesId();
      for (int i=0; i < shapeIds.length; i++) {
        final int shapeId=shapeIds[i];
        int offset=index.getOffsetInBytes(shapeId);
        reader.goTo(offset);
        Record rec=reader.nextRecord();
        Envelope env=new Envelope(rec.minX,rec.maxX,rec.minY,rec.maxY);
        bounds.expandToInclude(env);
      }
    }
    if (node.getNumSubNodes() > 0) {
      for (int i=0; i < node.getNumSubNodes(); i++) {
        bounds.expandToInclude(node.getSubNode(i).getBounds());
      }
    }
    node.setBounds(bounds);
    int count=node.getNumShapeIds();
    for (int i=0; i < node.getNumSubNodes(); i++) {
      Node child=node.getSubNode(i);
      if (child.getNumSubNodes() > 0) {
        count=Integer.MAX_VALUE;
        break;
      }
 else {
        count+=child.getNumShapeIds();
      }
    }
    if (count < leafSize) {
      for (int i=0; i < node.getNumSubNodes(); i++) {
        Node child=node.getSubNode(i);
        int[] shapesId=child.getShapesId();
        for (int j=0; j < child.getNumShapeIds(); j++) {
          node.addShapeId(shapesId[j]);
        }
      }
      node.clearSubNodes();
    }
  }
  return node;
}
