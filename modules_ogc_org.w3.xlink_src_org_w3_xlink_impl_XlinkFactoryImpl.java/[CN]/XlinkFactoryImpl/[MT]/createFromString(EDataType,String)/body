{
switch (eDataType.getClassifierID()) {
case XlinkPackage.ACTUATE_TYPE:
    return createActuateTypeFromString(eDataType,initialValue);
case XlinkPackage.SHOW_TYPE:
  return createShowTypeFromString(eDataType,initialValue);
case XlinkPackage.TYPE_TYPE:
return createTypeTypeFromString(eDataType,initialValue);
case XlinkPackage.ACTUATE_TYPE_OBJECT:
return createActuateTypeObjectFromString(eDataType,initialValue);
case XlinkPackage.ARCROLE_TYPE:
return createArcroleTypeFromString(eDataType,initialValue);
case XlinkPackage.FROM_TYPE:
return createFromTypeFromString(eDataType,initialValue);
case XlinkPackage.HREF_TYPE:
return createHrefTypeFromString(eDataType,initialValue);
case XlinkPackage.LABEL_TYPE:
return createLabelTypeFromString(eDataType,initialValue);
case XlinkPackage.ROLE_TYPE:
return createRoleTypeFromString(eDataType,initialValue);
case XlinkPackage.SHOW_TYPE_OBJECT:
return createShowTypeObjectFromString(eDataType,initialValue);
case XlinkPackage.TITLE_ATTR_TYPE:
return createTitleAttrTypeFromString(eDataType,initialValue);
case XlinkPackage.TO_TYPE:
return createToTypeFromString(eDataType,initialValue);
case XlinkPackage.TYPE_TYPE_OBJECT:
return createTypeTypeObjectFromString(eDataType,initialValue);
default :
throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
}
}
