{
  double degrees=Double.NaN;
  double minutes=Double.NaN;
  double secondes=Double.NaN;
  final int length=source.length();
{
    final int indexStart=pos.getIndex();
    int index=skipSuffix(source,pos,PREFIX_FIELD);
    if (index >= 0 && index < SYMBOLS.length) {
      pos.setErrorIndex(indexStart);
      pos.setIndex(indexStart);
      return null;
    }
    index=pos.getIndex();
    while (index < length && Character.isSpaceChar(source.charAt(index)))     index++;
    pos.setIndex(index);
    Number fieldObject=numberFormat.parse(source,pos);
    if (fieldObject == null) {
      pos.setIndex(indexStart);
      if (pos.getErrorIndex() < indexStart) {
        pos.setErrorIndex(index);
      }
      return null;
    }
    degrees=fieldObject.doubleValue();
    int indexEndField=pos.getIndex();
    boolean swapDM=true;
    BigBoss: switch (skipSuffix(source,pos,DEGREES_FIELD)) {
case PREFIX_FIELD:
{
        pos.setIndex(indexEndField);
        break BigBoss;
      }
case SECONDS_FIELD:
{
      secondes=degrees;
      degrees=Double.NaN;
      break BigBoss;
    }
default :
{
    if (width1 == 0)     break BigBoss;
    if (!spaceAsSeparator)     break BigBoss;
  }
case DEGREES_FIELD:
{
  final int indexStartField=index=pos.getIndex();
  while (index < length && Character.isSpaceChar(source.charAt(index))) {
    index++;
  }
  if (!spaceAsSeparator && index != indexStartField) {
    break BigBoss;
  }
  pos.setIndex(index);
  fieldObject=numberFormat.parse(source,pos);
  if (fieldObject == null) {
    pos.setIndex(indexStartField);
    break BigBoss;
  }
  indexEndField=pos.getIndex();
  minutes=fieldObject.doubleValue();
switch (skipSuffix(source,pos,(width1 != 0) ? MINUTES_FIELD : PREFIX_FIELD)) {
case MINUTES_FIELD:
{
      break;
    }
case SECONDS_FIELD:
{
    secondes=minutes;
    minutes=Double.NaN;
    break BigBoss;
  }
default :
{
  if (width1 != 0)   break;
}
case DEGREES_FIELD:
{
pos.setIndex(indexStartField);
minutes=Double.NaN;
break BigBoss;
}
case PREFIX_FIELD:
{
pos.setIndex(indexEndField);
break BigBoss;
}
}
swapDM=false;
}
case MINUTES_FIELD:
{
if (swapDM) {
minutes=degrees;
degrees=Double.NaN;
}
final int indexStartField=index=pos.getIndex();
while (index < length && Character.isSpaceChar(source.charAt(index))) {
index++;
}
if (!spaceAsSeparator && index != indexStartField) {
break BigBoss;
}
pos.setIndex(index);
fieldObject=numberFormat.parse(source,pos);
if (fieldObject == null) {
pos.setIndex(indexStartField);
break;
}
indexEndField=pos.getIndex();
secondes=fieldObject.doubleValue();
switch (skipSuffix(source,pos,(width2 != 0) ? MINUTES_FIELD : PREFIX_FIELD)) {
case SECONDS_FIELD:
{
break;
}
default :
{
if (width2 != 0) break;
}
case MINUTES_FIELD:
case DEGREES_FIELD:
{
pos.setIndex(indexStartField);
secondes=Double.NaN;
break;
}
case PREFIX_FIELD:
{
pos.setIndex(indexEndField);
break BigBoss;
}
}
break;
}
}
}
if (minutes < 0) {
secondes=-secondes;
}
if (degrees < 0) {
minutes=-minutes;
secondes=-secondes;
}
if (!decimalSeparator) {
final double facteur=XMath.pow10(widthDecimal);
if (width2 != 0) {
if (suffix1 == null && Double.isNaN(secondes)) {
if (suffix0 == null && Double.isNaN(minutes)) {
degrees/=facteur;
}
 else {
minutes/=facteur;
}
}
 else {
secondes/=facteur;
}
}
 else if (Double.isNaN(secondes)) {
if (width1 != 0) {
if (suffix0 == null && Double.isNaN(minutes)) {
degrees/=facteur;
}
 else {
minutes/=facteur;
}
}
 else if (Double.isNaN(minutes)) {
degrees/=facteur;
}
}
}
if (suffix1 == null && width2 != 0 && Double.isNaN(secondes)) {
double facteur=XMath.pow10(width2);
if (suffix0 == null && width1 != 0 && Double.isNaN(minutes)) {
secondes=degrees;
minutes=(int)(degrees / facteur);
secondes-=minutes * facteur;
facteur=XMath.pow10(width1);
degrees=(int)(minutes / facteur);
minutes-=degrees * facteur;
}
 else {
secondes=minutes;
minutes=(int)(minutes / facteur);
secondes-=minutes * facteur;
}
}
 else if (suffix0 == null && width1 != 0 && Double.isNaN(minutes)) {
final double facteur=XMath.pow10(width1);
minutes=degrees;
degrees=(int)(degrees / facteur);
minutes-=degrees * facteur;
}
pos.setErrorIndex(-1);
if (Double.isNaN(degrees)) degrees=0;
if (!Double.isNaN(minutes)) degrees+=minutes / 60;
if (!Double.isNaN(secondes)) degrees+=secondes / 3600;
for (int index=pos.getIndex(); index < length; index++) {
final char c=source.charAt(index);
switch (Character.toUpperCase(c)) {
case NORTH:
pos.setIndex(index + 1);
return new Latitude(degrees);
case SOUTH:
pos.setIndex(index + 1);
return new Latitude(-degrees);
case EAST:
pos.setIndex(index + 1);
return new Longitude(degrees);
case WEST:
pos.setIndex(index + 1);
return new Longitude(-degrees);
}
if (!Character.isSpaceChar(c)) {
break;
}
}
return new Angle(degrees);
}
