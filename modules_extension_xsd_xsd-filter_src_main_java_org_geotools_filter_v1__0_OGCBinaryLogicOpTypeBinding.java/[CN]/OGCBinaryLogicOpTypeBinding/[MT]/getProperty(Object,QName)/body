{
  BinaryLogicOperator operator=(BinaryLogicOperator)object;
  if (OGC.comparisonOps.equals(name)) {
    List comparison=new ArrayList();
    for (Iterator f=operator.getChildren().iterator(); f.hasNext(); ) {
      Filter filter=(Filter)f.next();
      if (!(filter instanceof BinarySpatialOperator) && (filter instanceof BinaryComparisonOperator || filter instanceof PropertyIsLike || filter instanceof PropertyIsNull|| filter instanceof PropertyIsBetween)) {
        comparison.add(filter);
      }
    }
    if (!comparison.isEmpty()) {
      return comparison;
    }
  }
  if (OGC.spatialOps.equals(name)) {
    List spatial=new ArrayList();
    for (Iterator f=operator.getChildren().iterator(); f.hasNext(); ) {
      Filter filter=(Filter)f.next();
      if (filter instanceof BinarySpatialOperator) {
        spatial.add(filter);
      }
    }
    if (!spatial.isEmpty()) {
      return spatial;
    }
  }
  if (OGC.logicOps.equals(name)) {
    List logic=new ArrayList();
    for (Iterator f=operator.getChildren().iterator(); f.hasNext(); ) {
      Filter filter=(Filter)f.next();
      if (filter instanceof BinaryLogicOperator) {
        logic.add(filter);
      }
    }
    if (!logic.isEmpty()) {
      return logic;
    }
  }
  return null;
}
