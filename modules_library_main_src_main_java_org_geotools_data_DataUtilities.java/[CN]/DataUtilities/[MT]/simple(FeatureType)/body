{
  if (featureType == null) {
    return null;
  }
  List<PropertyDescriptor> attributes;
  Collection<PropertyDescriptor> descriptors=featureType.getDescriptors();
  attributes=new ArrayList<PropertyDescriptor>(descriptors);
  List<String> simpleProperties=new ArrayList<String>();
  List<AttributeDescriptor> simpleAttributes=new ArrayList<AttributeDescriptor>();
  final List<String> ignoreList=Arrays.asList(new String[]{"location","metaDataProperty","description","name","boundedBy"});
  for (Iterator<PropertyDescriptor> it=attributes.iterator(); it.hasNext(); ) {
    PropertyDescriptor property=it.next();
    if (!(property instanceof AttributeDescriptor)) {
      continue;
    }
    AttributeDescriptor descriptor=(AttributeDescriptor)property;
    Name name=descriptor.getName();
    if (ignoreList.contains(name.getLocalPart())) {
      it.remove();
    }
  }
  for (  PropertyDescriptor descriptor : attributes) {
    Class<?> binding=descriptor.getType().getBinding();
    int maxOccurs=descriptor.getMaxOccurs();
    Name name=descriptor.getName();
    if (Object.class.equals(binding)) {
      continue;
    }
    if (maxOccurs > 1) {
      continue;
    }
    if ("http://www.opengis.net/gml".equals(name.getNamespaceURI())) {
      continue;
    }
    if (descriptor instanceof AttributeDescriptor) {
      AttributeDescriptor attribute=(AttributeDescriptor)descriptor;
      simpleAttributes.add(attribute);
      simpleProperties.add(attribute.getLocalName());
    }
  }
  String[] properties=simpleProperties.toArray(new String[simpleProperties.size()]);
  SimpleFeatureType simpleFeatureType;
  try {
    if (featureType instanceof SimpleFeature) {
      simpleFeatureType=DataUtilities.createSubType((SimpleFeatureType)featureType,properties);
    }
 else {
      SimpleFeatureTypeBuilder build=new SimpleFeatureTypeBuilder();
      build.setName(featureType.getName());
      build.setAttributes(simpleAttributes);
      build.setDefaultGeometry(featureType.getGeometryDescriptor().getLocalName());
      simpleFeatureType=build.buildFeatureType();
    }
  }
 catch (  SchemaException e) {
    throw new DataSourceException(e);
  }
  return simpleFeatureType;
}
