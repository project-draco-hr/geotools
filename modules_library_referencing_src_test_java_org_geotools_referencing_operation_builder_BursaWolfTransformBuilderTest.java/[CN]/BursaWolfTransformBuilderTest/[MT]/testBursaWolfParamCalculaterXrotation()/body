{
  Random random=new Random(773418718);
  double R=6370000;
  double angle=(((random.nextDouble() * 10) / 3600) * Math.PI) / 180;
  double cos=Math.cos(angle);
  double sin=Math.sin(angle);
  List<MappedPosition> vectors=new ArrayList<MappedPosition>();
  vectors.add(new MappedPosition(new GeneralDirectPosition(R,0,0),new GeneralDirectPosition(R,0,0)));
  vectors.add(new MappedPosition(new GeneralDirectPosition(0,cos * R,-sin * R),new GeneralDirectPosition(0,R,0)));
  vectors.add(new MappedPosition(new GeneralDirectPosition(0,sin * R,cos * R),new GeneralDirectPosition(0,0,R)));
  double[] points=new double[vectors.size() * 3];
  for (int i=0; i < vectors.size(); i++) {
    points[i * 3]=vectors.get(i).getSource().getCoordinate()[0];
    points[(i * 3) + 1]=vectors.get(i).getSource().getCoordinate()[1];
    points[(i * 3) + 2]=vectors.get(i).getSource().getCoordinate()[2];
  }
  double[] dstPoints=new double[points.length];
  MathTransformBuilder BWPT=new BursaWolfTransformBuilder(vectors);
  BWPT.getMathTransform().transform(points,0,dstPoints,0,(points.length / 3));
  for (int i=0; i < vectors.size(); i++) {
    assertEquals(dstPoints[i * 3],vectors.get(i).getTarget().getCoordinate()[0],1E-2);
    assertEquals(dstPoints[(i * 3) + 1],vectors.get(i).getTarget().getCoordinate()[1],1E-2);
    assertEquals(dstPoints[(i * 3) + 2],vectors.get(i).getTarget().getCoordinate()[2],1E-2);
  }
}
