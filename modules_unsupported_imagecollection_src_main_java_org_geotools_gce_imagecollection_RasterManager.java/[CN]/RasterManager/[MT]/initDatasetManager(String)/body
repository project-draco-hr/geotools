{
  if (filePath.equalsIgnoreCase(Utils.FAKE_IMAGE_PATH)) {
    ImageProperty imageProperty=new ImageProperty();
    imageProperty.setHeight(parent.defaultValues.maxHeight);
    imageProperty.setWidth(parent.defaultValues.maxWidth);
    if (parent.defaultValues.isGeoSpatial) {
      imageProperty.setGeoSpatial(parent.defaultValues.isGeoSpatial);
      imageProperty.setEnvelope(parent.defaultValues.envelope);
    }
    return new ImageManager(imageProperty);
  }
  ImageManager imageManager=null;
  final File file=new File(filePath);
  ImageInputStream stream=null;
  ImageReader reader=null;
  GeoTiffReader gtReader=null;
  try {
    if (file.exists() && file.canRead()) {
      if (!parent.defaultValues.isGeoSpatial) {
        stream=ImageIO.createImageInputStream(file);
        reader=Utils.getReader(stream);
        if (reader != null) {
          reader.setInput(stream);
          final ImageReaderSpi spi=reader.getOriginatingProvider();
          final int width=reader.getWidth(0);
          final int height=reader.getHeight(0);
          int numOverviews=reader.getNumImages(false) - 1;
          if (numOverviews < 0) {
            numOverviews=0;
          }
          final long lastModified=file.lastModified();
          final ImageProperty property=new ImageProperty(filePath,width,height,numOverviews,spi,lastModified);
          imageManager=new ImageManager(property);
        }
 else {
          throw new DataSourceException("Unable to get a reader for the specified path " + filePath);
        }
      }
 else {
        gtReader=new GeoTiffReader(file);
        GeneralEnvelope envelope=gtReader.getOriginalEnvelope();
        GridEnvelope range=gtReader.getOriginalGridRange();
        final long lastModified=file.lastModified();
        final ImageProperty property=new ImageProperty(filePath,range.getSpan(0),range.getSpan(1),0,Utils.TIFF_SPI,lastModified);
        property.setEnvelope(envelope);
        property.setGeoSpatial(true);
        imageManager=new ImageManager(property);
      }
    }
 else {
      throw new DataSourceException("The specified path doesn't exist or can't be read: " + filePath);
    }
  }
 catch (  IOException ioe) {
    DataSourceException dse=new DataSourceException("IOException occurred while accessing the specified path " + filePath);
    dse.initCause(ioe);
    throw dse;
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      Throwable t) {
      }
    }
    if (reader != null) {
      try {
        reader.dispose();
      }
 catch (      Throwable t) {
      }
    }
    if (gtReader != null) {
      try {
        gtReader.dispose();
      }
 catch (      Throwable t) {
      }
    }
  }
  return imageManager;
}
