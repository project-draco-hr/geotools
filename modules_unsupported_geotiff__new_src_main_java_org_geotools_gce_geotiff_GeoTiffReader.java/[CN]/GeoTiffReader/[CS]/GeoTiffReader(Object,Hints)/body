{
  if (hints == null)   this.hints=new Hints();
  if (uHints != null) {
    uHints.remove(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER);
    this.hints.add(uHints);
    this.hints.add(new Hints(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER,Boolean.TRUE));
  }
  this.coverageFactory=CoverageFactoryFinder.getGridCoverageFactory(this.hints);
  coverageName="geotiff_coverage";
  if (input == null) {
    final IOException ex=new IOException("GeoTiffReader:No source set to read this coverage.");
    throw new DataSourceException(ex);
  }
  try {
    this.source=input;
    if (input instanceof URL) {
      final URL sourceURL=(URL)input;
      if (sourceURL.getProtocol().equalsIgnoreCase("http") || sourceURL.getProtocol().equalsIgnoreCase("ftp")) {
        try {
          source=sourceURL.openStream();
        }
 catch (        IOException e) {
          new RuntimeException(e);
        }
      }
 else       if (sourceURL.getProtocol().equalsIgnoreCase("file"))       source=new File(URLDecoder.decode(sourceURL.getFile(),"UTF-8"));
    }
    closeMe=true;
    if ((source instanceof InputStream) || (source instanceof ImageInputStream))     closeMe=false;
    if (source instanceof ImageInputStream)     inStream=(ImageInputStream)source;
 else     inStream=ImageIO.createImageInputStream(source);
    if (inStream == null)     throw new IllegalArgumentException("No input stream for the provided source");
    this.sourceURL=Utils.checkSource(source);
    getHRInfo(this.hints);
    coverageName=source instanceof File ? ((File)source).getName() : "geotiff_coverage";
    final int dotIndex=coverageName.lastIndexOf('.');
    if (dotIndex != -1 && dotIndex != coverageName.length())     coverageName=coverageName.substring(0,dotIndex);
    if (closeMe)     inStream.close();
  }
 catch (  IOException e) {
    throw new DataSourceException(e);
  }
catch (  TransformException e) {
    throw new DataSourceException(e);
  }
catch (  FactoryException e) {
    throw new DataSourceException(e);
  }
  rasterManager=new RasterManager(this);
}
