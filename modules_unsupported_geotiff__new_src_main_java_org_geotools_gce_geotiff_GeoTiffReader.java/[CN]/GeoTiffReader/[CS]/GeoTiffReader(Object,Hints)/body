{
  super(input,uHints);
  if (uHints != null) {
    this.hints.remove(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER);
    this.hints.add(new Hints(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER,Boolean.TRUE));
  }
  try {
    if (input instanceof URL) {
      final URL sourceURL=(URL)input;
      source=DataUtilities.urlToFile(sourceURL);
    }
    closeMe=true;
    if ((source instanceof InputStream) || (source instanceof ImageInputStream)) {
      closeMe=false;
    }
    if (source instanceof ImageInputStream) {
      inStream=(ImageInputStream)source;
    }
 else {
      inStream=ImageIO.createImageInputStream(source);
    }
    if (inStream == null) {
      throw new IllegalArgumentException("No input stream for the provided sourceFile");
    }
    this.sourceURL=Utils.checkSource(source);
    coverageName=source instanceof File ? ((File)source).getName() : "geotiff_coverage";
    final int dotIndex=coverageName.lastIndexOf('.');
    if (dotIndex != -1 && dotIndex != coverageName.length()) {
      coverageName=coverageName.substring(0,dotIndex);
    }
    checkForExternalOverviews();
    getHRInfo(this.hints);
    if (closeMe) {
      inStream.close();
    }
  }
 catch (  IOException e) {
    throw new DataSourceException(e);
  }
catch (  TransformException e) {
    throw new DataSourceException(e);
  }
catch (  FactoryException e) {
    throw new DataSourceException(e);
  }
  rasterManager=new RasterManager(this);
}
