{
  MultiLineString multi=(MultiLineString)geometry;
  Envelope box=multi.getEnvelopeInternal();
  buffer.putDouble(box.getMinX());
  buffer.putDouble(box.getMinY());
  buffer.putDouble(box.getMaxX());
  buffer.putDouble(box.getMaxY());
  final int numParts=multi.getNumGeometries();
  final CoordinateSequence[] lines=new CoordinateSequence[numParts];
  final double[] zExtreame={Double.NaN,Double.NaN};
  final int npoints=multi.getNumPoints();
  buffer.putInt(numParts);
  buffer.putInt(npoints);
{
    int idx=0;
    for (int i=0; i < numParts; i++) {
      lines[i]=((LineString)multi.getGeometryN(i)).getCoordinateSequence();
      buffer.putInt(idx);
      idx=idx + lines[i].size();
    }
  }
  for (int lineN=0; lineN < lines.length; lineN++) {
    CoordinateSequence coords=lines[lineN];
    if (shapeType == ShapeType.ARCZ) {
      JTSUtilities.zMinMax(coords,zExtreame);
    }
    final int ncoords=coords.size();
    for (int t=0; t < ncoords; t++) {
      buffer.putDouble(coords.getX(t));
      buffer.putDouble(coords.getY(t));
    }
  }
  if (shapeType == ShapeType.ARCZ) {
    if (Double.isNaN(zExtreame[0])) {
      buffer.putDouble(0.0);
      buffer.putDouble(0.0);
    }
 else {
      buffer.putDouble(zExtreame[0]);
      buffer.putDouble(zExtreame[1]);
    }
    for (int lineN=0; lineN < lines.length; lineN++) {
      final CoordinateSequence coords=lines[lineN];
      final int ncoords=coords.size();
      double z;
      for (int t=0; t < ncoords; t++) {
        z=coords.getOrdinate(t,2);
        if (Double.isNaN(z)) {
          buffer.putDouble(0.0);
        }
 else {
          buffer.putDouble(z);
        }
      }
    }
    buffer.putDouble(-10E40);
    buffer.putDouble(-10E40);
    for (int t=0; t < npoints; t++) {
      buffer.putDouble(-10E40);
    }
  }
}
