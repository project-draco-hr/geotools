{
  fileIndex++;
  if (!checkFile(fileBeingProcessed))   return;
  String validFileName;
  try {
    validFileName=fileBeingProcessed.getCanonicalPath();
    validFileName=FilenameUtils.normalize(validFileName);
  }
 catch (  IOException e1) {
    fireException(e1);
    return;
  }
  validFileName=FilenameUtils.getName(validFileName);
  fireEvent(Level.INFO,"Now indexing file " + validFileName,((fileIndex * 100.0) / numFiles));
  ImageInputStream inStream=null;
  ImageReader imageioReader=null;
  AbstractGridCoverage2DReader coverageReader=null;
  try {
    if (cachedStreamSPI != null) {
      inStream=cachedStreamSPI.createInputStreamInstance(fileBeingProcessed);
    }
    if (inStream == null) {
      cachedStreamSPI=ImageIOExt.getImageInputStreamSPI(fileBeingProcessed);
      if (cachedStreamSPI != null) {
        inStream=cachedStreamSPI.createInputStreamInstance(fileBeingProcessed);
      }
    }
    if (inStream == null) {
      fireEvent(Level.INFO,fileBeingProcessed + " has been skipped since we could not get a stream for it",((fileIndex * 100.0) / numFiles));
      return;
    }
    inStream.mark();
    cachedReaderSPITest: {
      if (cachedReaderSPI == null) {
        final Iterator<ImageReader> it=ImageIO.getImageReaders(inStream);
        if (it.hasNext()) {
          imageioReader=it.next();
          if (imageioReader != null) {
            cachedReaderSPI=imageioReader.getOriginatingProvider();
            imageioReader.setInput(inStream);
          }
        }
 else {
          imageioReader=null;
        }
      }
 else {
        if (!cachedReaderSPI.canDecodeInput(inStream)) {
          cachedReaderSPI=null;
          break cachedReaderSPITest;
        }
        imageioReader=cachedReaderSPI.createReaderInstance();
        imageioReader.setInput(inStream);
      }
    }
    if (imageioReader == null) {
      fireEvent(Level.INFO,new StringBuilder("Skipped file ").append(fileBeingProcessed).append(":No ImageIO reader	s availaible.").toString(),((fileIndex * 99.0) / numFiles));
      return;
    }
    final AbstractGridFormat format;
    if (cachedFormat == null) {
      format=(AbstractGridFormat)GridFormatFinder.findFormat(fileBeingProcessed);
    }
 else {
      if (cachedFormat.accepts(fileBeingProcessed)) {
        format=cachedFormat;
      }
 else {
        format=new UnknownFormat();
      }
    }
    if ((format instanceof UnknownFormat) || format == null) {
      fireEvent(Level.INFO,new StringBuilder("Skipped file ").append(fileBeingProcessed).append(": File format is not supported.").toString(),((fileIndex * 99.0) / numFiles));
      return;
    }
    cachedFormat=format;
    coverageReader=(AbstractGridCoverage2DReader)format.getReader(fileBeingProcessed,runConfiguration.getHints());
    GeneralEnvelope envelope=(GeneralEnvelope)coverageReader.getOriginalEnvelope();
    CoordinateReferenceSystem actualCRS=coverageReader.getCrs();
    final ImageTypeSpecifier its=((ImageTypeSpecifier)imageioReader.getImageTypes(0).next());
    if (numberOfProcessedFiles == 0) {
      defaultCM=its.getColorModel();
      defaultSM=its.getSampleModel();
      if (defaultCM instanceof IndexColorModel) {
        IndexColorModel icm=(IndexColorModel)defaultCM;
        int numBands=defaultCM.getNumColorComponents();
        defaultPalette=new byte[3][icm.getMapSize()];
        icm.getReds(defaultPalette[0]);
        icm.getGreens(defaultPalette[0]);
        icm.getBlues(defaultPalette[0]);
        if (numBands == 4)         icm.getAlphas(defaultPalette[0]);
      }
      defaultCRS=actualCRS;
      imageioReader.reset();
      try {
        inStream.reset();
      }
 catch (      IOException e) {
        try {
          inStream.close();
        }
 catch (        Throwable e1) {
          if (LOGGER.isLoggable(Level.FINE))           LOGGER.log(Level.FINE,e1.getLocalizedMessage(),e1);
        }
        inStream=ImageIO.createImageInputStream(fileBeingProcessed);
      }
      if (inStream == null) {
        fireEvent(Level.INFO,fileBeingProcessed + " has been skipped since we could not get a stream for it",((fileIndex * 100.0) / numFiles));
        return;
      }
      imageioReader.setInput(inStream);
      int numberOfLevels=imageioReader.getNumImages(true);
      double[][] resolutionLevels=new double[2][numberOfLevels];
      setupResolutions(resolutionLevels,numberOfLevels,coverageReader,imageioReader,null);
      mosaicConfiguration.setLevelsNum(numberOfLevels);
      mosaicConfiguration.setLevels(resolutionLevels);
      String schema=runConfiguration.getSchema();
      if (schema != null) {
        schema=schema.trim();
        try {
          indexSchema=DataUtilities.createType(mosaicConfiguration.getName(),schema);
          indexSchema=DataUtilities.createSubType(indexSchema,DataUtilities.attributeNames(indexSchema),actualCRS);
        }
 catch (        Throwable e) {
          if (LOGGER.isLoggable(Level.FINE))           LOGGER.log(Level.FINE,e.getLocalizedMessage(),e);
          indexSchema=null;
        }
      }
      if (indexSchema == null) {
        final SimpleFeatureTypeBuilder featureBuilder=new SimpleFeatureTypeBuilder();
        featureBuilder.setName(runConfiguration.getIndexName());
        featureBuilder.setNamespaceURI("http://www.geo-solutions.it/");
        featureBuilder.add(runConfiguration.getLocationAttribute().trim(),String.class);
        featureBuilder.add("the_geom",Polygon.class,actualCRS);
        featureBuilder.setDefaultGeometry("the_geom");
        String timeAttribute=runConfiguration.getTimeAttribute();
        addAttributes(timeAttribute,featureBuilder,Date.class);
        indexSchema=featureBuilder.buildFeatureType();
      }
      final SimpleFeatureType type=catalog.getType();
      if (type == null) {
        catalog.createType(indexSchema);
      }
 else {
        final Query query=new Query(type.getTypeName());
        query.setFilter(Filter.INCLUDE);
        catalog.removeGranules(query);
      }
    }
 else {
      if (!mosaicConfiguration.isHeterogeneous()) {
        int numberOfLevels=imageioReader.getNumImages(true);
        if (numberOfLevels != mosaicConfiguration.getLevelsNum()) {
          mosaicConfiguration.setHeterogeneous(true);
          if (numberOfLevels > mosaicConfiguration.getLevelsNum()) {
            final double[][] resolutionLevels=new double[2][numberOfLevels];
            setupResolutions(resolutionLevels,numberOfLevels,coverageReader,imageioReader,null);
            mosaicConfiguration.setLevelsNum(numberOfLevels);
            mosaicConfiguration.setLevels(resolutionLevels);
          }
        }
 else {
          final double[][] mosaicLevels=mosaicConfiguration.getLevels();
          final double[][] resolutionLevels=new double[2][numberOfLevels];
          final boolean homogeneousLevels=setupResolutions(resolutionLevels,numberOfLevels,coverageReader,imageioReader,mosaicLevels);
          if (!homogeneousLevels) {
            mosaicConfiguration.setHeterogeneous(true);
          }
        }
      }
      ColorModel actualCM=its.getColorModel();
      if ((fileIndex > 0 ? !(CRS.equalsIgnoreMetadata(defaultCRS,actualCRS)) : false)) {
        fireEvent(Level.INFO,new StringBuilder("Skipping image ").append(fileBeingProcessed).append(" because CRSs do not match.").toString(),(((fileIndex + 1) * 99.0) / numFiles));
        return;
      }
      if (checkColorModels(defaultCM,defaultPalette,actualCM)) {
        fireEvent(Level.INFO,new StringBuilder("Skipping image ").append(fileBeingProcessed).append(" because color models do not match.").toString(),(((fileIndex + 1) * 99.0) / numFiles));
        return;
      }
    }
    final SimpleFeature feature=DataUtilities.template(indexSchema);
    feature.setAttribute(indexSchema.getGeometryDescriptor().getLocalName(),geomFactory.toGeometry(new ReferencedEnvelope((Envelope)envelope)));
    feature.setAttribute(runConfiguration.getLocationAttribute(),prepareLocation(fileBeingProcessed));
    if (propertiesCollectors != null && propertiesCollectors.size() > 0)     for (    PropertiesCollector pc : propertiesCollectors) {
      pc.collect(fileBeingProcessed).collect(coverageReader).collect(imageioReader).setProperties(feature);
      pc.reset();
    }
    catalog.addGranule(feature,transaction);
    fireEvent(Level.FINE,"Done with file " + fileBeingProcessed,(((fileIndex + 1) * 99.0) / numFiles));
    numberOfProcessedFiles++;
  }
 catch (  IOException e) {
    fireException(e);
    return;
  }
catch (  ArrayIndexOutOfBoundsException e) {
    fireException(e);
    return;
  }
 finally {
    try {
      if (inStream != null)       inStream.close();
    }
 catch (    Throwable e) {
      if (LOGGER.isLoggable(Level.FINEST))       LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
    }
    try {
      if (imageioReader != null)       imageioReader.dispose();
    }
 catch (    Throwable e) {
      if (LOGGER.isLoggable(Level.FINEST))       LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
    }
    try {
      if (coverageReader != null)       coverageReader.dispose();
    }
 catch (    Throwable e) {
      if (LOGGER.isLoggable(Level.FINEST))       LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
    }
  }
  super.handleFile(fileBeingProcessed,depth,results);
}
