{
  Rectangle2D boundsShape=shape.getBounds2D();
  Rectangle2D stippleSize=null;
  if (graphicFill instanceof MarkStyle2D) {
    final MarkStyle2D ms2d=(MarkStyle2D)graphicFill;
    final Shape markShape=ms2d.getShape();
    double size=ms2d.getSize();
    Rectangle2D boundsFill=markShape.getBounds2D();
    double aspect=(boundsFill.getHeight() > 0 && boundsFill.getWidth() > 0) ? boundsFill.getWidth() / boundsFill.getHeight() : 1.0;
    stippleSize=new Rectangle2D.Double(0,0,size * aspect,size);
    double scaleFactor=size;
    if (boundsFill.getHeight() > 0) {
      scaleFactor=size / boundsFill.getHeight();
    }
    if (OPTIMIZE_VECTOR_HATCH_FILLS) {
      final Shape rescaledStipple=AffineTransform.getScaleInstance(scaleFactor,scaleFactor).createTransformedShape(markShape);
      ParallelLinesFiller filler=ParallelLinesFiller.fromStipple(rescaledStipple);
      if (filler != null) {
        Graphics2D clippedGraphics=(Graphics2D)graphics.create();
        clippedGraphics.clip(shape);
        LineStyle2D lineStyle=new LineStyle2D();
        lineStyle.setStroke(ms2d.getStroke());
        lineStyle.setContour(ms2d.getContour());
        lineStyle.setContourComposite(ms2d.getContourComposite());
        lineStyle.setGraphicStroke(ms2d.getGraphicStroke());
        filler.fillRectangle(shape.getBounds2D(),this,clippedGraphics,lineStyle);
        return;
      }
    }
  }
 else   if (graphicFill instanceof IconStyle2D) {
    Icon icon=((IconStyle2D)graphicFill).getIcon();
    stippleSize=new Rectangle2D.Double(0,0,icon.getIconWidth(),icon.getIconHeight());
  }
 else   if (graphicFill instanceof GraphicStyle2D) {
    BufferedImage image=((GraphicStyle2D)graphicFill).getImage();
    stippleSize=new Rectangle2D.Double(0,0,image.getWidth(),image.getHeight());
  }
 else {
    return;
  }
  int toX=(int)Math.ceil(boundsShape.getWidth() / stippleSize.getWidth());
  int toY=(int)Math.ceil(boundsShape.getHeight() / stippleSize.getHeight());
  Graphics2D g=(Graphics2D)graphics.create();
  g.clip(shape);
  Shape clipShape=g.getClip();
  Rectangle2D boundsClip=clipShape.getBounds2D();
  int fromX=0;
  if (boundsClip.getMinX() > boundsShape.getMinX()) {
    fromX=(int)Math.floor((boundsClip.getMinX() - boundsShape.getMinX()) / stippleSize.getWidth());
  }
  if (boundsClip.getMaxX() < boundsShape.getMaxX()) {
    toX-=(int)Math.floor((boundsShape.getMaxX() - boundsClip.getMaxX()) / stippleSize.getWidth());
  }
  int fromY=0;
  if (boundsClip.getMinY() > boundsShape.getMinY()) {
    fromY=(int)Math.floor((boundsClip.getMinY() - boundsShape.getMinY()) / stippleSize.getHeight());
  }
  if (boundsClip.getMaxY() < boundsShape.getMaxY()) {
    toY-=(int)Math.floor((boundsShape.getMaxY() - boundsClip.getMaxY()) / stippleSize.getHeight());
  }
  GeometryFactory geomFactory=new GeometryFactory();
  Coordinate stippleCoord=new Coordinate(stippleSize.getCenterX(),stippleSize.getCenterY());
  Geometry stipplePoint=geomFactory.createPoint(stippleCoord);
  AffineTransform2D identityTransf=new AffineTransform2D(new AffineTransform());
  Decimator nullDecimator=new Decimator(-1,-1);
  for (int i=fromX; i <= toX; i++) {
    for (int j=fromY; j <= toY; j++) {
      double translateX=boundsShape.getMinX() + i * stippleSize.getWidth();
      double translateY=boundsShape.getMinY() + j * stippleSize.getHeight();
      stippleCoord.x=stippleSize.getCenterX() + translateX;
      stippleCoord.y=stippleSize.getCenterY() + translateY;
      stipplePoint.geometryChanged();
      LiteShape2 stippleShape;
      try {
        stippleShape=new LiteShape2(stipplePoint,identityTransf,nullDecimator,false);
      }
 catch (      Exception e) {
        throw new RuntimeException("Unxpected exception building lite shape",e);
      }
      paint(g,stippleShape,graphicFill,scale);
    }
  }
}
