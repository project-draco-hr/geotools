{
  if (headerLength == -1) {
    headerLength=MINIMUM_HEADER;
  }
  ByteBuffer buffer=NIOUtilities.allocate(headerLength);
  try {
    buffer.order(ByteOrder.LITTLE_ENDIAN);
    buffer.put((byte)MAGIC);
    Calendar c=Calendar.getInstance();
    c.setTime(new Date());
    buffer.put((byte)(c.get(Calendar.YEAR) % 100));
    buffer.put((byte)(c.get(Calendar.MONTH) + 1));
    buffer.put((byte)(c.get(Calendar.DAY_OF_MONTH)));
    buffer.putInt(recordCnt);
    buffer.putShort((short)headerLength);
    buffer.putShort((short)recordLength);
    buffer.position(buffer.position() + 20);
    int tempOffset=0;
    for (int i=0; i < fields.length; i++) {
      for (int j=0; j < 11; j++) {
        if (fields[i].fieldName.length() > j) {
          buffer.put((byte)fields[i].fieldName.charAt(j));
        }
 else {
          buffer.put((byte)0);
        }
      }
      buffer.put((byte)fields[i].fieldType);
      buffer.putInt(tempOffset);
      tempOffset+=fields[i].fieldLength;
      buffer.put((byte)fields[i].fieldLength);
      buffer.put((byte)fields[i].decimalCount);
      buffer.position(buffer.position() + 14);
    }
    buffer.put((byte)0x0D);
    buffer.position(0);
    int r=buffer.remaining();
    while ((r-=out.write(buffer)) > 0) {
      ;
    }
  }
  finally {
    NIOUtilities.clean(buffer,false);
  }
}
