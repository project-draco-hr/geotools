{
  int tempEdgeId;
  boolean isLeft=false;
  Coordinate previousCoordinate=null;
  Coordinate coordinate=null;
  List coordinates=null;
  Polygon result=null;
  GeometryFactory geometryFactory=new GeometryFactory();
  LinearRing outerRing=null;
  List innerRings=new Vector();
  int faceId=Integer.parseInt(values.getAttribute("fac_id").toString());
  String baseDirectory=featureType.getFeatureClass().getDirectoryName();
  String tileDirectory=baseDirectory;
  if (!new File(tileDirectory.concat(File.separator).concat(FACE_PRIMITIVE)).exists()) {
    Short tileId=new Short(Short.parseShort(values.getAttribute("tile_id").toString()));
    tileDirectory=tileDirectory.concat(File.separator).concat(featureType.getFeatureClass().getCoverage().getLibrary().getTileMap().get(tileId).toString()).trim();
  }
  String edgeTableName=tileDirectory.concat(File.separator).concat(EDGE_PRIMITIVE);
  VPFFile edgeFile=VPFFileFactory.getInstance().getFile(edgeTableName);
  String faceTableName=tileDirectory.concat(File.separator).concat(FACE_PRIMITIVE);
  VPFFile faceFile=VPFFileFactory.getInstance().getFile(faceTableName);
  faceFile.reset();
  String ringTableName=tileDirectory.concat(File.separator).concat(RING_TABLE);
  VPFFile ringFile=VPFFileFactory.getInstance().getFile(ringTableName);
  ringFile.reset();
  SimpleFeature faceFeature=faceFile.readFeature();
  while (faceFeature != null) {
    if (faceFeature.getAttribute("id").equals(new Integer(faceId))) {
      coordinates=new LinkedList();
      int ringId=Integer.parseInt(faceFeature.getAttribute("ring_ptr").toString());
      int startEdgeId=((Number)ringFile.getRowFromId("id",ringId).getAttribute("start_edge")).intValue();
      int nextEdgeId=startEdgeId;
      int prevNodeId=-1;
      while (nextEdgeId > 0) {
        SimpleFeature edgeRow=edgeFile.getRowFromId("id",nextEdgeId);
        int leftFace=((TripletId)edgeRow.getAttribute("left_face")).getId();
        int rightFace=((TripletId)edgeRow.getAttribute("right_face")).getId();
        int startNode=((Integer)edgeRow.getAttribute("start_node")).intValue();
        int endNode=((Integer)edgeRow.getAttribute("end_node")).intValue();
        int leftEdge=((TripletId)edgeRow.getAttribute("left_edge")).getId();
        int rightEdge=((TripletId)edgeRow.getAttribute("right_edge")).getId();
        boolean addPoints=true;
        if (faceId == leftFace && faceId == rightFace) {
          addPoints=false;
          if (prevNodeId == startNode) {
            isLeft=false;
            prevNodeId=endNode;
          }
 else           if (prevNodeId == endNode) {
            isLeft=true;
            prevNodeId=startNode;
          }
 else           if (prevNodeId == -1) {
            int leftEdgeStartNode=((Integer)edgeFile.getRowFromId("id",leftEdge).getAttribute("start_node")).intValue();
            int rightEdgeStartNode=((Integer)edgeFile.getRowFromId("id",rightEdge).getAttribute("start_node")).intValue();
            if (leftEdgeStartNode == endNode) {
              isLeft=true;
              prevNodeId=startNode;
            }
 else             if (rightEdgeStartNode == endNode) {
              isLeft=false;
              prevNodeId=endNode;
            }
 else {
              throw new SQLException("This edge is not part of this face.");
            }
          }
 else {
            throw new SQLException("This edge is not part of this face.");
          }
        }
 else         if (faceId == rightFace) {
          isLeft=false;
          prevNodeId=endNode;
        }
 else         if (faceId == leftFace) {
          isLeft=true;
          prevNodeId=startNode;
        }
 else {
          throw new SQLException("This edge is not part of this face.");
        }
        LineString edgeGeometry=(LineString)edgeRow.getAttribute("coordinates");
        if (addPoints) {
          if (isLeft) {
            for (int inx=edgeGeometry.getNumPoints() - 1; inx >= 0; inx--) {
              coordinate=edgeGeometry.getCoordinateSequence().getCoordinate(inx);
              if ((previousCoordinate == null) || (!coordinate.equals3D(previousCoordinate))) {
                coordinates.add(coordinate);
                previousCoordinate=coordinate;
              }
            }
          }
 else {
            for (int inx=0; inx < edgeGeometry.getNumPoints(); inx++) {
              coordinate=edgeGeometry.getCoordinateSequence().getCoordinate(inx);
              if ((previousCoordinate == null) || (!coordinate.equals3D(previousCoordinate))) {
                coordinates.add(coordinate);
                previousCoordinate=coordinate;
              }
            }
          }
        }
 else {
          coordinate=edgeGeometry.getCoordinateSequence().getCoordinate(isLeft ? 0 : edgeGeometry.getNumPoints() - 1);
        }
        tempEdgeId=isLeft ? leftEdge : rightEdge;
        if (tempEdgeId == startEdgeId) {
          nextEdgeId=0;
        }
 else {
          nextEdgeId=tempEdgeId;
        }
      }
      if (!coordinate.equals(coordinates.get(0))) {
        coordinates.add(coordinates.get(0));
      }
      Coordinate[] coordinateArray=new Coordinate[coordinates.size()];
      for (int cnx=0; cnx < coordinates.size(); cnx++) {
        coordinateArray[cnx]=(Coordinate)coordinates.get(cnx);
      }
      LinearRing ring=null;
      ring=geometryFactory.createLinearRing(coordinateArray);
      if (outerRing == null) {
        outerRing=ring;
      }
 else {
        innerRings.add(ring);
      }
    }
    if (faceFile.hasNext()) {
      faceFeature=faceFile.readFeature();
    }
 else {
      faceFeature=null;
    }
  }
  if (innerRings.isEmpty()) {
    result=geometryFactory.createPolygon(outerRing,null);
  }
 else {
    LinearRing[] ringArray=new LinearRing[innerRings.size()];
    for (int cnx=0; cnx < innerRings.size(); cnx++) {
      ringArray[cnx]=(LinearRing)innerRings.get(cnx);
    }
    result=geometryFactory.createPolygon(outerRing,ringArray);
  }
  values.setDefaultGeometry(result);
}
