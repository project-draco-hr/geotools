{
  SimpleFeatureTypeBuilder builder=new SimpleFeatureTypeBuilder();
  builder.setName("Test");
  builder.add("name",String.class);
  builder.add("age",Double.class);
  SimpleFeatureType test=builder.buildFeatureType();
  builder.setName("Test");
  builder.add("age",Double.class);
  builder.add("name",String.class);
  SimpleFeatureType test2=builder.buildFeatureType();
  builder.setName("Test");
  builder.add("name",String.class);
  SimpleFeatureType test3=builder.buildFeatureType();
  builder.setName("Test");
  builder.add("name",String.class);
  builder.add("distance",Double.class);
  SimpleFeatureType test4=builder.buildFeatureType();
  Types.assertNameAssignable(test,test);
  Types.assertNameAssignable(test,test2);
  Types.assertNameAssignable(test2,test);
  try {
    Types.assertNameAssignable(test,test3);
    fail("Expected assertNameAssignable to fail as age is not covered");
  }
 catch (  IllegalArgumentException expected) {
  }
  Types.assertOrderAssignable(test,test4);
}
