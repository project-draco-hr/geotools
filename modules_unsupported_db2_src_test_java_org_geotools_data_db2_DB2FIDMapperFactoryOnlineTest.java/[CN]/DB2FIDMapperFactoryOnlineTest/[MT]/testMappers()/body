{
  String catalog=null;
  String schema="Test";
  String tableName=null;
  Connection conn=null;
  FIDMapper fm;
  String wrapperDesc=null;
  FIDMapperFactory fmFact=new DB2FIDMapperFactory("Test");
  DB2DataStore ds=getDataStore();
  FIDMapper fm1=ds.getFIDMapper("FIDVCHARPRIKEY");
  FIDMapper fm2=new TypedFIDMapper(new BasicFIDMapper("IDCOL",12),"FIDVCHARPRIKEY");
  fm1.equals(fm2);
  conn=getConnection();
  tableName="FIDAUTOINC";
  fm=fmFact.getMapper(catalog,schema,tableName,conn);
  wrapperDesc=fm.toString();
  fm2=ds.getFIDMapper(tableName);
  assertEquals(tableName,wrapperDesc,"Wrapped:class org.geotools.data.db2.DB2AutoIncrementFIDMapper:1:IDCOL:4:0:0:false:true:");
  tableName="FIDCHARPRIKEY";
  fm=fmFact.getMapper(catalog,schema,tableName,conn);
  wrapperDesc=fm.toString();
  assertEquals(tableName,wrapperDesc,"Wrapped:class org.geotools.data.jdbc.fidmapper.BasicFIDMapper:1:IDCOL:12:15:0:true:false:");
  tableName="FIDNOPRIKEY";
  fm=fmFact.getMapper(catalog,schema,tableName,conn);
  wrapperDesc=fm.toString();
  assertEquals(tableName,wrapperDesc,"Wrapped:class org.geotools.data.db2.DB2NullFIDMapper:0::false:false:");
  tableName="FIDINTPRIKEY";
  fm=fmFact.getMapper(catalog,schema,tableName,conn);
  wrapperDesc=fm.toString();
  assertEquals(tableName,wrapperDesc,"Wrapped:class org.geotools.data.jdbc.fidmapper.MaxIncFIDMapper:1:IDCOL:4:0:0:true:false:");
  tableName="FIDVCHARPRIKEY";
  fm=fmFact.getMapper(catalog,schema,tableName,conn);
  wrapperDesc=fm.toString();
  assertEquals(tableName,wrapperDesc,"Wrapped:class org.geotools.data.jdbc.fidmapper.BasicFIDMapper:1:IDCOL:12:17:0:true:false:");
  tableName="FIDMCOLPRIKEY";
  fm=fmFact.getMapper(catalog,schema,tableName,conn);
  wrapperDesc=fm.toString();
  assertEquals(tableName,wrapperDesc,"Wrapped:class org.geotools.data.jdbc.fidmapper.MultiColumnFIDMapper:2:IDCOL1:1:11:0:true:false:");
  try {
    tableName="NoTable";
    fm=fmFact.getMapper(catalog,schema,tableName,conn);
    fail("Didn't get exception on invalid tableName");
  }
 catch (  SchemaNotFoundException e) {
    assertEquals("Unexpected exception",e.getMessage(),"Feature type could not be found for NoTable");
  }
catch (  IOException e) {
    fail("Unexpected exception: " + e);
  }
  try {
    conn.close();
  }
 catch (  SQLException e1) {
    e1.printStackTrace();
  }
}
