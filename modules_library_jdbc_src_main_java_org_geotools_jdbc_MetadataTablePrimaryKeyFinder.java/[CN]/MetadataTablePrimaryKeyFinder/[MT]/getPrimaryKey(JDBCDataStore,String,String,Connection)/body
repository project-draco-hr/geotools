{
  ResultSet rs=null;
  PreparedStatement st=null;
  String metadataSchema=getMetadataSchema(store);
  try {
    if (metadataTableExists == null) {
synchronized (this) {
        if (metadataTableExists == null) {
          try {
            StringBuffer sb=new StringBuffer();
            sb.append("SELECT * FROM ");
            if (metadataSchema != null) {
              sb.append(metadataSchema);
              sb.append(".");
            }
            sb.append(tableName).append(" WHERE 1 = 0");
            st=cx.prepareStatement(sb.toString());
            rs=st.executeQuery();
            metadataTableExists=true;
          }
 catch (          Exception e) {
            if (e instanceof SQLException && !cx.getAutoCommit()) {
              cx.rollback();
            }
            metadataTableExists=false;
          }
 finally {
            store.closeSafe(rs);
            store.closeSafe(st);
          }
        }
      }
    }
    if (!metadataTableExists) {
      return null;
    }
    List<String> parameters=new ArrayList<String>();
    StringBuffer sb=new StringBuffer();
    sb.append("SELECT * FROM ");
    if (metadataSchema != null) {
      sb.append(metadataSchema);
      sb.append(".");
    }
    sb.append(tableName);
    sb.append(" WHERE ");
    if (schema != null) {
      sb.append("table_schema = ? AND ");
      parameters.add(schema);
    }
    sb.append("table_name = ?");
    parameters.add(table);
    sb.append(" ORDER BY ");
    sb.append("pk_column_idx");
    sb.append(" ASC");
    String sql=sb.toString();
    LOGGER.log(Level.FINE,"Reading metadata table metadata: {0} [ parameters = {1} ]",new Object[]{sql,parameters});
    DatabaseMetaData metaData=cx.getMetaData();
    st=cx.prepareStatement(sql);
    for (int i=0; i < parameters.size(); i++) {
      st.setString(i + 1,parameters.get(i));
    }
    rs=st.executeQuery();
    List<PrimaryKeyColumn> columns=new ArrayList<PrimaryKeyColumn>();
    Set<String> colNames=null;
    while (rs.next()) {
      String colName=rs.getString("pk_column");
      String policyStr=rs.getString("pk_policy");
      String sequence=rs.getString("pk_sequence");
      if (colNames == null) {
        colNames=getColumnNames(store,metaData,schema,table);
      }
      if (!colNames.contains(colName)) {
        LOGGER.warning("Unknown column " + colName + " in table "+ table);
        return null;
      }
      Policy policy=Policy.assigned;
      if (policyStr != null) {
        try {
          policy=Policy.valueOf(policyStr.toLowerCase());
        }
 catch (        IllegalArgumentException e) {
          LOGGER.warning("Invalid policy value " + policyStr + ", valid values are"+ Arrays.asList(Policy.values()));
          return null;
        }
      }
      Class columnType=store.getColumnType(metaData,schema,table,colName);
      if (policy == Policy.assigned) {
        columns.add(new NonIncrementingPrimaryKeyColumn(colName,columnType));
      }
 else       if (policy == Policy.autogenerated) {
        columns.add(new AutoGeneratedPrimaryKeyColumn(colName,columnType));
      }
 else       if (policy == policy.sequence) {
        columns.add(new SequencedPrimaryKeyColumn(colName,columnType,sequence));
      }
    }
    if (columns.size() > 0)     return new PrimaryKey(table,columns);
 else     return null;
  }
 catch (  SQLException e) {
    LOGGER.log(Level.WARNING,"Errors occurred accessing the primary key metadata table ",e);
    return null;
  }
 finally {
    store.closeSafe(rs);
    store.closeSafe(st);
  }
}
