{
  ResultSet rs=null;
  ResultSet tables=null;
  Statement st=null;
  String metadataSchema=getMetadataSchema(store);
  try {
    try {
      st=cx.createStatement();
      StringBuffer sb=new StringBuffer();
      sb.append("SELECT * FROM ");
      if (metadataSchema != null) {
        sb.append(metadataSchema);
        sb.append(".");
      }
      sb.append(tableName);
      rs=st.executeQuery(sb.toString());
    }
 catch (    Exception e) {
      return null;
    }
 finally {
      store.closeSafe(rs);
    }
    SQLDialect dialect=store.getSQLDialect();
    StringBuffer sb=new StringBuffer();
    sb.append("SELECT * FROM ");
    if (metadataSchema != null) {
      sb.append(metadataSchema);
      sb.append(".");
    }
    sb.append(tableName);
    sb.append(" WHERE ");
    if (schema != null) {
      sb.append("table_schema");
      sb.append(" = '" + schema + "' AND ");
    }
    sb.append("table_name");
    sb.append(" = '" + table + "'");
    sb.append(" ORDER BY ");
    sb.append("pk_column_idx");
    sb.append(" ASC");
    String sql=sb.toString();
    LOGGER.log(Level.FINE,"Reading metadata table metadata: {0}",sql);
    DatabaseMetaData metaData=cx.getMetaData();
    st=cx.createStatement();
    rs=st.executeQuery(sql);
    List<PrimaryKeyColumn> columns=new ArrayList<PrimaryKeyColumn>();
    Set<String> colNames=null;
    while (rs.next()) {
      String colName=rs.getString("pk_column");
      String policyStr=rs.getString("pk_policy");
      String sequence=rs.getString("pk_sequence");
      if (colNames == null) {
        colNames=getColumnNames(metaData,schema,table);
      }
      if (!colNames.contains(colName)) {
        LOGGER.warning("Unknown column " + colName + " in table "+ table);
        return null;
      }
      Policy policy=Policy.assigned;
      if (policyStr != null) {
        try {
          policy=Policy.valueOf(policyStr.toLowerCase());
        }
 catch (        IllegalArgumentException e) {
          LOGGER.warning("Invalid policy value " + policyStr + ", valid values are"+ Arrays.asList(Policy.values()));
          return null;
        }
      }
      Class columnType=store.getColumnType(metaData,schema,table,colName);
      if (policy == Policy.assigned) {
        columns.add(new NonIncrementingPrimaryKeyColumn(colName,columnType));
      }
 else       if (policy == Policy.autogenerated) {
        columns.add(new AutoGeneratedPrimaryKeyColumn(colName,columnType));
      }
 else       if (policy == policy.sequence) {
        columns.add(new SequencedPrimaryKeyColumn(colName,columnType,sequence));
      }
    }
    if (columns.size() > 0)     return new PrimaryKey(table,columns);
 else     return null;
  }
 catch (  SQLException e) {
    LOGGER.log(Level.WARNING,"Errors occurred accessing the primary key metadata table ",e);
    return null;
  }
 finally {
    store.closeSafe(st);
    store.closeSafe(tables);
    store.closeSafe(rs);
  }
}
