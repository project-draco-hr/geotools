{
  double area=0.0d;
  double interiorArea=0.0d;
  Coordinate[] exteriorRingCoordinates=polygon.getExteriorRing().getCoordinates();
  int numberOfExteriorRingCoordinates=exteriorRingCoordinates.length;
  double minx=Double.POSITIVE_INFINITY;
  double maxx=Double.NEGATIVE_INFINITY;
  double miny=Double.POSITIVE_INFINITY;
  double maxy=Double.NEGATIVE_INFINITY;
  for (int i=0; i < numberOfExteriorRingCoordinates; i++) {
    minx=Math.min(minx,exteriorRingCoordinates[i].x);
    maxx=Math.max(maxx,exteriorRingCoordinates[i].x);
    miny=Math.min(miny,exteriorRingCoordinates[i].y);
    maxy=Math.max(maxy,exteriorRingCoordinates[i].y);
  }
  for (int i=0; i < (numberOfExteriorRingCoordinates - 1); i++) {
    area+=(((exteriorRingCoordinates[i + 1].x - minx) - (exteriorRingCoordinates[i].x - minx)) * (((exteriorRingCoordinates[i + 1].y - miny) + (exteriorRingCoordinates[i].y - miny)) / 2d));
  }
  area=Math.abs(area);
  int numberOfInteriorRings=polygon.getNumInteriorRing();
  int numberOfInteriorRingCoordinates;
  Coordinate[] interiorRingCoordinates;
  for (int i=0; i < numberOfInteriorRings; i++) {
    interiorArea=0.0d;
    interiorRingCoordinates=polygon.getInteriorRingN(i).getCoordinates();
    numberOfInteriorRingCoordinates=interiorRingCoordinates.length;
    minx=Double.POSITIVE_INFINITY;
    maxx=Double.NEGATIVE_INFINITY;
    miny=Double.POSITIVE_INFINITY;
    maxy=Double.NEGATIVE_INFINITY;
    for (int j=0; j < numberOfInteriorRingCoordinates; j++) {
      minx=Math.min(minx,interiorRingCoordinates[j].x);
      maxx=Math.max(maxx,interiorRingCoordinates[j].x);
      miny=Math.min(miny,interiorRingCoordinates[j].y);
      maxy=Math.max(maxy,interiorRingCoordinates[j].y);
    }
    for (int j=0; j < (numberOfInteriorRingCoordinates - 1); j++) {
      interiorArea+=(((interiorRingCoordinates[j + 1].x - minx) - (interiorRingCoordinates[j].x - minx)) * (((interiorRingCoordinates[j + 1].y - miny) + (interiorRingCoordinates[j].y - miny)) / 2d));
    }
    area-=Math.abs(interiorArea);
  }
  return area;
}
