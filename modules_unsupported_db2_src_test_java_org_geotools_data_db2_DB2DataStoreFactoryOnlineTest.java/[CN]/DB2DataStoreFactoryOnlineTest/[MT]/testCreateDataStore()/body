{
  try {
    @SuppressWarnings("unused") DB2DataStore dataStore=(DB2DataStore)factory.createDataStore(getParams());
    dataStore.dispose();
  }
 catch (  IOException e) {
    fail("createDataStore failed:" + e);
  }
  try {
    Map<String,String> params=getParams();
    params.put("dbtype","nodb");
    @SuppressWarnings("unused") DB2DataStore dataStore=(DB2DataStore)factory.createDataStore(params);
    fail("createDataStore succeeded with invalid dbtype parameter");
  }
 catch (  IOException e) {
  }
  try {
    Map<String,String> params=getParams();
    params.put("tabschema",null);
    DB2DataStore dataStore=(DB2DataStore)factory.createDataStore(params);
    dataStore.dispose();
    String schema=dataStore.getTableSchema();
    assertEquals("DB2ADMIN",schema);
  }
 catch (  IOException e) {
    fail("createDataStore failed:" + e);
  }
  try {
    Map<String,String> params=getParams();
    params.put("tabschema","");
    DB2DataStore dataStore=(DB2DataStore)factory.createDataStore(params);
    dataStore.dispose();
    String schema=dataStore.getTableSchema();
    assertEquals("DB2ADMIN",schema);
  }
 catch (  IOException e) {
    fail("createDataStore failed:" + e);
  }
  try {
    Map<String,String> params=getParams();
    params.put("tabschema","sde");
    DB2DataStore dataStore=(DB2DataStore)factory.createDataStore(params);
    dataStore.dispose();
    String schema=dataStore.getTableSchema();
    assertEquals("SDE",schema);
  }
 catch (  IOException e) {
    fail("createDataStore failed:" + e);
  }
  try {
    Map<String,String> params=getParams();
    params.put("tabschema","\"Test\"");
    DB2DataStore dataStore=(DB2DataStore)factory.createDataStore(params);
    dataStore.dispose();
    String schema=dataStore.getTableSchema();
    assertEquals("Test",schema);
  }
 catch (  IOException e) {
    fail("createDataStore failed:" + e);
  }
}
