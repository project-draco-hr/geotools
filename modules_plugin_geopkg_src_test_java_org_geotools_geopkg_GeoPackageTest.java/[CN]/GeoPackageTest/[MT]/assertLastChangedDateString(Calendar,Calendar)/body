{
  final TimeZone tz=TimeZone.getTimeZone("GMT");
  final Calendar c=Calendar.getInstance(tz);
  final String dateFomratString="yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
  final SimpleDateFormat sdf=new SimpleDateFormat(dateFomratString);
  sdf.setTimeZone(tz);
  try (Connection cx=geopkg.getDataSource().getConnection();Statement st=cx.createStatement();ResultSet rs=st.executeQuery(String.format("SELECT last_change FROM %s;",GeoPackage.GEOPACKAGE_CONTENTS))){
    if (rs.next()) {
      final String dateString=rs.getString(1);
      Date parsedDate=sdf.parse(dateString);
      c.setTime(parsedDate);
      assertTrue("Start time should be less than or equal to last_change time",startTime.compareTo(c) <= 0);
      assertTrue("End time should be greater than or equal to last_change time",endTime.compareTo(c) >= 0);
    }
  }
 }
