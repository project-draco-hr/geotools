{
switch (eClass.getClassifierID()) {
case Wcs11Package.AVAILABLE_KEYS_TYPE:
    return createAvailableKeysType();
case Wcs11Package.AXIS_SUBSET_TYPE:
  return createAxisSubsetType();
case Wcs11Package.AXIS_TYPE:
return createAxisType();
case Wcs11Package.CAPABILITIES_TYPE:
return createCapabilitiesType();
case Wcs11Package.CONTENTS_TYPE:
return createContentsType();
case Wcs11Package.COVERAGE_DESCRIPTIONS_TYPE:
return createCoverageDescriptionsType();
case Wcs11Package.COVERAGE_DESCRIPTION_TYPE:
return createCoverageDescriptionType();
case Wcs11Package.COVERAGE_DOMAIN_TYPE:
return createCoverageDomainType();
case Wcs11Package.COVERAGES_TYPE:
return createCoveragesType();
case Wcs11Package.COVERAGE_SUMMARY_TYPE:
return createCoverageSummaryType();
case Wcs11Package.DESCRIBE_COVERAGE_TYPE:
return createDescribeCoverageType();
case Wcs11Package.DOCUMENT_ROOT:
return createDocumentRoot();
case Wcs11Package.DOMAIN_SUBSET_TYPE:
return createDomainSubsetType();
case Wcs11Package.FIELD_SUBSET_TYPE:
return createFieldSubsetType();
case Wcs11Package.FIELD_TYPE:
return createFieldType();
case Wcs11Package.GET_CAPABILITIES_TYPE:
return createGetCapabilitiesType();
case Wcs11Package.GET_COVERAGE_TYPE:
return createGetCoverageType();
case Wcs11Package.GRID_CRS_TYPE:
return createGridCrsType();
case Wcs11Package.IMAGE_CRS_REF_TYPE:
return createImageCRSRefType();
case Wcs11Package.INTERPOLATION_METHOD_BASE_TYPE:
return createInterpolationMethodBaseType();
case Wcs11Package.INTERPOLATION_METHODS_TYPE:
return createInterpolationMethodsType();
case Wcs11Package.INTERPOLATION_METHOD_TYPE:
return createInterpolationMethodType();
case Wcs11Package.OUTPUT_TYPE:
return createOutputType();
case Wcs11Package.RANGE_SUBSET_TYPE:
return createRangeSubsetType();
case Wcs11Package.RANGE_TYPE:
return createRangeType();
case Wcs11Package.REQUEST_BASE_TYPE:
return createRequestBaseType();
case Wcs11Package.SPATIAL_DOMAIN_TYPE:
return createSpatialDomainType();
case Wcs11Package.TIME_PERIOD_TYPE:
return createTimePeriodType();
case Wcs11Package.TIME_SEQUENCE_TYPE:
return createTimeSequenceType();
default :
throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
}
}
