{
class Case {
    HexagonOrientation o;
    Neighbor n;
    boolean valid;
    public Case(    HexagonOrientation o,    Neighbor n,    boolean valid){
      this.o=o;
      this.n=n;
      this.valid=valid;
    }
  }
  Case[] cases={new Case(HexagonOrientation.ANGLED,Neighbor.LEFT,true),new Case(HexagonOrientation.ANGLED,Neighbor.LOWER,false),new Case(HexagonOrientation.ANGLED,Neighbor.LOWER_LEFT,true),new Case(HexagonOrientation.ANGLED,Neighbor.LOWER_RIGHT,true),new Case(HexagonOrientation.ANGLED,Neighbor.RIGHT,true),new Case(HexagonOrientation.ANGLED,Neighbor.UPPER,false),new Case(HexagonOrientation.ANGLED,Neighbor.UPPER_LEFT,true),new Case(HexagonOrientation.ANGLED,Neighbor.UPPER_RIGHT,true),new Case(HexagonOrientation.FLAT,Neighbor.LEFT,false),new Case(HexagonOrientation.FLAT,Neighbor.LOWER,true),new Case(HexagonOrientation.FLAT,Neighbor.LOWER_LEFT,true),new Case(HexagonOrientation.FLAT,Neighbor.LOWER_RIGHT,true),new Case(HexagonOrientation.FLAT,Neighbor.RIGHT,false),new Case(HexagonOrientation.FLAT,Neighbor.UPPER,true),new Case(HexagonOrientation.FLAT,Neighbor.UPPER_LEFT,true),new Case(HexagonOrientation.FLAT,Neighbor.UPPER_RIGHT,true)};
  for (  Case c : cases) {
    if (c.o == HexagonOrientation.ANGLED) {
      assertEquals("Failed for case: " + c.o + " "+ c.n,c.valid,angledBuilder.isValidNeighbor(c.n));
    }
 else {
      assertEquals("Failed for case: " + c.o + " "+ c.n,c.valid,flatBuilder.isValidNeighbor(c.n));
    }
  }
}
