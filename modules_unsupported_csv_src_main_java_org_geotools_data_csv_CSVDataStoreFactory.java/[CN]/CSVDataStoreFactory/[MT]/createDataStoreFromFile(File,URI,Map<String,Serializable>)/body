{
  CSVFileState csvFileState=new CSVFileState(file,namespace);
  Object strategyParam=STRATEGYP.lookUp(params);
  CSVStrategy csvStrategy=null;
  if (strategyParam != null) {
    String strategyString=strategyParam.toString();
    if (strategyString.equalsIgnoreCase("guess")) {
      csvStrategy=new CSVLatLonStrategy(csvFileState);
    }
 else     if (strategyString.equalsIgnoreCase("specify")) {
      Object latParam=LATFIELDP.lookUp(params);
      Object lngParam=LnGFIELDP.lookUp(params);
      if (latParam == null || lngParam == null) {
        throw new IllegalArgumentException("'specify' csv strategy selected, but lat/lng params both not specified");
      }
      csvStrategy=new CSVLatLonStrategy(csvFileState,latParam.toString(),lngParam.toString());
    }
 else     if (strategyString.equalsIgnoreCase("wkt")) {
      Object wktParam=WKTP.lookUp(params);
      if (wktParam == null) {
        throw new IllegalArgumentException("'wkt' csv strategy selected, but wktField param not specified");
      }
      csvStrategy=new CSVSpecifiedWKTStrategy(csvFileState,wktParam.toString());
    }
 else {
      csvStrategy=new CSVAttributesOnlyStrategy(csvFileState);
    }
  }
 else {
    csvStrategy=new CSVAttributesOnlyStrategy(csvFileState);
  }
  CSVDataStore store=new CSVDataStore(csvFileState,csvStrategy);
  if (namespace != null) {
    store.setNamespaceURI(namespace.toString());
  }
  store.setDataStoreFactory(this);
  store.setGeometryFactory(new GeometryFactory());
  store.setFeatureTypeFactory(new FeatureTypeFactoryImpl());
  store.setFeatureFactory(CommonFactoryFinder.getFeatureFactory(null));
  return store;
}
