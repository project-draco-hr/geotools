{
  ps.println("package org.geotools.filter.function.math;");
  ps.println("");
  ps.println("");
  ps.println("import org.geotools.factory.FactoryConfigurationError;");
  ps.println("import org.geotools.filter.Expression;");
  ps.println("import org.geotools.filter.FilterFactoryFinder;");
  ps.println("import org.geotools.filter.FilterFactoryImpl;");
  ps.println("import org.geotools.filter.FunctionExpression;");
  ps.println("import org.geotools.filter.LiteralExpression;");
  ps.println("import org.geotools.filter.LiteralExpressionImpl;");
  ps.println("");
  ps.println("import junit.framework.TestCase;");
  ps.println("");
  ps.println("public class FilterFunction_Test extends TestCase{");
  ps.println("");
  ps.println("private LiteralExpressionImpl literal_1 = null;");
  ps.println("private LiteralExpression literal_m1;");
  ps.println("private LiteralExpression literal_2;");
  ps.println("private LiteralExpression literal_m2;");
  ps.println("private LiteralExpression literal_pi;");
  ps.println("private LiteralExpression literal_05pi;");
  ps.println("private FilterFactoryImpl filterFactory;");
  ps.println("protected void setUp() throws Exception {");
  ps.println("super.setUp();");
  ps.println("filterFactory = (FilterFactoryImpl) FilterFactoryFinder.createFilterFactory();");
  ps.println("literal_1 = (LiteralExpressionImpl) filterFactory.createLiteralExpression();");
  ps.println("literal_pi = filterFactory.createLiteralExpression();");
  ps.println("literal_05pi = filterFactory.createLiteralExpression();");
  ps.println("literal_m1 = filterFactory.createLiteralExpression();");
  ps.println("literal_2 = filterFactory.createLiteralExpression();");
  ps.println("literal_m2 = filterFactory.createLiteralExpression();");
  ps.println("");
  ps.println("literal_1.setLiteral(new Double(1));");
  ps.println("literal_m1.setLiteral(new Double(-1));");
  ps.println("literal_2.setLiteral(new Double(2));");
  ps.println("literal_m2.setLiteral(new Double(-2));");
  ps.println("literal_pi.setLiteral(new Double(Math.PI));");
  ps.println("literal_05pi.setLiteral(new Double(0.5*Math.PI));");
  ps.println("assertEquals(\"Literal Expression 0.0\",new Double(1.0), literal_1.getLiteral());");
  ps.println("assertEquals(\"Literal Expression pi\",new Double(Math.PI), literal_pi.getLiteral());");
  ps.println("assertEquals(\"Literal Expression 05pi\",new Double(0.5*Math.PI), literal_05pi.getLiteral());");
  ps.println("");
  ps.println("}");
  ps.println("");
  ps.println("protected void tearDown() throws Exception {");
  ps.println("	super.tearDown();");
  ps.println("}");
}
