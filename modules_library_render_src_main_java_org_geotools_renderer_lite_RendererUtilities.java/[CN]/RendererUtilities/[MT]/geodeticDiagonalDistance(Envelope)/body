{
  if (env.getWidth() < 180 && env.getHeight() < 180) {
    return getGeodeticSegmentLength(env.getMinX(),env.getMinY(),env.getMaxX(),env.getMaxY());
  }
 else {
    double distance=0;
    GeometryFactory gf=new GeometryFactory();
    LineString ls=gf.createLineString(new Coordinate[]{new Coordinate(env.getMinX(),env.getMinY()),new Coordinate(env.getMaxX(),env.getMaxY())});
    int qMinX=(int)(Math.signum(env.getMinX()) * Math.ceil(Math.abs(env.getMinX() / 180.0)));
    int qMaxX=(int)(Math.signum(env.getMaxX()) * Math.ceil(Math.abs(env.getMaxX() / 180.0)));
    int qMinY=(int)(Math.signum(env.getMinY()) * Math.ceil(Math.abs((env.getMinY() + 90) / 180.0)));
    int qMaxY=(int)(Math.signum(env.getMaxY()) * Math.ceil(Math.abs((env.getMaxY() + 90) / 180.0)));
    for (int i=qMinX; i < qMaxX; i++) {
      for (int j=qMinY; j < qMaxY; j++) {
        double minX=i * 180.0;
        double minY=j * 180.0 - 90;
        double maxX=minX + 180;
        double maxY=minY + 180;
        LinearRing ring=gf.createLinearRing(new Coordinate[]{new Coordinate(minX,minY),new Coordinate(minX,maxY),new Coordinate(maxX,maxY),new Coordinate(maxX,minY),new Coordinate(minX,minY)});
        Polygon p=gf.createPolygon(ring,null);
        Geometry intersection=p.intersection(ls);
        if (!intersection.isEmpty()) {
          if (intersection instanceof LineString) {
            LineString ils=((LineString)intersection);
            double d=getGeodeticSegmentLength(ils);
            distance+=d;
          }
 else           if (intersection instanceof GeometryCollection) {
            GeometryCollection igc=((GeometryCollection)intersection);
            for (int k=0; k < igc.getNumGeometries(); k++) {
              Geometry child=igc.getGeometryN(k);
              if (child instanceof LineString) {
                double d=getGeodeticSegmentLength((LineString)child);
                distance+=d;
              }
            }
          }
        }
      }
    }
    return distance;
  }
}
