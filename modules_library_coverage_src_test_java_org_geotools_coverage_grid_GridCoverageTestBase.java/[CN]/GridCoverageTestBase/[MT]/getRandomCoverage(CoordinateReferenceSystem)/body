{
  final double PIXEL_SIZE=.25;
  final int BEGIN_VALID=3;
  final GridCoverage2D coverage;
  final BufferedImage image;
  final WritableRaster raster;
  final Rectangle2D bounds;
  final GridSampleDimension band;
  band=new GridSampleDimension("Temperature",new Category[]{new Category("No data",null,0),new Category("Land",null,1),new Category("Cloud",null,2),new Category("Temperature",null,BEGIN_VALID,256)},CELSIUS);
  image=new BufferedImage(120,80,BufferedImage.TYPE_BYTE_INDEXED);
  raster=image.getRaster();
  for (int i=raster.getWidth(); --i >= 0; ) {
    for (int j=raster.getHeight(); --j >= 0; ) {
      raster.setSample(i,j,0,random.nextInt(256));
    }
  }
  bounds=new Rectangle2D.Double(-10,30,PIXEL_SIZE * image.getWidth(),PIXEL_SIZE * image.getHeight());
  final GeneralEnvelope envelope=new GeneralEnvelope(crs);
  envelope.setRange(0,bounds.getMinX(),bounds.getMaxX());
  envelope.setRange(1,bounds.getMinY(),bounds.getMaxY());
  for (int i=envelope.getDimension(); --i >= 2; ) {
    final double min=10 * i;
    envelope.setRange(i,min,min + 5);
  }
  final Hints hints=new Hints(Hints.TILE_ENCODING,"raw");
  final GridCoverageFactory factory=CoverageFactoryFinder.getGridCoverageFactory(hints);
  coverage=factory.create("Test",image,envelope,new GridSampleDimension[]{band},null,null);
  assertEquals("raw",coverage.tileEncoding);
  assertSame(coverage.getRenderedImage(),coverage.getRenderableImage(0,1).createDefaultRendering());
  assertSame(image.getTile(0,0),coverage.getRenderedImage().getTile(0,0));
  final int bandN=0;
  double[] bufferCov=null;
  final double left=bounds.getMinX() + (0.5 * PIXEL_SIZE);
  final double upper=bounds.getMaxY() - (0.5 * PIXEL_SIZE);
  final Point2D.Double point=new Point2D.Double();
  for (int j=raster.getHeight(); --j >= 0; ) {
    for (int i=raster.getWidth(); --i >= 0; ) {
      point.x=left + PIXEL_SIZE * i;
      point.y=upper - PIXEL_SIZE * j;
      double r=raster.getSampleDouble(i,j,bandN);
      bufferCov=coverage.evaluate(point,bufferCov);
      assertEquals(r,bufferCov[bandN],EPS);
    }
  }
  return coverage;
}
