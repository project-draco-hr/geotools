{
  ColorMapUtilities.checkPreservingElements(domainElementsToPreserve);
  final int num=domainElementsToPreserve != null ? domainElements.length + domainElementsToPreserve.length : domainElements.length;
  for (int i=0; i < num; i++) {
    final DefaultLinearPiecewiseTransform1DElement c0=i >= domainElements.length ? (DefaultLinearPiecewiseTransform1DElement)domainElementsToPreserve[i - domainElements.length] : (DefaultLinearPiecewiseTransform1DElement)domainElements[i];
    final ColorMapTransformElement v0=(ColorMapTransformElement)c0;
    final NumberRange<? extends Number> outRange0=c0.getOutputRange();
    final Color[] colors0=v0.getColors();
    final int minimum0=(int)outRange0.getMinimum();
    final int maximum0=(int)outRange0.getMaximum();
    for (int j=0; j < num; j++) {
      if (j == i)       continue;
      final DefaultLinearPiecewiseTransform1DElement c1=j >= domainElements.length ? (DefaultLinearPiecewiseTransform1DElement)domainElementsToPreserve[j - domainElements.length] : (DefaultLinearPiecewiseTransform1DElement)domainElements[j];
      final ColorMapTransformElement v1=(ColorMapTransformElement)c1;
      final NumberRange<? extends Number> outRange1=c1.getOutputRange();
      if (outRange1.intersects(outRange0)) {
        if (!outRange0.intersects(outRange1))         continue;
        final int minimum1=(int)outRange1.getMinimum();
        final int maximum1=(int)outRange1.getMaximum();
        final Color[] colors1=v1.getColors();
        if (minimum1 == maximum0 && colors0[colors0.length - 1].equals(colors1[0]))         continue;
        if (minimum0 == maximum1 && colors1[colors1.length - 1].equals(colors0[0]))         continue;
        throw new IllegalArgumentException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2,c0,c1));
      }
    }
  }
}
