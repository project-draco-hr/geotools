{
  final boolean negative;
  if (value == Double.NEGATIVE_INFINITY) {
    negative=true;
  }
 else   if (value == Double.POSITIVE_INFINITY) {
    negative=false;
  }
 else {
    return value;
  }
  final double midValue;
switch (dataType) {
default :
{
      final long range=1L << DataBuffer.getDataTypeSize(dataType);
      value=negative ? 0 : range - 1;
      midValue=range >>> 1;
      break;
    }
case DataBuffer.TYPE_SHORT:
{
    value=negative ? Short.MIN_VALUE : Short.MAX_VALUE;
    midValue=0;
    break;
  }
case DataBuffer.TYPE_INT:
{
  value=negative ? Integer.MIN_VALUE : Integer.MAX_VALUE;
  midValue=0;
  break;
}
case DataBuffer.TYPE_FLOAT:
case DataBuffer.TYPE_DOUBLE:
case DataBuffer.TYPE_UNDEFINED:
{
return value;
}
}
if (fillValues != null) {
double valueDistance=Math.abs(value - midValue);
for (int i=0; i < fillValues.length; i++) {
final double fillValue=fillValues[i];
if ((fillValue < midValue) == negative) {
final double fillDistance=Math.abs(fillValue - midValue);
if (fillDistance <= valueDistance) {
  valueDistance=fillDistance;
  value=fillValue - 1;
}
}
}
}
return value;
}
