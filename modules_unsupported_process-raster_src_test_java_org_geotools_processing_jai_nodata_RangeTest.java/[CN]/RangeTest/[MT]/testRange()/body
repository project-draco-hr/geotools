{
  for (int i=0; i < arrayB.length; i++) {
    boolean check2pointByte=rangeB2bounds.contains(arrayB[i]);
    boolean check1pointByte=rangeBpoint.contains(arrayB[i]);
    boolean check2pointUshort=rangeU2bounds.contains(arrayUS[i]);
    boolean check1pointUshort=rangeUpoint.contains(arrayUS[i]);
    boolean check2pointShort=rangeS2bounds.contains(arrayS[i]);
    boolean check1pointShort=rangeSpoint.contains(arrayS[i]);
    boolean check2pointInt=rangeI2bounds.contains(arrayI[i]);
    boolean check1pointInt=rangeIpoint.contains(arrayI[i]);
    boolean check2pointFloat=rangeF2bounds.contains(arrayF[i]);
    boolean check1pointFloat=rangeFpoint.contains(arrayF[i]);
    boolean check2pointDouble=rangeD2bounds.contains(arrayD[i]);
    boolean check1pointDouble=rangeDpoint.contains(arrayD[i]);
    boolean check2pointLong=rangeL2bounds.contains(arrayL[i]);
    boolean check1pointLong=rangeLpoint.contains(arrayL[i]);
    if (i == 2) {
      assertTrue(check1pointByte);
      assertTrue(check2pointByte);
      assertTrue(check1pointUshort);
      assertTrue(check2pointUshort);
      assertTrue(check1pointShort);
      assertTrue(check2pointShort);
      assertTrue(check1pointInt);
      assertTrue(check2pointInt);
      assertTrue(check1pointFloat);
      assertTrue(check2pointFloat);
      assertTrue(check1pointDouble);
      assertTrue(check2pointDouble);
      assertTrue(check1pointLong);
      assertTrue(check2pointLong);
    }
 else     if (i == 3) {
      assertFalse(check1pointByte);
      assertTrue(check2pointByte);
      assertFalse(check1pointUshort);
      assertTrue(check2pointUshort);
      assertFalse(check1pointShort);
      assertTrue(check2pointShort);
      assertFalse(check1pointInt);
      assertTrue(check2pointInt);
      assertFalse(check1pointFloat);
      assertTrue(check2pointFloat);
      assertFalse(check1pointDouble);
      assertTrue(check2pointDouble);
      assertFalse(check1pointLong);
      assertTrue(check2pointLong);
    }
 else {
      assertFalse(check1pointByte);
      assertFalse(check2pointByte);
      assertFalse(check1pointUshort);
      assertFalse(check2pointUshort);
      assertFalse(check1pointShort);
      assertFalse(check2pointShort);
      assertFalse(check1pointInt);
      assertFalse(check2pointInt);
      assertFalse(check1pointFloat);
      assertFalse(check2pointFloat);
      assertFalse(check1pointDouble);
      assertFalse(check2pointDouble);
      assertFalse(check1pointLong);
      assertFalse(check2pointLong);
    }
  }
}
