{
  try {
    @SuppressWarnings("unused") Class<?> cl=Class.forName(GDAL_JP2MrSID_SPI);
    Class<?> cGdal=Class.forName(GDAL_SPI);
    Object jp2MrSid=cl.newInstance();
    final Method method=cGdal.getDeclaredMethod("isAvailable",(Class[])null);
    if (method != null) {
      Boolean isAvailable=(Boolean)method.invoke(jp2MrSid,null);
      return isAvailable.booleanValue();
    }
  }
 catch (  ClassNotFoundException e) {
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.log(Level.FINE,"Unable to load GDAL JP2 MrSID Reader SPI",e);
  }
catch (  SecurityException e) {
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.log(Level.FINE,"Unable to load GDAL JP2 MrSID Reader SPI",e);
  }
catch (  NoSuchMethodException e) {
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.log(Level.FINE,"Unable to load GDAL JP2 MrSID Reader SPI",e);
  }
catch (  IllegalArgumentException e) {
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.log(Level.FINE,"Unable to load GDAL JP2 MrSID Reader SPI",e);
  }
catch (  IllegalAccessException e) {
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.log(Level.FINE,"Unable to load GDAL JP2 MrSID Reader SPI",e);
  }
catch (  InvocationTargetException e) {
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.log(Level.FINE,"Unable to load GDAL JP2 MrSID Reader SPI",e);
  }
catch (  InstantiationException e) {
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.log(Level.FINE,"Unable to load GDAL JP2 MrSID Reader SPI",e);
  }
  return false;
}
