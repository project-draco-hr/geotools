{
  try {
    final String ecwJP2=JP2GDALEcwImageReaderSpi.class.getName();
    Class.forName(ecwJP2);
    final String imageioJ2KImageReaderCodecName=J2KImageReaderCodecLibSpi.class.getName();
    if (PackageUtil.isCodecLibAvailable()) {
      boolean succeeded=ImageIOUtilities.replaceProvider(ImageReaderSpi.class,ecwJP2,imageioJ2KImageReaderCodecName,"JPEG 2000");
      if (!succeeded)       if (LOGGER.isLoggable(Level.WARNING))       LOGGER.warning("Unable to set ordering between jp2 readers spi-" + ecwJP2 + ":"+ imageioJ2KImageReaderCodecName);
    }
    final String imageioJ2KImageReaderName=J2KImageReaderSpi.class.getName();
    final boolean succeeded=ImageIOUtilities.replaceProvider(ImageReaderSpi.class,ecwJP2,imageioJ2KImageReaderName,"JPEG 2000");
    if (!succeeded)     if (LOGGER.isLoggable(Level.WARNING))     LOGGER.warning("Unable to set ordering between jp2 readers spi-" + ecwJP2 + ":"+ imageioJ2KImageReaderName);
  }
 catch (  ClassNotFoundException e) {
    if (LOGGER.isLoggable(Level.WARNING))     LOGGER.log(Level.WARNING,"Unable to load specific JPEG2000 reader spi",e);
  }
}
