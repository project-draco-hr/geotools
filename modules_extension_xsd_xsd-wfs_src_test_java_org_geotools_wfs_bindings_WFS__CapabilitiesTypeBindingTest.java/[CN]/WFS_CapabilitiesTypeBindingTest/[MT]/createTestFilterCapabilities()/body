{
  final String version="1.1.0";
  final ScalarCapabilities scalarCaps;
  final SpatialCapabilities spatialCaps;
  final IdCapabilities idCaps;
{
    Operator[] operators={filterFac.operator("LessThan"),filterFac.operator("GreaterThan")};
    ComparisonOperators comparisonOps=filterFac.comparisonOperators(operators);
    boolean simple=true;
    FunctionName[] functionNames={filterFac.functionName("MIN",2),filterFac.functionName("ABS",1)};
    Functions functions=filterFac.functions(functionNames);
    final ArithmeticOperators aritmeticOps=filterFac.arithmeticOperators(simple,functions);
    final boolean logicalOps=true;
    scalarCaps=filterFac.scalarCapabilities(comparisonOps,aritmeticOps,logicalOps);
  }
{
    GeometryOperand[] geomOperands={GeometryOperand.Envelope,GeometryOperand.Point};
    String name="Disjoint";
    GeometryOperand[] operands={};
    SpatialOperator[] spatialOps={filterFac.spatialOperator(name,operands)};
    SpatialOperators spatialOperators=filterFac.spatialOperators(spatialOps);
    spatialCaps=filterFac.spatialCapabilities(geomOperands,spatialOperators);
  }
{
    boolean eid=true;
    boolean fid=true;
    idCaps=filterFac.idCapabilities(eid,fid);
  }
  FilterCapabilities filterCaps;
  filterCaps=filterFac.capabilities(version,scalarCaps,spatialCaps,idCaps);
  return filterCaps;
}
