{
  SimpleFeatureType ft=wfs.getSchema(typeName);
  String[] props;
  props=new String[]{ft.getGeometryDescriptor().getLocalName()};
  Query query=new Query(ft.getTypeName());
  query.setPropertyNames(props);
  String fid=null;
  if (get) {
    FeatureReader<SimpleFeatureType,SimpleFeature> fr=wfs.getFeatureReaderGet(query,Transaction.AUTO_COMMIT);
    try {
      assertNotNull("FeatureType was null",ft);
      SimpleFeatureType featureType=fr.getFeatureType();
      if (ft.getAttributeCount() > 1) {
        assertEquals("Query must restrict feature type to only having 1 AttributeType",1,featureType.getAttributeCount());
      }
      assertTrue("must have 1 feature -- fair assumption",fr.hasNext() && featureType != null);
      SimpleFeature feature=fr.next();
      featureType=feature.getFeatureType();
      if (ft.getAttributeCount() > 1) {
        assertEquals("Query must restrict feature type to only having 1 AttributeType",1,featureType.getAttributeCount());
      }
      assertNotNull("must have 1 feature ",feature);
      fid=feature.getID();
      int j=0;
      while (fr.hasNext()) {
        fr.next();
        j++;
      }
      System.out.println(j + " Features");
    }
  finally {
      fr.close();
    }
  }
  query.setFilter(FilterFactoryFinder.createFilterFactory().createFidFilter(fid));
  if (get) {
    FeatureReader<SimpleFeatureType,SimpleFeature> fr=wfs.getFeatureReaderGet(query,Transaction.AUTO_COMMIT);
    try {
      assertNotNull("FeatureType was null",ft);
      int j=0;
      while (fr.hasNext()) {
        assertEquals(fid,fr.next().getID());
        j++;
      }
      assertEquals(1,j);
    }
  finally {
      fr.close();
    }
  }
  if (post) {
    FeatureReader<SimpleFeatureType,SimpleFeature> fr=wfs.getFeatureReaderPost(query,Transaction.AUTO_COMMIT);
    try {
      assertNotNull("FeatureType was null",ft);
      int j=0;
      while (fr.hasNext()) {
        assertEquals(fid,fr.next().getID());
        j++;
      }
      assertEquals(1,j);
    }
  finally {
      fr.close();
    }
  }
}
