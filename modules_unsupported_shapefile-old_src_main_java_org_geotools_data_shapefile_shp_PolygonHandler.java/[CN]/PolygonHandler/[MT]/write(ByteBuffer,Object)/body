{
  MultiPolygon multi;
  if (geometry instanceof MultiPolygon) {
    multi=(MultiPolygon)geometry;
  }
 else {
    multi=geometryFactory.createMultiPolygon(new Polygon[]{(Polygon)geometry});
  }
  Envelope box=multi.getEnvelopeInternal();
  buffer.putDouble(box.getMinX());
  buffer.putDouble(box.getMinY());
  buffer.putDouble(box.getMaxX());
  buffer.putDouble(box.getMaxY());
  final int nrings;
  final CoordinateSequence[] coordinates;
{
    List allCoords=new ArrayList();
    for (int t=0; t < multi.getNumGeometries(); t++) {
      Polygon p;
      p=(Polygon)multi.getGeometryN(t);
      allCoords.add(p.getExteriorRing().getCoordinateSequence());
      for (int ringN=0; ringN < p.getNumInteriorRing(); ringN++) {
        allCoords.add(p.getInteriorRingN(ringN).getCoordinateSequence());
      }
    }
    coordinates=(CoordinateSequence[])allCoords.toArray(new CoordinateSequence[allCoords.size()]);
    nrings=coordinates.length;
  }
  final int npoints=multi.getNumPoints();
  buffer.putInt(nrings);
  buffer.putInt(npoints);
  int count=0;
  for (int t=0; t < nrings; t++) {
    buffer.putInt(count);
    count=count + coordinates[t].size();
  }
  final double[] zExtreame={Double.NaN,Double.NaN};
  for (int ringN=0; ringN < nrings; ringN++) {
    CoordinateSequence coords=coordinates[ringN];
    JTSUtilities.zMinMax(coords,zExtreame);
    final int seqSize=coords.size();
    for (int coordN=0; coordN < seqSize; coordN++) {
      buffer.putDouble(coords.getOrdinate(coordN,0));
      buffer.putDouble(coords.getOrdinate(coordN,1));
    }
  }
  if (shapeType == ShapeType.POLYGONZ) {
    if (Double.isNaN(zExtreame[0])) {
      buffer.putDouble(0.0);
      buffer.putDouble(0.0);
    }
 else {
      buffer.putDouble(zExtreame[0]);
      buffer.putDouble(zExtreame[1]);
    }
    for (int ringN=0; ringN < nrings; ringN++) {
      CoordinateSequence coords=coordinates[ringN];
      final int seqSize=coords.size();
      double z;
      for (int coordN=0; coordN < seqSize; coordN++) {
        z=coords.getOrdinate(coordN,2);
        if (Double.isNaN(z)) {
          buffer.putDouble(0.0);
        }
 else {
          buffer.putDouble(z);
        }
      }
    }
  }
  if (shapeType == ShapeType.POLYGONM || shapeType == ShapeType.POLYGONZ) {
    buffer.putDouble(-10E40);
    buffer.putDouble(-10E40);
    for (int t=0; t < npoints; t++) {
      buffer.putDouble(-10E40);
    }
  }
}
