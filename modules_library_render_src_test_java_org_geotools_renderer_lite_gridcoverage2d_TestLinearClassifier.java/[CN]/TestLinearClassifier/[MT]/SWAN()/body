{
  final RenderedImage image=getSWAN();
  for (int i=0; i < TEST_NUM; i++) {
    final LinearColorMapElement c0=LinearColorMapElement.create("c0",Color.green,RangeFactory.create(Double.NEGATIVE_INFINITY,0.3),51);
    final LinearColorMapElement c1=LinearColorMapElement.create("c2",Color.yellow,RangeFactory.create(0.3,false,0.6,true),1);
    final LinearColorMapElement c1b=LinearColorMapElement.create("c2",Color.BLACK,RangeFactory.create(0.3,false,0.6,true),1);
    final LinearColorMapElement c1c=LinearColorMapElement.create("c2",Color.yellow,RangeFactory.create(0.3,false,0.6,true),1);
    assertFalse(c1.equals(c1b));
    assertTrue(c1.equals(c1c));
    final LinearColorMapElement c3=LinearColorMapElement.create("c3",Color.red,RangeFactory.create(0.60,false,0.90,true),2);
    final LinearColorMapElement c4=LinearColorMapElement.create("c4",Color.BLUE,RangeFactory.create(0.9,false,Double.POSITIVE_INFINITY,true),3);
    final LinearColorMapElement nodata=LinearColorMapElement.create("nodata",new Color(0,0,0,0),RangeFactory.create(-9.0,-9.0),4);
    final LinearColorMap list=new LinearColorMap("testSWAN",new LinearColorMapElement[]{c0,c1,c3,c4},new LinearColorMapElement[]{nodata},new Color(0,0,0));
    assertEquals(list.getSourceDimensions(),1);
    assertEquals(list.getTargetDimensions(),1);
    assertEquals(list.getName().toString(),"testSWAN");
    assertNotNull(c0.toString());
    ImageWorker w=new ImageWorker(image);
    boolean exceptionThrown=false;
    try {
      final RenderedOp d=w.classify(list,new Integer(2)).getRenderedOperation();
      d.getTiles();
    }
 catch (    Exception e) {
      exceptionThrown=true;
    }
    assertTrue(exceptionThrown);
    final RenderedOp finalImage=w.classify(list,new Integer(0)).getRenderedOperation();
    if (TestData.isInteractiveTest())     ImageIOUtilities.visualize(finalImage,"testSWAN1");
 else     finalImage.getTiles();
    finalImage.dispose();
  }
}
