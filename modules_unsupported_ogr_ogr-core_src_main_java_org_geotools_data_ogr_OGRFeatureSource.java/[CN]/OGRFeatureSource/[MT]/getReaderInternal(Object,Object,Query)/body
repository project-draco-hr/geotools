{
  OGRFilterTranslator filterTx=new OGRFilterTranslator(getSchema(),query.getFilter());
  if (Filter.EXCLUDE.equals(filterTx.getFilter())) {
    return new EmptyFeatureReader<SimpleFeatureType,SimpleFeature>(getSchema());
  }
  boolean cleanup=false;
  try {
    String typeName=getEntry().getTypeName();
    if (dataSource == null) {
      dataSource=getDataStore().openOGRDataSource(false);
      cleanup=true;
    }
    Filter postFilter=null;
    if (!filterTx.isFilterFullySupported()) {
      postFilter=filterTx.getPostFilter();
    }
    SimpleFeatureType sourceSchema=getSchema();
    SimpleFeatureType querySchema=sourceSchema;
    SimpleFeatureType targetSchema=sourceSchema;
    String[] properties=query.getPropertyNames();
    if (properties != null && properties.length > 0) {
      targetSchema=SimpleFeatureTypeBuilder.retype(sourceSchema,properties);
      querySchema=targetSchema;
      if (postFilter != null) {
        Set<String> queriedAttributes=new HashSet<String>(Arrays.asList(properties));
        FilterAttributeExtractor extraAttributeExtractor=new FilterAttributeExtractor();
        postFilter.accept(extraAttributeExtractor,null);
        Set<String> extraAttributeSet=new HashSet<String>(extraAttributeExtractor.getAttributeNameSet());
        extraAttributeSet.removeAll(queriedAttributes);
        if (extraAttributeSet.size() > 0) {
          String[] queryProperties=new String[properties.length + extraAttributeSet.size()];
          System.arraycopy(properties,0,queryProperties,0,properties.length);
          String[] extraAttributes=(String[])extraAttributeSet.toArray(new String[extraAttributeSet.size()]);
          System.arraycopy(extraAttributes,0,queryProperties,properties.length,extraAttributes.length);
          querySchema=SimpleFeatureTypeBuilder.retype(sourceSchema,queryProperties);
        }
      }
    }
    if (layer == null) {
      if (query.getSortBy() == null || query.getSortBy().length == 0) {
        layer=ogr.DataSourceGetLayerByName(dataSource,getSchema().getTypeName());
        setLayerFilters(layer,filterTx);
      }
 else {
        Object driver=ogr.DataSourceGetDriver(dataSource);
        String driverName=ogr.DriverGetName(driver);
        ogr.DriverRelease(driver);
        boolean isNonOgrSql=doesDriverUseNonOgrSql(driverName);
        String fidColumnName="FID";
        if (isNonOgrSql) {
          boolean needsFid=false;
          for (          SortBy sort : query.getSortBy()) {
            if (SortBy.NATURAL_ORDER.equals(sort) || SortBy.REVERSE_ORDER.equals(sort)) {
              needsFid=true;
              break;
            }
          }
          if (needsFid) {
            layer=ogr.DataSourceGetLayerByName(dataSource,getSchema().getTypeName());
            fidColumnName=ogr.LayerGetFIDColumnName(layer);
            ogr.LayerRelease(layer);
            if (fidColumnName == null) {
              throw new IOException("Cannot do natural order without an FID column!");
            }
          }
        }
        String sql=getLayerSql(querySchema == sourceSchema ? null : querySchema,filterTx.getAttributeFilter(),query.getSortBy(),isNonOgrSql,fidColumnName);
        Object spatialFilterPtr=null;
        Geometry spatialFilter=filterTx.getSpatialFilter();
        if (spatialFilter != null) {
          spatialFilterPtr=new GeometryMapper.WKB(new GeometryFactory(),ogr).parseGTGeometry(spatialFilter);
        }
        layer=ogr.DataSourceExecuteSQL(dataSource,sql,spatialFilterPtr);
        if (layer == null) {
          throw new IOException("Failed to query the source layer with SQL: " + sql);
        }
      }
    }
 else {
      setLayerFilters(layer,filterTx);
    }
    GeometryFactory gf=getGeometryFactory(query);
    FeatureReader<SimpleFeatureType,SimpleFeature> reader=new OGRFeatureReader(dataSource,layer,querySchema,sourceSchema,gf,ogr);
    cleanup=false;
    if (!filterTx.isFilterFullySupported()) {
      reader=new FilteringFeatureReader<SimpleFeatureType,SimpleFeature>(reader,filterTx.getPostFilter());
      if (targetSchema != querySchema) {
        reader=new ReTypeFeatureReader(reader,targetSchema);
      }
    }
    return reader;
  }
  finally {
    if (cleanup) {
      ogr.LayerRelease(layer);
      ogr.DataSourceRelease(dataSource);
    }
  }
}
