{
  initFields();
  int mutable_bitField0_=0;
  com.google.protobuf.ByteString.Output unknownFieldsOutput=com.google.protobuf.ByteString.newOutput();
  com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput=com.google.protobuf.CodedOutputStream.newInstance(unknownFieldsOutput);
  try {
    boolean done=false;
    while (!done) {
      int tag=input.readTag();
switch (tag) {
case 0:
        done=true;
      break;
default :
{
      if (!parseUnknownField(input,unknownFieldsCodedOutput,extensionRegistry,tag)) {
        done=true;
      }
      break;
    }
case 8:
{
    int rawValue=input.readEnum();
    Geobuf.Data.Geometry.Type value=Geobuf.Data.Geometry.Type.valueOf(rawValue);
    if (value == null) {
      unknownFieldsCodedOutput.writeRawVarint32(tag);
      unknownFieldsCodedOutput.writeRawVarint32(rawValue);
    }
 else {
      bitField0_|=0x00000001;
      type_=value;
    }
    break;
  }
case 16:
{
  if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
    lengths_=new java.util.ArrayList<Integer>();
    mutable_bitField0_|=0x00000002;
  }
  lengths_.add(input.readUInt32());
  break;
}
case 18:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
  lengths_=new java.util.ArrayList<Integer>();
  mutable_bitField0_|=0x00000002;
}
while (input.getBytesUntilLimit() > 0) {
  lengths_.add(input.readUInt32());
}
input.popLimit(limit);
break;
}
case 24:
{
if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
coords_=new java.util.ArrayList<Long>();
mutable_bitField0_|=0x00000004;
}
coords_.add(input.readSInt64());
break;
}
case 26:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
coords_=new java.util.ArrayList<Long>();
mutable_bitField0_|=0x00000004;
}
while (input.getBytesUntilLimit() > 0) {
coords_.add(input.readSInt64());
}
input.popLimit(limit);
break;
}
case 34:
{
if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
geometries_=new java.util.ArrayList<Geometry>();
mutable_bitField0_|=0x00000008;
}
geometries_.add(input.readMessage(Geobuf.Data.Geometry.PARSER,extensionRegistry));
break;
}
case 106:
{
if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
values_=new java.util.ArrayList<Value>();
mutable_bitField0_|=0x00000010;
}
values_.add(input.readMessage(Geobuf.Data.Value.PARSER,extensionRegistry));
break;
}
case 120:
{
if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
customProperties_=new java.util.ArrayList<Integer>();
mutable_bitField0_|=0x00000020;
}
customProperties_.add(input.readUInt32());
break;
}
case 122:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
customProperties_=new java.util.ArrayList<Integer>();
mutable_bitField0_|=0x00000020;
}
while (input.getBytesUntilLimit() > 0) {
customProperties_.add(input.readUInt32());
}
input.popLimit(limit);
break;
}
}
}
}
 catch (com.google.protobuf.InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
}
catch (java.io.IOException e) {
throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
}
 finally {
if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
lengths_=java.util.Collections.unmodifiableList(lengths_);
}
if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
coords_=java.util.Collections.unmodifiableList(coords_);
}
if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
geometries_=java.util.Collections.unmodifiableList(geometries_);
}
if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
values_=java.util.Collections.unmodifiableList(values_);
}
if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
customProperties_=java.util.Collections.unmodifiableList(customProperties_);
}
try {
unknownFieldsCodedOutput.flush();
}
 catch (java.io.IOException e) {
}
 finally {
unknownFields=unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
