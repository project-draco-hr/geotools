{
  SimpleFeature feature=createLine(0,0,10,10);
  SimpleFeatureIterator it=createNiceMock(SimpleFeatureIterator.class);
  expect(it.hasNext()).andReturn(true).anyTimes();
  expect(it.next()).andReturn(feature).anyTimes();
  replay(it);
  SimpleFeatureCollection fc=createNiceMock(SimpleFeatureCollection.class);
  expect(fc.features()).andReturn(it);
  expect(fc.size()).andReturn(Integer.MAX_VALUE);
  expect(fc.getSchema()).andReturn(testFeatureType).anyTimes();
  replay(fc);
  SimpleFeatureSource fs=createNiceMock(SimpleFeatureSource.class);
  expect(fs.getFeatures((Query)anyObject())).andReturn(fc);
  expect(fs.getSchema()).andReturn(testFeatureType).anyTimes();
  expect(fs.getSupportedHints()).andReturn(new HashSet()).anyTimes();
  replay(fs);
  ExecutorService painterExecutor=Executors.newSingleThreadExecutor();
  MapContent mc=new MapContext(DefaultGeographicCRS.WGS84);
  mc.addLayer(new FeatureLayer(fs,createLineStyle()));
  final StreamingRenderer sr=new StreamingRenderer(){
    @Override protected BlockingQueue<RenderingRequest> getRequestsQueue(){
      return new StreamingRenderer.RenderingBlockingQueue(1);
    }
  }
;
  sr.setMapContent(mc);
  sr.setThreadPool(painterExecutor);
  Graphics2D g2d=createNiceMock(Graphics2D.class);
  g2d.draw((Shape)anyObject());
  expectLastCall().andStubAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      Thread.sleep(100);
      return null;
    }
  }
);
  replay(g2d);
  ExecutorService ex=Executors.newSingleThreadExecutor();
  ex.submit(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      Thread.sleep(1000);
      sr.stopRendering();
      return true;
    }
  }
);
  ReferencedEnvelope reWgs=new ReferencedEnvelope(new Envelope(-180,180,-90,90),DefaultGeographicCRS.WGS84);
  sr.paint(g2d,new Rectangle(200,200),reWgs);
  painterExecutor.shutdown();
  painterExecutor.awaitTermination(1000,TimeUnit.MILLISECONDS);
}
