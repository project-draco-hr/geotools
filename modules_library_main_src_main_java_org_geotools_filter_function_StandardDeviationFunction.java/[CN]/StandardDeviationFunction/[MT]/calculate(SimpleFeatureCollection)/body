{
  try {
    int classNum=getClasses();
    AverageVisitor averageVisit=new AverageVisitor(getExpression());
    if (progress == null)     progress=new NullProgressListener();
    featureCollection.accepts(averageVisit,progress);
    if (progress.isCanceled())     return null;
    CalcResult calcResult=averageVisit.getResult();
    if (calcResult == null)     return null;
    double average=calcResult.toDouble();
    StandardDeviationVisitor sdVisit=new StandardDeviationVisitor(getExpression(),average);
    featureCollection.accepts(sdVisit,progress);
    if (progress.isCanceled())     return null;
    calcResult=sdVisit.getResult();
    if (calcResult == null)     return null;
    double standardDeviation=calcResult.toDouble();
    Double min[]=new Double[classNum];
    Double max[]=new Double[classNum];
    for (int i=0; i < classNum; i++) {
      min[i]=getMin(i,classNum,average,standardDeviation);
      max[i]=getMax(i,classNum,average,standardDeviation);
    }
    return new RangedClassifier(min,max);
  }
 catch (  IOException e) {
    LOGGER.log(Level.SEVERE,"StandardDeviationFunction calculate failed",e);
    return null;
  }
}
