{
  final it.geosolutions.jaiext.rlookup.RangeLookupTable.Builder rltBuilder=new it.geosolutions.jaiext.rlookup.RangeLookupTable.Builder();
  final int size=classificationRanges.size();
  final boolean useCustomOutputPixelValues=outputPixelValues != null && outputPixelValues.length == size;
  Class<? extends Number> noDataClass=it.geosolutions.jaiext.range.Range.DataType.classFromType(transferType);
  Class<? extends Number> widestClass=noDataClass;
  for (int i=0; i < size; i++) {
    final Range range=classificationRanges.get(i);
    final Class<? extends Number> rangeClass=range.getMin().getClass();
    if (widestClass != rangeClass) {
      widestClass=ClassChanger.getWidestClass(widestClass,rangeClass);
    }
    int rangeType=it.geosolutions.jaiext.range.Range.DataType.dataTypeFromClass(rangeClass);
    final int reference=useCustomOutputPixelValues ? outputPixelValues[i] : i + 1;
    it.geosolutions.jaiext.range.Range rangeJaiext=RangeFactory.convert(RangeFactory.create(range.getMin().doubleValue(),range.isMinIncluded(),range.getMax().doubleValue(),range.isMaxIncluded()),rangeType);
    rltBuilder.add(rangeJaiext,convert(reference,noDataClass));
  }
  int rangeType=it.geosolutions.jaiext.range.Range.DataType.dataTypeFromClass(widestClass);
  it.geosolutions.jaiext.range.Range rangeJaiext=RangeFactory.convert(RangeFactory.create(getClassMinimum(widestClass).doubleValue(),getClassMaximum(widestClass).doubleValue()),rangeType);
  rltBuilder.add(rangeJaiext,noDataValue);
  return rltBuilder.build();
}
