{
  final String worldFilePath=new StringBuffer(this.parentPath).append(GridCoverageUtilities.SEPARATOR).append(coverageName).toString();
  File file2Parse=null;
  boolean worldFileExists=false;
  if (worldFileExt != null && worldFileExt.length() > 0) {
    file2Parse=new File(worldFilePath + worldFileExt);
    worldFileExists=file2Parse.exists();
  }
  if (!worldFileExists) {
    file2Parse=new File(worldFilePath + GridCoverageUtilities.DEFAULT_WORLDFILE_EXT);
    worldFileExists=file2Parse.exists();
  }
  if (worldFileExists) {
    try {
      final WorldFileReader reader=new WorldFileReader(file2Parse);
      raster2Model=reader.getTransform();
      MathTransform tempTransform=PixelTranslation.translate(raster2Model,PixelInCell.CELL_CENTER,PixelInCell.CELL_CORNER);
      final Envelope gridRange=new GeneralEnvelope((GridEnvelope2D)originalGridRange);
      final GeneralEnvelope coverageEnvelope=CRS.transform(tempTransform,gridRange);
      originalEnvelope=coverageEnvelope;
      return;
    }
 catch (    TransformException e) {
      if (LOGGER.isLoggable(Level.WARNING)) {
        LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
      }
    }
catch (    IllegalStateException e) {
      if (LOGGER.isLoggable(Level.WARNING)) {
        LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
      }
    }
catch (    IOException e) {
      if (LOGGER.isLoggable(Level.WARNING)) {
        LOGGER.log(Level.WARNING,e.getLocalizedMessage(),e);
      }
    }
  }
  raster2Model=null;
}
