{
  DefaultQuery firstQuery;
  DefaultQuery secondQuery;
  firstQuery=new DefaultQuery("typeName",Filter.EXCLUDE,100,new String[]{"att1","att2","att3"},"handle");
  secondQuery=new DefaultQuery("typeName",Filter.EXCLUDE,20,new String[]{"att1","att2","att4"},"handle2");
  secondQuery.setStartIndex(4);
  Query mixed=DataUtilities.mixQueries(firstQuery,secondQuery,"newhandle");
  assertEquals("newhandle",mixed.getHandle());
  assertEquals(20,mixed.getMaxFeatures());
  assertEquals(4,mixed.getPropertyNames().length);
  assertEquals(4,(int)mixed.getStartIndex());
  Filter filter1=null;
  Filter filter2=null;
  FilterFactory ffac=CommonFactoryFinder.getFilterFactory(null);
  String typeSpec="geom:Point,att1:String,att2:String,att3:String,att4:String";
  SimpleFeatureType testType=DataUtilities.createType("testType",typeSpec);
  filter1=ffac.equals(ffac.property("att1"),ffac.literal("val1"));
  filter2=ffac.equals(ffac.property("att2"),ffac.literal("val2"));
  firstQuery=new DefaultQuery("typeName",filter1,100,null,"handle");
  secondQuery=new DefaultQuery("typeName",filter2,20,new String[]{"att1","att2","att4"},"handle2");
  mixed=DataUtilities.mixQueries(firstQuery,secondQuery,"newhandle");
  assertEquals("newhandle",mixed.getHandle());
  assertEquals(20,mixed.getMaxFeatures());
  assertEquals(3,mixed.getPropertyNames().length);
  Filter mixedFilter=mixed.getFilter();
  assertNotNull(mixedFilter);
  assertTrue(mixedFilter instanceof BinaryLogicOperator);
  BinaryLogicOperator f=(BinaryLogicOperator)mixedFilter;
  assertTrue(f instanceof And);
  for (Iterator fit=f.getChildren().iterator(); fit.hasNext(); ) {
    Filter subFilter=(Filter)fit.next();
    assertTrue(filter1.equals(subFilter) || filter2.equals(subFilter));
  }
  firstQuery.setHints(new Hints(Hints.USE_PROVIDED_FID,Boolean.TRUE));
  secondQuery.setHints(new Hints(Hints.FEATURE_2D,Boolean.TRUE));
  mixed=DataUtilities.mixQueries(firstQuery,secondQuery,"newhandle");
  assertEquals(2,mixed.getHints().size());
  assertTrue((Boolean)mixed.getHints().get(Hints.USE_PROVIDED_FID));
  assertTrue((Boolean)mixed.getHints().get(Hints.FEATURE_2D));
}
