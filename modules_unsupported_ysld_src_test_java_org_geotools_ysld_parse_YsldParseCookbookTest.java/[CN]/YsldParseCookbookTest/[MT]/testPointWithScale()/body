{
  Style style=parse("point","zoom.sld");
  Rule rule=style.featureTypeStyles().get(0).rules().get(0);
  assertEquals("Large",rule.getName());
  assertEquals(160000000.0,rule.getMaxScaleDenominator(),0.1);
  PointSymbolizer point=(PointSymbolizer)rule.symbolizers().get(0);
  assertEquals("circle",SLD.wellKnownName(SLD.mark(point)));
  assertEquals(color("CC3300"),SLD.color(SLD.fill(point)));
  assertEquals(12,SLD.pointSize(point));
  rule=style.featureTypeStyles().get(0).rules().get(1);
  assertEquals("Medium",rule.getName());
  assertEquals(160000000.0,rule.getMinScaleDenominator(),0.1);
  assertEquals(320000000.0,rule.getMaxScaleDenominator(),0.1);
  point=(PointSymbolizer)rule.symbolizers().get(0);
  assertEquals("circle",SLD.wellKnownName(SLD.mark(point)));
  assertEquals(color("CC3300"),SLD.color(SLD.fill(point)));
  assertEquals(8,SLD.pointSize(point));
  rule=style.featureTypeStyles().get(0).rules().get(2);
  assertEquals("Small",rule.getName());
  assertEquals(320000000.0,rule.getMinScaleDenominator(),0.1);
  point=(PointSymbolizer)rule.symbolizers().get(0);
  assertEquals("circle",SLD.wellKnownName(SLD.mark(point)));
  assertEquals(color("CC3300"),SLD.color(SLD.fill(point)));
  assertEquals(4,SLD.pointSize(point));
}
