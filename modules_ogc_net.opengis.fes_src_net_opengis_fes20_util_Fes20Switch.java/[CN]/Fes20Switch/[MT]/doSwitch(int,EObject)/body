{
switch (classifierID) {
case Fes20Package.ABSTRACT_ADHOC_QUERY_EXPRESSION_TYPE:
{
      AbstractAdhocQueryExpressionType abstractAdhocQueryExpressionType=(AbstractAdhocQueryExpressionType)theEObject;
      T result=caseAbstractAdhocQueryExpressionType(abstractAdhocQueryExpressionType);
      if (result == null)       result=caseAbstractQueryExpressionType(abstractAdhocQueryExpressionType);
      if (result == null)       result=defaultCase(theEObject);
      return result;
    }
case Fes20Package.ABSTRACT_ID_TYPE:
{
    AbstractIdType abstractIdType=(AbstractIdType)theEObject;
    T result=caseAbstractIdType(abstractIdType);
    if (result == null)     result=defaultCase(theEObject);
    return result;
  }
case Fes20Package.ABSTRACT_PROJECTION_CLAUSE_TYPE:
{
  AbstractProjectionClauseType abstractProjectionClauseType=(AbstractProjectionClauseType)theEObject;
  T result=caseAbstractProjectionClauseType(abstractProjectionClauseType);
  if (result == null)   result=defaultCase(theEObject);
  return result;
}
case Fes20Package.ABSTRACT_QUERY_EXPRESSION_TYPE:
{
AbstractQueryExpressionType abstractQueryExpressionType=(AbstractQueryExpressionType)theEObject;
T result=caseAbstractQueryExpressionType(abstractQueryExpressionType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.ABSTRACT_SELECTION_CLAUSE_TYPE:
{
AbstractSelectionClauseType abstractSelectionClauseType=(AbstractSelectionClauseType)theEObject;
T result=caseAbstractSelectionClauseType(abstractSelectionClauseType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.ABSTRACT_SORTING_CLAUSE_TYPE:
{
AbstractSortingClauseType abstractSortingClauseType=(AbstractSortingClauseType)theEObject;
T result=caseAbstractSortingClauseType(abstractSortingClauseType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.ADDITIONAL_OPERATORS_TYPE:
{
AdditionalOperatorsType additionalOperatorsType=(AdditionalOperatorsType)theEObject;
T result=caseAdditionalOperatorsType(additionalOperatorsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.ARGUMENTS_TYPE:
{
ArgumentsType argumentsType=(ArgumentsType)theEObject;
T result=caseArgumentsType(argumentsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.ARGUMENT_TYPE:
{
ArgumentType argumentType=(ArgumentType)theEObject;
T result=caseArgumentType(argumentType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.AVAILABLE_FUNCTIONS_TYPE:
{
AvailableFunctionsType availableFunctionsType=(AvailableFunctionsType)theEObject;
T result=caseAvailableFunctionsType(availableFunctionsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.AVAILABLE_FUNCTION_TYPE:
{
AvailableFunctionType availableFunctionType=(AvailableFunctionType)theEObject;
T result=caseAvailableFunctionType(availableFunctionType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.BBOX_TYPE:
{
BBOXType bboxType=(BBOXType)theEObject;
T result=caseBBOXType(bboxType);
if (result == null) result=caseSpatialOpsType(bboxType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.BINARY_COMPARISON_OP_TYPE:
{
BinaryComparisonOpType binaryComparisonOpType=(BinaryComparisonOpType)theEObject;
T result=caseBinaryComparisonOpType(binaryComparisonOpType);
if (result == null) result=caseComparisonOpsType(binaryComparisonOpType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.BINARY_LOGIC_OP_TYPE:
{
BinaryLogicOpType binaryLogicOpType=(BinaryLogicOpType)theEObject;
T result=caseBinaryLogicOpType(binaryLogicOpType);
if (result == null) result=caseLogicOpsType(binaryLogicOpType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.BINARY_SPATIAL_OP_TYPE:
{
BinarySpatialOpType binarySpatialOpType=(BinarySpatialOpType)theEObject;
T result=caseBinarySpatialOpType(binarySpatialOpType);
if (result == null) result=caseSpatialOpsType(binarySpatialOpType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.BINARY_TEMPORAL_OP_TYPE:
{
BinaryTemporalOpType binaryTemporalOpType=(BinaryTemporalOpType)theEObject;
T result=caseBinaryTemporalOpType(binaryTemporalOpType);
if (result == null) result=caseTemporalOpsType(binaryTemporalOpType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.COMPARISON_OPERATORS_TYPE:
{
ComparisonOperatorsType comparisonOperatorsType=(ComparisonOperatorsType)theEObject;
T result=caseComparisonOperatorsType(comparisonOperatorsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.COMPARISON_OPERATOR_TYPE:
{
ComparisonOperatorType comparisonOperatorType=(ComparisonOperatorType)theEObject;
T result=caseComparisonOperatorType(comparisonOperatorType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.COMPARISON_OPS_TYPE:
{
ComparisonOpsType comparisonOpsType=(ComparisonOpsType)theEObject;
T result=caseComparisonOpsType(comparisonOpsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.CONFORMANCE_TYPE:
{
ConformanceType conformanceType=(ConformanceType)theEObject;
T result=caseConformanceType(conformanceType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.DISTANCE_BUFFER_TYPE:
{
DistanceBufferType distanceBufferType=(DistanceBufferType)theEObject;
T result=caseDistanceBufferType(distanceBufferType);
if (result == null) result=caseSpatialOpsType(distanceBufferType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.DOCUMENT_ROOT:
{
DocumentRoot documentRoot=(DocumentRoot)theEObject;
T result=caseDocumentRoot(documentRoot);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.EXTENDED_CAPABILITIES_TYPE:
{
ExtendedCapabilitiesType extendedCapabilitiesType=(ExtendedCapabilitiesType)theEObject;
T result=caseExtendedCapabilitiesType(extendedCapabilitiesType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.EXTENSION_OPERATOR_TYPE:
{
ExtensionOperatorType extensionOperatorType=(ExtensionOperatorType)theEObject;
T result=caseExtensionOperatorType(extensionOperatorType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.EXTENSION_OPS_TYPE:
{
ExtensionOpsType extensionOpsType=(ExtensionOpsType)theEObject;
T result=caseExtensionOpsType(extensionOpsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.FILTER_CAPABILITIES_TYPE:
{
FilterCapabilitiesType filterCapabilitiesType=(FilterCapabilitiesType)theEObject;
T result=caseFilterCapabilitiesType(filterCapabilitiesType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.FILTER_TYPE:
{
FilterType filterType=(FilterType)theEObject;
T result=caseFilterType(filterType);
if (result == null) result=caseAbstractSelectionClauseType(filterType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.FUNCTION_TYPE:
{
FunctionType functionType=(FunctionType)theEObject;
T result=caseFunctionType(functionType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.GEOMETRY_OPERANDS_TYPE:
{
GeometryOperandsType geometryOperandsType=(GeometryOperandsType)theEObject;
T result=caseGeometryOperandsType(geometryOperandsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.GEOMETRY_OPERAND_TYPE:
{
GeometryOperandType geometryOperandType=(GeometryOperandType)theEObject;
T result=caseGeometryOperandType(geometryOperandType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.ID_CAPABILITIES_TYPE:
{
IdCapabilitiesType idCapabilitiesType=(IdCapabilitiesType)theEObject;
T result=caseIdCapabilitiesType(idCapabilitiesType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.LITERAL_TYPE:
{
LiteralType literalType=(LiteralType)theEObject;
T result=caseLiteralType(literalType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.LOGICAL_OPERATORS_TYPE:
{
LogicalOperatorsType logicalOperatorsType=(LogicalOperatorsType)theEObject;
T result=caseLogicalOperatorsType(logicalOperatorsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.LOGIC_OPS_TYPE:
{
LogicOpsType logicOpsType=(LogicOpsType)theEObject;
T result=caseLogicOpsType(logicOpsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.LOWER_BOUNDARY_TYPE:
{
LowerBoundaryType lowerBoundaryType=(LowerBoundaryType)theEObject;
T result=caseLowerBoundaryType(lowerBoundaryType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.MEASURE_TYPE:
{
MeasureType measureType=(MeasureType)theEObject;
T result=caseMeasureType(measureType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.PROPERTY_IS_BETWEEN_TYPE:
{
PropertyIsBetweenType propertyIsBetweenType=(PropertyIsBetweenType)theEObject;
T result=casePropertyIsBetweenType(propertyIsBetweenType);
if (result == null) result=caseComparisonOpsType(propertyIsBetweenType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.PROPERTY_IS_LIKE_TYPE:
{
PropertyIsLikeType propertyIsLikeType=(PropertyIsLikeType)theEObject;
T result=casePropertyIsLikeType(propertyIsLikeType);
if (result == null) result=caseComparisonOpsType(propertyIsLikeType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.PROPERTY_IS_NIL_TYPE:
{
PropertyIsNilType propertyIsNilType=(PropertyIsNilType)theEObject;
T result=casePropertyIsNilType(propertyIsNilType);
if (result == null) result=caseComparisonOpsType(propertyIsNilType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.PROPERTY_IS_NULL_TYPE:
{
PropertyIsNullType propertyIsNullType=(PropertyIsNullType)theEObject;
T result=casePropertyIsNullType(propertyIsNullType);
if (result == null) result=caseComparisonOpsType(propertyIsNullType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.RESOURCE_IDENTIFIER_TYPE:
{
ResourceIdentifierType resourceIdentifierType=(ResourceIdentifierType)theEObject;
T result=caseResourceIdentifierType(resourceIdentifierType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.RESOURCE_ID_TYPE:
{
ResourceIdType resourceIdType=(ResourceIdType)theEObject;
T result=caseResourceIdType(resourceIdType);
if (result == null) result=caseAbstractIdType(resourceIdType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.SCALAR_CAPABILITIES_TYPE:
{
ScalarCapabilitiesType scalarCapabilitiesType=(ScalarCapabilitiesType)theEObject;
T result=caseScalarCapabilitiesType(scalarCapabilitiesType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.SORT_BY_TYPE:
{
SortByType sortByType=(SortByType)theEObject;
T result=caseSortByType(sortByType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.SORT_PROPERTY_TYPE:
{
SortPropertyType sortPropertyType=(SortPropertyType)theEObject;
T result=caseSortPropertyType(sortPropertyType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.SPATIAL_CAPABILITIES_TYPE:
{
SpatialCapabilitiesType spatialCapabilitiesType=(SpatialCapabilitiesType)theEObject;
T result=caseSpatialCapabilitiesType(spatialCapabilitiesType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.SPATIAL_OPERATORS_TYPE:
{
SpatialOperatorsType spatialOperatorsType=(SpatialOperatorsType)theEObject;
T result=caseSpatialOperatorsType(spatialOperatorsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.SPATIAL_OPERATOR_TYPE:
{
SpatialOperatorType spatialOperatorType=(SpatialOperatorType)theEObject;
T result=caseSpatialOperatorType(spatialOperatorType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.SPATIAL_OPS_TYPE:
{
SpatialOpsType spatialOpsType=(SpatialOpsType)theEObject;
T result=caseSpatialOpsType(spatialOpsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.TEMPORAL_CAPABILITIES_TYPE:
{
TemporalCapabilitiesType temporalCapabilitiesType=(TemporalCapabilitiesType)theEObject;
T result=caseTemporalCapabilitiesType(temporalCapabilitiesType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.TEMPORAL_OPERANDS_TYPE:
{
TemporalOperandsType temporalOperandsType=(TemporalOperandsType)theEObject;
T result=caseTemporalOperandsType(temporalOperandsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.TEMPORAL_OPERAND_TYPE:
{
TemporalOperandType temporalOperandType=(TemporalOperandType)theEObject;
T result=caseTemporalOperandType(temporalOperandType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.TEMPORAL_OPERATORS_TYPE:
{
TemporalOperatorsType temporalOperatorsType=(TemporalOperatorsType)theEObject;
T result=caseTemporalOperatorsType(temporalOperatorsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.TEMPORAL_OPERATOR_TYPE:
{
TemporalOperatorType temporalOperatorType=(TemporalOperatorType)theEObject;
T result=caseTemporalOperatorType(temporalOperatorType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.TEMPORAL_OPS_TYPE:
{
TemporalOpsType temporalOpsType=(TemporalOpsType)theEObject;
T result=caseTemporalOpsType(temporalOpsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.UNARY_LOGIC_OP_TYPE:
{
UnaryLogicOpType unaryLogicOpType=(UnaryLogicOpType)theEObject;
T result=caseUnaryLogicOpType(unaryLogicOpType);
if (result == null) result=caseLogicOpsType(unaryLogicOpType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case Fes20Package.UPPER_BOUNDARY_TYPE:
{
UpperBoundaryType upperBoundaryType=(UpperBoundaryType)theEObject;
T result=caseUpperBoundaryType(upperBoundaryType);
if (result == null) result=defaultCase(theEObject);
return result;
}
default :
return defaultCase(theEObject);
}
}
