{
  GeneralMatrix xNew=new GeneralMatrix(6,1);
  GeneralMatrix xOld=new GeneralMatrix(6,1);
  GeneralMatrix dxMatrix=new GeneralMatrix(6,1);
  GeneralMatrix zero=new GeneralMatrix(6,1);
  zero.setZero();
  GeneralMatrix xk=new GeneralMatrix(6 + valueConstrain.size(),1);
  int i=0;
  do {
    xOld.set(new double[]{sx,sy,phix,phiy,tx,ty});
    GeneralMatrix A=getA();
    GeneralMatrix l=getL();
    GeneralMatrix AT=A.clone();
    AT.transpose();
    GeneralMatrix ATA=new GeneralMatrix(6,6);
    GeneralMatrix ATl=new GeneralMatrix(6,1);
    ATA.mul(AT,A);
    ATl.mul(AT,l);
    GeneralMatrix AB=createAB(ATA,getB());
    AB.invert();
    AB.negate();
    GeneralMatrix AU=createAU(ATl,getU());
    xk.mul(AB,AU);
    xk.copySubMatrix(0,0,6,xk.getNumCol(),0,0,dxMatrix);
    dxMatrix.negate();
    xOld.negate();
    xNew.sub(dxMatrix,xOld);
    sx=xNew.getElement(0,0);
    sy=xNew.getElement(1,0);
    phix=xNew.getElement(2,0);
    phiy=xNew.getElement(3,0);
    tx=xNew.getElement(4,0);
    ty=xNew.getElement(5,0);
    i++;
    if (i > maxSteps) {
      throw new FactoryException("Calculation of transformation is divergating - try to set proper aproximate values");
    }
  }
 while ((!dxMatrix.equals(zero,tolerance)));
  xNew.transpose();
  return xNew;
}
