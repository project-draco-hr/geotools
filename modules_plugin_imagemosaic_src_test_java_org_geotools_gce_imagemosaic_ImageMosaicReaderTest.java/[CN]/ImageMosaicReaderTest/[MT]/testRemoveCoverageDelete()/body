{
  final String referenceDir="testRemove2";
  final File workDir=new File(TestData.file(this,"."),referenceDir);
  if (!workDir.mkdir()) {
    FileUtils.deleteDirectory(workDir);
    assertTrue("Unable to create workdir:" + workDir,workDir.mkdir());
  }
  final File zipFile=new File(workDir,"watertemp.zip");
  FileUtils.copyFile(TestData.file(this,"watertemp.zip"),zipFile);
  FileUtils.deleteQuietly(zipFile);
  TestData.unzipFile(this,referenceDir + "/watertemp.zip");
  final URL timeElevURL=TestData.url(this,referenceDir);
  FileWriter out=null;
  try {
    out=new FileWriter(new File(TestData.file(this,"."),referenceDir + "/datastore.properties"));
    out.write("SPI=org.geotools.data.h2.H2DataStoreFactory\n");
    out.write("database=imagemosaicremove2\n");
    out.write("dbtype=h2\n");
    out.write("Loose\\ bbox=true #important for performances\n");
    out.write("Estimated\\ extends=false #important for performances\n");
    out.write("user=gs\n");
    out.write("passwd=gs\n");
    out.write("validate \\connections=true #important for avoiding errors\n");
    out.write("Connection\\ timeout=3600\n");
    out.write("max \\connections=10 #important for performances, internal pooling\n");
    out.write("min \\connections=5  #important for performances, internal pooling\n");
    out.flush();
  }
  finally {
    if (out != null) {
      IOUtils.closeQuietly(out);
    }
  }
  final AbstractGridFormat format=TestUtils.getFormat(timeElevURL);
  assertNotNull(format);
  ImageMosaicReader reader=TestUtils.getReader(timeElevURL,format);
  assertNotNull(reader);
  try {
    assertEquals(1,reader.getGridCoverageNames().length);
    reader.removeCoverage(reader.getGridCoverageNames()[0],true);
    File[] files=workDir.listFiles();
    assertNotNull(files);
    assertEquals(0,reader.getGridCoverageNames().length);
    assertEquals(files.length,10);
  }
  finally {
    reader.dispose();
  }
}
