{
  final URL sourceURL=TestData.file(this,"merge").toURI().toURL();
  final AbstractGridFormat format=TestUtils.getFormat(sourceURL);
  ImageMosaicReader reader=TestUtils.getReader(sourceURL,format);
  final String[] metadataNames=reader.getMetadataNames();
  assertNotNull(metadataNames);
  assertEquals(12,metadataNames.length);
  assertEquals("false",reader.getMetadataValue("HAS_POLARIZ_DOMAIN"));
  assertEquals("true",reader.getMetadataValue("HAS_POLARIZATION_DOMAIN"));
  assertEquals("POLARIZATION",reader.getDynamicParameters().iterator().next().getName().getCode());
  assertEquals("HH,HV,VH,VV",reader.getMetadataValue("POLARIZATION_DOMAIN"));
  assertEquals("true",reader.getMetadataValue("HAS_TIME_DOMAIN"));
  assertEquals("false",reader.getMetadataValue("HAS_ELEVATION_DOMAIN"));
  assertEquals("2012-01-01T00:00:00.000Z",reader.getMetadataValue("TIME_DOMAIN"));
  assertEquals("2012-01-01T00:00:00.000Z",reader.getMetadataValue("TIME_DOMAIN_MINIMUM"));
  assertEquals("2012-01-01T00:00:00.000Z",reader.getMetadataValue("TIME_DOMAIN_MAXIMUM"));
  final ParameterValue<Boolean> useJai=AbstractGridFormat.USE_JAI_IMAGEREAD.createValue();
  useJai.setValue(false);
  final ParameterValue<String> tileSize=AbstractGridFormat.SUGGESTED_TILE_SIZE.createValue();
  tileSize.setValue("128,128");
  final ParameterValue<List> time=ImageMosaicFormat.TIME.createValue();
  final SimpleDateFormat formatD=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
  formatD.setTimeZone(TimeZone.getTimeZone("GMT"));
  final Date timeD=formatD.parse("2012-01-01T00:00:00.000Z");
  time.setValue(new ArrayList(){
{
      add(timeD);
    }
  }
);
  Set<ParameterDescriptor<List>> params=reader.getDynamicParameters();
  ParameterValue<List<String>> polariz=null;
  for (  ParameterDescriptor param : params) {
    if (param.getName().getCode().equalsIgnoreCase("POLARIZATION")) {
      polariz=param.createValue();
      polariz.setValue(new ArrayList<String>(){
{
          add("HH");
          add("HV");
          add("VV");
        }
      }
);
    }
  }
  final ParameterValue<String> paramStacked=ImageMosaicFormat.MERGE_BEHAVIOR.createValue();
  paramStacked.setValue(MergeBehavior.STACK.toString());
  GeneralParameterValue[] values=new GeneralParameterValue[]{useJai,tileSize,time,polariz,paramStacked};
  final GridCoverage2D coverage=TestUtils.getCoverage(reader,values,false);
  assertNotNull(coverage);
  final RenderedImage image=coverage.getRenderedImage();
  assertEquals("wrong number of bands detected",3,image.getSampleModel().getNumBands());
  assertEquals(DataBuffer.TYPE_SHORT,image.getSampleModel().getDataType());
}
