{
  final File overviewDir=TestData.file(this,"ext-overview");
  final URL overviewURL=DataUtilities.fileToURL(overviewDir);
  final AbstractGridFormat format=TestUtils.getFormat(overviewURL);
  ImageMosaicReader reader=TestUtils.getReader(overviewURL,format);
  ResourceInfo info=reader.getInfo(reader.getGridCoverageNames()[0]);
  assertTrue(info instanceof FileResourceInfo);
  FileResourceInfo fileInfo=(FileResourceInfo)info;
  CloseableIterator<FileGroup> files=fileInfo.getFiles(null);
  List<FileGroup> fileGroups=new ArrayList<FileGroup>();
  Set<File> mainFiles=new HashSet<File>();
  Set<File> supportFiles=new HashSet<File>();
  while (files.hasNext()) {
    FileGroup group=files.next();
    fileGroups.add(group);
    mainFiles.add(group.getMainFile());
    supportFiles.addAll(group.getSupportFiles());
  }
  assertEquals(2,fileGroups.size());
  assertEquals(2,mainFiles.size());
  assertEquals(IS_MAC ? 4 : 2,supportFiles.size());
  File dir=DataUtilities.urlToFile(overviewURL);
  String[] mainFilesPaths=dir.list(FileFilterUtils.suffixFileFilter(".tif"));
  String[] supportFilesPaths=dir.list(FileFilterUtils.and(FileFilterUtils.or(FileFilterUtils.suffixFileFilter(".ovr")),FileFilterUtils.notFileFilter(FileFilterUtils.prefixFileFilter("index"))));
  for (  String filePath : mainFilesPaths) {
    final File myFile=new File(dir,filePath);
    assertTrue(mainFiles.contains(myFile));
  }
  for (  String filePath : supportFilesPaths) {
    final File myFile=new File(dir,filePath);
    assertTrue(supportFiles.contains(myFile));
  }
}
