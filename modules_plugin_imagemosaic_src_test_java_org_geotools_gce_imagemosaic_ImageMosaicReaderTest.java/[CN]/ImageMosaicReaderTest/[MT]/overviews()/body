{
  final AbstractGridFormat format=TestUtils.getFormat(overviewURL);
  ParameterValueGroup readParams=format.getReadParameters();
  final DefaultParameterDescriptorGroup descriptor=(DefaultParameterDescriptorGroup)readParams.getDescriptor();
  List<GeneralParameterDescriptor> descriptors=descriptor.descriptors();
  boolean hasOverviewPolicyParam=false;
  for (  GeneralParameterDescriptor desc : descriptors) {
    if (AbstractGridFormat.OVERVIEW_POLICY.getName().toString().equalsIgnoreCase(desc.getName().toString())) {
      hasOverviewPolicyParam=true;
      break;
    }
  }
  assertTrue(hasOverviewPolicyParam);
  final ImageMosaicReader reader=TestUtils.getReader(overviewURL,format);
  final ParameterValue<GridGeometry2D> gg=AbstractGridFormat.READ_GRIDGEOMETRY2D.createValue();
  final GeneralEnvelope envelope=reader.getOriginalEnvelope();
  final Dimension dim=new Dimension();
  dim.setSize(reader.getOriginalGridRange().getSpan(0) / 2.0,reader.getOriginalGridRange().getSpan(1) / 2.0);
  final Rectangle rasterArea=((GridEnvelope2D)reader.getOriginalGridRange());
  rasterArea.setSize(dim);
  final GridEnvelope2D range=new GridEnvelope2D(rasterArea);
  gg.setValue(new GridGeometry2D(range,envelope));
  final ParameterValue<Boolean> useJai=AbstractGridFormat.USE_JAI_IMAGEREAD.createValue();
  useJai.setValue(false);
  final ParameterValue<String> tileSize=AbstractGridFormat.SUGGESTED_TILE_SIZE.createValue();
  tileSize.setValue("128,128");
  TestUtils.checkCoverage(reader,new GeneralParameterValue[]{gg,useJai,tileSize},"overviews test");
}
