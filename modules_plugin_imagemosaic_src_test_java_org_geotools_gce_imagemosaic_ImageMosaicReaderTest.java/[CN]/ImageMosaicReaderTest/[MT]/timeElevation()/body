{
  final File workDir=new File(TestData.file(this,"."),"watertemp2");
  if (!workDir.mkdir()) {
    FileUtils.deleteDirectory(workDir);
    assertTrue("Unable to create workdir:" + workDir,workDir.mkdir());
  }
  FileUtils.copyFile(TestData.file(this,"watertemp.zip"),new File(workDir,"watertemp.zip"));
  TestData.unzipFile(this,"watertemp2/watertemp.zip");
  final URL timeElevURL=TestData.url(this,"watertemp2");
  final AbstractGridFormat format=TestUtils.getFormat(timeElevURL);
  assertNotNull(format);
  ImageMosaicReader reader=TestUtils.getReader(timeElevURL,format);
  assertNotNull(format);
  final String[] metadataNames=reader.getMetadataNames();
  assertNotNull(metadataNames);
  assertEquals(metadataNames.length,10);
  assertEquals("true",reader.getMetadataValue("HAS_TIME_DOMAIN"));
  final String timeMetadata=reader.getMetadataValue("TIME_DOMAIN");
  assertNotNull(timeMetadata);
  assertEquals(2,timeMetadata.split(",").length);
  assertEquals(timeMetadata.split(",")[0],reader.getMetadataValue("TIME_DOMAIN_MINIMUM"));
  assertEquals(timeMetadata.split(",")[1],reader.getMetadataValue("TIME_DOMAIN_MAXIMUM"));
  assertEquals("true",reader.getMetadataValue("HAS_ELEVATION_DOMAIN"));
  final String elevationMetadata=reader.getMetadataValue("ELEVATION_DOMAIN");
  assertNotNull(elevationMetadata);
  assertEquals("0,100",elevationMetadata);
  assertEquals(2,elevationMetadata.split(",").length);
  assertEquals(elevationMetadata.split(",")[0],reader.getMetadataValue("ELEVATION_DOMAIN_MINIMUM"));
  assertEquals(elevationMetadata.split(",")[1],reader.getMetadataValue("ELEVATION_DOMAIN_MAXIMUM"));
  final ParameterValue<GridGeometry2D> gg=AbstractGridFormat.READ_GRIDGEOMETRY2D.createValue();
  final GeneralEnvelope envelope=reader.getOriginalEnvelope();
  final Dimension dim=new Dimension();
  dim.setSize(reader.getOriginalGridRange().getSpan(0) / 2.0,reader.getOriginalGridRange().getSpan(1) / 2.0);
  final Rectangle rasterArea=((GridEnvelope2D)reader.getOriginalGridRange());
  rasterArea.setSize(dim);
  final GridEnvelope2D range=new GridEnvelope2D(rasterArea);
  gg.setValue(new GridGeometry2D(range,envelope));
  final ParameterValue<List> time=ImageMosaicFormat.TIME.createValue();
  final List<Date> timeValues=new ArrayList<Date>();
  final SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.sss'Z'");
  sdf.setTimeZone(TimeZone.getTimeZone("GMT+0"));
  Date date=sdf.parse("2008-11-01T00:00:00.000Z");
  timeValues.add(date);
  time.setValue(timeValues);
  final ParameterValue<Boolean> direct=ImageMosaicFormat.USE_JAI_IMAGEREAD.createValue();
  direct.setValue(false);
  final ParameterValue<double[]> bkg=ImageMosaicFormat.BACKGROUND_VALUES.createValue();
  bkg.setValue(new double[]{-9999.0});
  final ParameterValue<List> elevation=ImageMosaicFormat.ELEVATION.createValue();
  elevation.setValue(Arrays.asList(0.0));
  TestUtils.checkCoverage(reader,new GeneralParameterValue[]{gg,time,bkg,elevation,direct},"Time-Elevation Test");
  reader=TestUtils.getReader(timeElevURL,format);
  elevation.setValue(Arrays.asList(NumberRange.create(0.0,10.0)));
  TestUtils.checkCoverage(reader,new GeneralParameterValue[]{gg,time,bkg,elevation,direct},"Time-Elevation Test");
  if (!INTERACTIVE) {
    FileUtils.deleteDirectory(TestData.file(this,"watertemp2"));
  }
}
