{
  File source=DataUtilities.urlToFile(timeURL);
  File data=new File("./target/externaldata");
  File mosaic=new File("./target/mosaicexternal");
  if (data.exists()) {
    FileUtils.deleteDirectory(data);
  }
  FileUtils.copyDirectory(source,data);
  if (mosaic.exists()) {
    FileUtils.deleteDirectory(mosaic);
  }
  mosaic.mkdirs();
  for (  File file : FileUtils.listFiles(data,new RegexFileFilter("time_geotiff.*"),null)) {
    assertTrue(file.delete());
  }
  for (  File file : FileUtils.listFiles(data,new RegexFileFilter(".*\\.properties"),null)) {
    File moved=new File(mosaic,file.getName());
    assertTrue(file.renameTo(moved));
  }
  InputStream stream=null;
  OutputStream outStream=null;
  try {
    final File indexer=new File(mosaic,"indexer.properties");
    stream=new FileInputStream(indexer);
    Properties prop=new Properties();
    prop.load(stream);
    outStream=new FileOutputStream(indexer);
    prop.setProperty(Prop.INDEXING_DIRECTORIES,data.getCanonicalPath());
    prop.store(outStream,null);
  }
  finally {
    if (stream != null) {
      stream.close();
    }
    if (outStream != null) {
      outStream.close();
    }
  }
  URL mosaicURL=DataUtilities.fileToURL(mosaic);
  final AbstractGridFormat format=TestUtils.getFormat(mosaicURL);
  ImageMosaicReader reader=TestUtils.getReader(mosaicURL,format);
  try {
    String[] metadataNames=reader.getMetadataNames();
    assertNotNull(metadataNames);
    assertEquals(metadataNames.length,12);
    assertEquals("true",reader.getMetadataValue("HAS_TIME_DOMAIN"));
    assertEquals("2004-02-01T00:00:00.000Z",reader.getMetadataValue("TIME_DOMAIN_MINIMUM"));
    assertEquals("2004-05-01T00:00:00.000Z",reader.getMetadataValue("TIME_DOMAIN_MAXIMUM"));
    assertEquals("2004-02-01T00:00:00.000Z,2004-03-01T00:00:00.000Z,2004-04-01T00:00:00.000Z,2004-05-01T00:00:00.000Z",reader.getMetadataValue(metadataNames[0]));
    assertEquals("java.sql.Timestamp",reader.getMetadataValue("TIME_DOMAIN_DATATYPE"));
  }
  finally {
    reader.dispose();
  }
}
