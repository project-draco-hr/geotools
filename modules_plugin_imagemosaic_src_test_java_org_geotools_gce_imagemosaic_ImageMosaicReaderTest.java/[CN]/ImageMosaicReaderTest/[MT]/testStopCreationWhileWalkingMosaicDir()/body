{
  final File workDir=new File(TestData.file(this,"."),"stop-it");
  if (!workDir.mkdir()) {
    FileUtils.deleteDirectory(workDir);
    assertTrue("Unable to create workdir:" + workDir,workDir.mkdir());
  }
  FileUtils.copyFile(TestData.file(this,"watertemp.zip"),new File(workDir,"watertemp.zip"));
  TestData.unzipFile(this,"stop-it/watertemp.zip");
  final URL timeElevURL=TestData.url(this,"stop-it");
  FileWriter out=null;
  try {
    out=new FileWriter(new File(TestData.file(this,"."),"/stop-it/datastore.properties"));
    out.write("SPI=org.geotools.data.h2.H2DataStoreFactory\n");
    out.write("database=imagemosaic\n");
    out.write("dbtype=h2\n");
    out.write("Loose\\ bbox=true #important for performances\n");
    out.write("Estimated\\ extends=false #important for performances\n");
    out.write("user=geosolutions\n");
    out.write("passwd=geosolutions\n");
    out.write("validate \\connections=true #important for avoiding errors\n");
    out.write("Connection\\ timeout=3600\n");
    out.write("max \\connections=10 #important for performances, internal pooling\n");
    out.write("min \\connections=5  #important for performances, internal pooling\n");
    out.flush();
  }
  finally {
    if (out != null) {
      IOUtils.closeQuietly(out);
    }
  }
  final AbstractGridFormat format=TestUtils.getFormat(timeElevURL);
  assertNotNull(format);
  ImageMosaicReader reader=TestUtils.getReader(timeElevURL,format);
  assertNotNull(reader);
  final String[] metadataNames=reader.getMetadataNames();
  assertNotNull(metadataNames);
  assertEquals(metadataNames.length,12);
  assertEquals("true",reader.getMetadataValue("HAS_TIME_DOMAIN"));
  final String timeMetadata=reader.getMetadataValue("TIME_DOMAIN");
  assertNotNull(timeMetadata);
  assertEquals(2,timeMetadata.split(",").length);
  assertEquals(timeMetadata.split(",")[0],reader.getMetadataValue("TIME_DOMAIN_MINIMUM"));
  assertEquals(timeMetadata.split(",")[1],reader.getMetadataValue("TIME_DOMAIN_MAXIMUM"));
  assertEquals("java.sql.Timestamp",reader.getMetadataValue("TIME_DOMAIN_DATATYPE"));
  reader.dispose();
  File mosaicFile=new File(TestData.file(this,"."),"/stop-it/stop-it.properties");
  mosaicFile.delete();
  File sampleImageFile=new File(TestData.file(this,"."),"/stop-it/sample_image");
  sampleImageFile.delete();
  reader=(ImageMosaicReader)format.getReader(timeElevURL);
  assertNull(reader);
}
