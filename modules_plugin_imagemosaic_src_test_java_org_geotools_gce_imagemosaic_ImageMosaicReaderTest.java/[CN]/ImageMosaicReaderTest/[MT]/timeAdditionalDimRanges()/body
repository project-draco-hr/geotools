{
  final AbstractGridFormat format=TestUtils.getFormat(timeAdditionalDomainsRangeURL);
  ImageMosaicReader reader=TestUtils.getReader(timeAdditionalDomainsRangeURL,format);
  final String[] metadataNames=reader.getMetadataNames();
  assertNotNull(metadataNames);
  assertEquals(metadataNames.length,14);
  assertEquals("true",reader.getMetadataValue("HAS_TIME_DOMAIN"));
  System.out.println(reader.getMetadataValue("TIME_DOMAIN"));
  assertEquals("2008-10-31T00:00:00.000Z",reader.getMetadataValue("TIME_DOMAIN_MINIMUM"));
  assertEquals("2008-11-04T00:00:00.000Z",reader.getMetadataValue("TIME_DOMAIN_MAXIMUM"));
  assertEquals("true",reader.getMetadataValue("HAS_DATE_DOMAIN"));
  assertEquals("20081031T000000,20081101T000000",reader.getMetadataValue("DATE_DOMAIN"));
  assertEquals("true",reader.getMetadataValue("HAS_DEPTH_DOMAIN"));
  assertEquals("20/20,100/100",reader.getMetadataValue("DEPTH_DOMAIN"));
  assertEquals("20",reader.getMetadataValue("DEPTH_DOMAIN_MINIMUM"));
  assertEquals("100",reader.getMetadataValue("DEPTH_DOMAIN_MAXIMUM"));
  final ParameterValue<Boolean> useJai=AbstractGridFormat.USE_JAI_IMAGEREAD.createValue();
  useJai.setValue(false);
  final ParameterValue<List> time=ImageMosaicFormat.TIME.createValue();
  final SimpleDateFormat formatD=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
  formatD.setTimeZone(TimeZone.getTimeZone("GMT"));
  final Date timeD=formatD.parse("2008-10-31T00:00:00.000Z");
  time.setValue(new ArrayList(){
{
      add(timeD);
    }
  }
);
  Set<ParameterDescriptor<List>> params=reader.getDynamicParameters();
  ParameterValue<List<String>> dateValue=null;
  ParameterValue<List<String>> depthValue=null;
  final String selectedWaveLength="20";
  final String selectedDate="20081031T000000";
  for (  ParameterDescriptor param : params) {
    if (param.getName().getCode().equalsIgnoreCase("DATE")) {
      dateValue=param.createValue();
      dateValue.setValue(new ArrayList<String>(){
{
          add(selectedDate);
        }
      }
);
    }
 else     if (param.getName().getCode().equalsIgnoreCase("DEPTH")) {
      depthValue=param.createValue();
      depthValue.setValue(new ArrayList<String>(){
{
          add(selectedWaveLength);
        }
      }
);
    }
  }
  assertNotNull(depthValue);
  assertNotNull(dateValue);
  GeneralParameterValue[] values=new GeneralParameterValue[]{useJai,dateValue,time,depthValue};
  final GridCoverage2D coverage=TestUtils.getCoverage(reader,values,true);
  final String fileSource=(String)coverage.getProperty(AbstractGridCoverage2DReader.FILE_SOURCE_PROPERTY);
  final String baseName=FilenameUtils.getBaseName(fileSource);
  assertEquals(baseName,"NCOM_wattemp_0" + selectedWaveLength + "_099_"+ selectedDate+ "_20081103T000000_12");
  assertEquals(baseName,"NCOM_wattemp_020_099_20081031T000000_20081103T000000_12");
  TestUtils.testCoverage(reader,values,"domain test",coverage,null);
}
