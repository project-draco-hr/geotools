{
  final File workDir=new File(TestData.file(this,"."),"watertemp1");
  if (!workDir.mkdir()) {
    FileUtils.deleteDirectory(workDir);
    assertTrue("Unable to create workdir:" + workDir,workDir.mkdir());
  }
  FileUtils.copyFile(TestData.file(this,"watertemp.zip"),new File(workDir,"watertemp.zip"));
  TestData.unzipFile(this,"watertemp1/watertemp.zip");
  final URL timeElevURL=TestData.url(this,"watertemp1");
  FileWriter out=null;
  try {
    out=new FileWriter(new File(TestData.file(this,"."),"/watertemp1/indexer.properties"));
    out.write("TimeAttribute=ingestion\n");
    out.write("ElevationAttribute=elevation\n");
    out.write("Schema=*the_geom:Polygon,location:String,ingestion:java.util.Date,elevation:Double\n");
    out.write("PropertyCollectors=TimestampFileNameExtractorSPI[timeregex](ingestion),DoubleFileNameExtractorSPI[elevationregex](elevation)\n");
    out.flush();
  }
  finally {
    if (out != null) {
      IOUtils.closeQuietly(out);
    }
  }
  final AbstractGridFormat format=TestUtils.getFormat(timeElevURL);
  assertNotNull(format);
  ImageMosaicReader reader=TestUtils.getReader(timeElevURL,format);
  assertNotNull(format);
  final String[] metadataNames=reader.getMetadataNames();
  assertNotNull(metadataNames);
  assertEquals(metadataNames.length,12);
  assertEquals("true",reader.getMetadataValue("HAS_TIME_DOMAIN"));
  final String timeMetadata=reader.getMetadataValue("TIME_DOMAIN");
  assertNotNull(timeMetadata);
  assertEquals(2,timeMetadata.split(",").length);
  assertEquals(timeMetadata.split(",")[0],reader.getMetadataValue("TIME_DOMAIN_MINIMUM"));
  assertEquals(timeMetadata.split(",")[1],reader.getMetadataValue("TIME_DOMAIN_MAXIMUM"));
  assertEquals("java.sql.Timestamp",reader.getMetadataValue("TIME_DOMAIN_DATATYPE"));
  assertEquals("true",reader.getMetadataValue("HAS_ELEVATION_DOMAIN"));
  final String elevationMetadata=reader.getMetadataValue("ELEVATION_DOMAIN");
  assertNotNull(elevationMetadata);
  assertEquals(2,elevationMetadata.split(",").length);
  assertEquals("0.0",reader.getMetadataValue("ELEVATION_DOMAIN_MINIMUM"));
  assertEquals("100.0",reader.getMetadataValue("ELEVATION_DOMAIN_MAXIMUM"));
  assertEquals("java.lang.Double",reader.getMetadataValue("ELEVATION_DOMAIN_DATATYPE"));
  reader.dispose();
  if (!INTERACTIVE) {
    FileUtils.deleteDirectory(TestData.file(this,"watertemp1"));
  }
}
