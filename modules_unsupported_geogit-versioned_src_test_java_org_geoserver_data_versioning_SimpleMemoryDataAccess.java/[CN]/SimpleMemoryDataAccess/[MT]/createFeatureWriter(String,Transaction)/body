{
  return new FeatureWriter<SimpleFeatureType,SimpleFeature>(){
    SimpleFeatureType featureType=getSchema(typeName);
    Map<String,SimpleFeature> contents=features(featureType.getName());
    Iterator<SimpleFeature> iterator=contents.values().iterator();
    SimpleFeature live=null;
    SimpleFeature current=null;
    public SimpleFeatureType getFeatureType(){
      return featureType;
    }
    public SimpleFeature next() throws IOException, NoSuchElementException {
      if (hasNext()) {
        live=iterator.next();
        try {
          current=SimpleFeatureBuilder.copy(live);
        }
 catch (        IllegalAttributeException e) {
          throw new DataSourceException("Unable to edit " + live.getID() + " of "+ typeName);
        }
      }
 else {
        live=null;
        try {
          current=SimpleFeatureBuilder.template(featureType,null);
        }
 catch (        IllegalAttributeException e) {
          throw new DataSourceException("Unable to add additional Features of " + typeName);
        }
      }
      return current;
    }
    public void remove() throws IOException {
      if (contents == null) {
        throw new IOException("FeatureWriter has been closed");
      }
      if (current == null) {
        throw new IOException("No feature available to remove");
      }
      if (live != null) {
        iterator.remove();
        listenerManager.fireFeaturesRemoved(typeName,transaction,new ReferencedEnvelope(live.getBounds()),true);
        live=null;
        current=null;
      }
 else {
        current=null;
      }
    }
    public void write() throws IOException {
      if (contents == null) {
        throw new IOException("FeatureWriter has been closed");
      }
      if (current == null) {
        throw new IOException("No feature available to write");
      }
      if (live != null) {
        if (live.equals(current)) {
          live=null;
          current=null;
        }
 else {
          try {
            live.setAttributes(current.getAttributes());
          }
 catch (          Exception e) {
            throw new DataSourceException("Unable to accept modifications to " + live.getID() + " on "+ typeName);
          }
          ReferencedEnvelope bounds=new ReferencedEnvelope();
          bounds.expandToInclude(new ReferencedEnvelope(live.getBounds()));
          bounds.expandToInclude(new ReferencedEnvelope(current.getBounds()));
          listenerManager.fireFeaturesChanged(typeName,transaction,bounds,true);
          live=null;
          current=null;
        }
      }
 else {
        String id=current.getID();
        if (Boolean.TRUE.equals(current.getUserData().get(Hints.USE_PROVIDED_FID)) && null != current.getUserData().get(Hints.PROVIDED_FID)) {
          id=(String)current.getUserData().get(Hints.PROVIDED_FID);
          current=SimpleFeatureBuilder.build(current.getFeatureType(),current.getAttributes(),id);
        }
        contents.put(id,current);
        listenerManager.fireFeaturesAdded(typeName,transaction,new ReferencedEnvelope(current.getBounds()),true);
        current=null;
      }
    }
    public boolean hasNext() throws IOException {
      if (contents == null) {
        throw new IOException("FeatureWriter has been closed");
      }
      return (iterator != null) && iterator.hasNext();
    }
    public void close(){
      if (iterator != null) {
        iterator=null;
      }
      if (featureType != null) {
        featureType=null;
      }
      contents=null;
      current=null;
      live=null;
    }
  }
;
}
