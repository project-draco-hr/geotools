{
  GeodeticDatum datum=null;
  final String datumCode=metadata.getGeoKey(GeoTiffGCSCodes.GeogGeodeticDatumGeoKey);
  if (datumCode == null) {
    throw new GeoTiffException(metadata,"GeoTiffMetadata2CRSAdapter::createGeodeticDatum(Unit unit):A user defined Geographic Coordinate system must include a predefined datum!",null);
  }
  if (datumCode.equals(GeoTiffConstants.GTUserDefinedGeoKey_String)) {
    final String datumName=(metadata.getGeoKey(GeoTiffGCSCodes.GeogCitationGeoKey) != null ? metadata.getGeoKey(GeoTiffGCSCodes.GeogCitationGeoKey) : "unnamed");
    if (datumName.trim().equalsIgnoreCase("WGS84"))     return DefaultGeodeticDatum.WGS84;
    final Ellipsoid ellipsoid=createEllipsoid(unit,metadata);
    final PrimeMeridian primeMeridian=createPrimeMeridian(metadata,unit);
    datum=new DefaultGeodeticDatum(datumName,ellipsoid,primeMeridian);
  }
 else {
    try {
      datum=(GeodeticDatum)(this.allAuthoritiesFactory.createDatum(new StringBuffer("EPSG:").append(datumCode).toString()));
    }
 catch (    FactoryException fe) {
      final GeoTiffException ex=new GeoTiffException(metadata,fe.getLocalizedMessage(),fe);
      throw ex;
    }
catch (    ClassCastException cce) {
      final GeoTiffException ex=new GeoTiffException(metadata,cce.getLocalizedMessage(),cce);
      throw ex;
    }
  }
  return datum;
}
