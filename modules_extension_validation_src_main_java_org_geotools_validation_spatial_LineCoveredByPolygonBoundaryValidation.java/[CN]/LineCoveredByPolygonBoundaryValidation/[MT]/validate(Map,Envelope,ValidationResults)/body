{
  boolean r=true;
  SimpleFeatureSource fsLine=(SimpleFeatureSource)layers.get(getLineTypeRef());
  SimpleFeatureCollection fcLine=fsLine.getFeatures();
  SimpleFeatureIterator fLine=fcLine.features();
  SimpleFeatureSource fsPoly=(SimpleFeatureSource)layers.get(getRestrictedPolygonTypeRef());
  SimpleFeatureCollection fcPoly=fsPoly.getFeatures();
  while (fLine.hasNext()) {
    SimpleFeature line=fLine.next();
    SimpleFeatureIterator fPoly=fcPoly.features();
    Geometry lineGeom=(Geometry)line.getDefaultGeometry();
    if (envelope.contains(lineGeom.getEnvelopeInternal())) {
      if (LineString.class.isAssignableFrom(lineGeom.getClass())) {
        while (fPoly.hasNext()) {
          SimpleFeature poly=fPoly.next();
          Geometry polyGeom=(Geometry)poly.getDefaultGeometry();
          if (envelope.contains(polyGeom.getEnvelopeInternal())) {
            if (Polygon.class.isAssignableFrom(polyGeom.getClass())) {
              Geometry polyGeomBoundary=polyGeom.getBoundary();
              if (!polyGeomBoundary.contains(lineGeom)) {
                results.error(poly,"Boundary does not contain the specified Line.");
                r=false;
              }
            }
 else {
              fcPoly.remove(poly);
              results.warning(poly,"Invalid type: this feature is not a derivative of a Polygon");
            }
          }
 else {
            fcPoly.remove(poly);
          }
        }
      }
 else {
        results.warning(line,"Invalid type: this feature is not a derivative of a LineString");
      }
    }
  }
  return r;
}
