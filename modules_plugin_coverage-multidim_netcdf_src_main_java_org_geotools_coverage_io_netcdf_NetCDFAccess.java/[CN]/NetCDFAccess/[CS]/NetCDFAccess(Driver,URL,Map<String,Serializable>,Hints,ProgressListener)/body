{
  super(driver,EnumSet.of(AccessType.READ_ONLY),new HashMap<String,Parameter<?>>(){
{
      put(DefaultFileDriver.URL.key,DefaultFileDriver.URL);
    }
  }
,source,additionalParameters);
  final String protocol=source.getProtocol();
  if (!(protocol.equalsIgnoreCase("file") || protocol.equalsIgnoreCase("http") || protocol.equalsIgnoreCase("dods"))) {
    throw new DataSourceException("Wrong protocol for URL:" + source.toExternalForm().toString());
  }
  File sourceFile=null;
  if (protocol.equalsIgnoreCase("file")) {
    sourceFile=DataUtilities.urlToFile(source);
    if (!sourceFile.exists() || !sourceFile.isFile() || !sourceFile.canRead()) {
      throw new DataSourceException("Invalid source");
    }
  }
  try {
    reader=(NetCDFImageReader)NetCDFDriver.SPI.createReaderInstance();
    setAuxiliaryEntries(hints);
    reader.setInput(this.source);
    if (names == null) {
      names=new ArrayList<Name>();
      final Collection<Name> originalNames=reader.getCoveragesNames();
      for (      Name name : originalNames) {
        Name coverageName=new NameImpl(name.toString());
        names.add(coverageName);
      }
    }
  }
 catch (  Exception e) {
    throw new DataSourceException(e);
  }
}
