{
  final int numBands=dst.length;
  if (min != null && min.length != numBands) {
    throw new IllegalArgumentException(Errors.format(ErrorKeys.NUMBER_OF_BANDS_MISMATCH_$3,numBands,min.length,"min[i]"));
  }
  if (max != null && max.length != numBands) {
    throw new IllegalArgumentException(Errors.format(ErrorKeys.NUMBER_OF_BANDS_MISMATCH_$3,numBands,max.length,"max[i]"));
  }
  if (colors != null && colors.length != numBands) {
    throw new IllegalArgumentException(Errors.format(ErrorKeys.NUMBER_OF_BANDS_MISMATCH_$3,numBands,colors.length,"colors[i]"));
  }
  final SampleDimensionType sourceType=TypeMap.getSampleDimensionType(model,0);
  final boolean sourceIsFloat=TypeMap.isFloatingPoint(sourceType);
  SampleDimensionType targetType=null;
  if (hints != null) {
    targetType=(SampleDimensionType)hints.get(Hints.SAMPLE_DIMENSION_TYPE);
  }
  if (targetType == null) {
    targetType=sourceType;
  }
  NumberRange targetRange=TypeMap.getRange(targetType);
  Category[] categories=new Category[1];
  final InternationalString n=SimpleInternationalString.wrap(name);
  NumberRange sourceRange=TypeMap.getRange(sourceType);
  for (int b=0; b < numBands; b++) {
    final Color[] c=colors != null ? colors[b] : null;
    categories[0]=new Category(n,c,targetRange,true);
    dst[b]=new GridSampleDimension(name,categories,units);
  }
}
