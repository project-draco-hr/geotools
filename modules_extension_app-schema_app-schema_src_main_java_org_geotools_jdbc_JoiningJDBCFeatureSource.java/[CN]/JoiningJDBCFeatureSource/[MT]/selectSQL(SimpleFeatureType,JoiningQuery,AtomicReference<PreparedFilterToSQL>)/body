{
  StringBuffer joinClause=new StringBuffer();
  Set<String> tableNames=new HashSet<String>();
  String lastTypeName=featureType.getTypeName();
  String curTypeName=lastTypeName;
  String[] aliases=null;
  tableNames.add(lastTypeName);
  String alias=null;
  if (query.getQueryJoins() != null) {
    aliases=new String[query.getQueryJoins().size()];
    for (int i=0; i < query.getQueryJoins().size(); i++) {
      JoiningQuery.QueryJoin join=query.getQueryJoins().get(i);
      joinClause.append(" INNER JOIN ");
      FilterToSQL toSQL1=createFilterToSQL(getDataStore().getSchema(lastTypeName));
      FilterToSQL toSQL2=createFilterToSQL(getDataStore().getSchema(join.getJoiningTypeName()));
      if (tableNames.contains(join.getJoiningTypeName())) {
        alias=createAlias(join.getJoiningTypeName(),tableNames);
        aliases[i]=alias;
        getDataStore().encodeTableName(join.getJoiningTypeName(),joinClause,query.getHints());
        joinClause.append(" ");
        getDataStore().dialect.encodeTableName(alias,joinClause);
        joinClause.append(" ON ( ");
        toSQL2.setFieldEncoder(new JoiningFieldEncoder(alias,getDataStore()));
        joinClause.append(toSQL2.encodeToString(join.getForeignKeyName()));
      }
 else {
        aliases[i]=null;
        getDataStore().encodeTableName(join.getJoiningTypeName(),joinClause,query.getHints());
        joinClause.append(" ON ( ");
        toSQL2.setFieldEncoder(new JoiningFieldEncoder(join.getJoiningTypeName(),getDataStore()));
        joinClause.append(toSQL2.encodeToString(join.getForeignKeyName()));
      }
      joinClause.append(" = ");
      String fromTypeName=curTypeName;
      toSQL1.setFieldEncoder(new JoiningFieldEncoder(fromTypeName,getDataStore()));
      joinClause.append(toSQL1.encodeToString(join.getJoiningKeyName()));
      joinClause.append(") ");
      lastTypeName=join.getJoiningTypeName();
      curTypeName=aliases[i] == null ? lastTypeName : aliases[i];
      tableNames.add(curTypeName);
    }
  }
  StringBuffer sql=new StringBuffer();
  sql.append("SELECT ");
  PrimaryKey key=null;
  try {
    key=getDataStore().getPrimaryKey(featureType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Set<String> pkColumnNames=new HashSet<String>();
  String colName;
  for (  PrimaryKeyColumn col : key.getColumns()) {
    colName=col.getName();
    encodeColumnName(colName,featureType.getTypeName(),sql,query.getHints());
    sql.append(",");
    pkColumnNames.add(colName);
  }
  Set<String> lastPkColumnNames=pkColumnNames;
  for (  AttributeDescriptor att : featureType.getAttributeDescriptors()) {
    String columnName=att.getLocalName();
    if (pkColumnNames.contains(columnName))     continue;
    if (att instanceof GeometryDescriptor) {
      encodeGeometryColumn((GeometryDescriptor)att,featureType.getTypeName(),sql,query.getHints());
      getDataStore().dialect.encodeColumnAlias(columnName,sql);
    }
 else {
      encodeColumnName(columnName,featureType.getTypeName(),sql,query.getHints());
    }
    sql.append(",");
  }
  if (query.getQueryJoins() != null && query.getQueryJoins().size() > 0) {
    for (int i=0; i < query.getQueryJoins().size(); i++) {
      List<String> ids=query.getQueryJoins().get(i).getIds();
      for (int j=0; j < ids.size(); j++) {
        if (aliases[i] != null) {
          getDataStore().dialect.encodeColumnName(aliases[i],query.getQueryJoins().get(i).getIds().get(j),sql);
        }
 else {
          encodeColumnName(query.getQueryJoins().get(i).getIds().get(j),query.getQueryJoins().get(i).getJoiningTypeName(),sql,query.getHints());
        }
        sql.append(" ").append(FOREIGN_ID + "_" + i+ "_"+ j).append(",");
      }
      if (ids.isEmpty()) {
        PrimaryKey joinKey=null;
        String joinTypeName=query.getQueryJoins().get(i).getJoiningTypeName();
        SimpleFeatureType joinFeatureType=getDataStore().getSchema(joinTypeName);
        try {
          joinKey=getDataStore().getPrimaryKey(joinFeatureType);
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        if (!joinKey.getColumns().isEmpty()) {
          lastPkColumnNames.clear();
        }
        int j=0;
        for (        PrimaryKeyColumn col : joinKey.getColumns()) {
          if (aliases[i] != null) {
            getDataStore().dialect.encodeColumnName(aliases[i],col.getName(),sql);
          }
 else {
            encodeColumnName(col.getName(),joinTypeName,sql,query.getHints());
          }
          query.getQueryJoins().get(i).addId(col.getName());
          sql.append(" ").append(FOREIGN_ID + "_" + i+ "_"+ j).append(",");
          j++;
          lastPkColumnNames.add(col.getName());
        }
      }
    }
  }
  if (!query.hasIdColumn() && !pkColumnNames.isEmpty()) {
    int pkIndex=0;
    for (    String pk : pkColumnNames) {
      encodeColumnName(pk,featureType.getTypeName(),sql,query.getHints());
      sql.append(" ").append(PRIMARY_KEY).append("_").append(pkIndex).append(",");
      pkIndex++;
    }
  }
  sql.setLength(sql.length() - 1);
  sql.append(" FROM ");
  getDataStore().encodeTableName(featureType.getTypeName(),sql,query.getHints());
  FilterToSQL toSQL=null;
  Filter filter=query.getFilter();
  sql.append(joinClause);
  boolean isRootFeature=(query.getQueryJoins() == null || query.getQueryJoins().size() == 0);
  boolean pagingApplied=false;
  if (filter != null && !Filter.INCLUDE.equals(filter)) {
    try {
      SortBy[] lastSortBy=null;
      if (!query.isSubset()) {
        lastSortBy=isRootFeature ? query.getSortBy() : (query.getQueryJoins() == null || query.getQueryJoins().size() == 0 ? query.getSortBy() : query.getQueryJoins().get(query.getQueryJoins().size() - 1).getSortBy());
      }
      String lastTableName=isRootFeature ? query.getTypeName() : query.getQueryJoins().get(query.getQueryJoins().size() - 1).getJoiningTypeName();
      String lastTableAlias=isRootFeature ? query.getTypeName() : aliases[query.getQueryJoins().size() - 1] == null ? lastTableName : aliases[query.getQueryJoins().size() - 1];
      toSQL=createFilterToSQL(getDataStore().getSchema(lastTableName));
      Collection<String> ids=new ArrayList<String>();
      if (isRootFeature && query.isDenormalised()) {
        pagingApplied=applyPaging(query,sql,pkColumnNames,featureType.getTypeName(),featureType.getTypeName(),tableNames,toSQL,filter,ids);
      }
      if (!isRootFeature) {
        QueryJoin lastJoin=query.getQueryJoins().get(query.getQueryJoins().size() - 1);
        pagingApplied=applyPaging(lastJoin,sql,pkColumnNames,lastTableName,lastTableAlias,tableNames,toSQL,filter,ids);
      }
      if (lastSortBy != null && (lastSortBy.length > 0 || !lastPkColumnNames.isEmpty())) {
        StringBuffer sortBySQL=new StringBuffer();
        sortBySQL.append(" INNER JOIN ( SELECT DISTINCT ");
        boolean hasSortBy=false;
        for (int i=0; i < lastSortBy.length; i++) {
          if (!ids.contains(lastSortBy[i].getPropertyName().toString())) {
            getDataStore().dialect.encodeColumnName(null,lastSortBy[i].getPropertyName().getPropertyName(),sortBySQL);
            sortBySQL.append(" FROM ");
            getDataStore().encodeTableName(lastTableName,sortBySQL,query.getHints());
            if (NestedFilterToSQL.isNestedFilter(filter)) {
              sortBySQL.append(" WHERE ").append(createNestedFilter(filter,query,toSQL));
            }
 else {
              sortBySQL.append(" ").append(toSQL.encodeToString(filter));
            }
            sortBySQL.append(" ) ");
            getDataStore().dialect.encodeTableName(TEMP_FILTER_ALIAS,sortBySQL);
            sortBySQL.append(" ON ( ");
            encodeColumnName2(lastSortBy[i].getPropertyName().getPropertyName(),lastTableAlias,sortBySQL,null);
            sortBySQL.append(" = ");
            encodeColumnName2(lastSortBy[i].getPropertyName().getPropertyName(),TEMP_FILTER_ALIAS,sortBySQL,null);
            if (i < lastSortBy.length - 1) {
              sortBySQL.append(" AND ");
            }
            hasSortBy=true;
          }
        }
        if (lastSortBy.length == 0) {
          int i=0;
          for (          String pk : lastPkColumnNames) {
            if (!ids.contains(pk)) {
              getDataStore().dialect.encodeColumnName(null,pk,sortBySQL);
              sortBySQL.append(" FROM ");
              getDataStore().encodeTableName(lastTableName,sortBySQL,query.getHints());
              sortBySQL.append(" ").append(toSQL.encodeToString(filter));
              sortBySQL.append(" ) ");
              getDataStore().dialect.encodeTableName(TEMP_FILTER_ALIAS,sortBySQL);
              sortBySQL.append(" ON ( ");
              encodeColumnName2(pk,lastTableAlias,sortBySQL,null);
              sortBySQL.append(" = ");
              encodeColumnName2(pk,TEMP_FILTER_ALIAS,sortBySQL,null);
              if (i < lastPkColumnNames.size() - 1) {
                sortBySQL.append(" AND ");
              }
              i++;
              hasSortBy=true;
            }
          }
        }
        if (hasSortBy) {
          if (sortBySQL.toString().endsWith(" AND ")) {
            sql.append(sortBySQL.substring(0,sortBySQL.length() - 5)).append(" ) ");
          }
 else {
            sql.append(sortBySQL).append(" ) ");
          }
        }
      }
 else       if (!pagingApplied) {
        toSQL.setFieldEncoder(new JoiningFieldEncoder(curTypeName,getDataStore()));
        if (NestedFilterToSQL.isNestedFilter(filter)) {
          sql.append(" WHERE ").append(createNestedFilter(filter,query,toSQL));
        }
 else {
          sql.append(" ").append(toSQL.encodeToString(filter));
        }
      }
    }
 catch (    FilterToSQLException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    if (isRootFeature && query.isDenormalised()) {
      pagingApplied=applyPaging(query,sql,pkColumnNames,featureType.getTypeName(),featureType.getTypeName(),tableNames,null,null,null);
    }
    if (!isRootFeature) {
      QueryJoin lastJoin=query.getQueryJoins().get(query.getQueryJoins().size() - 1);
      String lastTableAlias=aliases[query.getQueryJoins().size() - 1] == null ? lastJoin.getJoiningTypeName() : aliases[query.getQueryJoins().size() - 1];
      pagingApplied=applyPaging(lastJoin,sql,pkColumnNames,lastJoin.getJoiningTypeName(),lastTableAlias,tableNames,null,null,null);
    }
  }
  sort(query,sql,aliases,pkColumnNames);
  if (!pagingApplied) {
    getDataStore().applyLimitOffset(sql,query);
  }
  if (toSQLref != null && toSQL instanceof PreparedFilterToSQL) {
    toSQLref.set((PreparedFilterToSQL)toSQL);
  }
  return sql.toString();
}
