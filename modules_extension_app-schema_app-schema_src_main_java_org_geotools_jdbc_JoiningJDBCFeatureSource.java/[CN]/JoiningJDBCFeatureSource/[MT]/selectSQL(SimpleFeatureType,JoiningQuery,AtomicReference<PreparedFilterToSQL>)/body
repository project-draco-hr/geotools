{
  StringBuffer fromclause=new StringBuffer();
  getDataStore().encodeTableName(featureType.getTypeName(),fromclause,query.getHints());
  Set<String> tableNames=new HashSet<String>();
  String lastTypeName=featureType.getTypeName();
  String curTypeName=lastTypeName;
  String[] aliases=null;
  if (query.getJoins() != null) {
    SortBy[] lastSortBy=query.getSortBy();
    aliases=new String[query.getJoins().size()];
    for (int i=0; i < query.getJoins().size(); i++) {
      JoiningQuery.Join join=query.getJoins().get(i);
      if (lastSortBy != null && lastSortBy.length > 0) {
        tableNames.add(curTypeName);
        String temp_alias=createAlias(lastTypeName,tableNames);
        fromclause.append(" INNER JOIN ");
        getDataStore().encodeTableName(lastTypeName,fromclause,query.getHints());
        fromclause.append(" ").append(temp_alias);
        fromclause.append(" ON (");
        for (int j=0; j < query.getSortBy().length; j++) {
          if (lastTypeName != curTypeName) {
            encodeColumnName2(lastSortBy[j].getPropertyName().getPropertyName(),curTypeName,fromclause,null);
          }
 else {
            encodeColumnName(lastSortBy[j].getPropertyName().getPropertyName(),curTypeName,fromclause,null);
          }
          fromclause.append(" = ");
          encodeColumnName2(lastSortBy[j].getPropertyName().getPropertyName(),temp_alias,fromclause,null);
          if (j < lastSortBy.length - 1)           fromclause.append(" AND ");
        }
        fromclause.append(" ) ");
        curTypeName=temp_alias;
      }
      lastSortBy=join.getSortBy();
      fromclause.append(" INNER JOIN ");
      String alias=null;
      FilterToSQL toSQL1=createFilterToSQL(getDataStore().getSchema(lastTypeName));
      FilterToSQL toSQL2=createFilterToSQL(getDataStore().getSchema(join.getJoiningTypeName()));
      tableNames.add(curTypeName);
      if (tableNames.contains(join.getJoiningTypeName())) {
        alias=createAlias(join.getJoiningTypeName(),tableNames);
        aliases[i]=alias;
        getDataStore().encodeTableName(join.getJoiningTypeName(),fromclause,query.getHints());
        fromclause.append(" " + alias);
        fromclause.append(" ON ( ");
        toSQL2.setFieldEncoder(new JoiningFieldEncoder(alias));
        fromclause.append(toSQL2.encodeToString(join.getForeignKeyName()));
      }
 else {
        aliases[i]=null;
        getDataStore().encodeTableName(join.getJoiningTypeName(),fromclause,query.getHints());
        fromclause.append(" ON ( ");
        toSQL2.setFieldEncoder(new JoiningFieldEncoder(join.getJoiningTypeName()));
        fromclause.append(toSQL2.encodeToString(join.getForeignKeyName()));
      }
      fromclause.append(" = ");
      toSQL1.setFieldEncoder(new JoiningFieldEncoder(curTypeName));
      fromclause.append(toSQL1.encodeToString(join.getJoiningKeyName()));
      fromclause.append(") ");
      lastTypeName=join.getJoiningTypeName();
      curTypeName=alias == null ? lastTypeName : alias;
    }
  }
  StringBuffer sql=new StringBuffer();
  sql.append("SELECT ");
  PrimaryKey key=null;
  try {
    key=getDataStore().getPrimaryKey(featureType);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Set<String> pkColumnNames=getDataStore().getColumnNames(key);
  for (  PrimaryKeyColumn col : key.getColumns()) {
    encodeColumnName(col.getName(),featureType.getTypeName(),sql,query.getHints());
    sql.append(",");
  }
  for (  AttributeDescriptor att : featureType.getAttributeDescriptors()) {
    String columnName=att.getLocalName();
    if (pkColumnNames.contains(columnName))     continue;
    if (att instanceof GeometryDescriptor) {
      encodeGeometryColumn((GeometryDescriptor)att,featureType.getTypeName(),sql,query.getHints());
      getDataStore().dialect.encodeColumnAlias(columnName,sql);
    }
 else {
      encodeColumnName(columnName,featureType.getTypeName(),sql,query.getHints());
    }
    sql.append(",");
  }
  if (query.getJoins() != null && query.getJoins().size() > 0) {
    for (int i=0; i < query.getJoins().size(); i++) {
      for (int j=0; j < query.getJoins().get(i).getSortBy().length; j++) {
        encodeColumnName(query.getJoins().get(i).getSortBy()[j].getPropertyName().getPropertyName(),query.getJoins().get(i).getJoiningTypeName(),sql,query.getHints());
        sql.append(" ").append(FOREIGN_ID + "_" + i+ "_"+ j).append(",");
      }
    }
  }
  sql.setLength(sql.length() - 1);
  sql.append(" FROM ");
  sql.append(fromclause);
  FilterToSQL toSQL=null;
  Filter filter=query.getFilter();
  if (filter != null && !Filter.INCLUDE.equals(filter)) {
    try {
      SortBy[] lastSortBy=query.getJoins() == null || query.getJoins().size() == 0 ? query.getSortBy() : query.getJoins().get(query.getJoins().size() - 1).getSortBy();
      String lastTableName=query.getJoins() == null || query.getJoins().size() == 0 ? query.getTypeName() : query.getJoins().get(query.getJoins().size() - 1).getJoiningTypeName();
      toSQL=createFilterToSQL(getDataStore().getSchema(lastTableName));
      if (lastSortBy != null) {
        sql.append(" INNER JOIN ( SELECT DISTINCT ");
        for (int i=0; i < lastSortBy.length; i++) {
          getDataStore().dialect.encodeColumnName(lastSortBy[i].getPropertyName().getPropertyName(),sql);
          if (i < lastSortBy.length - 1)           sql.append(",");
        }
        sql.append(" FROM ");
        getDataStore().encodeTableName(lastTableName,sql,query.getHints());
        sql.append(" ").append(toSQL.encodeToString(filter));
        sql.append(" ) " + TEMP_FILTER_ALIAS);
        sql.append(" ON ( ");
        for (int i=0; i < lastSortBy.length; i++) {
          encodeColumnName(lastSortBy[i].getPropertyName().getPropertyName(),lastTableName,sql,null);
          sql.append(" = ");
          encodeColumnName2(lastSortBy[i].getPropertyName().getPropertyName(),TEMP_FILTER_ALIAS,sql,null);
          if (i < lastSortBy.length - 1)           sql.append(" AND ");
        }
        sql.append(" ) ");
      }
 else {
        toSQL.setFieldEncoder(new JoiningFieldEncoder(curTypeName));
        sql.append(" ").append(toSQL.encodeToString(filter));
      }
    }
 catch (    FilterToSQLException e) {
      throw new RuntimeException(e);
    }
  }
  sort(query,sql,aliases);
  getDataStore().applyLimitOffset(sql,query);
  if (toSQLref != null && toSQL instanceof PreparedFilterToSQL) {
    toSQLref.set((PreparedFilterToSQL)toSQL);
  }
  return sql.toString();
}
