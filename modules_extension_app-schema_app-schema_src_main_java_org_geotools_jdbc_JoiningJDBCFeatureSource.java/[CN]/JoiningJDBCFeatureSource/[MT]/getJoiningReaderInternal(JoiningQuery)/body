{
  Filter[] split=splitFilter(query.getFilter());
  Filter preFilter=split[0];
  Filter postFilter=split[1];
  if (postFilter != null && postFilter != Filter.INCLUDE) {
    throw new IllegalArgumentException("Postfilters not allowed in Joining Queries");
  }
  JoiningQuery preQuery=new JoiningQuery(query);
  preQuery.setFilter(preFilter);
  SimpleFeatureType querySchema;
  if (query.getPropertyNames() == Query.ALL_NAMES) {
    querySchema=getSchema();
  }
 else {
    querySchema=SimpleFeatureTypeBuilder.retype(getSchema(),query.getPropertyNames());
  }
  SimpleFeatureType fullSchema=query.getQueryJoins() == null ? querySchema : getFeatureType(querySchema,query);
  Connection cx=getDataStore().getConnection(getState());
  FeatureReader<SimpleFeatureType,SimpleFeature> reader;
  try {
    if (getState().getTransaction() == Transaction.AUTO_COMMIT) {
      cx.setAutoCommit(false);
    }
    SQLDialect dialect=getDataStore().getSQLDialect();
    if (dialect instanceof PreparedStatementSQLDialect) {
      PreparedStatement ps=selectSQLPS(querySchema,preQuery,cx);
      reader=new JDBCFeatureReader(ps,cx,this,fullSchema,query.getHints());
    }
 else {
      String sql=selectSQL(querySchema,preQuery,null);
      getDataStore().getLogger().fine(sql);
      reader=new JDBCFeatureReader(sql,cx,this,fullSchema,query.getHints());
    }
  }
 catch (  Exception e) {
    getDataStore().closeSafe(cx);
    throw (IOException)new IOException().initCause(e);
  }
  return reader;
}
