{
  Filter result;
  int added=0;
  List<org.opengis.filter.Filter> resultList=new ArrayList<org.opengis.filter.Filter>();
switch (filterType) {
case FilterType.LOGIC_AND:
    if (contains((And)f,Filter.EXCLUDE)) {
      return Filter.EXCLUDE;
    }
  for (  Filter item : ((And)f).getChildren()) {
    org.opengis.filter.Filter filter=(org.opengis.filter.Filter)item;
    if (filter == Filter.INCLUDE) {
      continue;
    }
    added++;
    resultList.add(filter);
  }
if (resultList.isEmpty()) {
  return Filter.EXCLUDE;
}
result=ff.and(resultList);
break;
case FilterType.LOGIC_OR:
if (contains((Or)f,Filter.INCLUDE)) {
return Filter.INCLUDE;
}
for (Object item : ((Or)f).getChildren()) {
org.opengis.filter.Filter filter=(org.opengis.filter.Filter)item;
if (filter == org.opengis.filter.Filter.EXCLUDE) {
continue;
}
added++;
resultList.add(filter);
}
if (resultList.isEmpty()) {
return Filter.EXCLUDE;
}
result=ff.or(resultList);
break;
default :
return Filter.EXCLUDE;
}
switch (added) {
case 0:
return Filter.EXCLUDE;
case 1:
if (result instanceof Not) {
return ((Not)result).getFilter();
}
 else {
return ((BinaryLogicOperator)result).getChildren().get(0);
}
default :
return result;
}
}
