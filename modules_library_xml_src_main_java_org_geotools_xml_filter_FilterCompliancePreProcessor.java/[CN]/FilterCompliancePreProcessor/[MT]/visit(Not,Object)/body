{
  int startSize=1;
  Filter child;
  try {
switch (this.complianceInt) {
case LOW:
      current.push(new Data(filter));
    break;
case MEDIUM:
  child=filter.getFilter();
extraData=child.accept(this,extraData);
Data mediumFilter=createMediumLevelLogicFilter(FilterType.LOGIC_NOT,startSize);
current.push(mediumFilter);
break;
case HIGH:
child=filter.getFilter();
extraData=child.accept(this,extraData);
Data highFilter=createHighLevelLogicFilter(FilterType.LOGIC_AND,startSize);
current.push(highFilter);
break;
default :
break;
}
}
 catch (Exception e) {
if (e instanceof UnsupportedFilterException) {
throw (UnsupportedFilterException)e;
}
throw new UnsupportedFilterException("Exception creating filter",e);
}
return extraData;
}
