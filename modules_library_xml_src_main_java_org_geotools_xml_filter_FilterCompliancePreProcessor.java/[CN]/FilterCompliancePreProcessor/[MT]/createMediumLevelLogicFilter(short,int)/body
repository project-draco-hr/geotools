{
  Data resultingFilter;
switch (filterType) {
case FilterType.LOGIC_AND:
{
      Set<String> fids=andFids(startOfFilterStack);
      resultingFilter=buildFilter(filterType,startOfFilterStack);
      resultingFilter.fids.addAll(fids);
      if (resultingFilter.filter != Filter.EXCLUDE && !fids.isEmpty())       requiresPostProcessing=true;
      break;
    }
case FilterType.LOGIC_OR:
{
    Set fids=orFids(startOfFilterStack);
    resultingFilter=buildFilter(filterType,startOfFilterStack);
    resultingFilter.fids.addAll(fids);
    break;
  }
case FilterType.LOGIC_NOT:
resultingFilter=buildFilter(filterType,startOfFilterStack);
break;
default :
resultingFilter=buildFilter(filterType,startOfFilterStack);
break;
}
return resultingFilter;
}
