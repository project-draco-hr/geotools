{
  XSDSchema schema=schema();
  if (schema == null)   return;
  SchemaGenerator generator=new SchemaGenerator(schema);
  generator.setComplexTypes(includeComplexTypes);
  generator.setSimpleTypes(includeSimpleTypes);
  generator.setOverwriting(overwriteExistingFiles);
  generator.setSourceLocation(sourceOutputDirectory.getAbsolutePath());
  generator.setTestLocation(testOutputDirectory.getAbsolutePath());
  generator.setResourceLocation(((Resource)project.getBuild().getResources().get(0)).getDirectory());
  generator.setFollowComplexTypes(followComplexTypes);
  generator.setIncludes(includes);
  generator.setMaxRecursionDepth(maxRecursionDepth);
  generator.setPrintRecursionPaths(printRecursionPaths);
  generator.setTypeBindings(typeBindings);
  if (imports != null) {
    List urls=new ArrayList();
    for (Iterator d=project.getDependencies().iterator(); d.hasNext(); ) {
      Dependency dep=(Dependency)d.next();
      Artifact artifact=artifactFactory.createArtifact(dep.getGroupId(),dep.getArtifactId(),dep.getVersion(),null,dep.getType());
      try {
        artifactResolver.resolve(artifact,remoteRepositories,localRepository);
        urls.add(artifact.getFile().toURI().toURL());
      }
 catch (      Exception e) {
        getLog().error("Unable to resolve " + artifact.getId());
      }
    }
    try {
      urls.add(new File(project.getBuild().getOutputDirectory()).toURI().toURL());
    }
 catch (    MalformedURLException e) {
      getLog().error("Bad url: " + project.getBuild().getOutputDirectory());
      return;
    }
    ClassLoader ext=new URLClassLoader((URL[])urls.toArray(new URL[urls.size()]),getClass().getClassLoader());
    for (int i=0; i < imports.length; i++) {
      String schemaClassName=imports[i];
      Class schemaClass=null;
      try {
        schemaClass=ext.loadClass(schemaClassName);
      }
 catch (      ClassNotFoundException e) {
        getLog().error("Could note load class: " + schemaClassName);
        return;
      }
      getLog().info("Loading import schema: " + schemaClassName);
      Schema gtSchema=null;
      try {
        gtSchema=(Schema)schemaClass.newInstance();
      }
 catch (      Exception e) {
        getLog().error("Could not insantiate class: " + schemaClass.getName());
        return;
      }
      if (gtSchema != null) {
        generator.addImport(gtSchema);
      }
    }
  }
  try {
    generator.generate();
  }
 catch (  Exception e) {
    getLog().error(e);
  }
}
