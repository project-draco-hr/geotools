{
  try {
    LinkedHashMap<String,String> readerFileHeaderMap=new LinkedHashMap<String,String>();
    String line;
    BufferedReader cellhead;
    String reclassedFile=null;
    String reclassedMapset=null;
    reclassTable=null;
    File cellhd=readerGrassEnv.getCELLHD();
    cellhead=new BufferedReader(new FileReader(cellhd));
    cellhead.mark(128);
    if ((line=cellhead.readLine()) == null) {
      throw new IOException("The cellhead file seems to be corrupted: " + cellhd.getAbsolutePath());
    }
    if (line.trim().equalsIgnoreCase("reclass")) {
      for (int i=0; i < 2; i++) {
        if ((line=cellhead.readLine()) == null) {
          throw new IOException("The cellhead file seems to be corrupted: " + cellhd.getAbsolutePath());
        }
        String[] lineSplit=line.split(":");
        if (lineSplit.length == 2) {
          if (lineSplit[0].trim().equalsIgnoreCase("name"))           reclassedFile=lineSplit[1].trim();
 else           if (lineSplit[0].trim().equalsIgnoreCase("mapset"))           reclassedMapset=lineSplit[1].trim();
        }
      }
      reclassTable=new Vector<Object>();
      if ((line=cellhead.readLine()) == null) {
        throw new IOException("The cellhead file seems to be corrupted: " + cellhd.getAbsolutePath());
      }
      if (line.charAt(0) == '#') {
        int reclassFirstCategory=Integer.parseInt(line.trim().substring(1));
        for (int i=0; i < reclassFirstCategory; i++) {
          reclassTable.addElement("");
        }
      }
 else {
        reclassTable.addElement("");
      }
      while ((line=cellhead.readLine()) != null) {
        reclassTable.addElement(new Integer(line));
      }
      readerGrassEnv.setReclassed(reclassedMapset,reclassedFile);
      if (!cellhd.exists()) {
        throw new IOException("The reclassed cellhead file doesn't seems to exist: " + cellhd.getAbsolutePath());
      }
      cellhead=new BufferedReader(new FileReader(cellhd));
    }
 else {
      cellhead.reset();
    }
    while ((line=cellhead.readLine()) != null) {
      String[] lineSplit=line.split(":");
      if (lineSplit.length == 2) {
        String key=lineSplit[0].trim();
        String value=lineSplit[1].trim();
        if (key.indexOf("resol") != -1)         readerFileHeaderMap.put(key.replaceAll("resol","res"),value);
 else         readerFileHeaderMap.put(key,value);
      }
 else {
        String key=lineSplit[0].trim();
        double value=0.0;
        String degrees=lineSplit[1];
        value=Double.parseDouble(degrees);
        String minutes=lineSplit[2];
        if (minutes.lastIndexOf('N') != -1 || minutes.lastIndexOf('S') != -1 || minutes.lastIndexOf('E') != -1 || minutes.lastIndexOf('W') != -1) {
          if (minutes.lastIndexOf('S') != -1 || minutes.lastIndexOf('W') != -1) {
            value=value * -1;
          }
          minutes=minutes.substring(0,minutes.length() - 1);
        }
        value=value + Double.parseDouble(minutes) / 60.0;
        if (lineSplit.length == 4) {
          String seconds=lineSplit[3];
          if (seconds.lastIndexOf('N') != -1 || seconds.lastIndexOf('S') != -1 || seconds.lastIndexOf('E') != -1 || seconds.lastIndexOf('W') != -1) {
            if (seconds.lastIndexOf('S') != -1 || seconds.lastIndexOf('W') != -1) {
              value=value * -1;
            }
            seconds=seconds.substring(0,seconds.length() - 1);
          }
          value=value + Double.parseDouble(seconds) / 60.0 / 60.0;
        }
        if (key.indexOf("resol") != -1)         readerFileHeaderMap.put(key.replaceAll("resol","res"),String.valueOf(value));
 else         readerFileHeaderMap.put(key,String.valueOf(value));
      }
    }
    if (readerFileHeaderMap.containsKey("n-s res")) {
      nativeRasterRegion=new JGrassRegion(Double.parseDouble(readerFileHeaderMap.get("west")),Double.parseDouble(readerFileHeaderMap.get("east")),Double.parseDouble(readerFileHeaderMap.get("south")),Double.parseDouble(readerFileHeaderMap.get("north")),Double.parseDouble(readerFileHeaderMap.get("e-w res")),Double.parseDouble(readerFileHeaderMap.get("n-s res")));
    }
 else     if (readerFileHeaderMap.containsKey("cols")) {
      nativeRasterRegion=new JGrassRegion(Double.parseDouble(readerFileHeaderMap.get("west")),Double.parseDouble(readerFileHeaderMap.get("east")),Double.parseDouble(readerFileHeaderMap.get("south")),Double.parseDouble(readerFileHeaderMap.get("north")),Integer.parseInt(readerFileHeaderMap.get("rows")),Integer.parseInt(readerFileHeaderMap.get("cols")));
    }
 else {
      throw new IOException("The map window file seems to be corrupted. Unable to read file region: " + cellhd.getAbsolutePath());
    }
    if (!readerFileHeaderMap.get("format").equals("")) {
      readerMapType=new Integer(readerFileHeaderMap.get("format")).intValue();
      if (readerMapType > -1) {
        readerMapType++;
        numberOfBytesPerValue=4;
        imageIS=ImageIO.createImageInputStream(readerGrassEnv.getCELL());
        imageNullFileIS=null;
        if (readerGrassEnv.getCELLMISC_NULL().exists()) {
          imageNullFileIS=ImageIO.createImageInputStream(readerGrassEnv.getCELLMISC_NULL());
          if (imageNullFileIS == null) {
            isOldIntegerMap=false;
          }
 else {
            isOldIntegerMap=true;
          }
        }
      }
 else       if (readerMapType < 0) {
        if (readerGrassEnv.getCELLMISC_FORMAT().exists()) {
          BufferedReader cellmiscformat=new BufferedReader(new FileReader(readerGrassEnv.getCELLMISC_FORMAT()));
          while ((line=cellmiscformat.readLine()) != null) {
            StringTokenizer tokk=new StringTokenizer(line,":");
            if (tokk.countTokens() == 2) {
              String key=tokk.nextToken().trim();
              String value=tokk.nextToken().trim();
              readerFileHeaderMap.put(key,value);
            }
          }
          if (!readerFileHeaderMap.get("type").equals("")) {
            if ((readerFileHeaderMap.get("type")).equalsIgnoreCase("double")) {
              readerMapType=-2;
              numberOfBytesPerValue=8;
            }
 else             if ((readerFileHeaderMap.get("type")).equalsIgnoreCase("float")) {
              readerMapType=-1;
              numberOfBytesPerValue=4;
            }
 else {
              throw new IOException("Wrong number type in format file: " + readerGrassEnv.getCELLMISC_FORMAT().getAbsolutePath());
            }
          }
 else {
            throw new IOException("Wrong number type in format file: " + readerGrassEnv.getCELLMISC_FORMAT().getAbsolutePath());
          }
          cellmiscformat.close();
        }
 else {
          throw new IOException("Missing required format file: " + readerGrassEnv.getCELLMISC_FORMAT().getAbsolutePath());
        }
        isOldIntegerMap=false;
        imageIS=ImageIO.createImageInputStream(readerGrassEnv.getFCELL());
        imageNullFileIS=null;
        if (readerGrassEnv.getCELLMISC_NULL().exists()) {
          imageNullFileIS=ImageIO.createImageInputStream(readerGrassEnv.getCELLMISC_NULL());
        }
      }
    }
 else {
      throw new IOException("The cellhead file seems to be corrupted: " + cellhd.getAbsolutePath());
    }
    if (!readerFileHeaderMap.get("compressed").equals("")) {
      int cmpr=Integer.parseInt(readerFileHeaderMap.get("compressed"));
      compressed=cmpr == 1 ? true : false;
    }
 else {
      throw new IOException("The cellhead file seems to be corrupted: " + cellhd.getAbsolutePath());
    }
    cellhead.close();
    parseHeader();
  }
 catch (  Exception e) {
    throw new IOException(e.getLocalizedMessage());
  }
}
