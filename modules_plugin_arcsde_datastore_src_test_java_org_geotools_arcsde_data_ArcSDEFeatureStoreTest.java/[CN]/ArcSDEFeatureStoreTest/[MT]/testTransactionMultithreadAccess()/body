{
  testData.insertTestData();
  final String typeName=testData.getTempTableName();
  final int featureCount=2;
  final SimpleFeatureCollection testFeatures=testData.createTestFeatures(LineString.class,featureCount);
  final DataStore ds=testData.getDataStore();
  final SimpleFeatureStore fStore=(SimpleFeatureStore)ds.getFeatureSource(typeName);
  final Transaction transaction=new DefaultTransaction("testTransactionMultithreadAccess");
  fStore.setTransaction(transaction);
  final boolean[] done={false,false};
  final Throwable[] errors=new Throwable[2];
  Runnable worker1=new Runnable(){
    public void run(){
      try {
        System.err.println("adding..");
        List<FeatureId> addedFids=fStore.addFeatures(testFeatures);
        System.err.println("got " + addedFids);
        final FilterFactory ff=CommonFactoryFinder.getFilterFactory(null);
        final Set<FeatureId> fids=new HashSet<FeatureId>();
        for (        FeatureId fid : addedFids) {
          fids.add(fid);
        }
        final Id newFidsFilter=ff.id(fids);
        System.err.println("querying..");
        SimpleFeatureCollection features=fStore.getFeatures(newFidsFilter);
        System.err.println("querying returned...");
        int size=features.size();
        System.err.println("Collection Size: " + size);
        assertEquals(2,size);
        System.err.println("commiting...");
        transaction.commit();
        System.err.println("commited.");
        size=fStore.getCount(new Query(typeName,newFidsFilter));
        System.err.println("Size: " + size);
        assertEquals(2,size);
      }
 catch (      Throwable e) {
        errors[0]=e;
        try {
          System.err.println("rolling back!.");
          transaction.rollback();
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
 finally {
        done[0]=true;
      }
    }
  }
;
  Runnable worker2=new Runnable(){
    public void run(){
      try {
        System.err.println("worker2 calling getFeartures()");
        SimpleFeatureCollection collection=fStore.getFeatures();
        System.err.println("worker2 opening iterator...");
        SimpleFeatureIterator features=collection.features();
        try {
          System.err.println("worker2 iterating...");
          while (features.hasNext()) {
            SimpleFeature next=features.next();
            System.out.println("**Got feature " + next.getID());
          }
          System.err.println("worker2 closing FeatureCollection");
        }
  finally {
          features.close();
        }
        System.err.println("worker2 done.");
      }
 catch (      Throwable e) {
        errors[1]=e;
      }
 finally {
        done[1]=true;
      }
    }
  }
;
  Thread thread1=new Thread(worker1,"worker1");
  Thread thread2=new Thread(worker2,"worker2");
  thread1.start();
  thread2.start();
  while (!(done[0] && done[1])) {
    Thread.sleep(100);
  }
  try {
    System.err.println("closing transaction.");
    transaction.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  Throwable worker1Error=errors[0];
  Throwable worker2Error=errors[1];
  if (worker1Error != null || worker2Error != null) {
    String errMessg="worker1: " + (worker1Error == null ? "ok." : worker1Error.getMessage());
    errMessg+=" -- worker2: " + (worker2Error == null ? "ok." : worker2Error.getMessage());
    if (worker1Error != null) {
      worker1Error.printStackTrace();
    }
    if (worker2Error != null) {
      worker2Error.printStackTrace();
    }
    fail(errMessg);
  }
}
