{
  testData.insertTestData();
  final DataStore dataStore=testData.getDataStore();
  final String typeName=testData.getTempTableName();
  final SimpleFeatureSource origional=dataStore.getFeatureSource(typeName);
  TestFeatureListener listener=new TestFeatureListener();
  origional.addFeatureListener(listener);
  assertEquals(8,origional.getCount(Query.ALL));
  final SortedSet<String> allFids=new TreeSet<String>();
  SimpleFeatureCollection collection=origional.getFeatures();
  TestProgressListener progress=new TestProgressListener();
  collection.accepts(new FeatureVisitor(){
    public void visit(    Feature feature){
      allFids.add(feature.getIdentifier().getID());
    }
  }
,progress);
  assertTrue("visitor completed",progress.completed);
  assertEquals("visitor 100%",100f,progress.progress);
  assertNull("visitor no problems",progress.exception);
  DefaultTransaction t1=new DefaultTransaction("Transaction 1");
  SimpleFeatureStore featureStore1=(SimpleFeatureStore)dataStore.getFeatureSource(typeName);
  featureStore1.setTransaction(t1);
  TestFeatureListener listener1=new TestFeatureListener();
  featureStore1.addFeatureListener(listener1);
  DefaultTransaction t2=new DefaultTransaction("Transaction 2");
  SimpleFeatureStore featureStore2=(SimpleFeatureStore)dataStore.getFeatureSource(typeName);
  featureStore2.setTransaction(t2);
  TestFeatureListener listener2=new TestFeatureListener();
  featureStore2.addFeatureListener(listener2);
  assertEquals(8,origional.getCount(Query.ALL));
  assertEquals(8,featureStore1.getCount(Query.ALL));
  assertEquals(8,featureStore2.getCount(Query.ALL));
  Query queryOneFeature=new Query();
  queryOneFeature.setTypeName(typeName);
  queryOneFeature.setFilter(Filter.INCLUDE);
  queryOneFeature.setMaxFeatures(1);
  queryOneFeature.setPropertyNames(Query.ALL_NAMES);
  collection=featureStore1.getFeatures(queryOneFeature);
  progress.reset();
  final SortedSet<String> fids=new TreeSet<String>();
  collection.accepts(new FeatureVisitor(){
    public void visit(    Feature feature){
      fids.add(feature.getIdentifier().getID());
    }
  }
,progress);
  assertTrue("visitor completed",progress.completed);
  assertEquals("visitor 100%",100f,progress.progress);
  assertNull("visitor no problems",progress.exception);
  assertEquals(1,fids.size());
  String featureId=fids.first();
  assertTrue(allFids.contains(featureId));
  FilterFactory2 ff=CommonFactoryFinder.getFilterFactory2(null);
  Filter filterOne=ff.id(Collections.singleton(ff.featureId(featureId)));
  assertEquals("no events on AUTO_COMMIT",0,listener.list.size());
  assertEquals("no events on transaction1",0,listener1.list.size());
  assertEquals("no events on transaction2",0,listener2.list.size());
  featureStore1.removeFeatures(filterOne);
  assertEquals("no events on AUTO_COMMIT",0,listener.list.size());
  assertEquals("single event on transaction2",1,listener1.list.size());
  assertEquals("no events on AUTO_COMMIT",0,listener2.list.size());
  FeatureEvent e=listener1.list.get(0);
  assertEquals(featureStore1,e.getFeatureSource());
  Id id=(Id)e.getFilter();
  assertNotNull(id);
  assertNotNull(id.getIDs());
  assertTrue(id.getIDs().contains(featureId));
  ReferencedEnvelope bounds=e.getBounds();
  assertFalse(bounds.isEmpty());
  assertFalse(bounds.isNull());
  t1.commit();
  assertEquals("commit event sent to AUTO_COMMIT",1,listener.list.size());
  assertEquals("commit event sent to transaction 1",2,listener1.list.size());
  assertEquals("commit event sent to transaction 2",listener2.list.size());
}
