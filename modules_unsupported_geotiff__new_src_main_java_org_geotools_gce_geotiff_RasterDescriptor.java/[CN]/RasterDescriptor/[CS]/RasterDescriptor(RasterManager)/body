{
  this.rasterBBOX=new ReferencedEnvelope(rasterManager.spatialDomainManager.coverageBBox);
  this.baseGridToWorld=new AffineTransform((AffineTransform)rasterManager.spatialDomainManager.coverageGridToWorld2D);
  final File granuleFile=DataUtilities.urlToFile(rasterManager.parent.sourceURL);
  ImageInputStream inStream=null;
  ImageReader reader=null;
  try {
    inStream=ImageIOExt.createImageInputStream(granuleFile);
    if (inStream == null) {
      throw new IllegalArgumentException("Unable to get an input stream for the provided file " + granuleFile.toString());
    }
    reader=Utils.TIFFREADERFACTORY.createReaderInstance();
    reader.setInput(inStream);
    ImageInputStreamSpi streamSPI=ImageIOExt.getImageInputStreamSPI(granuleFile);
    int numRasters=reader.getNumImages(true);
    int i=0;
    int baseLevelWidth=-1, baseLevelHeight=-1;
    for (; i < numRasters; i++) {
      final int width=reader.getWidth(i);
      final int height=reader.getHeight(i);
      if (i == 0) {
        baseLevelWidth=width;
        baseLevelHeight=height;
        this.levels.add(new RasterLevelDescriptor(ImageReaderSource.wrapFile(i,granuleFile,streamSPI,Utils.TIFFREADERFACTORY),1,1,new RasterLayout(0,0,width,height,reader.getTileGridXOffset(i),reader.getTileGridYOffset(i),reader.getTileWidth(i),reader.getTileHeight(i))));
      }
 else {
        final double scaleX=baseLevelWidth / (1.0 * width);
        final double scaleY=baseLevelHeight / (1.0 * height);
        this.levels.add(new RasterLevelDescriptor(ImageReaderSource.wrapFile(i,granuleFile,streamSPI,Utils.TIFFREADERFACTORY),scaleX,scaleY,new RasterLayout(0,0,width,height,reader.getTileGridXOffset(i),reader.getTileGridYOffset(i),reader.getTileWidth(i),reader.getTileHeight(i))));
      }
    }
    if (rasterManager.parent.extOvrImgChoice >= 0) {
      try {
        if (inStream != null) {
          inStream.close();
        }
      }
 catch (      Throwable e) {
      }
      try {
        if (reader != null)         reader.dispose();
      }
 catch (      Throwable e) {
      }
      inStream=rasterManager.parent.ovrInStreamSPI.createInputStreamInstance(rasterManager.parent.ovrSource,ImageIO.getUseCache(),ImageIO.getCacheDirectory());
      if (inStream == null) {
        throw new IllegalArgumentException("Unable to get an input stream for the provided file " + granuleFile.toString());
      }
      streamSPI=ImageIOExt.getImageInputStreamSPI(rasterManager.parent.ovrSource);
      reader=Utils.TIFFREADERFACTORY.createReaderInstance();
      reader.setInput(inStream);
      numRasters=reader.getNumImages(true);
      for (int k=0; k < numRasters; k++, i++) {
        final int width=reader.getWidth(k);
        final int height=reader.getHeight(k);
        final double scaleX=baseLevelWidth / (1.0 * width);
        final double scaleY=baseLevelHeight / (1.0 * height);
        this.levels.add(new RasterLevelDescriptor(ImageReaderSource.wrapFile(k,rasterManager.parent.ovrSource,rasterManager.parent.ovrInStreamSPI,Utils.TIFFREADERFACTORY),scaleX,scaleY,new RasterLayout(0,0,width,height,reader.getTileGridXOffset(k),reader.getTileGridYOffset(k),reader.getTileWidth(k),reader.getTileHeight(k))));
      }
    }
  }
 catch (  IllegalStateException e) {
    throw new IllegalArgumentException(e);
  }
catch (  IOException e) {
    throw new IllegalArgumentException(e);
  }
 finally {
    try {
      if (inStream != null) {
        inStream.close();
      }
    }
 catch (    Throwable e) {
      throw new IllegalArgumentException(e);
    }
 finally {
      if (reader != null)       reader.dispose();
    }
  }
}
