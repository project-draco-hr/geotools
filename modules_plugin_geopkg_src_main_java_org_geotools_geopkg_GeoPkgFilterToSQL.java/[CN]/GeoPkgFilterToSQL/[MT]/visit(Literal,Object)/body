{
  if (!isPrepareEnabled())   return super.visit(expression,context);
  Object literalValue=evaluateLiteral(expression,(context instanceof Class ? (Class)context : null));
  literalValues.add(literalValue);
  SRIDs.add(currentSRID);
  dimensions.add(currentDimension);
  Class clazz=null;
  if (context instanceof Class)   clazz=(Class)context;
 else   if (literalValue != null)   clazz=literalValue.getClass();
  literalTypes.add(clazz);
  try {
    if (literalValue == null || dialect == null) {
      out.write("?");
    }
 else {
      StringBuffer sb=new StringBuffer();
      if (Geometry.class.isAssignableFrom(literalValue.getClass())) {
        int srid=currentSRID != null ? currentSRID : -1;
        int dimension=currentDimension != null ? currentDimension : -1;
        dialect.prepareGeometryValue((Geometry)literalValue,dimension,srid,Geometry.class,sb);
      }
 else       if (Time.class.isAssignableFrom(literalValue.getClass())) {
        sb.append("time(?,'localtime')");
      }
 else       if (Timestamp.class.isAssignableFrom(literalValue.getClass())) {
        sb.append("datetime(?,'localtime')");
      }
 else       if (java.sql.Date.class.isAssignableFrom(literalValue.getClass())) {
        sb.append("date(?,'localtime')");
      }
 else       if (encodingFunction) {
        dialect.prepareFunctionArgument(clazz,sb);
      }
 else {
        sb.append("?");
      }
      out.write(sb.toString());
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return context;
}
