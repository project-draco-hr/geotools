{
  SimpleFeatureTypeBuilder ftb=new SimpleFeatureTypeBuilder();
  ftb.setName("Junk");
  ftb.add("a",geom.getClass());
  SimpleFeatureType type=ftb.buildFeatureType();
  SimpleFeatureCollection features=FeatureCollections.newCollection();
  for (int i=0, ii=20; i < ii; i++) {
    SimpleFeature feature=SimpleFeatureBuilder.build(type,new Object[]{geom.clone()},null);
    features.add(feature);
  }
  File tmpFile=getTempFile();
  tmpFile.delete();
  IndexedShapefileDataStore s=new IndexedShapefileDataStore(tmpFile.toURI().toURL());
  s.createSchema(type);
  writeFeatures(s,features);
  s.dispose();
  s=new IndexedShapefileDataStore(tmpFile.toURI().toURL());
  SimpleFeatureCollection fc=loadFeatures(s);
  SimpleFeatureIterator fci=fc.features();
  while (fci.hasNext()) {
    SimpleFeature f=fci.next();
    Geometry fromShape=(Geometry)f.getDefaultGeometry();
    if (fromShape instanceof GeometryCollection) {
      if (!(geom instanceof GeometryCollection)) {
        fromShape=((GeometryCollection)fromShape).getGeometryN(0);
      }
    }
    try {
      Coordinate[] c1=geom.getCoordinates();
      Coordinate[] c2=fromShape.getCoordinates();
      for (int cc=0, ccc=c1.length; cc < ccc; cc++) {
        if (d3) {
          assertTrue(c1[cc].equals3D(c2[cc]));
        }
 else {
          assertTrue(c1[cc].equals2D(c2[cc]));
        }
      }
    }
 catch (    Throwable t) {
      fail("Bogus : " + Arrays.asList(geom.getCoordinates()) + " : "+ Arrays.asList(fromShape.getCoordinates()));
    }
  }
  s.dispose();
  tmpFile.delete();
}
