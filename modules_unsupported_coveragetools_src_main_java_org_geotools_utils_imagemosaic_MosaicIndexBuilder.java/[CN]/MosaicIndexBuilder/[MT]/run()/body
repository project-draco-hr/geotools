{
  FileHandler handler=null;
  try {
    boolean append=true;
    handler=new FileHandler(new StringBuffer(locationPath).append("/error.txt").toString(),append);
    handler.setLevel(Level.SEVERE);
    LOGGER.addHandler(handler);
    final Set<String> skipFiles=new HashSet<String>(Arrays.asList(new String[]{indexName + ".shp",indexName + ".dbf",indexName + ".shx",indexName + ".prj","error.txt","error.txt.lck",indexName + ".properties"}));
    ShapefileDataStore index=null;
    Transaction t=new DefaultTransaction();
    PrecisionModel precMod=new PrecisionModel(PrecisionModel.FLOATING);
    GeometryFactory geomFactory=new GeometryFactory(precMod);
    try {
      index=new ShapefileDataStore(new File(locationPath + File.separator + indexName+ ".shp").toURI().toURL());
    }
 catch (    MalformedURLException ex) {
      if (LOGGER.isLoggable(Level.SEVERE))       LOGGER.log(Level.SEVERE,ex.getLocalizedMessage(),ex);
      fireException(ex);
      return;
    }
    final List<File> files=new ArrayList<File>();
    recurse(files,locationPath);
    numFiles=files.size();
    String validFileName=null;
    final Iterator<File> filesIt=files.iterator();
    FeatureWriter<SimpleFeatureType,SimpleFeature> fw=null;
    boolean doneSomething=false;
    for (int i=0; i < numFiles; i++) {
      StringBuffer message;
      final File fileBeingProcessed=((File)filesIt.next());
      if (!fileBeingProcessed.exists() || !fileBeingProcessed.canRead() || !fileBeingProcessed.isFile()) {
        message=new StringBuffer("Skipped file ").append(files.get(i)).append(" snce it seems invalid.");
        if (LOGGER.isLoggable(Level.INFO))         LOGGER.info(message.toString());
        fireEvent(message.toString(),((i * 99.0) / numFiles));
        continue;
      }
      if (getStopThread()) {
        message=new StringBuffer("Stopping requested at file  ").append(i).append(" of ").append(numFiles).append(" files");
        if (LOGGER.isLoggable(Level.FINE)) {
          LOGGER.fine(message.toString());
        }
        fireEvent(message.toString(),((i * 100.0) / numFiles));
        return;
      }
      try {
        validFileName=fileBeingProcessed.getCanonicalPath();
      }
 catch (      IOException e1) {
        fireException(e1);
        return;
      }
      validFileName=validFileName.replace('\\','/');
      validFileName=validFileName.substring(locationPath.length() + 1,fileBeingProcessed.getAbsolutePath().length());
      if (skipFiles.contains(validFileName))       continue;
      message=new StringBuffer("Now indexing file ").append(validFileName);
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.fine(message.toString());
      }
      fireEvent(message.toString(),((i * 100.0) / numFiles));
      try {
        ImageInputStream inStream=ImageIO.createImageInputStream(fileBeingProcessed);
        if (inStream == null) {
          if (LOGGER.isLoggable(Level.SEVERE))           LOGGER.severe(fileBeingProcessed + " has been skipped since we could not get a stream for it");
          continue;
        }
        inStream.mark();
        final Iterator<ImageReader> it=ImageIO.getImageReaders(inStream);
        ImageReader r=null;
        if (it.hasNext()) {
          r=(ImageReader)it.next();
          r.setInput(inStream);
        }
 else {
          try {
            inStream.close();
          }
 catch (          Exception e) {
          }
          message=new StringBuffer("Skipped file ").append(files.get(i)).append(":No ImageIO readeres avalaible.");
          if (LOGGER.isLoggable(Level.INFO))           LOGGER.info(message.toString());
          fireEvent(message.toString(),((i * 99.0) / numFiles));
          continue;
        }
        if (LOGGER.isLoggable(Level.FINE))         LOGGER.fine(new StringBuffer("Getting a reader").toString());
        final AbstractGridFormat format=(AbstractGridFormat)GridFormatFinder.findFormat(files.get(i));
        if (format == null || !format.accepts(files.get(i))) {
          try {
            inStream.close();
          }
 catch (          Exception e) {
          }
          try {
            r.dispose();
          }
 catch (          Exception e) {
          }
          message=new StringBuffer("Skipped file ").append(files.get(i)).append(": File format is not supported.");
          if (LOGGER.isLoggable(Level.INFO))           LOGGER.info(message.toString());
          fireEvent(message.toString(),((i * 99.0) / numFiles));
          continue;
        }
        final AbstractGridCoverage2DReader reader=(AbstractGridCoverage2DReader)format.getReader(files.get(i));
        envelope=(GeneralEnvelope)reader.getOriginalEnvelope();
        actualCRS=reader.getCrs();
        final ImageTypeSpecifier its=((ImageTypeSpecifier)r.getImageTypes(0).next());
        boolean skipFeature=false;
        if (globEnvelope == null) {
          defaultCM=its.getColorModel();
          if (defaultCM instanceof IndexColorModel) {
            IndexColorModel icm=(IndexColorModel)defaultCM;
            int numBands=defaultCM.getNumColorComponents();
            defaultPalette=new byte[3][icm.getMapSize()];
            icm.getReds(defaultPalette[0]);
            icm.getGreens(defaultPalette[0]);
            icm.getBlues(defaultPalette[0]);
            if (numBands == 4)             icm.getAlphas(defaultPalette[0]);
          }
          defaultSM=its.getSampleModel();
          defaultCRS=actualCRS;
          globEnvelope=new GeneralEnvelope(envelope);
          r.reset();
          try {
            inStream.reset();
          }
 catch (          IOException e) {
            inStream=ImageIO.createImageInputStream(fileBeingProcessed);
          }
          if (inStream == null) {
            if (LOGGER.isLoggable(Level.WARNING))             LOGGER.warning("Skipping file " + fileBeingProcessed.toString());
            continue;
          }
          r.setInput(inStream);
          numberOfLevels=r.getNumImages(true);
          resolutionLevels=new double[2][numberOfLevels];
          double[] res=getResolution(envelope,new Rectangle(r.getWidth(0),r.getHeight(0)),defaultCRS);
          resolutionLevels[0][0]=res[0];
          resolutionLevels[1][0]=res[1];
          if (numberOfLevels > 1) {
            for (int k=0; k < numberOfLevels; k++) {
              res=getResolution(envelope,new Rectangle(r.getWidth(k),r.getHeight(k)),defaultCRS);
              resolutionLevels[0][k]=res[0];
              resolutionLevels[1][k]=res[1];
            }
          }
          final SimpleFeatureTypeBuilder featureBuilder=new SimpleFeatureTypeBuilder();
          featureBuilder.setName("Flag");
          featureBuilder.setNamespaceURI("http://www.geo-solutions.it/");
          featureBuilder.add("location",String.class);
          featureBuilder.add("the_geom",Polygon.class,this.actualCRS);
          featureBuilder.setDefaultGeometry("the_geom");
          final SimpleFeatureType simpleFeatureType=featureBuilder.buildFeatureType();
          index.createSchema(simpleFeatureType);
          fw=index.getFeatureWriter(t);
        }
 else {
          globEnvelope.add(envelope);
          actualCM=its.getColorModel();
          actualSM=its.getSampleModel();
          skipFeature=(i > 0 ? !(CRS.equalsIgnoreMetadata(defaultCRS,actualCRS)) : false);
          if (skipFeature)           LOGGER.warning(new StringBuffer("Skipping image ").append(files.get(i)).append(" because CRSs do not match.").toString());
          skipFeature=checkColorModels(defaultCM,defaultPalette,actualCM);
          if (skipFeature)           LOGGER.warning(new StringBuffer("Skipping image ").append(files.get(i)).append(" because color models do not match.").toString());
        }
        if (!skipFeature) {
          final SimpleFeature feature=fw.next();
          feature.setAttribute(1,geomFactory.toGeometry(new ReferencedEnvelope((Envelope)envelope)));
          feature.setAttribute(0,absolute ? new StringBuilder(this.locationPath).append(File.separatorChar).append(validFileName).toString() : validFileName);
          fw.write();
          message=new StringBuffer("Done with file ").append(files.get(i));
          if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine(message.toString());
          }
          message.append('\n');
          fireEvent(message.toString(),(((i + 1) * 99.0) / numFiles));
          doneSomething=true;
        }
 else         skipFeature=false;
        try {
          inStream.close();
        }
 catch (        Exception e) {
        }
        try {
          r.dispose();
        }
 catch (        Exception e) {
        }
        reader.dispose();
      }
 catch (      IOException e) {
        fireException(e);
        break;
      }
catch (      ArrayIndexOutOfBoundsException e) {
        fireException(e);
        break;
      }
    }
    try {
      if (fw != null)       fw.close();
      t.commit();
      t.close();
      index.dispose();
    }
 catch (    IOException e) {
      LOGGER.log(Level.SEVERE,e.getLocalizedMessage(),e);
    }
    createPropertiesFiles(globEnvelope,doneSomething);
  }
 catch (  SecurityException el) {
    fireException(el);
    return;
  }
catch (  IOException el) {
    fireException(el);
    return;
  }
 finally {
    try {
      if (handler != null)       handler.close();
    }
 catch (    Throwable e) {
    }
  }
}
