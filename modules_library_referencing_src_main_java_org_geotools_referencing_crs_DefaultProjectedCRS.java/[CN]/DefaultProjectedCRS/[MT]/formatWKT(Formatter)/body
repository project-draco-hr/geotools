{
  final Ellipsoid ellipsoid=((GeodeticDatum)datum).getEllipsoid();
  @SuppressWarnings("unchecked") final Unit<Length> unit=(Unit)getUnit();
  final Unit<Length> linearUnit=formatter.getLinearUnit();
  final Unit<Angle> angularUnit=formatter.getAngularUnit();
  final Unit<Length> axisUnit=ellipsoid.getAxisUnit();
  formatter.setLinearUnit(unit);
  formatter.setAngularUnit(DefaultGeographicCRS.getAngularUnit(baseCRS.getCoordinateSystem()));
  formatter.append(baseCRS);
  formatter.append(conversionFromBase.getMethod());
  for (  final GeneralParameterValue param : conversionFromBase.getParameterValues().values()) {
    final GeneralParameterDescriptor desc=param.getDescriptor();
    String name;
    if (nameMatches(desc,name=SEMI_MAJOR) || nameMatches(desc,name=SEMI_MINOR)) {
      if (param instanceof ParameterValue) {
        final double value=((ParameterValue<?>)param).doubleValue(axisUnit);
        final double expected=(name == SEMI_MINOR) ? ellipsoid.getSemiMinorAxis() : ellipsoid.getSemiMajorAxis();
        if (value == expected) {
          continue;
        }
      }
    }
    formatter.append(param);
  }
  formatter.append(unit);
  final int dimension=coordinateSystem.getDimension();
  for (int i=0; i < dimension; i++) {
    formatter.append(coordinateSystem.getAxis(i));
  }
  if (unit == null) {
    formatter.setInvalidWKT(ProjectedCRS.class);
  }
  formatter.setAngularUnit(angularUnit);
  formatter.setLinearUnit(linearUnit);
  return "PROJCS";
}
