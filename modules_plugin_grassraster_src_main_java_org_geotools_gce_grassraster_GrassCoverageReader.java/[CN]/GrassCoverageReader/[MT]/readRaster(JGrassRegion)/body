{
  HashMap<String,String> metaDataTable=((GrassBinaryImageMetadata)imageReader.getImageMetadata(0)).toHashMap();
  double fileNorth=Double.parseDouble(metaDataTable.get(GrassBinaryImageMetadata.NORTH));
  double fileSouth=Double.parseDouble(metaDataTable.get(GrassBinaryImageMetadata.SOUTH));
  double fileEast=Double.parseDouble(metaDataTable.get(GrassBinaryImageMetadata.EAST));
  double fileWest=Double.parseDouble(metaDataTable.get(GrassBinaryImageMetadata.WEST));
  int fileRows=Integer.parseInt(metaDataTable.get(GrassBinaryImageMetadata.NROWS));
  int fileCols=Integer.parseInt(metaDataTable.get(GrassBinaryImageMetadata.NCOLS));
  CoordinateReferenceSystem crs=DefaultGeographicCRS.WGS84;
  try {
    crs=CRS.parseWKT(metaDataTable.get(GrassBinaryImageMetadata.CRS));
  }
 catch (  FactoryException e) {
    throw new IOException(e.getLocalizedMessage());
  }
  ImageReadParam imageReadParam=new ImageReadParam();
  Envelope requestedRegionEnvelope=null;
  Rectangle sourceRegion=null;
  int requestedRows=0;
  int requestedCols=0;
  double requestedWest=-1;
  double requestedEast=-1;
  double requestedSouth=-1;
  double requestedNorth=-1;
  double requestedXres=-1;
  double requestedYres=-1;
  int subSamplingX=1;
  int subSamplingY=1;
  double xDeltaW=0;
  double xDeltaE=0;
  double yDeltaN=0;
  double yDeltaS=0;
  double tmpDxW=0.0;
  double tmpDyS=0.0;
  double tmpDyN=0.0;
  double tmpDxE=0.0;
  int xPaddingSx=0;
  int yPaddingTop=0;
  if (region != null) {
    requestedRows=region.getRows();
    requestedCols=region.getCols();
    requestedWest=region.getWest();
    requestedEast=region.getEast();
    requestedSouth=region.getSouth();
    requestedNorth=region.getNorth();
    requestedXres=region.getWEResolution();
    requestedYres=region.getNSResolution();
    double scaleX=fileCols / (fileEast - fileWest);
    double scaleY=fileRows / (fileNorth - fileSouth);
    double EPS=1E-7;
    int xmin=(int)Math.floor((requestedWest - fileWest) * scaleX + EPS);
    int xmax=(int)Math.ceil((requestedEast - fileWest) * scaleX - EPS);
    int ymin=(int)Math.floor((fileNorth - requestedNorth) * scaleY + EPS);
    int ymax=(int)Math.ceil((fileNorth - requestedSouth) * scaleY - EPS);
    if (xmin < 0) {
      xPaddingSx=xmin;
      xmin=0;
    }
    if (ymin < 0) {
      yPaddingTop=ymin;
      ymin=0;
    }
    sourceRegion=new Rectangle(xmin,ymin,(xmax - xmin),ymax - ymin);
    requestedRegionEnvelope=new Envelope2D(crs,requestedWest,requestedSouth,requestedEast - requestedWest,requestedNorth - requestedSouth);
    xDeltaW=requestedWest - fileWest;
    yDeltaS=requestedSouth - fileSouth;
    xDeltaE=requestedEast - fileEast;
    yDeltaN=requestedNorth - fileNorth;
    tmpDxW=xDeltaW > 0.0 ? 0.0 : xDeltaW;
    tmpDyS=yDeltaS > 0.0 ? 0.0 : yDeltaS;
    tmpDyN=yDeltaN < 0.0 ? 0.0 : yDeltaN;
    tmpDxE=xDeltaE < 0.0 ? 0.0 : xDeltaE;
    if (!useSubSamplingAsRequestedColsRows) {
      JGrassRegion tmpRegion=new JGrassRegion(region);
      tmpRegion.setWEResolution((fileEast - fileWest) / (double)fileCols);
      tmpRegion.setNSResolution((fileNorth - fileSouth) / (double)fileRows);
      subSamplingX=(int)Math.floor((double)tmpRegion.getCols() / (double)requestedCols);
      subSamplingY=(int)Math.floor((double)tmpRegion.getRows() / (double)requestedRows);
      if (subSamplingX == 0)       subSamplingX=1;
      if (subSamplingY == 0)       subSamplingY=1;
      if (subSamplingX != subSamplingY) {
        if (subSamplingX < subSamplingY) {
          subSamplingY=subSamplingX;
        }
 else {
          subSamplingX=subSamplingY;
        }
      }
    }
 else {
      double sourceCols=(requestedEast - requestedWest) / (1 + (xPaddingSx / (xmax - xmin))) / requestedXres;
      double sourceRows=(requestedNorth - requestedSouth) / (1 + (yPaddingTop / (ymax - ymin))) / requestedYres;
      sourceCols=sourceCols + xPaddingSx;
      sourceRows=sourceRows + yPaddingTop;
      subSamplingX=(int)Math.round(sourceCols);
      subSamplingY=(int)Math.round(sourceRows);
      if (subSamplingX < 1) {
        subSamplingX=1;
      }
      if (subSamplingY < 1) {
        subSamplingY=1;
      }
    }
  }
 else {
    requestedRows=fileRows;
    requestedCols=fileCols;
    requestedWest=fileWest;
    requestedEast=fileEast;
    requestedSouth=fileSouth;
    requestedNorth=fileNorth;
    double scaleX=fileCols / (fileEast - fileWest);
    double scaleY=fileRows / (fileNorth - fileSouth);
    double EPS=1E-6;
    int xmin=(int)Math.floor((requestedWest - fileWest) * scaleX + EPS);
    int xmax=(int)Math.ceil((requestedEast - fileWest) * scaleX - EPS);
    int ymin=(int)Math.floor((fileNorth - requestedNorth) * scaleY + EPS);
    int ymax=(int)Math.ceil((fileNorth - requestedSouth) * scaleY - EPS);
    sourceRegion=new Rectangle(xmin,ymin,(xmax - xmin),ymax - ymin);
    requestedRegionEnvelope=new Envelope2D(crs,requestedWest,requestedSouth,requestedEast - requestedWest,requestedNorth - requestedSouth);
    if (!useSubSamplingAsRequestedColsRows) {
      subSamplingX=1;
      subSamplingY=1;
    }
 else {
      subSamplingX=fileCols;
      subSamplingY=fileRows;
    }
  }
  if (sourceRegion.getWidth() <= 0 || sourceRegion.getHeight() <= 0) {
    return null;
  }
  imageReadParam.setSourceRegion(sourceRegion);
  imageReadParam.setSourceSubsampling(subSamplingX,subSamplingY,0,0);
  RenderedImage finalImage=null;
  BufferedImage image=imageReader.read(0,imageReadParam,useSubSamplingAsRequestedColsRows,castDoubleToFloating,monitor);
  imageReader.dispose();
  int imageWidth=image.getWidth();
  int imageHeight=image.getHeight();
  if (requestedSouth < fileSouth || requestedWest < fileWest || requestedEast > fileEast || requestedNorth > fileNorth) {
    double totalHeigth=(requestedNorth - tmpDyN) - (requestedSouth - tmpDyS);
    int xPaddingDx=0;
    if (xDeltaE > 0) {
      xPaddingDx=(int)Math.round(xDeltaE * (double)imageWidth / ((requestedEast - tmpDxE) - (requestedWest - tmpDxW)));
    }
    int yPaddingBottom=0;
    if (yDeltaS < 0) {
      yPaddingBottom=(int)Math.round(yDeltaS * (double)imageHeight / (totalHeigth));
    }
    RenderedImage translatedImage=setPadding(xPaddingSx,xPaddingDx,yPaddingTop,yPaddingBottom,image);
    if (requestedRows != imageHeight || requestedCols != imageWidth) {
      finalImage=JGrassUtilities.scaleJAIImage(requestedCols,requestedRows,translatedImage,interpolation);
    }
 else {
      finalImage=translatedImage;
    }
  }
 else   if (requestedRows != imageHeight || requestedCols != imageWidth) {
    finalImage=JGrassUtilities.scaleJAIImage(requestedCols,requestedRows,image,interpolation);
  }
 else {
    finalImage=image;
  }
  if (finalImage instanceof RenderedOp) {
    RenderedOp rOp=(RenderedOp)finalImage;
    finalImage=rOp.getAsBufferedImage();
  }
  double min=JGrassMapEnvironment.defaultMapMin;
  double max=JGrassMapEnvironment.defaultMapMax;
  File rangeFile=jgMapEnvironment.getCELLMISC_RANGE();
  if (rangeFile.exists()) {
    InputStream is=new FileInputStream(rangeFile);
    byte[] numbers=new byte[16];
    int testread=is.read(numbers);
    is.close();
    if (testread == 16) {
      ByteBuffer rangeBuffer=ByteBuffer.wrap(numbers);
      min=rangeBuffer.getDouble();
      max=rangeBuffer.getDouble();
    }
  }
  range=new double[]{min,max};
  GridSampleDimension band=createGridSampleDimension(metaDataTable,range);
  band=band.geophysics(true);
  GridToEnvelopeMapper g2eMapper=new GridToEnvelopeMapper();
  g2eMapper.setEnvelope(requestedRegionEnvelope);
  g2eMapper.setGridRange(new GridEnvelope2D(0,0,requestedCols,requestedRows));
  g2eMapper.setPixelAnchor(cellAnchor);
  MathTransform gridToEnvelopeTransform=g2eMapper.createTransform();
  GridCoverageFactory factory=CoverageFactoryFinder.getGridCoverageFactory(GeoTools.getDefaultHints());
  GridCoverage2D coverage2D=factory.create(name,finalImage,crs,gridToEnvelopeTransform,new GridSampleDimension[]{band},null,null);
  return coverage2D;
}
