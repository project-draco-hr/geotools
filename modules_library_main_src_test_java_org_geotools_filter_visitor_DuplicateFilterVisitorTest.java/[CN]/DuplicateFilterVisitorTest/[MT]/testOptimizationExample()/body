{
  Expression add=fac.add(fac.literal(1),fac.literal(2));
class Optimization extends DuplicatingFilterVisitor {
    public Object visit(    Add expression,    Object extraData){
      Expression expr1=expression.getExpression1();
      Expression expr2=expression.getExpression2();
      if (expr1 instanceof Literal && expr2 instanceof Literal) {
        Double number1=(Double)expr1.evaluate(null,Double.class);
        Double number2=(Double)expr2.evaluate(null,Double.class);
        return ff.literal(number1.doubleValue() + number2.doubleValue());
      }
      return super.visit(expression,extraData);
    }
  }
  ;
  Expression modified=(Expression)add.accept(new Optimization(),null);
  assertTrue(modified instanceof Literal);
}
