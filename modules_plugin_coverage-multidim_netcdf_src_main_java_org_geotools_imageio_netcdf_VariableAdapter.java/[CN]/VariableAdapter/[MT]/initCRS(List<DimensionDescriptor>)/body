{
  this.coordinateSystem=NetCDFCRSUtilities.getCoordinateSystem(variableDS);
  if (coordinateSystem == null) {
    throw new IllegalArgumentException("Provided CoordinateSystem is null");
  }
  coordinateSystem=new CoordinateSystemAdapter(coordinateSystem);
  final List<CoordinateVariable<?>> otherAxes=new ArrayList<CoordinateVariable<?>>();
  int index=-1;
  for (  CoordinateAxis axis : coordinateSystem.getCoordinateAxes()) {
    index++;
    String fullName=axis.getFullName();
    if (NetCDFUtilities.getIgnoredDimensions().contains(fullName)) {
      ignoredDimensions.add(fullName);
      continue;
    }
    CoordinateVariable<?> cv=reader.georeferencing.getCoordinateVariable(axis.getShortName());
    if (cv == null) {
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.fine("Unable to find a coordinate variable for " + fullName);
      }
      index--;
      continue;
    }
switch (cv.getAxisType()) {
case Time:
case RunTime:
      initTemporalDomain(cv,dimensions);
    tDimensionIndex=index;
  continue;
case GeoZ:
case Height:
case Pressure:
String axisName=cv.getName();
if (NetCDFCRSUtilities.VERTICAL_AXIS_NAMES.contains(axisName)) {
initVerticalDomain(cv,dimensions);
}
 else {
otherAxes.add(cv);
}
zDimensionIndex=index;
continue;
case GeoX:
case GeoY:
case Lat:
case Lon:
continue;
default :
otherAxes.add(cv);
}
}
ReferencedEnvelope bbox=reader.georeferencing.getBoundingBox(variableDS.getShortName());
coordinateReferenceSystem=bbox.getCoordinateReferenceSystem();
return otherAxes;
}
