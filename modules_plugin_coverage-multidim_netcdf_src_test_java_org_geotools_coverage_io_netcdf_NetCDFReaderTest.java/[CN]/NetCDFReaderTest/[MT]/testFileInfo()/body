{
  File nc2=new File(TestData.file(this,"."),"nc2");
  if (nc2.exists()) {
    FileUtils.deleteDirectory(nc2);
  }
  assertTrue(nc2.mkdirs());
  File file=TestData.file(this,"O3-NO2.nc");
  FileUtils.copyFileToDirectory(file,nc2);
  file=new File(nc2,"O3-NO2.nc");
  final Hints hints=new Hints(Hints.DEFAULT_COORDINATE_REFERENCE_SYSTEM,CRS.decode("EPSG:4326",true));
  final AbstractGridFormat format=(AbstractGridFormat)GridFormatFinder.findFormat(file.toURI().toURL(),hints);
  final NetCDFReader reader=(NetCDFReader)format.getReader(file.toURI().toURL(),hints);
  assertNotNull(format);
  CloseableIterator<FileGroup> files=null;
  try {
    String[] names=reader.getGridCoverageNames();
    names=new String[]{names[1]};
    for (    String coverageName : names) {
      final String[] metadataNames=reader.getMetadataNames(coverageName);
      assertNotNull(metadataNames);
      assertEquals(metadataNames.length,12);
      ResourceInfo info=reader.getInfo(coverageName);
      assertTrue(info instanceof FileResourceInfo);
      FileResourceInfo fileInfo=(FileResourceInfo)info;
      files=fileInfo.getFiles(null);
      int fileGroups=0;
      FileGroup fg=null;
      while (files.hasNext()) {
        fg=files.next();
        fileGroups++;
      }
      assertEquals(1,fileGroups);
      File mainFile=fg.getMainFile();
      assertEquals("O3-NO2",FilenameUtils.getBaseName(mainFile.getAbsolutePath()));
      Map<String,Object> metadata=fg.getMetadata();
      assertNotNull(metadata);
      assertFalse(metadata.isEmpty());
      Set<String> keys=metadata.keySet();
      assertEquals(3,keys.size());
      final SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.sss'Z'");
      sdf.setTimeZone(TimeZone.getTimeZone("GMT+0"));
      Date start=sdf.parse("2012-04-01T00:00:00.000Z");
      Date end=sdf.parse("2012-04-01T01:00:00.000Z");
      DateRange timeRange=new DateRange(start,end);
      assertEquals(timeRange,metadata.get(Utils.TIME_DOMAIN));
      NumberRange<Double> elevationRange=NumberRange.create(10.0,450.0);
      assertEquals(elevationRange,metadata.get(Utils.ELEVATION_DOMAIN));
    }
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
 finally {
    if (files != null) {
      files.close();
    }
    if (reader != null) {
      try {
        reader.dispose();
      }
 catch (      Throwable t) {
      }
    }
  }
}
