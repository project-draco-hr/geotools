{
  out.println();
  out.println("Testing CRS creations");
  out.println("---------------------");
  out.println();
  out.println("create Coodinate Reference System....1: ");
  final DatumFactory datumFactory=ReferencingFactoryFinder.getDatumFactory(null);
  final CSFactory csFactory=ReferencingFactoryFinder.getCSFactory(null);
  final CRSFactory crsFactory=ReferencingFactoryFinder.getCRSFactory(null);
  final MathTransformFactory mtFactory=ReferencingFactoryFinder.getMathTransformFactory(null);
  final Ellipsoid airy1830;
  final Unit<Length> meters=SI.METER;
  airy1830=datumFactory.createEllipsoid(name("Airy1830"),6377563.396,6356256.910,meters);
  out.println();
  out.println("create Coodinate Reference System....2: ");
  out.println(airy1830.toWKT());
  final PrimeMeridian greenwich;
  final Unit<Angle> degrees=NonSI.DEGREE_ANGLE;
  greenwich=datumFactory.createPrimeMeridian(name("Greenwich"),0,degrees);
  out.println();
  out.println("create Coodinate Reference System....3: ");
  out.println(greenwich.toWKT());
  final GeodeticDatum datum;
  datum=datumFactory.createGeodeticDatum(name("Airy1830"),airy1830,greenwich);
  out.println();
  out.println("create Coodinate Reference System....4: ");
  out.println(datum.toWKT());
  final EllipsoidalCS ellCS;
  ellCS=csFactory.createEllipsoidalCS(name("Ellipsoidal"),csFactory.createCoordinateSystemAxis(name("Longitude"),"long",AxisDirection.EAST,degrees),csFactory.createCoordinateSystemAxis(name("Latitude"),"lat",AxisDirection.NORTH,degrees));
  out.println();
  out.println("create Coodinate Reference System....5: ");
  out.println(ellCS);
  final GeographicCRS geogCRS;
  geogCRS=crsFactory.createGeographicCRS(name("Airy1830"),datum,ellCS);
  out.println();
  out.println("create Coodinate Reference System....6: ");
  out.println(geogCRS.toWKT());
  final MathTransform p;
  final ParameterValueGroup param=mtFactory.getDefaultParameters("Transverse_Mercator");
  param.parameter("semi_major").setValue(airy1830.getSemiMajorAxis());
  param.parameter("semi_minor").setValue(airy1830.getSemiMinorAxis());
  param.parameter("central_meridian").setValue(49);
  param.parameter("latitude_of_origin").setValue(-2);
  param.parameter("false_easting").setValue(400000);
  param.parameter("false_northing").setValue(-100000);
  out.println();
  out.println("create Coodinate System....7: ");
  out.println(param);
  final CartesianCS cartCS;
  cartCS=csFactory.createCartesianCS(name("Cartesian"),csFactory.createCoordinateSystemAxis(name("Easting"),"x",AxisDirection.EAST,meters),csFactory.createCoordinateSystemAxis(name("Northing"),"y",AxisDirection.NORTH,meters));
  out.println();
  out.println("create Coodinate Reference System....8: ");
  out.println(cartCS);
  final Hints hints=new Hints();
  hints.put(Hints.DATUM_FACTORY,datumFactory);
  hints.put(Hints.CS_FACTORY,csFactory);
  hints.put(Hints.CRS_FACTORY,crsFactory);
  hints.put(Hints.MATH_TRANSFORM_FACTORY,mtFactory);
  final ReferencingFactoryContainer container=new ReferencingFactoryContainer(hints);
  assertSame(datumFactory,container.getDatumFactory());
  assertSame(csFactory,container.getCSFactory());
  assertSame(crsFactory,container.getCRSFactory());
  assertSame(mtFactory,container.getMathTransformFactory());
  final Conversion conversion=new DefiningConversion("GBN grid",param);
  final ProjectedCRS projCRS=crsFactory.createProjectedCRS(name("Great_Britian_National_Grid"),geogCRS,conversion,cartCS);
  out.println();
  out.println("create Coodinate System....9: ");
  out.println(projCRS.toWKT());
}
