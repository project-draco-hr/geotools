{
  SimpleFeatureSource road=dataStore.getFeatureSource(tname("road"));
  assertFeatureTypesEqual(td.roadType,road.getSchema());
  assertSame(dataStore,road.getDataStore());
  int count=road.getCount(Query.ALL);
  assertTrue((count == 3) || (count == -1));
  ReferencedEnvelope bounds=road.getBounds(Query.ALL);
  assertTrue((bounds == null) || areReferencedEnvelopesEqual(bounds,td.roadBounds));
  SimpleFeatureCollection all=road.getFeatures();
  assertEquals(3,all.size());
  assertTrue(areReferencedEnvelopesEqual(td.roadBounds,all.getBounds()));
  SimpleFeatureCollection expected=DataUtilities.collection(td.roadFeatures);
  assertCovers("all",expected,all);
  assertTrue(areReferencedEnvelopesEqual(td.roadBounds,all.getBounds()));
  SimpleFeatureCollection some=road.getFeatures(td.rd12Filter);
  assertEquals(2,some.size());
  ReferencedEnvelope e=new ReferencedEnvelope(CRS.decode("EPSG:4326"));
  e.include(td.roadFeatures[0].getBounds());
  e.include(td.roadFeatures[1].getBounds());
  assertTrue(areReferencedEnvelopesEqual(e,some.getBounds()));
  assertEquals(some.getSchema(),road.getSchema());
  Query query=new Query(tname("road"),td.rd12Filter,new String[]{aname("name")});
  SimpleFeatureCollection half=road.getFeatures(query);
  assertEquals(2,half.size());
  assertEquals(1,half.getSchema().getAttributeCount());
  try (SimpleFeatureIterator reader=half.features()){
    SimpleFeatureType type=half.getSchema();
    SimpleFeatureType actual=reader.next().getFeatureType();
    assertEquals(type.getName(),actual.getName());
    assertEquals(type.getAttributeCount(),actual.getAttributeCount());
    for (int i=0; i < type.getAttributeCount(); i++) {
      assertEquals(type.getDescriptor(i),actual.getDescriptor(i));
    }
    assertNull(type.getGeometryDescriptor());
    assertEquals(type.getGeometryDescriptor(),actual.getGeometryDescriptor());
    assertEquals(type,actual);
    ReferencedEnvelope b=half.getBounds();
    ReferencedEnvelope expectedBounds=td.roadBounds;
    assertTrue(areReferencedEnvelopesEqual(expectedBounds,b));
  }
 }
