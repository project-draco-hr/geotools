{
  Transaction t1=new DefaultTransaction();
  Transaction t2=new DefaultTransaction();
  FeatureWriter<SimpleFeatureType,SimpleFeature> writer1=dataStore.getFeatureWriter(tname("road"),td.rd1Filter,t1);
  FeatureWriter<SimpleFeatureType,SimpleFeature> writer2=dataStore.getFeatureWriterAppend(tname("road"),t2);
  SimpleFeatureType road=dataStore.getSchema(tname("road"));
  FeatureReader<SimpleFeatureType,SimpleFeature> reader;
  SimpleFeature feature;
  SimpleFeature[] ORIGINAL=td.roadFeatures;
  SimpleFeature[] REMOVE=new SimpleFeature[ORIGINAL.length - 1];
  SimpleFeature[] ADD=new SimpleFeature[ORIGINAL.length + 1];
  SimpleFeature[] FINAL=new SimpleFeature[ORIGINAL.length];
  int i;
  int index;
  index=0;
  for (i=0; i < ORIGINAL.length; i++) {
    feature=ORIGINAL[i];
    if (!feature.getID().equals(td.roadFeatures[0].getID())) {
      REMOVE[index++]=feature;
    }
  }
  for (i=0; i < ORIGINAL.length; i++) {
    ADD[i]=ORIGINAL[i];
  }
  ADD[i]=td.newRoad;
  for (i=0; i < REMOVE.length; i++) {
    FINAL[i]=REMOVE[i];
  }
  FINAL[i]=td.newRoad;
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),Transaction.AUTO_COMMIT);
  assertTrue("Sanity check failed: before modification reader didn't match original content",covers(reader,ORIGINAL));
  reader.close();
  while (writer1.hasNext()) {
    feature=(SimpleFeature)writer1.next();
    assertEquals(td.roadFeatures[0].getID(),feature.getID());
    writer1.remove();
  }
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),Transaction.AUTO_COMMIT);
  assertTrue("Feature deletion managed to leak out of transaction?",covers(reader,ORIGINAL));
  reader.close();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),t1);
  assertTrue(covers(reader,REMOVE));
  reader.close();
  writer1.close();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),Transaction.AUTO_COMMIT);
  assertTrue(covers(reader,ORIGINAL));
  reader.close();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),t1);
  assertTrue(covers(reader,REMOVE));
  reader.close();
  feature=(SimpleFeature)writer2.next();
  feature.setAttributes(td.newRoad.getAttributes());
  writer2.write();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),t2);
  td.newRoad=findFeature(reader,aname("name"),"r4");
  System.out.println("newRoad:" + td.newRoad);
  ADD[ADD.length - 1]=td.newRoad;
  FINAL[FINAL.length - 1]=td.newRoad;
  reader.close();
  writer2.close();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),Transaction.AUTO_COMMIT);
  assertTrue(covers(reader,ORIGINAL));
  reader.close();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),t2);
  assertMatched(ADD,reader);
  reader.close();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),Transaction.AUTO_COMMIT);
  assertTrue(covers(reader,ORIGINAL));
  reader.close();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),t2);
  assertTrue(coversLax(reader,ADD));
  reader.close();
  t1.commit();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),Transaction.AUTO_COMMIT);
  assertTrue(covers(reader,REMOVE));
  reader.close();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),t1);
  assertTrue(covers(reader,REMOVE));
  reader.close();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),t2);
  assertTrue(coversLax(reader,FINAL));
  reader.close();
  t2.commit();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),Transaction.AUTO_COMMIT);
  assertTrue(coversLax(reader,FINAL));
  reader.close();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),t1);
  assertTrue(coversLax(reader,FINAL));
  reader.close();
  reader=dataStore.getFeatureReader(new Query(tname("road"),Filter.INCLUDE),t2);
  assertTrue(coversLax(reader,FINAL));
  reader.close();
  t1.close();
  t2.close();
}
