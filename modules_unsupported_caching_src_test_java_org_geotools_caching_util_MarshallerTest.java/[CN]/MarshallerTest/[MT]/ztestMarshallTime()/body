{
  Generator gen=new Generator(1000,1000);
  List<SimpleFeature> features=new ArrayList<SimpleFeature>();
  for (int i=0; i < 10000; i++) {
    SimpleFeature f=(SimpleFeature)gen.createFeature(i);
    features.add(f);
  }
  long start=System.currentTimeMillis();
  for (int i=0; i < 10000; i++) {
    SimpleFeature f=features.get(i);
    SimpleFeatureMarshaller marsh=new SimpleFeatureMarshaller();
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      ObjectOutputStream oos=new ObjectOutputStream(baos);
      marsh.marshall(f,oos);
      byte[] ba=baos.toByteArray();
      ByteArrayInputStream bais=new ByteArrayInputStream(ba);
      ObjectInputStream ois=new ObjectInputStream(bais);
      SimpleFeature newf=marsh.unmarshall(ois);
      if (!f.equals(newf)) {
        throw new RuntimeException("Error at unmarshall");
      }
      if (i == (1000 * (i / 1000))) {
        System.out.println(i);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    IllegalAttributeException e) {
      e.printStackTrace();
    }
  }
  long stop=System.currentTimeMillis();
  System.out.println("Elapsed time for 10000 features : " + (stop - start) + " ms.");
}
