{
  boolean foundSymbolizerProperty=false;
  for (  CssRule rule : rules) {
    if (rule.hasSymbolizerProperty()) {
      foundSymbolizerProperty=true;
      break;
    }
  }
  if (!foundSymbolizerProperty) {
    return null;
  }
  CssRule combined;
  if (rules.size() == 1) {
    combined=rules.get(0);
  }
 else {
    combined=combineRules(rules);
  }
  List<CssRule> results=new ArrayList<>();
  if (mixins == null || mixins.size() == 0) {
    results.add(combined);
  }
 else {
    List<CssRule> applicableMixins=getApplicableMixins(combined);
    if (applicableMixins.size() > 0) {
      int idx=0;
      for (; idx < applicableMixins.size(); idx++) {
        CssRule mixin=applicableMixins.get(idx);
        Selector mixedSelector=Selector.and(mixin.selector,combined.selector,simplifier);
        if (mixedSelector == Selector.REJECT) {
          continue;
        }
 else         if (mixedSelector.equals(combined.selector)) {
          combined=combineRules(Arrays.asList(combined,mixin));
        }
 else {
          break;
        }
      }
      if (idx < applicableMixins.size()) {
        List<CssRule> list=new ArrayList<>();
        list.add(combined);
        list.addAll(applicableMixins.subList(idx,applicableMixins.size()));
        RulePowerSetBuilder builder=new RulePowerSetBuilder(new List[]{list,Collections.emptyList()},simplifier,maxCombinations - count);
        List<CssRule> conditionalPowerSet=builder.buildPowerSet();
        results.addAll(conditionalPowerSet);
      }
 else {
        results.add(combined);
      }
    }
 else {
      results.add(combined);
    }
  }
  count+=results.size();
  if (maxCombinations > 0 && count > maxCombinations) {
    LOGGER.severe("Bailing out, the CSS rule combinations have already generated more than " + "maxCombinations SLD rules, giving up. Please simplify your CSS style");
  }
 else   if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("New rule (" + count + "):"+ combined);
  }
  return results;
}
