{
  CssRule combined;
  Selector combinedSelector=combineSelectors(rules);
  Map<PseudoClass,Map<String,Property>> properties=new LinkedHashMap<>();
  for (  CssRule cssRule : rules) {
    for (    Map.Entry<PseudoClass,List<Property>> entry : cssRule.getProperties().entrySet()) {
      PseudoClass ps=entry.getKey();
      Map<String,Property> psProperties=properties.get(ps);
      if (psProperties == null) {
        psProperties=new LinkedHashMap<String,Property>();
        properties.put(ps,psProperties);
      }
      for (      Property p : entry.getValue()) {
        psProperties.put(p.getName(),p);
      }
      if (ps != PseudoClass.ROOT) {
        for (        PseudoClass containedClass : properties.keySet()) {
          if (ps.contains(containedClass)) {
            Map<String,Property> containedProperties=properties.get(containedClass);
            for (            Property p : entry.getValue()) {
              containedProperties.put(p.getName(),p);
            }
          }
        }
      }
    }
  }
  Map<PseudoClass,List<Property>> newProperties=new LinkedHashMap<>();
  for (  Map.Entry<PseudoClass,Map<String,Property>> entry : properties.entrySet()) {
    newProperties.put(entry.getKey(),new ArrayList<Property>(entry.getValue().values()));
  }
  String comment=getCombinedComment(rules);
  combined=new CssRule(combinedSelector,newProperties,comment);
  combined.setAncestry(rules);
  return combined;
}
