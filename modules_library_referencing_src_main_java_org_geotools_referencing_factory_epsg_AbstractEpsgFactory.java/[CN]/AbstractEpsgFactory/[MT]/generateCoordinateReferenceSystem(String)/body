{
  ensureNonNull("code",code);
  CoordinateReferenceSystem returnValue=null;
  try {
    final String primaryKey=toPrimaryKeyCRS(code);
    final PreparedStatement stmt;
    stmt=prepareStatement("CoordinateReferenceSystem","SELECT COORD_REF_SYS_CODE," + " COORD_REF_SYS_NAME," + " AREA_OF_USE_CODE,"+ " CRS_SCOPE,"+ " REMARKS,"+ " COORD_REF_SYS_KIND,"+ " COORD_SYS_CODE,"+ " DATUM_CODE,"+ " SOURCE_GEOGCRS_CODE,"+ " PROJECTION_CONV_CODE,"+ " CMPD_HORIZCRS_CODE,"+ " CMPD_VERTCRS_CODE"+ " FROM [Coordinate Reference System]"+ " WHERE COORD_REF_SYS_CODE = ?");
    stmt.setString(1,primaryKey);
    ResultSet result=stmt.executeQuery();
    while (result.next()) {
      final String epsg=getString(result,1,code);
      final String name=getString(result,2,code);
      final String area=result.getString(3);
      final String scope=result.getString(4);
      final String remarks=result.getString(5);
      final String type=getString(result,6,code);
      final CRSFactory factory=factories.getCRSFactory();
      final CoordinateReferenceSystem crs;
      if (type.equalsIgnoreCase("geographic 2D") || type.equalsIgnoreCase("geographic 3D")) {
        final String csCode=getString(result,7,code);
        final String dmCode=result.getString(8);
        final EllipsoidalCS cs=createEllipsoidalCS(csCode);
        final GeodeticDatum datum;
        if (dmCode != null) {
          datum=createGeodeticDatum(dmCode);
        }
 else {
          final String geoCode=getString(result,9,code,8);
          result.close();
          result=null;
          final GeographicCRS baseCRS=createGeographicCRS(geoCode);
          datum=baseCRS.getDatum();
        }
        final Map<String,Object> properties=generateProperties(name,epsg,area,scope,remarks);
        crs=factory.createGeographicCRS(properties,datum,cs);
      }
 else       if (type.equalsIgnoreCase("projected")) {
        final String csCode=getString(result,7,code);
        final String geoCode=getString(result,9,code);
        final String opCode=getString(result,10,code);
        result.close();
        result=null;
        final CartesianCS cs=createCartesianCS(csCode);
        final GeographicCRS baseCRS=createGeographicCRS(geoCode);
        final CoordinateOperation op=createCoordinateOperation(opCode);
        if (op instanceof Conversion) {
          final Map<String,Object> properties=generateProperties(name,epsg,area,scope,remarks);
          crs=factory.createProjectedCRS(properties,baseCRS,(Conversion)op,cs);
        }
 else {
          throw noSuchAuthorityCode(Projection.class,opCode);
        }
      }
 else       if (type.equalsIgnoreCase("vertical")) {
        final String csCode=getString(result,7,code);
        final String dmCode=getString(result,8,code);
        final VerticalCS cs=createVerticalCS(csCode);
        final VerticalDatum datum=createVerticalDatum(dmCode);
        final Map<String,Object> properties=generateProperties(name,epsg,area,scope,remarks);
        crs=factory.createVerticalCRS(properties,datum,cs);
      }
 else       if (type.equalsIgnoreCase("compound")) {
        final String code1=getString(result,11,code);
        final String code2=getString(result,12,code);
        result.close();
        result=null;
        final CoordinateReferenceSystem crs1, crs2;
        if (!safetyGuard.add(epsg)) {
          throw recursiveCall(CompoundCRS.class,epsg);
        }
        try {
          crs1=createCoordinateReferenceSystem(code1);
          crs2=createCoordinateReferenceSystem(code2);
        }
  finally {
          safetyGuard.remove(epsg);
        }
        final Map<String,Object> properties=generateProperties(name,epsg,area,scope,remarks);
        crs=factory.createCompoundCRS(properties,new CoordinateReferenceSystem[]{crs1,crs2});
      }
 else       if (type.equalsIgnoreCase("geocentric")) {
        final String csCode=getString(result,7,code);
        final String dmCode=getString(result,8,code);
        final CoordinateSystem cs=createCoordinateSystem(csCode);
        final GeodeticDatum datum=createGeodeticDatum(dmCode);
        final Map<String,Object> properties=generateProperties(name,epsg,area,scope,remarks);
        if (cs instanceof CartesianCS) {
          crs=factory.createGeocentricCRS(properties,datum,(CartesianCS)cs);
        }
 else         if (cs instanceof SphericalCS) {
          crs=factory.createGeocentricCRS(properties,datum,(SphericalCS)cs);
        }
 else {
          result.close();
          throw new FactoryException(Errors.format(ErrorKeys.ILLEGAL_COORDINATE_SYSTEM_FOR_CRS_$2,cs.getClass(),GeocentricCRS.class));
        }
      }
 else       if (type.equalsIgnoreCase("engineering")) {
        final String csCode=getString(result,7,code);
        final String dmCode=getString(result,8,code);
        final CoordinateSystem cs=createCoordinateSystem(csCode);
        final EngineeringDatum datum=createEngineeringDatum(dmCode);
        final Map<String,Object> properties=generateProperties(name,epsg,area,scope,remarks);
        crs=factory.createEngineeringCRS(properties,datum,cs);
      }
 else {
        result.close();
        throw new FactoryException(Errors.format(ErrorKeys.UNKNOW_TYPE_$1,type));
      }
      returnValue=ensureSingleton(crs,returnValue,code);
      if (result == null) {
        return returnValue;
      }
    }
    result.close();
  }
 catch (  SQLException exception) {
    throw databaseFailure(CoordinateReferenceSystem.class,code,exception);
  }
  if (returnValue == null) {
    throw noSuchAuthorityCode(CoordinateReferenceSystem.class,code);
  }
  return returnValue;
}
