{
  Utilities.ensureNonNull("query",q);
  final List<CoverageSlice> returnValue=new ArrayList<CoverageSlice>();
  final Lock lock=rwLock.readLock();
  try {
    lock.lock();
    checkStore();
    final String typeName=q.getTypeName();
    final SimpleFeatureSource featureSource=slicesIndexStore.getFeatureSource(typeName);
    if (featureSource == null) {
      throw new NullPointerException("The provided SimpleFeatureSource is null, it's impossible to create an index!");
    }
    final SimpleFeatureCollection features=featureSource.getFeatures(q);
    if (features == null)     throw new NullPointerException("The provided SimpleFeatureCollection is null, it's impossible to create an index!");
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.fine("Index Loaded");
    final SimpleFeatureIterator it=features.features();
    try {
      if (!it.hasNext()) {
        if (LOGGER.isLoggable(Level.FINE))         LOGGER.fine("The provided SimpleFeatureCollection  or empty, it's impossible to create an index!");
        return Collections.emptyList();
      }
      while (it.hasNext()) {
        SimpleFeature feature=it.next();
        final SimpleFeature sf=(SimpleFeature)feature;
        final CoverageSlice slice;
synchronized (coverageSliceDescriptorsCache) {
          Integer granuleIndex=(Integer)sf.getAttribute(IMAGE_INDEX_ATTR);
          if (coverageSliceDescriptorsCache.containsKey(granuleIndex)) {
            slice=coverageSliceDescriptorsCache.get(granuleIndex);
          }
 else {
            slice=new CoverageSlice(sf);
            coverageSliceDescriptorsCache.put(granuleIndex,slice);
          }
        }
        returnValue.add(slice);
      }
    }
  finally {
      it.close();
    }
    return returnValue;
  }
 catch (  Throwable e) {
    final IOException ioe=new IOException();
    ioe.initCause(e);
    throw ioe;
  }
 finally {
    lock.unlock();
  }
}
