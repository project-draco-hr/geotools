{
  characters.setLength(0);
  checkStatus();
  if (schemaProxy.size() != 0) {
    logger.fine("ADDING NAMESPACES: " + schemaProxy.size());
    String t=atts.getValue("http://www.w3.org/2001/XMLSchema-instance","schemaLocation");
    if ((t == null) || "".equals(t)) {
      t=atts.getValue("","schemaLocation");
    }
    if (!((t == null) || "".equals(t))) {
      t=t.trim();
      String[] targ2uri=t.split("\\s+");
      if (targ2uri != null) {
        if (targ2uri.length != 0 && targ2uri.length % 2 != 0)         throw new SAXException("Bad Schema location attribute: you must have an even number of terms");
        for (int i=0; i < (targ2uri.length / 2); i++) {
          String uri=targ2uri[(i * 2) + 1];
          String targ=targ2uri[i * 2];
          String prefix=(String)schemaProxy.get(targ);
          URI targUri=null;
          boolean set=false;
          if (hints != null && hints.containsKey(XMLHandlerHints.NAMESPACE_MAPPING)) {
            Map schemas=(Map)hints.get(XMLHandlerHints.NAMESPACE_MAPPING);
            if (schemas.containsKey(targ)) {
              ehf.startPrefixMapping(prefix,targ,(URI)schemas.get(targ));
              set=true;
              break;
            }
          }
          if (!set) {
            try {
              targUri=(instanceDocument == null) ? new URI(uri) : instanceDocument.resolve(uri);
            }
 catch (            URISyntaxException e1) {
              logger.warning(e1.toString());
            }
            ehf.startPrefixMapping(prefix,targ,targUri);
          }
          schemaProxy.remove(targ);
        }
      }
    }
    if (schemaProxy.size() != 0) {
      Iterator it=schemaProxy.keySet().iterator();
      while (it.hasNext()) {
        String targ=(String)it.next();
        String prefix=(String)schemaProxy.get(targ);
        ehf.startPrefixMapping(prefix,targ);
        it.remove();
      }
    }
  }
  logger.finest("Moving on to finding the element handler");
  try {
    XMLElementHandler parent=((XMLElementHandler)handlers.peek());
    logger.finest("Parent Node = " + parent.getClass().getName() + "  '"+ parent.getName()+ "'");
    logger.finest("This Node = " + localName + " :: "+ namespaceURI);
    URI uri=new URI(namespaceURI);
    XMLElementHandler eh=parent.getHandler(uri,localName,hints);
    if (eh == null) {
      eh=new IgnoreHandler();
    }
    logger.finest("This Node = " + eh.getClass().getName());
    handlers.push(eh);
    eh.startElement(new URI(namespaceURI),localName,atts);
  }
 catch (  Exception e) {
    processException(e);
    logger.warning(e.toString());
    logger.warning("Line " + locator.getLineNumber() + " Col "+ locator.getColumnNumber());
    SAXException exception=new SAXException(e.getMessage() + " at Line " + locator.getLineNumber()+ " Col "+ locator.getColumnNumber()+ " tag is: \n"+ qName,e);
    exception.initCause(e);
    throw exception;
  }
}
