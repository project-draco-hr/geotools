{
  DatabaseMetaData md=cx.getMetaData();
  ResultSet rs=md.getTables(null,schemaName,"geometry_columns",new String[]{"TABLE"});
  try {
    if (!rs.next()) {
      Statement st=cx.createStatement();
      try {
        StringBuffer sql=new StringBuffer("CREATE TABLE ");
        encodeTableName("geometry_columns",sql);
        sql.append("(");
        encodeColumnName("f_table_schema",sql);
        sql.append(" varchar(255), ");
        encodeColumnName("f_table_name",sql);
        sql.append(" varchar(255), ");
        encodeColumnName("f_geometry_column",sql);
        sql.append(" varchar(255), ");
        encodeColumnName("coord_dimension",sql);
        sql.append(" int, ");
        encodeColumnName("srid",sql);
        sql.append(" int, ");
        encodeColumnName("type",sql);
        sql.append(" varchar(32)");
        sql.append(")");
        if (LOGGER.isLoggable(Level.FINE)) {
          LOGGER.fine(sql.toString());
        }
        st.execute(sql.toString());
      }
  finally {
        dataStore.closeSafe(st);
      }
    }
  }
  finally {
    dataStore.closeSafe(rs);
  }
  for (  AttributeDescriptor ad : featureType.getAttributeDescriptors()) {
    if (!(ad instanceof GeometryDescriptor)) {
      continue;
    }
    GeometryDescriptor gd=(GeometryDescriptor)ad;
    if (!ad.isNillable()) {
      StringBuffer sql=new StringBuffer("ALTER TABLE ");
      encodeTableName(featureType.getTypeName(),sql);
      sql.append(" ADD SPATIAL INDEX (");
      encodeColumnName(gd.getLocalName(),sql);
      sql.append(")");
      LOGGER.fine(sql.toString());
      Statement st=cx.createStatement();
      try {
        st.execute(sql.toString());
      }
  finally {
        dataStore.closeSafe(st);
      }
    }
    CoordinateReferenceSystem crs=gd.getCoordinateReferenceSystem();
    int srid=-1;
    if (crs != null) {
      Integer i=null;
      try {
        i=CRS.lookupEpsgCode(crs,true);
      }
 catch (      FactoryException e) {
        LOGGER.log(Level.FINER,"Could not determine epsg code",e);
      }
      srid=i != null ? i : srid;
    }
    StringBuffer sql=new StringBuffer("INSERT INTO ");
    encodeTableName("geometry_columns",sql);
    sql.append(" VALUES (");
    sql.append(schemaName != null ? "'" + schemaName + "'" : "NULL").append(", ");
    sql.append("'").append(featureType.getTypeName()).append("', ");
    sql.append("'").append(ad.getLocalName()).append("', ");
    sql.append("2, ");
    sql.append(srid).append(", ");
    Geometries g=Geometries.getForBinding((Class<? extends Geometry>)gd.getType().getBinding());
    sql.append("'").append(g != null ? g.getName().toUpperCase() : "GEOMETRY").append("')");
    LOGGER.fine(sql.toString());
    Statement st=cx.createStatement();
    try {
      st.execute(sql.toString());
    }
  finally {
      dataStore.closeSafe(st);
    }
  }
}
