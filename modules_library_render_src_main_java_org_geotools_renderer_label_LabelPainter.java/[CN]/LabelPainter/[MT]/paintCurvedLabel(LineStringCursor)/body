{
  if (labelItem.getTextStyle().getFont().getSize() == 0)   return;
  AffineTransform oldTransform=graphics.getTransform();
  LineInfo line=lines.get(0);
  if (!isLabelUpwards(cursor) && labelItem.isForceLeftToRightEnabled()) {
    LineStringCursor reverse=cursor.reverse();
    reverse.moveTo(cursor.getLineStringLength() - cursor.getCurrentOrdinate());
    cursor=reverse;
  }
  double anchorY=getLinePlacementYAnchor();
  double mid=cursor.getCurrentOrdinate();
  Coordinate c=new Coordinate();
  c=cursor.getCurrentPosition(c);
  graphics.setPaint(Color.BLACK);
  double startOrdinate=mid - getStraightLabelWidth() / 2;
  if (startOrdinate < 0)   startOrdinate=0;
  cursor.moveTo(startOrdinate);
  List<Shape[]> allOutlines=new ArrayList<>();
  List<AffineTransform[]> allTransforms=new ArrayList<>();
  try {
    for (    LineComponent component : line.getComponents()) {
      GlyphVector glyphVector=component.getGlyphVector();
      final int numGlyphs=glyphVector.getNumGlyphs();
      float nextAdvance=glyphVector.getGlyphMetrics(0).getAdvance() * 0.5f;
      double start=cursor.getCurrentOrdinate();
      Shape[] outlines=new Shape[numGlyphs];
      AffineTransform[] transforms=new AffineTransform[numGlyphs];
      for (int i=0; i < numGlyphs; i++) {
        outlines[i]=glyphVector.getGlyphOutline(i);
        Point2D p=glyphVector.getGlyphPosition(i);
        float advance=nextAdvance;
        nextAdvance=i < numGlyphs - 1 ? glyphVector.getGlyphMetrics(i + 1).getAdvance() * 0.5f : 0;
        c=cursor.getCurrentPosition(c);
        AffineTransform t=new AffineTransform(graphics.getTransform());
        t.translate(c.x,c.y);
        t.rotate(cursor.getCurrentAngle());
        t.translate(-p.getX() - advance,-p.getY() + getLineHeight() * anchorY);
        transforms[i]=t;
        cursor.moveTo(cursor.getCurrentOrdinate() + advance + nextAdvance);
      }
      allOutlines.add(outlines);
      allTransforms.add(transforms);
      cursor.moveTo(start + glyphVector.getGlyphPosition(numGlyphs).getX());
    }
    if (labelItem.getTextStyle().getHaloFill() != null) {
      configureHalo();
      if (labelItem.isTextUnderlined()) {
        drawCurvedUnderline(line,cursor,startOrdinate,true);
      }
      drawOrFillOutlines(allOutlines,allTransforms,false);
    }
    graphics.setTransform(oldTransform);
    configureLabelStyle();
    if (labelItem.isTextUnderlined()) {
      drawCurvedUnderline(line,cursor,startOrdinate,false);
    }
    drawOrFillOutlines(allOutlines,allTransforms,true);
  }
  finally {
    graphics.setTransform(oldTransform);
  }
}
