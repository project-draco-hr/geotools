{
  Map props=eg.getCustomProperties();
  Set propNames=props.keySet();
  Iterator it=propNames.iterator();
  while (it.hasNext()) {
    String nextName=(String)it.next();
    if (list.hasProperty(nextName)) {
      list.setPropertyValue(nextName,props.get(nextName));
    }
 else {
      System.out.println("Tried to set the property " + nextName + " to a glyph that does not have this property.");
    }
  }
  int radius=50;
  Expression e=(Expression)list.getPropertyValue("radius");
  if (e != null) {
    radius=((Number)e.evaluate(feature)).intValue();
  }
  Color circleColor=Color.BLUE.darker();
  e=(Expression)list.getPropertyValue("circle color");
  if (e != null) {
    circleColor=Color.decode((String)e.evaluate(feature));
  }
  int barHeight=150;
  e=(Expression)list.getPropertyValue("bar height");
  if (e != null) {
    barHeight=((Number)e.evaluate(feature)).intValue();
  }
  Color barColor=Color.BLACK;
  e=(Expression)list.getPropertyValue("bar color");
  if (e != null) {
    barColor=Color.decode((String)e.evaluate(feature));
  }
  int barUncertainty=50;
  e=(Expression)list.getPropertyValue("bar uncertainty");
  if (e != null) {
    barUncertainty=((Number)e.evaluate(feature)).intValue();
  }
  int barUncWidth=5;
  e=(Expression)list.getPropertyValue("bar uncertainty width");
  if (e != null) {
    barUncWidth=((Number)e.evaluate(feature)).intValue();
  }
  Color barUncColor=Color.GRAY;
  e=(Expression)list.getPropertyValue("bar uncertainty color");
  if (e != null) {
    barUncColor=Color.decode((String)e.evaluate(feature));
  }
  int pointerDirection=21;
  e=(Expression)list.getPropertyValue("pointer direction");
  if (e != null) {
    pointerDirection=((Number)e.evaluate(feature)).intValue();
  }
  Color pointerColor=Color.RED;
  e=(Expression)list.getPropertyValue("pointer color");
  if (e != null) {
    pointerColor=Color.decode((String)e.evaluate(feature));
  }
  int pointerLength=100;
  e=(Expression)list.getPropertyValue("pointer length");
  if (e != null) {
    pointerLength=((Number)e.evaluate(feature)).intValue();
  }
  int wedgeWidth=25;
  e=(Expression)list.getPropertyValue("wedge width");
  if (e != null) {
    wedgeWidth=((Number)e.evaluate(feature)).intValue();
  }
  Color wedgeColor=Color.BLUE;
  e=(Expression)list.getPropertyValue("wedge color");
  if (e != null) {
    wedgeColor=Color.decode((String)e.evaluate(feature));
  }
  int circleCenterX, circleCenterY, imageHeight, imageWidth;
  BufferedImage image;
  Graphics2D imageGraphic;
  Expression tempExp=(Expression)list.getPropertyValue("bar height");
  int temp1=0;
  if (tempExp != null) {
    temp1=((Number)tempExp.evaluate(feature)).intValue();
  }
  tempExp=(Expression)list.getPropertyValue("bar uncertainty");
  int temp2=0;
  if (tempExp != null) {
    temp2=((Number)tempExp.evaluate(feature)).intValue();
  }
  if (temp1 + temp2 > maxBarHeight) {
    maxBarHeight=temp1 + temp2;
  }
  circleCenterX=Math.max(pointerLength,radius);
  circleCenterY=Math.max(maxBarHeight,Math.max(pointerLength,radius));
  imageHeight=Math.max(radius * 2,Math.max(radius + pointerLength,Math.max(radius + maxBarHeight,pointerLength + maxBarHeight)));
  imageWidth=Math.max(radius * 2,pointerLength * 2);
  image=new BufferedImage(imageWidth,imageHeight,BufferedImage.TYPE_INT_ARGB);
  pointerLength=Math.max(pointerLength,radius);
  imageGraphic=image.createGraphics();
  imageGraphic.setColor(circleColor);
  imageGraphic.fillOval(circleCenterX - radius,circleCenterY - radius,radius * 2,radius * 2);
  imageGraphic.setColor(wedgeColor);
  imageGraphic.fillArc(circleCenterX - radius,circleCenterY - radius,radius * 2,radius * 2,calculateWedgeAngle(pointerDirection,wedgeWidth),wedgeWidth * 2);
  imageGraphic.setColor(barUncColor);
  imageGraphic.fillRect(circleCenterX - barUncWidth,circleCenterY - barHeight - barUncertainty,barUncWidth * 2,barUncertainty * 2);
  int[] endPoint=calculateEndOfPointer(circleCenterX,circleCenterY,pointerLength,pointerDirection);
  imageGraphic.setStroke(new java.awt.BasicStroke(3));
  imageGraphic.setColor(pointerColor);
  imageGraphic.draw(new java.awt.geom.Line2D.Double(circleCenterX,circleCenterY,endPoint[0],endPoint[1]));
  imageGraphic.setStroke(new java.awt.BasicStroke(3));
  imageGraphic.setColor(barColor);
  imageGraphic.draw(new java.awt.geom.Line2D.Double(circleCenterX,circleCenterY,circleCenterX,circleCenterY - barHeight));
  imageGraphic.dispose();
  return image;
}
