{
  if (!setup) {
    super.setUp();
    final File test_data_dir=TestData.file(this,null);
    String[] testFiles=test_data_dir.list(new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        final boolean accept=name.endsWith(".xlsx") || name.endsWith(".xls");
        return accept;
      }
    }
);
    eds=new ExcelDataStore[testFiles.length];
    int i=0;
    for (    String f : testFiles) {
      System.out.println("testing " + f);
      File file=TestData.file(this,f);
      HashMap<String,Serializable> params=new HashMap<String,Serializable>();
      java.net.URL url=DataUtilities.fileToURL(file);
      int idx=f.lastIndexOf('.');
      String props=f.substring(0,idx) + ".props";
      File propsFile=null;
      try {
        propsFile=TestData.file(this,props);
      }
 catch (      IOException e) {
      }
      if (propsFile == null || !propsFile.exists()) {
        params.put("type","excel");
        params.put("url",url);
        params.put("sheet","locations");
        params.put("latcol","LAT");
        params.put("longcol","LON");
        params.put("projection","epsg:4326");
      }
 else {
        Properties p=new Properties();
        p.load(new FileInputStream(propsFile));
        Enumeration<?> en=p.keys();
        while (en.hasMoreElements()) {
          String key=(String)en.nextElement();
          params.put(key,p.getProperty(key));
        }
        params.put("url",url);
      }
      ExcelDataStoreFactory fac=new ExcelDataStoreFactory();
      assertTrue("Can't process params",fac.canProcess(params));
      ExcelDataStore ex=(ExcelDataStore)fac.createDataStore(params);
      assertNotNull("Null data store",ex);
      eds[i++]=ex;
    }
    setup=true;
  }
}
