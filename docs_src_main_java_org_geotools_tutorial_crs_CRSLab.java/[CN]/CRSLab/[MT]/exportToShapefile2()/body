{
  FeatureType schema=featureSource.getSchema();
  String typeName=schema.getName().getLocalPart();
  JFileDataStoreChooser chooser=new JFileDataStoreChooser("shp");
  chooser.setDialogTitle("Save reprojected shapefile");
  chooser.setSaveFile(sourceFile);
  int returnVal=chooser.showSaveDialog(null);
  if (returnVal != JFileDataStoreChooser.APPROVE_OPTION) {
    return;
  }
  File file=chooser.getSelectedFile();
  if (file.equals(sourceFile)) {
    JOptionPane.showMessageDialog(null,"Cannot replace " + file,"File warning",JOptionPane.WARNING_MESSAGE);
    return;
  }
  Query query=new Query(typeName);
  query.setCoordinateSystemReproject(map.getCoordinateReferenceSystem());
  SimpleFeatureCollection featureCollection=featureSource.getFeatures(query);
  DataStoreFactorySpi factory=new ShapefileDataStoreFactory();
  Map<String,Serializable> create=new HashMap<String,Serializable>();
  create.put("url",file.toURI().toURL());
  create.put("create spatial index",Boolean.TRUE);
  DataStore newDataStore=factory.createNewDataStore(create);
  newDataStore.createSchema(featureCollection.getSchema());
  Transaction transaction=new DefaultTransaction("Reproject");
  SimpleFeatureStore featureStore;
  featureStore=(SimpleFeatureStore)newDataStore.getFeatureSource(typeName);
  featureStore.setTransaction(transaction);
  try {
    featureStore.addFeatures(featureCollection);
    transaction.commit();
    JOptionPane.showMessageDialog(null,"Export to shapefile complete","Export",JOptionPane.INFORMATION_MESSAGE);
  }
 catch (  Exception problem) {
    transaction.rollback();
    problem.printStackTrace();
    JOptionPane.showMessageDialog(null,"Export to shapefile failed","Export",JOptionPane.ERROR_MESSAGE);
  }
 finally {
    transaction.close();
  }
}
