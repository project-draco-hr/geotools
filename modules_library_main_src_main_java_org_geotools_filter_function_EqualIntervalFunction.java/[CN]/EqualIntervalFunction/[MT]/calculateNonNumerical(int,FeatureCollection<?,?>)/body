{
  UniqueVisitor uniqueVisit=new UniqueVisitor(getParameters().get(0));
  featureCollection.accepts(uniqueVisit,new NullProgressListener());
  List result=uniqueVisit.getResult().toList();
  Collections.sort(result);
  Comparable[] values=(Comparable[])result.toArray(new Comparable[result.size()]);
  Comparable[] localMin=new Comparable[classNum];
  Comparable[] localMax=new Comparable[classNum];
  int binPop=new Double(Math.ceil((double)values.length / classNum)).intValue();
  int lastBigBin=values.length % classNum;
  if (lastBigBin == 0)   lastBigBin=classNum;
 else   lastBigBin--;
  int itemIndex=0;
  for (int binIndex=0; binIndex < classNum; binIndex++) {
    if (binIndex < localMin.length)     localMin[binIndex]=(itemIndex < values.length ? values[itemIndex] : values[values.length - 1]);
 else     localMin[localMin.length - 1]=(itemIndex < values.length ? values[itemIndex] : values[values.length - 1]);
    itemIndex+=binPop;
    if (binIndex == classNum - 1) {
      if (binIndex < localMax.length)       localMax[binIndex]=(itemIndex < values.length ? values[itemIndex] : values[values.length - 1]);
 else       localMax[localMax.length - 1]=(itemIndex < values.length ? values[itemIndex] : values[values.length - 1]);
    }
 else {
      if (binIndex < localMax.length)       localMax[binIndex]=(itemIndex + 1 < values.length ? values[itemIndex + 1] : values[values.length - 1]);
 else       localMax[localMax.length - 1]=(itemIndex + 1 < values.length ? values[itemIndex + 1] : values[values.length - 1]);
    }
    if (lastBigBin == binIndex)     binPop--;
  }
  return new RangedClassifier(localMin,localMax);
}
