{
  int classNum=getClasses();
  Comparable globalMin;
  Comparable globalMax;
  try {
    MinVisitor minVisit=new MinVisitor(getParameters().get(0));
    if (progress == null)     progress=new NullProgressListener();
    featureCollection.accepts(minVisit,progress);
    if (progress.isCanceled())     return null;
    globalMin=(Comparable)minVisit.getResult().getValue();
    MaxVisitor maxVisit=new MaxVisitor(getParameters().get(0));
    featureCollection.accepts(maxVisit,progress);
    if (progress.isCanceled())     return null;
    globalMax=(Comparable)maxVisit.getResult().getValue();
    if ((globalMin instanceof Number) && (globalMax instanceof Number)) {
      return calculateNumerical(classNum,globalMin,globalMax);
    }
 else {
      return calculateNonNumerical(classNum,featureCollection);
    }
  }
 catch (  IllegalFilterException e) {
    LOGGER.log(Level.SEVERE,"EqualIntervalFunction calculate(SimpleFeatureCollection) failed",e);
    return null;
  }
catch (  IOException e) {
    LOGGER.log(Level.SEVERE,"EqualIntervalFunction calculate(SimpleFeatureCollection) failed",e);
    return null;
  }
}
