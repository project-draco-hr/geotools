{
  final ParameterValueGroup parameters=projTransf.getParameterValues();
  if (projTransf instanceof TransverseMercator && name.equalsIgnoreCase("transverse_mercator")) {
    metadata.addGeoShortParam(GeoTiffPCSCodes.ProjCoordTransGeoKey,GeoTiffCoordinateTransformationsCodes.CT_TransverseMercator);
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLongGeoKey,parameters.parameter("central_meridian").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLatGeoKey,parameters.parameter("latitude_of_origin").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjScaleAtNatOriginGeoKey,parameters.parameter("scale_factor").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseEastingGeoKey,parameters.parameter("false_easting").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseNorthingGeoKey,parameters.parameter("false_northing").doubleValue());
    return;
  }
  if (projTransf instanceof Mercator && (name.equalsIgnoreCase("mercator_1SP") || name.equalsIgnoreCase("Mercator_2SP"))) {
    metadata.addGeoShortParam(GeoTiffPCSCodes.ProjCoordTransGeoKey,GeoTiffCoordinateTransformationsCodes.CT_Mercator);
    List<GeneralParameterValue> values=parameters.values();
    for (    GeneralParameterValue value : values) {
      if (value instanceof ParameterValue) {
        ParameterValue<?> paramValue=(ParameterValue<?>)value;
        if (AbstractIdentifiedObject.nameMatches(value.getDescriptor(),"latitude_of_origin")) {
          metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLatGeoKey,(paramValue).doubleValue());
        }
 else         if (AbstractIdentifiedObject.nameMatches(value.getDescriptor(),"central_meridian")) {
          metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLongGeoKey,(paramValue).doubleValue());
        }
 else         if (AbstractIdentifiedObject.nameMatches(value.getDescriptor(),"scale_factor")) {
          metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjScaleAtNatOriginGeoKey,(paramValue).doubleValue());
        }
 else         if (AbstractIdentifiedObject.nameMatches(value.getDescriptor(),"standard_parallel_1")) {
          metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjStdParallel1GeoKey,(paramValue).doubleValue());
        }
 else         if (AbstractIdentifiedObject.nameMatches(value.getDescriptor(),"false_easting")) {
          metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseEastingGeoKey,(paramValue).doubleValue());
        }
 else         if (AbstractIdentifiedObject.nameMatches(value.getDescriptor(),"false_northing")) {
          metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseNorthingGeoKey,(paramValue).doubleValue());
        }
      }
    }
    return;
  }
  if (projTransf instanceof LambertConformal && name.indexOf("1") != -1) {
    metadata.addGeoShortParam(GeoTiffPCSCodes.ProjCoordTransGeoKey,GeoTiffCoordinateTransformationsCodes.CT_LambertConfConic_Helmert);
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLongGeoKey,parameters.parameter("central_meridian").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLatGeoKey,parameters.parameter("latitude_of_origin").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjScaleAtNatOriginGeoKey,parameters.parameter("scale_factor").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseEastingGeoKey,parameters.parameter("false_easting").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseNorthingGeoKey,parameters.parameter("false_northing").doubleValue());
    return;
  }
  if (projTransf instanceof LambertConformal && name.indexOf("2") != -1) {
    metadata.addGeoShortParam(GeoTiffPCSCodes.ProjCoordTransGeoKey,GeoTiffCoordinateTransformationsCodes.CT_LambertConfConic_2SP);
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLongGeoKey,parameters.parameter("central_meridian").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLatGeoKey,parameters.parameter("latitude_of_origin").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjStdParallel1GeoKey,parameters.parameter("standard_parallel_1").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjStdParallel2GeoKey,parameters.parameter("standard_parallel_2").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseEastingGeoKey,parameters.parameter("false_easting").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseNorthingGeoKey,parameters.parameter("false_northing").doubleValue());
    return;
  }
  if (projTransf instanceof Stereographic && name.equalsIgnoreCase("stereographic")) {
    metadata.addGeoShortParam(GeoTiffPCSCodes.ProjCoordTransGeoKey,GeoTiffCoordinateTransformationsCodes.CT_Stereographic);
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLongGeoKey,parameters.parameter("central_meridian").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLatGeoKey,parameters.parameter("latitude_of_origin").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjScaleAtNatOriginGeoKey,parameters.parameter("scale_factor").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseEastingGeoKey,parameters.parameter("false_easting").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseNorthingGeoKey,parameters.parameter("false_northing").doubleValue());
    return;
  }
  if (projTransf instanceof PolarStereographic && name.equalsIgnoreCase("polar_stereographic")) {
    metadata.addGeoShortParam(GeoTiffPCSCodes.ProjCoordTransGeoKey,GeoTiffCoordinateTransformationsCodes.CT_PolarStereographic);
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLongGeoKey,parameters.parameter("central_meridian").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjStraightVertPoleLongGeoKey,parameters.parameter("latitude_of_origin").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjScaleAtNatOriginGeoKey,parameters.parameter("scale_factor").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseEastingGeoKey,parameters.parameter("false_easting").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseNorthingGeoKey,parameters.parameter("false_northing").doubleValue());
    return;
  }
  if (projTransf instanceof ObliqueStereographic && name.equalsIgnoreCase("Oblique_Stereographic")) {
    metadata.addGeoShortParam(GeoTiffPCSCodes.ProjCoordTransGeoKey,GeoTiffCoordinateTransformationsCodes.CT_ObliqueStereographic);
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLongGeoKey,parameters.parameter("central_meridian").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLatGeoKey,parameters.parameter("latitude_of_origin").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjScaleAtNatOriginGeoKey,parameters.parameter("scale_factor").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseEastingGeoKey,parameters.parameter("false_easting").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseNorthingGeoKey,parameters.parameter("false_northing").doubleValue());
    return;
  }
  if (projTransf instanceof ObliqueMercator && (name.equalsIgnoreCase("oblique_mercator") || name.equalsIgnoreCase("hotine_oblique_mercator"))) {
    metadata.addGeoShortParam(GeoTiffPCSCodes.ProjCoordTransGeoKey,GeoTiffCoordinateTransformationsCodes.CT_ObliqueMercator);
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjCenterLongGeoKey,parameters.parameter("longitude_of_center").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjCenterLatGeoKey,parameters.parameter("latitude_of_center").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjScaleAtCenterGeoKey,parameters.parameter("scale_factor").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseEastingGeoKey,parameters.parameter("false_easting").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjAzimuthAngleGeoKey,parameters.parameter("azimuth").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseNorthingGeoKey,parameters.parameter("false_northing").doubleValue());
    return;
  }
  if (projTransf instanceof AlbersEqualArea && name.equalsIgnoreCase("albers_Conic_Equal_Area")) {
    metadata.addGeoShortParam(GeoTiffPCSCodes.ProjCoordTransGeoKey,GeoTiffCoordinateTransformationsCodes.CT_AlbersEqualArea);
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLongGeoKey,parameters.parameter("longitude_of_center").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjNatOriginLatGeoKey,parameters.parameter("latitude_of_center").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseEastingGeoKey,parameters.parameter("false_easting").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseNorthingGeoKey,parameters.parameter("false_northing").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjStdParallel1GeoKey,parameters.parameter("standard_parallel_1").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjStdParallel2GeoKey,parameters.parameter("standard_parallel_2").doubleValue());
    return;
  }
  if (projTransf instanceof Orthographic && name.equalsIgnoreCase("Orthographic")) {
    metadata.addGeoShortParam(GeoTiffPCSCodes.ProjCoordTransGeoKey,GeoTiffCoordinateTransformationsCodes.CT_Orthographic);
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjCenterLongGeoKey,parameters.parameter("central_meridian").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjCenterLongGeoKey,parameters.parameter("latitude_of_origin").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseEastingGeoKey,parameters.parameter("false_easting").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseNorthingGeoKey,parameters.parameter("false_northing").doubleValue());
    return;
  }
  if (projTransf instanceof LambertAzimuthalEqualArea && name.equalsIgnoreCase("Lambert_Azimuthal_Equal_Area")) {
    metadata.addGeoShortParam(GeoTiffPCSCodes.ProjCoordTransGeoKey,GeoTiffCoordinateTransformationsCodes.CT_LambertAzimEqualArea);
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjCenterLatGeoKey,parameters.parameter("latitude_of_center").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjCenterLongGeoKey,parameters.parameter("longitude_of_center").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseEastingGeoKey,parameters.parameter("false_easting").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseNorthingGeoKey,parameters.parameter("false_northing").doubleValue());
    return;
  }
  if (projTransf instanceof WorldVanDerGrintenI && name.equalsIgnoreCase("World_Van_der_Grinten_I")) {
    metadata.addGeoShortParam(GeoTiffPCSCodes.ProjCoordTransGeoKey,GeoTiffCoordinateTransformationsCodes.CT_VanDerGrinten);
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjCenterLongGeoKey,parameters.parameter("central_meridian").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseEastingGeoKey,parameters.parameter("false_easting").doubleValue());
    metadata.addGeoDoubleParam(GeoTiffPCSCodes.ProjFalseNorthingGeoKey,parameters.parameter("false_northing").doubleValue());
    return;
  }
  throw new IllegalArgumentException("Unable to map projection" + projTransf.getName());
}
