{
  if (granulesNumber == 0) {
    LOGGER.log(Level.FINE,"Unable to load any granuleDescriptor");
    return null;
  }
  LOGGER.fine("Producing the final mosaic, step 1, loop through granule collectors");
  final List<MosaicElement> mosaicInputs=new ArrayList<RasterLayerResponse.MosaicElement>();
  GranuleCollector first=null;
  int size=granuleCollectors.size();
  for (  GranuleCollector collector : granuleCollectors) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("Using collector with filter:" + collector.granuleFilter.toString());
    }
    final MosaicElement preparedMosaic=new Mosaicker(collector.collectGranules(),MergeBehavior.FLAT).createMosaic();
    if (preparedMosaic != null) {
      mosaicInputs.add(preparedMosaic);
      if (first == null) {
        first=collector;
      }
    }
 else {
      size--;
    }
  }
  LOGGER.fine("Producing the final mosaic, step 2, final mosaicking");
  if (size == 1) {
    return new MosaicOutput(mosaicInputs.get(0));
  }
  if (size == 0) {
    return null;
  }
  MosaicInputs mosaickingInputs=new MosaicInputs(first.doInputTransparency,first.hasAlpha,mosaicInputs,first.sourceThreshold);
  return new MosaicOutput(new Mosaicker(mosaickingInputs,mergeBehavior).createMosaic());
}
