{
  LOGGER.fine("Creating constant image for area with no data");
  final ImageLayout2 il=new ImageLayout2();
  il.setColorModel(rasterManager.defaultCM);
  Dimension tileSize=request.getTileDimensions();
  if (tileSize == null) {
    tileSize=JAI.getDefaultTileSize();
  }
  il.setTileGridXOffset(0).setTileGridYOffset(0).setTileWidth((int)tileSize.getWidth()).setTileHeight((int)tileSize.getHeight());
  final RenderingHints renderingHints=new RenderingHints(JAI.KEY_IMAGE_LAYOUT,il);
  final Number[] values=ImageUtilities.getBackgroundValues(rasterManager.defaultSM,backgroundValues);
  RenderedImage finalImage;
  if (ImageUtilities.isMediaLibAvailable()) {
    finalImage=ConstantDescriptor.create((float)rasterBounds.width,(float)rasterBounds.height,values,renderingHints);
    if (rasterBounds.x != 0 || rasterBounds.y != 0) {
      ImageWorker w=new ImageWorker(finalImage);
      w.translate((float)rasterBounds.x,(float)rasterBounds.y,Interpolation.getInstance(Interpolation.INTERP_NEAREST));
      finalImage=w.getRenderedImage();
    }
    if (rasterManager.defaultCM != null) {
      il.setColorModel(rasterManager.defaultCM);
      il.setSampleModel(rasterManager.defaultCM.createCompatibleSampleModel(tileSize.width,tileSize.height));
      finalImage=new ImageWorker(finalImage).setRenderingHints(renderingHints).format(il.getSampleModel(null).getDataType()).getRenderedImage();
    }
  }
 else {
    il.setWidth(rasterBounds.width).setHeight(rasterBounds.height);
    if (rasterBounds.x != 0 || rasterBounds.y != 0) {
      il.setMinX(rasterBounds.x).setMinY(rasterBounds.y);
    }
    ColorModel cm;
    if (rasterManager.defaultCM != null) {
      cm=rasterManager.defaultCM;
    }
 else {
      byte[] arr={(byte)0,(byte)0xff};
      cm=new IndexColorModel(1,2,arr,arr,arr);
    }
    il.setColorModel(cm);
    il.setSampleModel(cm.createCompatibleSampleModel(tileSize.width,tileSize.height));
    final double[] bkgValues=new double[values.length];
    for (int i=0; i < values.length; i++) {
      bkgValues[i]=values[i].doubleValue();
    }
    Assert.isTrue(il.isValid(ImageLayout.WIDTH_MASK | ImageLayout.HEIGHT_MASK | ImageLayout.SAMPLE_MODEL_MASK));
    ImageWorker w=new ImageWorker(renderingHints);
    w.setBackground(bkgValues);
    w.mosaic(new RenderedImage[0],MosaicDescriptor.MOSAIC_TYPE_OVERLAY,null,null,new double[][]{{CoverageUtilities.getMosaicThreshold(il.getSampleModel(null).getDataType())}},new Range[]{RangeFactory.create(0,0)});
    finalImage=w.getRenderedImage();
  }
  Color inputTransparentColor=request.getInputTransparentColor();
  boolean hasAlpha;
  if (inputTransparentColor != null && (footprintBehavior == null || !footprintBehavior.handleFootprints())) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("Support for alpha on blank image");
    }
    finalImage=new ImageWorker(finalImage).makeColorTransparent(inputTransparentColor).getRenderedImage();
    hasAlpha=finalImage.getColorModel().hasAlpha();
    if (!hasAlpha) {
      finalImage=new ImageWorker(finalImage).forceComponentColorModel(true).makeColorTransparent(inputTransparentColor).getRenderedImage();
      hasAlpha=finalImage.getColorModel().hasAlpha();
    }
    assert hasAlpha;
  }
 else   if (footprintBehavior != null) {
    finalImage=footprintBehavior.postProcessBlankResponse(finalImage,renderingHints);
  }
  return new MosaicOutput(finalImage,null);
}
