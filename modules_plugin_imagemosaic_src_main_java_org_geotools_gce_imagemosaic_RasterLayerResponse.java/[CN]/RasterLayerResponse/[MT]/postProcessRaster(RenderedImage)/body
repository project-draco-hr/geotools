{
  if (finalTransparentColor != null) {
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.fine("Support for alpha on final mosaic");
    return ImageUtilities.maskColor(finalTransparentColor,mosaic);
  }
  if (!needsReprojection) {
    try {
      final AffineTransform sourceGridToWorld=new AffineTransform((AffineTransform)finalGridToWorldCorner);
      final AffineTransform targetGridToWorld=new AffineTransform(request.getRequestedGridToWorld());
      targetGridToWorld.concatenate(CoverageUtilities.CENTER_TO_CORNER);
      final AffineTransform targetWorldToGrid=targetGridToWorld.createInverse();
      targetWorldToGrid.concatenate(sourceGridToWorld);
      finalGridToWorldCorner=new AffineTransform2D(targetGridToWorld);
      if (XAffineTransform.isIdentity(targetWorldToGrid,Utils.AFFINE_IDENTITY_EPS))       return mosaic;
      final Hints localHints=new Hints(hints);
      if (hints != null && !hints.containsKey(JAI.KEY_BORDER_EXTENDER)) {
        final Object extender=hints.get(JAI.KEY_BORDER_EXTENDER);
        if (!(extender != null && extender instanceof BorderExtender)) {
          localHints.add(ImageUtilities.EXTEND_BORDER_BY_COPYING);
        }
      }
      mosaic=AffineDescriptor.create(mosaic,targetWorldToGrid,interpolation,backgroundValues,localHints);
    }
 catch (    NoninvertibleTransformException e) {
      if (LOGGER.isLoggable(Level.SEVERE)) {
        LOGGER.log(Level.SEVERE,"Unable to create the requested mosaic ",e);
      }
    }
  }
  return mosaic;
}
