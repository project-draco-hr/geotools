{
  final RenderedImage image=mosaicOutput.image;
  final SampleModel sm=image.getSampleModel();
  final ColorModel cm=image.getColorModel();
  final int numBands=sm.getNumBands();
  final GridSampleDimension[] bands=new GridSampleDimension[numBands];
  Set<String> bandNames=new HashSet<String>();
  for (int i=0; i < numBands; i++) {
    ColorInterpretation colorInterpretation=null;
    String bandName=null;
    if (cm != null) {
      colorInterpretation=TypeMap.getColorInterpretation(cm,i);
      if (colorInterpretation == null) {
        throw new IOException("Unrecognized sample dimension type");
      }
      bandName=colorInterpretation.name();
      if (colorInterpretation == ColorInterpretation.UNDEFINED || bandNames.contains(bandName)) {
        bandName="Band" + (i + 1);
      }
    }
 else {
      bandName="Band" + (i + 1);
      colorInterpretation=ColorInterpretation.UNDEFINED;
    }
    final SampleDimensionType st=TypeMap.getSampleDimensionType(sm,i);
    final double noData;
    double min=-Double.MAX_VALUE, max=Double.MAX_VALUE;
    if (backgroundValues != null) {
      noData=backgroundValues[backgroundValues.length > i ? i : 0];
    }
 else {
      if (st.compareTo(SampleDimensionType.REAL_32BITS) == 0)       noData=Float.NaN;
 else       if (st.compareTo(SampleDimensionType.REAL_64BITS) == 0)       noData=Double.NaN;
 else       if (st.compareTo(SampleDimensionType.SIGNED_16BITS) == 0) {
        noData=Short.MIN_VALUE;
        min=Short.MIN_VALUE;
        max=Short.MAX_VALUE;
      }
 else       if (st.compareTo(SampleDimensionType.SIGNED_32BITS) == 0) {
        noData=Integer.MIN_VALUE;
        min=Integer.MIN_VALUE;
        max=Integer.MAX_VALUE;
      }
 else       if (st.compareTo(SampleDimensionType.SIGNED_8BITS) == 0) {
        noData=-128;
        min=-128;
        max=127;
      }
 else {
        noData=0;
        min=0;
        if (st.compareTo(SampleDimensionType.UNSIGNED_1BIT) == 0)         max=1;
 else         if (st.compareTo(SampleDimensionType.UNSIGNED_2BITS) == 0)         max=3;
 else         if (st.compareTo(SampleDimensionType.UNSIGNED_4BITS) == 0)         max=7;
 else         if (st.compareTo(SampleDimensionType.UNSIGNED_8BITS) == 0)         max=255;
 else         if (st.compareTo(SampleDimensionType.UNSIGNED_16BITS) == 0)         max=65535;
 else         if (st.compareTo(SampleDimensionType.UNSIGNED_32BITS) == 0)         max=Math.pow(2,32) - 1;
      }
    }
    bands[i]=new SimplifiedGridSampleDimension(bandName,st,colorInterpretation,noData,min,max,1,0,null);
  }
  Map<String,Object> properties=null;
  if (granulesPaths != null) {
    properties=new HashMap<String,Object>();
    properties.put(AbstractGridCoverage2DReader.FILE_SOURCE_PROPERTY,granulesPaths);
  }
  if (mosaicOutput.pamDataset != null) {
    properties.put(Utils.PAM_DATASET,mosaicOutput.pamDataset);
  }
  return coverageFactory.create(rasterManager.getCoverageIdentifier(),image,new GridGeometry2D(new GridEnvelope2D(PlanarImage.wrapRenderedImage(image).getBounds()),PixelInCell.CELL_CORNER,finalGridToWorldCorner,this.mosaicBBox.getCoordinateReferenceSystem(),hints),bands,null,properties);
}
