{
  if (FunctionExpression.class.isAssignableFrom(clazz)) {
    FunctionExpression function=(FunctionExpression)clazz.newInstance();
    if (parameters != null) {
      function.setParameters(parameters);
    }
    if (fallback != null) {
      function.setFallbackValue(fallback);
    }
    return function;
  }
  if (FunctionImpl.class.isAssignableFrom(clazz)) {
    FunctionImpl function=(FunctionImpl)clazz.newInstance();
    if (parameters != null) {
      function.setParameters(parameters);
    }
    if (fallback != null) {
      function.setFallbackValue(fallback);
    }
    return function;
  }
  Constructor<Function> constructor=clazz.getConstructor(new Class[]{List.class,Literal.class});
  return constructor.newInstance(parameters,fallback);
}
