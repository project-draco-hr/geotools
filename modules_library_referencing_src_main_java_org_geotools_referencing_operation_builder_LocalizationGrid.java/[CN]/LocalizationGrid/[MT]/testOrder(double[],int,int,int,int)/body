{
  for (--num; --num >= 0; offset+=step) {
    final double v1=grid[offset];
    if (Double.isNaN(v1))     continue;
    while (true) {
      final double v2=grid[offset + step];
      final int required, clear;
      if (v1 == v2) {
        required=EQUALS;
        clear=~0;
      }
 else       if (v2 > v1) {
        required=INCREASING;
        clear=~DECREASING;
      }
 else       if (v2 < v1) {
        required=DECREASING;
        clear=~INCREASING;
      }
 else {
        if (--num < 0) {
          return flags;
        }
        offset+=step;
        continue;
      }
      if ((flags & required) == 0) {
        return 0;
      }
      flags&=clear;
      break;
    }
  }
  return flags;
}
