{
  int nPts=ring.length - 1;
  Coordinate hiPt=ring[0];
  int hiIndex=0;
  for (int i=1; i <= nPts; i++) {
    Coordinate p=ring[i];
    if (p.y > hiPt.y) {
      hiPt=p;
      hiIndex=i;
    }
  }
  int iPrev=hiIndex;
  do {
    iPrev=iPrev - 1;
    if (iPrev < 0)     iPrev=nPts;
  }
 while (ring[iPrev].equals2D(hiPt) && iPrev != hiIndex);
  int iNext=hiIndex;
  do {
    iNext=(iNext + 1) % nPts;
  }
 while (ring[iNext].equals2D(hiPt) && iNext != hiIndex);
  Coordinate prev=ring[iPrev];
  Coordinate next=ring[iNext];
  if (prev.equals2D(hiPt) || next.equals2D(hiPt) || prev.equals2D(next))   return false;
  int disc=computeOrientation(prev,hiPt,next);
  boolean isCCW=false;
  if (disc == 0) {
    isCCW=(prev.x > next.x);
  }
 else {
    isCCW=(disc > 0);
  }
  return isCCW;
}
