{
  if (type == ShapeType.NULL) {
    return createNull();
  }
  int dimensions=(shapeType == ShapeType.ARCZ && !flatGeometry) ? 3 : 2;
  buffer.position(buffer.position() + 4 * 8);
  int numParts=buffer.getInt();
  int numPoints=buffer.getInt();
  int[] partOffsets=new int[numParts];
  for (int i=0; i < numParts; i++) {
    partOffsets[i]=buffer.getInt();
  }
  CoordinateSequence[] lines=new CoordinateSequence[numParts];
  int finish, start=0;
  int length=0;
  boolean clonePoint=false;
  final DoubleBuffer doubleBuffer=buffer.asDoubleBuffer();
  for (int part=0; part < numParts; part++) {
    start=partOffsets[part];
    if (part == (numParts - 1)) {
      finish=numPoints;
    }
 else {
      finish=partOffsets[part + 1];
    }
    length=finish - start;
    int xyLength=length;
    if (length == 1) {
      length=2;
      clonePoint=true;
    }
 else {
      clonePoint=false;
    }
    CoordinateSequence cs=geometryFactory.getCoordinateSequenceFactory().create(length,dimensions);
    double[] xy=new double[xyLength * 2];
    doubleBuffer.get(xy);
    for (int i=0; i < xyLength; i++) {
      cs.setOrdinate(i,0,xy[i * 2]);
      cs.setOrdinate(i,1,xy[i * 2 + 1]);
    }
    if (clonePoint) {
      cs.setOrdinate(1,0,cs.getOrdinate(0,0));
      cs.setOrdinate(1,1,cs.getOrdinate(0,1));
    }
    lines[part]=cs;
  }
  if (dimensions == 3) {
    doubleBuffer.position(doubleBuffer.position() + 2);
    for (int part=0; part < numParts; part++) {
      start=partOffsets[part];
      if (part == (numParts - 1)) {
        finish=numPoints;
      }
 else {
        finish=partOffsets[part + 1];
      }
      length=finish - start;
      if (length == 1) {
        length=2;
        clonePoint=true;
      }
 else {
        clonePoint=false;
      }
      double[] z=new double[length];
      doubleBuffer.get(z);
      for (int i=0; i < length; i++) {
        lines[part].setOrdinate(i,2,z[i]);
      }
    }
  }
  LineString[] lineStrings=new LineString[numParts];
  for (int part=0; part < numParts; part++) {
    lineStrings[part]=geometryFactory.createLineString(lines[part]);
  }
  return geometryFactory.createMultiLineString(lineStrings);
}
