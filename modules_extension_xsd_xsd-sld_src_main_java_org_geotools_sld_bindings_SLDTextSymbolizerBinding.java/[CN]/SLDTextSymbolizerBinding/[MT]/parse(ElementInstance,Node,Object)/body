{
  TextSymbolizer ts=styleFactory.createTextSymbolizer();
  if (node.hasChild("Geometry")) {
    Expression geometry=(Expression)node.getChildValue("Geometry");
    if (geometry instanceof PropertyName) {
      PropertyName propertyName=(PropertyName)geometry;
      ts.setGeometryPropertyName(propertyName.getPropertyName());
    }
 else {
      ts.setGeometry(geometry);
    }
  }
  if (node.hasChild("Label")) {
    ts.setLabel((Expression)node.getChildValue("Label"));
  }
  if (node.hasChild("Font")) {
    ts.fonts().add((Font)node.getChildValue("Font"));
  }
  if (node.hasChild("LabelPlacement")) {
    ts.setLabelPlacement((LabelPlacement)node.getChildValue("LabelPlacement"));
  }
  if (node.hasChild("Halo")) {
    ts.setHalo((Halo)node.getChildValue("Halo"));
  }
  if (node.hasChild("Fill")) {
    ts.setFill((Fill)node.getChildValue("Fill"));
  }
  if (node.hasChild("Priority")) {
    ts.setPriority((Expression)node.getChildValue("Priority"));
  }
  for (  CssParameter param : (List<CssParameter>)node.getChildValues(CssParameter.class)) {
    ts.getOptions().put(param.getName(),param.getExpression().evaluate(null,String.class));
  }
  return ts;
}
