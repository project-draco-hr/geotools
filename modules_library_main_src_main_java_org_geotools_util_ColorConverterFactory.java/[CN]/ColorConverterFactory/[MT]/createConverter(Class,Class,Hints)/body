{
  if (target.equals(Color.class)) {
    if (source.equals(String.class)) {
      return new Converter(){
        public Object convert(        Object source,        Class target) throws Exception {
          String rgba=(String)source;
          try {
            return Color.decode(rgba);
          }
 catch (          NumberFormatException badRGB) {
            return null;
          }
        }
      }
;
    }
    if (Number.class.isAssignableFrom(source)) {
      return new Converter(){
        public Object convert(        Object source,        Class target) throws Exception {
          Number number=(Number)source;
          if (((int)number.doubleValue()) == number.doubleValue() && number.doubleValue() < Integer.MAX_VALUE) {
            int rgba=number.intValue();
            int alpha=0xff000000 & rgba;
            return new Color(rgba,alpha != 0);
          }
 else {
            return null;
          }
        }
      }
;
    }
  }
 else   if (target.equals(String.class) && source.equals(Color.class)) {
    return new Converter(){
      public <T>T convert(      Object source,      Class<T> target) throws Exception {
        Color color=(Color)source;
        String redCode=Integer.toHexString(color.getRed());
        String greenCode=Integer.toHexString(color.getGreen());
        String blueCode=Integer.toHexString(color.getBlue());
        if (redCode.length() == 1) {
          redCode="0" + redCode;
        }
        if (greenCode.length() == 1) {
          greenCode="0" + greenCode;
        }
        if (blueCode.length() == 1) {
          blueCode="0" + blueCode;
        }
        return (T)("#" + redCode + greenCode+ blueCode).toUpperCase();
      }
    }
;
  }
  return null;
}
