{
  if (VersionedPostgisDataStore.TBL_CHANGESETS.equals(tableName)) {
    PostGISAutoIncrementFIDMapper mapper=new PostGISAutoIncrementFIDMapper(VersionedPostgisDataStore.TBL_CHANGESETS,"revision",Types.NUMERIC,true);
    return new TypedFIDMapper(mapper,VersionedPostgisDataStore.TBL_CHANGESETS);
  }
  if (!versionedTypes.contains(tableName)) {
    if (tableName.endsWith("_vfc_view")) {
      try {
        String otn=VersionedPostgisDataStore.getVFCTableName(tableName);
        VersionedFIDMapper mapper=(VersionedFIDMapper)getMapper(catalog,schema,otn,connection);
        return new VersionedFeatureCollectionFidMapper(mapper);
      }
 catch (      Exception e) {
      }
    }
    return unversionedFactory.getMapper(catalog,schema,tableName,connection);
  }
  ColumnInfo[] colInfos=getPkColumnInfo(catalog,schema,tableName,connection);
  if (colInfos.length <= 1)   throw new IOException("Versioned type (" + tableName + ") with a primary key with less than 2 columns,"+ " this cannot be, there's a error");
  if (colInfos.length == 2) {
    return buildSingleColumnVersionedFidMapper(schema,tableName,connection,colInfos);
  }
 else {
    return buildMultiColumnFIDMapper(schema,tableName,connection,colInfos);
  }
}
