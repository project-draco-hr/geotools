{
  S store=createUniqueStore();
  try {
    SimpleFeatureType dummy0=FeatureTypeDBObjectTest.buildDummyFeatureType("dummy0");
    SimpleFeatureType dummy1=FeatureTypeDBObjectTest.buildDummyFeatureType("dummy1");
    dummy1.getUserData().put("dummyKey1","this makes be different");
    SimpleFeatureType dummy2=FeatureTypeDBObjectTest.buildDummyFeatureType("dummy2");
    dummy1.getUserData().put("dummyKey2","i want to be different too");
    assertThat(store.retrieveSchema(new NameImpl("dummy0")),is(nullValue()));
    assertThat(store.retrieveSchema(new NameImpl("dummy1")),is(nullValue()));
    assertThat(store.retrieveSchema(new NameImpl("dummy2")),is(nullValue()));
    store.storeSchema(null);
    assertThat(store.retrieveSchema(null),is(nullValue()));
    store.deleteSchema(null);
    List<String> typeNames;
    store.storeSchema(dummy0);
    typeNames=store.typeNames();
    assertThat(typeNames,is(equalTo(Arrays.asList("dummy0"))));
    FeatureTypeDBObjectTest.compareFeatureTypes(store.retrieveSchema(new NameImpl("dummy0")),dummy0,false);
    store.storeSchema(dummy1);
    Collections.sort(typeNames=store.typeNames());
    assertThat(typeNames,is(equalTo(Arrays.asList("dummy0","dummy1"))));
    FeatureTypeDBObjectTest.compareFeatureTypes(store.retrieveSchema(new NameImpl("dummy0")),dummy0,false);
    FeatureTypeDBObjectTest.compareFeatureTypes(store.retrieveSchema(new NameImpl("dummy1")),dummy1,false);
    store.storeSchema(dummy1);
    Collections.sort(typeNames=store.typeNames());
    assertThat(typeNames,is(equalTo(Arrays.asList("dummy0","dummy1"))));
    FeatureTypeDBObjectTest.compareFeatureTypes(store.retrieveSchema(new NameImpl("dummy0")),dummy0,false);
    FeatureTypeDBObjectTest.compareFeatureTypes(store.retrieveSchema(new NameImpl("dummy1")),dummy1,false);
    store.storeSchema(dummy2);
    Collections.sort(typeNames=store.typeNames());
    assertThat(typeNames,is(equalTo(Arrays.asList("dummy0","dummy1","dummy2"))));
    FeatureTypeDBObjectTest.compareFeatureTypes(store.retrieveSchema(new NameImpl("dummy0")),dummy0,false);
    FeatureTypeDBObjectTest.compareFeatureTypes(store.retrieveSchema(new NameImpl("dummy1")),dummy1,false);
    FeatureTypeDBObjectTest.compareFeatureTypes(store.retrieveSchema(new NameImpl("dummy2")),dummy2,false);
    store.deleteSchema(new NameImpl("dummy1"));
    Collections.sort(typeNames=store.typeNames());
    assertThat(typeNames,is(equalTo(Arrays.asList("dummy0","dummy2"))));
    FeatureTypeDBObjectTest.compareFeatureTypes(store.retrieveSchema(new NameImpl("dummy0")),dummy0,false);
    assertThat(store.retrieveSchema(new NameImpl("dummy1")),is(nullValue()));
    FeatureTypeDBObjectTest.compareFeatureTypes(store.retrieveSchema(new NameImpl("dummy2")),dummy2,false);
    SimpleFeatureType dummy0_replace=FeatureTypeDBObjectTest.buildDummyFeatureType("dummy0");
    dummy0_replace.getUserData().put("dummyKey","something different than what dummy0 contains");
    store.storeSchema(dummy0_replace);
    Collections.sort(typeNames=store.typeNames());
    assertThat(typeNames,is(equalTo(Arrays.asList("dummy0","dummy2"))));
    FeatureTypeDBObjectTest.compareFeatureTypes(store.retrieveSchema(new NameImpl("dummy0")),dummy0_replace,false);
    FeatureTypeDBObjectTest.compareFeatureTypes(store.retrieveSchema(new NameImpl("dummy2")),dummy2,false);
    store.deleteSchema(new NameImpl("dummy0"));
    store.deleteSchema(new NameImpl("dummy2"));
    typeNames=store.typeNames();
    assertThat(typeNames,is(equalTo(Collections.EMPTY_LIST)));
    assertThat(store.retrieveSchema(new NameImpl("dummy0")),is(nullValue()));
    assertThat(store.retrieveSchema(new NameImpl("dummy2")),is(nullValue()));
  }
  finally {
    destroyUniqueStore(store);
  }
}
