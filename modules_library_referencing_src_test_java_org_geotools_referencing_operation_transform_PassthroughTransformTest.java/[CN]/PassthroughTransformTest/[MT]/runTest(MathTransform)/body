{
  compare(sub,sub,0);
  try {
    mtFactory.createPassThroughTransform(-1,sub,0);
    fail("An illegal argument should have been detected");
  }
 catch (  FactoryException e) {
  }
  try {
    mtFactory.createPassThroughTransform(0,sub,-1);
    fail("An illegal argument should have been detected");
  }
 catch (  FactoryException e) {
  }
  assertSame("Failed to recognize that no passthrough transform was needed",sub,mtFactory.createPassThroughTransform(0,sub,0));
  final int subLower=2;
  final int subUpper=subLower + sub.getSourceDimensions();
  final MathTransform passthrough=mtFactory.createPassThroughTransform(subLower,sub,1);
  assertEquals("Wrong number of source dimensions",sub.getSourceDimensions() + subLower + 1,passthrough.getSourceDimensions());
  assertEquals("Wrong number of target dimensions",sub.getTargetDimensions() + subLower + 1,passthrough.getTargetDimensions());
  compare(passthrough,sub,2);
  final DimensionFilter filter=new DimensionFilter(mtFactory);
  filter.addSourceDimensionRange(0,subLower);
  assertTrue("Expected an identity transform",filter.separate(passthrough).isIdentity());
  filter.clear();
  filter.addSourceDimensionRange(subUpper,passthrough.getSourceDimensions());
  assertTrue("Expected an identity transform",filter.separate(passthrough).isIdentity());
  filter.clear();
  filter.addSourceDimensionRange(subLower,subUpper);
  assertEquals("Expected the sub-transform",sub,filter.separate(passthrough));
  final int[] expectedDimensions=new int[sub.getTargetDimensions()];
  for (int i=0; i < expectedDimensions.length; i++) {
    expectedDimensions[i]=subLower + i;
  }
  assertTrue("Unexpected output dimensions",Arrays.equals(expectedDimensions,filter.getTargetDimensions()));
}
