{
  try {
    String sqlStatement="SELECT postgis_version();";
    Statement statement=conn.createStatement();
    ResultSet result=statement.executeQuery(sqlStatement);
    if (result.next()) {
      postgisVersion=result.getString(1);
      LOGGER.fine("PostGIS version is " + postgisVersion);
      int[] versionNumbers;
      try {
        String[] values=postgisVersion.trim().split(" ");
        String[] versionNumbersStr=values[0].trim().split("\\.");
        versionNumbers=new int[versionNumbersStr.length];
        for (int i=0; i < versionNumbers.length; i++) {
          versionNumbers[i]=Integer.parseInt(versionNumbersStr[i]);
        }
        postgisMajorVersion=versionNumbers[0];
        postgisMinorVersion=versionNumbers[1];
        if ((postgisMajorVersion > 0) || (postgisMinorVersion > 7) || ((versionNumbers.length > 2) && (versionNumbers[2] >= 2))) {
          byteaEnabled=true;
        }
      }
 catch (      Exception e) {
        LOGGER.log(Level.WARNING,"Exception occurred while parsing the version number.",e);
      }
      if (postgisVersion.indexOf("USE_GEOS=1") != -1) {
        this.geosEnabled=true;
      }
 else {
        LOGGER.warning("GEOS is NOT enabled. This will result in limited functionality and performance.");
      }
      postgresVersion=conn.getMetaData().getDatabaseProductVersion();
      LOGGER.fine("Postgres version is " + postgresVersion);
      postgresMajorVersion=conn.getMetaData().getDatabaseMajorVersion();
      postgresMinorVersion=conn.getMetaData().getDatabaseMinorVersion();
      if (postgresMajorVersion < 7 || (postgresMajorVersion == 7 && postgresMinorVersion < 3)) {
        schemaEnabled=false;
      }
    }
  }
 catch (  SQLException sqle) {
    String message=sqle.getMessage();
    LOGGER.severe(message);
  }
 finally {
    JDBCUtils.close(conn,Transaction.AUTO_COMMIT,null);
  }
}
