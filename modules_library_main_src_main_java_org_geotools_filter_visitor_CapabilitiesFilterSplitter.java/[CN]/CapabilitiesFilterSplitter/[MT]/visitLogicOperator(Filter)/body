{
  if (original == null)   original=filter;
  if (!fcs.supports(filter)) {
    if (filter instanceof And) {
      Iterator<Filter> it=((And)filter).getChildren().iterator();
      Filter supportedChild=null;
      List<Filter> otherChildren=new ArrayList<Filter>();
      while (it.hasNext()) {
        Filter child=(Filter)it.next();
        if (supportedChild == null && fcs.supports(child)) {
          supportedChild=child;
        }
 else {
          otherChildren.add(child);
        }
      }
      if (supportedChild == null) {
        postStack.push(filter);
        return;
      }
 else {
        preStack.push(supportedChild);
        if (otherChildren.size() == 1) {
          postStack.push(otherChildren.get(0));
        }
 else {
          postStack.push(ff.and(otherChildren));
        }
        return;
      }
    }
 else {
      postStack.push(filter);
      return;
    }
  }
  int i=postStack.size();
  int j=preStack.size();
  if (filter instanceof Not) {
    if (((Not)filter).getFilter() != null) {
      Filter next=((Not)filter).getFilter();
      next.accept(this,null);
      if (i < postStack.size()) {
        popToSize(postStack,i);
        popToSize(preStack,j);
        postStack.push(filter);
      }
 else {
        popToSize(preStack,j);
        preStack.push(filter);
      }
    }
  }
 else {
    if (filter instanceof Or) {
      Filter orReplacement;
      try {
        orReplacement=translateOr((Or)filter);
        orReplacement.accept(this,null);
      }
 catch (      IllegalFilterException e) {
        popToSize(preStack,j);
        postStack.push(filter);
        return;
      }
      if (postStack.size() > i) {
        popToSize(postStack,i);
        postStack.push(filter);
        return;
      }
      preStack.pop();
      preStack.push(filter);
    }
 else {
      Iterator it=((And)filter).getChildren().iterator();
      while (it.hasNext()) {
        Filter next=(Filter)it.next();
        next.accept(this,null);
      }
      if (i < postStack.size()) {
        if (filter instanceof And) {
          Filter f=(Filter)postStack.pop();
          while (postStack.size() > i)           f=ff.and(f,(Filter)postStack.pop());
          postStack.push(f);
          if (j < preStack.size()) {
            f=(Filter)preStack.pop();
            while (preStack.size() > j)             f=ff.and(f,(Filter)preStack.pop());
            preStack.push(f);
          }
        }
 else {
          LOGGER.warning("LogicFilter found which is not 'and, or, not");
          popToSize(postStack,i);
          popToSize(preStack,j);
          postStack.push(filter);
        }
      }
 else {
        popToSize(preStack,j);
        preStack.push(filter);
      }
    }
  }
}
