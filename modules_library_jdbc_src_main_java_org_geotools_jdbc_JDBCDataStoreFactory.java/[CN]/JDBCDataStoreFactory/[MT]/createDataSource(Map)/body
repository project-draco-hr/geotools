{
  BasicDataSource dataSource=new BasicDataSource();
  dataSource.setDriverClassName(getDriverClassName());
  dataSource.setUrl(getJDBCUrl(params));
  String user=(String)USER.lookUp(params);
  if (user != null) {
    dataSource.setUsername(user);
  }
  String passwd=(String)PASSWD.lookUp(params);
  if (passwd != null) {
    dataSource.setPassword(passwd);
  }
  Integer maxWait=(Integer)MAXWAIT.lookUp(params);
  if (maxWait != null && maxWait != -1) {
    dataSource.setMaxWait(maxWait * 1000);
  }
  Integer minConn=(Integer)MINCONN.lookUp(params);
  if (minConn != null) {
    dataSource.setMinIdle(minConn);
  }
  Integer maxConn=(Integer)MAXCONN.lookUp(params);
  if (maxConn != null) {
    dataSource.setMaxActive(maxConn);
  }
  Boolean validate=(Boolean)VALIDATECONN.lookUp(params);
  if (validate != null && validate && getValidationQuery() != null) {
    dataSource.setTestOnBorrow(true);
    dataSource.setValidationQuery(getValidationQuery());
  }
  Boolean testWhileIdle=(Boolean)TEST_WHILE_IDLE.lookUp(params);
  if (testWhileIdle != null) {
    dataSource.setTestWhileIdle(testWhileIdle);
  }
  Integer timeBetweenEvictorRuns=(Integer)TIME_BETWEEN_EVICTOR_RUNS.lookUp(params);
  if (timeBetweenEvictorRuns != null && timeBetweenEvictorRuns > 0) {
    dataSource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictorRuns * 1000l);
  }
  Integer minEvictableTime=(Integer)MIN_EVICTABLE_TIME.lookUp(params);
  if (minEvictableTime != null) {
    dataSource.setMinEvictableIdleTimeMillis(minEvictableTime * 1000l);
  }
  Integer evictorTestsPerRun=(Integer)EVICTOR_TESTS_PER_RUN.lookUp(params);
  if (evictorTestsPerRun != null) {
    dataSource.setNumTestsPerEvictionRun(evictorTestsPerRun);
  }
  dataSource.setAccessToUnderlyingConnectionAllowed(true);
  return dataSource;
}
