{
  try {
    Logging.GEOTOOLS.setLoggerFactory("org.geotools.util.logging.Log4JLoggerFactory");
    Logger logger=Logging.getLogger("org.geotools");
    assertTrue(logger instanceof Log4JLogger);
    final Level oldLevel=logger.getLevel();
    logger.setLevel(Level.WARNING);
    assertEquals(Level.WARNING,logger.getLevel());
    assertTrue(logger.isLoggable(Level.WARNING));
    assertTrue(logger.isLoggable(Level.SEVERE));
    assertFalse(logger.isLoggable(Level.CONFIG));
    logger.setLevel(Level.FINER);
    assertEquals(Level.FINER,logger.getLevel());
    assertEquals(Level.FINER,logger.getLevel());
    assertTrue(logger.isLoggable(Level.FINER));
    assertTrue(logger.isLoggable(Level.SEVERE));
    logger.setLevel(Level.OFF);
    assertEquals(Level.OFF,logger.getLevel());
    logger.finer("Message to Log4J at FINER level.");
    logger.fine("Message to Log4J at FINE level.");
    logger.config("Message to Log4J at CONFIG level.");
    logger.info("Message to Log4J at INFO level.");
    logger.warning("Message to Log4J at WARNING level.");
    logger.severe("Message to Log4J at SEVERE level.");
    logger.setLevel(oldLevel);
  }
  finally {
    Logging.GEOTOOLS.setLoggerFactory((String)null);
    assertEquals(Logger.class,Logging.getLogger("org.geotools").getClass());
  }
}
