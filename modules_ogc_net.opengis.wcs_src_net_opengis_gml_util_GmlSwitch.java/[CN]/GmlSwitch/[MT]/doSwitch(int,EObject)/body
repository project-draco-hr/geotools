{
switch (classifierID) {
case GmlPackage.ABSTRACT_GEOMETRIC_PRIMITIVE_TYPE:
{
      AbstractGeometricPrimitiveType abstractGeometricPrimitiveType=(AbstractGeometricPrimitiveType)theEObject;
      Object result=caseAbstractGeometricPrimitiveType(abstractGeometricPrimitiveType);
      if (result == null)       result=caseAbstractGeometryType(abstractGeometricPrimitiveType);
      if (result == null)       result=caseAbstractGeometryBaseType(abstractGeometricPrimitiveType);
      if (result == null)       result=caseAbstractGMLType(abstractGeometricPrimitiveType);
      if (result == null)       result=defaultCase(theEObject);
      return result;
    }
case GmlPackage.ABSTRACT_GEOMETRY_BASE_TYPE:
{
    AbstractGeometryBaseType abstractGeometryBaseType=(AbstractGeometryBaseType)theEObject;
    Object result=caseAbstractGeometryBaseType(abstractGeometryBaseType);
    if (result == null)     result=caseAbstractGMLType(abstractGeometryBaseType);
    if (result == null)     result=defaultCase(theEObject);
    return result;
  }
case GmlPackage.ABSTRACT_GEOMETRY_TYPE:
{
  AbstractGeometryType abstractGeometryType=(AbstractGeometryType)theEObject;
  Object result=caseAbstractGeometryType(abstractGeometryType);
  if (result == null)   result=caseAbstractGeometryBaseType(abstractGeometryType);
  if (result == null)   result=caseAbstractGMLType(abstractGeometryType);
  if (result == null)   result=defaultCase(theEObject);
  return result;
}
case GmlPackage.ABSTRACT_GML_TYPE:
{
AbstractGMLType abstractGMLType=(AbstractGMLType)theEObject;
Object result=caseAbstractGMLType(abstractGMLType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.ABSTRACT_META_DATA_TYPE:
{
AbstractMetaDataType abstractMetaDataType=(AbstractMetaDataType)theEObject;
Object result=caseAbstractMetaDataType(abstractMetaDataType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.ABSTRACT_RING_PROPERTY_TYPE:
{
AbstractRingPropertyType abstractRingPropertyType=(AbstractRingPropertyType)theEObject;
Object result=caseAbstractRingPropertyType(abstractRingPropertyType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.ABSTRACT_RING_TYPE:
{
AbstractRingType abstractRingType=(AbstractRingType)theEObject;
Object result=caseAbstractRingType(abstractRingType);
if (result == null) result=caseAbstractGeometryType(abstractRingType);
if (result == null) result=caseAbstractGeometryBaseType(abstractRingType);
if (result == null) result=caseAbstractGMLType(abstractRingType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.ABSTRACT_SURFACE_TYPE:
{
AbstractSurfaceType abstractSurfaceType=(AbstractSurfaceType)theEObject;
Object result=caseAbstractSurfaceType(abstractSurfaceType);
if (result == null) result=caseAbstractGeometricPrimitiveType(abstractSurfaceType);
if (result == null) result=caseAbstractGeometryType(abstractSurfaceType);
if (result == null) result=caseAbstractGeometryBaseType(abstractSurfaceType);
if (result == null) result=caseAbstractGMLType(abstractSurfaceType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.BOUNDING_SHAPE_TYPE:
{
BoundingShapeType boundingShapeType=(BoundingShapeType)theEObject;
Object result=caseBoundingShapeType(boundingShapeType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.CODE_LIST_TYPE:
{
CodeListType codeListType=(CodeListType)theEObject;
Object result=caseCodeListType(codeListType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.CODE_TYPE:
{
CodeType codeType=(CodeType)theEObject;
Object result=caseCodeType(codeType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.DIRECT_POSITION_TYPE:
{
DirectPositionType directPositionType=(DirectPositionType)theEObject;
Object result=caseDirectPositionType(directPositionType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.DOCUMENT_ROOT:
{
DocumentRoot documentRoot=(DocumentRoot)theEObject;
Object result=caseDocumentRoot(documentRoot);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.ENVELOPE_TYPE:
{
EnvelopeType envelopeType=(EnvelopeType)theEObject;
Object result=caseEnvelopeType(envelopeType);
if (result == null) result=caseAbstractGeometryType(envelopeType);
if (result == null) result=caseAbstractGeometryBaseType(envelopeType);
if (result == null) result=caseAbstractGMLType(envelopeType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.ENVELOPE_WITH_TIME_PERIOD_TYPE:
{
EnvelopeWithTimePeriodType envelopeWithTimePeriodType=(EnvelopeWithTimePeriodType)theEObject;
Object result=caseEnvelopeWithTimePeriodType(envelopeWithTimePeriodType);
if (result == null) result=caseEnvelopeType(envelopeWithTimePeriodType);
if (result == null) result=caseAbstractGeometryType(envelopeWithTimePeriodType);
if (result == null) result=caseAbstractGeometryBaseType(envelopeWithTimePeriodType);
if (result == null) result=caseAbstractGMLType(envelopeWithTimePeriodType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.GRID_ENVELOPE_TYPE:
{
GridEnvelopeType gridEnvelopeType=(GridEnvelopeType)theEObject;
Object result=caseGridEnvelopeType(gridEnvelopeType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.GRID_LIMITS_TYPE:
{
GridLimitsType gridLimitsType=(GridLimitsType)theEObject;
Object result=caseGridLimitsType(gridLimitsType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.GRID_TYPE:
{
GridType gridType=(GridType)theEObject;
Object result=caseGridType(gridType);
if (result == null) result=caseAbstractGeometryType(gridType);
if (result == null) result=caseAbstractGeometryBaseType(gridType);
if (result == null) result=caseAbstractGMLType(gridType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.LINEAR_RING_TYPE:
{
LinearRingType linearRingType=(LinearRingType)theEObject;
Object result=caseLinearRingType(linearRingType);
if (result == null) result=caseAbstractRingType(linearRingType);
if (result == null) result=caseAbstractGeometryType(linearRingType);
if (result == null) result=caseAbstractGeometryBaseType(linearRingType);
if (result == null) result=caseAbstractGMLType(linearRingType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.META_DATA_PROPERTY_TYPE:
{
MetaDataPropertyType metaDataPropertyType=(MetaDataPropertyType)theEObject;
Object result=caseMetaDataPropertyType(metaDataPropertyType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.POINT_TYPE:
{
PointType pointType=(PointType)theEObject;
Object result=casePointType(pointType);
if (result == null) result=caseAbstractGeometryType(pointType);
if (result == null) result=caseAbstractGeometryBaseType(pointType);
if (result == null) result=caseAbstractGMLType(pointType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.POLYGON_TYPE:
{
PolygonType polygonType=(PolygonType)theEObject;
Object result=casePolygonType(polygonType);
if (result == null) result=caseAbstractSurfaceType(polygonType);
if (result == null) result=caseAbstractGeometricPrimitiveType(polygonType);
if (result == null) result=caseAbstractGeometryType(polygonType);
if (result == null) result=caseAbstractGeometryBaseType(polygonType);
if (result == null) result=caseAbstractGMLType(polygonType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.RECTIFIED_GRID_TYPE:
{
RectifiedGridType rectifiedGridType=(RectifiedGridType)theEObject;
Object result=caseRectifiedGridType(rectifiedGridType);
if (result == null) result=caseGridType(rectifiedGridType);
if (result == null) result=caseAbstractGeometryType(rectifiedGridType);
if (result == null) result=caseAbstractGeometryBaseType(rectifiedGridType);
if (result == null) result=caseAbstractGMLType(rectifiedGridType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.REFERENCE_TYPE:
{
ReferenceType referenceType=(ReferenceType)theEObject;
Object result=caseReferenceType(referenceType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.STRING_OR_REF_TYPE:
{
StringOrRefType stringOrRefType=(StringOrRefType)theEObject;
Object result=caseStringOrRefType(stringOrRefType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.TIME_POSITION_TYPE:
{
TimePositionType timePositionType=(TimePositionType)theEObject;
Object result=caseTimePositionType(timePositionType);
if (result == null) result=defaultCase(theEObject);
return result;
}
case GmlPackage.VECTOR_TYPE:
{
VectorType vectorType=(VectorType)theEObject;
Object result=caseVectorType(vectorType);
if (result == null) result=caseDirectPositionType(vectorType);
if (result == null) result=defaultCase(theEObject);
return result;
}
default :
return defaultCase(theEObject);
}
}
