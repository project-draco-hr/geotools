{
  if (LOGGER.isLoggable(Level.FINE))   LOGGER.fine("updating postgis feature " + current);
  Statement statement=null;
  Connection conn=null;
  try {
    conn=queryData.getConnection();
    statement=conn.createStatement();
    boolean hasLock=false;
    String sql=makeSelectForUpdateSql(current);
    if (sql == null) {
      LOGGER.fine("Lock acquisition not attempted, JDBCTextFeatureWriter may block during concurrent updates");
    }
 else {
      ResultSet result=null;
      try {
        result=statement.executeQuery(sql);
        hasLock=true;
      }
 catch (      SQLException e) {
        LOGGER.severe(e.getLocalizedMessage());
        throw new FeatureLockException("Your feature is locked!",current.getID(),e);
      }
 finally {
        if (result != null) {
          try {
            result.close();
          }
 catch (          SQLException e) {
          }
          result=null;
        }
      }
    }
    if (sql == null || hasLock) {
      sql=makeUpdateSql(live,current);
      if (LOGGER.isLoggable(Level.FINE))       LOGGER.fine(sql);
      statement.executeUpdate(sql);
    }
 else {
      throw new IOException("Feature Lock failed; giving up");
    }
  }
 catch (  SQLException sqle) {
    String msg="SQL Exception writing geometry column";
    LOGGER.log(Level.SEVERE,msg,sqle);
    queryData.close(sqle);
    throw new DataSourceException(msg,sqle);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        String msg="Error closing JDBC Statement";
        LOGGER.log(Level.WARNING,msg,e);
      }
    }
  }
}
