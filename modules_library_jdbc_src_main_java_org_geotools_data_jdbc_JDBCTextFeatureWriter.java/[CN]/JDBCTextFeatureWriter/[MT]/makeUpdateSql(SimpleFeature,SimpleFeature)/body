{
  FeatureTypeInfo ftInfo=queryData.getFeatureTypeInfo();
  SimpleFeatureType featureType=ftInfo.getSchema();
  AttributeDescriptor[] attributes=(AttributeDescriptor[])featureType.getAttributeDescriptors().toArray(new AttributeDescriptor[featureType.getAttributeDescriptors().size()]);
  String tableName=encodeName(featureType.getTypeName());
  StringBuffer statementSQL=new StringBuffer("UPDATE " + tableName + " SET ");
  for (int i=0; i < current.getAttributeCount(); i++) {
    Object currAtt=current.getAttribute(i);
    Object liveAtt=live.getAttribute(i);
    if (!DataUtilities.attributesEqual(liveAtt,currAtt)) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.fine("modifying att# " + i + " to "+ currAtt);
      }
      String attrValue=null;
      if (attributes[i] instanceof GeometryDescriptor) {
        String geomName=attributes[i].getLocalName();
        int srid=ftInfo.getSRID(geomName);
        Geometry geometry=(Geometry)currAtt;
        if (geometry == null)         attrValue="NULL";
 else         attrValue=getGeometryInsertText(geometry,srid);
      }
 else {
        attrValue=addQuotes(currAtt);
      }
      String colName=encodeColumnName(attributes[i].getLocalName());
      statementSQL.append(colName).append(" = ").append(attrValue).append(", ");
    }
  }
  statementSQL.setLength(statementSQL.length() - 2);
  statementSQL.append(" WHERE ");
  Object[] pkValues=mapper.getPKAttributes(current.getID());
  for (int i=0; i < mapper.getColumnCount(); i++) {
    statementSQL.append(mapper.getColumnName(i)).append(" = ").append(addQuotes(pkValues[i]));
    if (i < (mapper.getColumnCount() - 1)) {
      statementSQL.append(" AND ");
    }
  }
  return (statementSQL.toString());
}
