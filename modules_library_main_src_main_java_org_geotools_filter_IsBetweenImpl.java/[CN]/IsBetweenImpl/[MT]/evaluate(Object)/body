{
  final Object object0=eval(expression,feature);
  final Object object1=eval(expression1,feature);
  final Object object2=eval(expression2,feature);
  if (object0 == null) {
    return false;
  }
  if (!(object0 instanceof Collection) && !(object1 instanceof Collection) && !(object2 instanceof Collection)) {
    return evaluateInternal(object0,object1,object2);
  }
  Collection<Object> oValues=object0 instanceof Collection ? (Collection<Object>)object0 : Collections.<Object>singletonList(object0);
  Collection<Object> leftValues=object1 instanceof Collection ? (Collection<Object>)object1 : Collections.<Object>singletonList(object1);
  Collection<Object> rightValues=object2 instanceof Collection ? (Collection<Object>)object2 : Collections.<Object>singletonList(object2);
  int count=0;
  for (  Object value1 : leftValues) {
    for (    Object value2 : rightValues) {
      for (      Object value0 : oValues) {
        boolean temp=evaluateInternal(value0,value1,value2);
        if (temp) {
          count++;
        }
switch (matchAction) {
case ONE:
          if (count > 1)           return false;
        break;
case ALL:
      if (!temp)       return false;
    break;
case ANY:
  if (temp)   return true;
break;
}
}
}
}
switch (matchAction) {
case ONE:
return (count == 1);
case ALL:
return true;
case ANY:
return false;
default :
return false;
}
}
