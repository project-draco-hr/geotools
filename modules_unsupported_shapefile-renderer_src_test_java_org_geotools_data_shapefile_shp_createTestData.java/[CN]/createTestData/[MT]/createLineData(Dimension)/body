{
  File file=new File("test_lines.shp");
  if (file.exists()) {
    file.delete();
  }
  IndexedShapefileDataStoreFactory factory=new IndexedShapefileDataStoreFactory();
  DataStore datastore=factory.createDataStore(file.toURI().toURL());
  SimpleFeatureTypeBuilder builder=new SimpleFeatureTypeBuilder();
  builder.setName("test_lines");
  builder.add("x",Integer.class);
  builder.add("y",Integer.class);
  builder.add("geom",LineString.class);
  final SimpleFeatureType featureType=builder.buildFeatureType();
  datastore.createSchema(featureType);
  SimpleFeatureStore store=(SimpleFeatureStore)datastore.getFeatureSource("test_lines");
  SimpleFeatureCollection collection;
  collection=DataUtilities.collection(new FeatureReader<SimpleFeatureType,SimpleFeature>(){
    public SimpleFeatureType getFeatureType(){
      return featureType;
    }
    GeometryFactory factory=new GeometryFactory();
    int x=0;
    int y=0;
    public SimpleFeature next() throws IOException, IllegalAttributeException, NoSuchElementException {
      LineString geom=factory.createLineString(new Coordinate[]{new Coordinate(x + 0.0,y + 0.0),new Coordinate(x + .9,y + 0.9)});
      SimpleFeature feature=SimpleFeatureBuilder.build(featureType,new Object[]{geom,new Integer(x),new Integer(y)},null);
      if (x == (d.width - 1)) {
        y++;
        x=0;
      }
 else {
        x++;
      }
      return feature;
    }
    public boolean hasNext() throws IOException {
      return y < d.height;
    }
    public void close() throws IOException {
    }
  }
);
  store.addFeatures(collection);
  return file.toURI().toURL();
}
