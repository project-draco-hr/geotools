{
  Envelope env=geometry.getEnvelopeInternal();
  if (env.getWidth() < radius && renderingEnvelope.contains(env) && renderingEnvelope.getWidth() <= radius * 2) {
    return geometry;
  }
  if (env.getWidth() > radius && env.getWidth() < radius * 2) {
    geometry.apply(new WrappingCoordinateFilter(radius,radius * 2,mt));
    geometry.geometryChanged();
    env=geometry.getEnvelopeInternal();
  }
  List<Geometry> geoms=new ArrayList<Geometry>();
  Class geomType=null;
  double min=env.getMinX();
  double max=env.getMaxX();
  double lowLimit=Math.max(renderingEnvelope.getMinX(),renderingEnvelope.getMedian(0) - maxWraps * radius * 2);
  double highLimit=Math.min(renderingEnvelope.getMaxX(),renderingEnvelope.getMedian(0) + maxWraps * radius * 2);
  while (min > lowLimit) {
    min-=radius * 2;
  }
  while (max < highLimit) {
    max+=radius * 2;
  }
  geomType=accumulate(geoms,geometry,geomType);
  while (min <= highLimit) {
    double offset=min - env.getMinX();
    if (Math.abs(offset) < radius) {
    }
 else {
      Geometry offseted=(Geometry)geometry.clone();
      offseted.apply(new OffsetOrdinateFilter(0,offset));
      offseted.geometryChanged();
      geomType=accumulate(geoms,offseted,geomType);
    }
    min+=radius * 2;
  }
  if (geomType == null) {
    return null;
  }
  if (geoms.size() == 1) {
    return geoms.get(0);
  }
  if (Point.class.equals(geomType)) {
    Point[] points=(Point[])geoms.toArray(new Point[geoms.size()]);
    return geometry.getFactory().createMultiPoint(points);
  }
 else   if (LineString.class.isAssignableFrom(geomType)) {
    LineString[] lines=(LineString[])geoms.toArray(new LineString[geoms.size()]);
    return geometry.getFactory().createMultiLineString(lines);
  }
 else   if (Polygon.class.equals(geomType)) {
    Polygon[] polys=(Polygon[])geoms.toArray(new Polygon[geoms.size()]);
    return geometry.getFactory().createMultiPolygon(polys);
  }
 else {
    return geometry.getFactory().createGeometryCollection((Geometry[])geoms.toArray(new Geometry[geoms.size()]));
  }
}
