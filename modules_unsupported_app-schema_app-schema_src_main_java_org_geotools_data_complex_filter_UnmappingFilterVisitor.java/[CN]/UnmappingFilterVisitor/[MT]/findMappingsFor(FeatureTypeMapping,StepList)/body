{
  List candidates;
  if (!propertyName.toString().contains("[")) {
    candidates=mappings.getAttributeMappingsIgnoreIndex(propertyName);
  }
 else {
    candidates=new ArrayList<AttributeMapping>();
    AttributeMapping mapping=mappings.getAttributeMapping(propertyName);
    if (mapping != null) {
      candidates.add(mapping);
    }
  }
  List expressions=getExpressions(candidates);
  if (candidates.size() == 0 && propertyName.size() > 1) {
    XPath.Step clientPropertyStep=(Step)propertyName.get(propertyName.size() - 1);
    Name clientPropertyName=Types.toTypeName(clientPropertyStep.getName());
    XPath.StepList parentPath=new XPath.StepList(propertyName);
    parentPath.remove(parentPath.size() - 1);
    candidates=mappings.getAttributeMappingsIgnoreIndex(parentPath);
    expressions=getClientPropertyExpressions(candidates,clientPropertyName);
    if (expressions.isEmpty()) {
      FeatureTypeMapping inputMapping=mappings.getUnderlyingComplexMapping();
      if (inputMapping != null) {
        return getClientPropertyExpressions(inputMapping.getAttributeMappingsIgnoreIndex(parentPath),clientPropertyName);
      }
    }
  }
  return expressions;
}
