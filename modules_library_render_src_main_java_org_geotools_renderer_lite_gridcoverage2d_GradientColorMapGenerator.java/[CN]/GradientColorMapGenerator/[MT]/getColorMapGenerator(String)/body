{
  Utilities.ensureNonNull("colorValues",colorValues);
  if (colorValues.startsWith(RGB_INLINEVALUE_MARKER) || colorValues.startsWith(RGBA_INLINEVALUE_MARKER) || colorValues.startsWith(HEX_INLINEVALUE_MARKER)|| colorValues.startsWith(HEX2_INLINEVALUE_MARKER)) {
    String rampType="ramp";
    if (colorValues.contains(":")) {
      final int rampTypeIndex=colorValues.indexOf(":");
      rampType=colorValues.substring(rampTypeIndex + 1);
      colorValues=colorValues.substring(0,rampTypeIndex);
    }
    String colors[]=colorValues.split(";");
    final int numEntries=colors.length;
    LinearGradientEntry[] entries=new LinearGradientEntry[numEntries];
    final double step=1d / (numEntries - 1);
    for (int i=0; i < numEntries; i++) {
      final Color color=createColor(colors[i]);
      final float opacity=getOpacity(colors[i]);
      entries[i]=new LinearGradientEntry(step * i,color,opacity);
    }
    GradientColorMapGenerator generator=new GradientColorMapGenerator(entries);
    return generator;
  }
 else {
    throw new IOException("Unable to parse the specified colors: " + colorValues);
  }
}
