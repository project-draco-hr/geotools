{
  this.destination=destination;
  if (destination instanceof File)   try {
    super.outStream=ImageIO.createImageOutputStream(destination);
  }
 catch (  IOException e) {
    if (LOGGER.isLoggable(Level.SEVERE))     LOGGER.log(Level.SEVERE,e.getLocalizedMessage(),e);
    throw new DataSourceException(e);
  }
 else   if (destination instanceof URL) {
    final URL dest=(URL)destination;
    if (dest.getProtocol().equalsIgnoreCase("file")) {
      File destFile;
      destFile=DataUtilities.urlToFile(dest);
      try {
        super.outStream=ImageIO.createImageOutputStream(destFile);
      }
 catch (      IOException e) {
        if (LOGGER.isLoggable(Level.SEVERE))         LOGGER.log(Level.SEVERE,e.getLocalizedMessage(),e);
        throw new DataSourceException(e);
      }
    }
  }
 else   if (destination instanceof OutputStream) {
    try {
      super.outStream=ImageIO.createImageOutputStream((OutputStream)destination);
    }
 catch (    IOException e) {
      if (LOGGER.isLoggable(Level.SEVERE))       LOGGER.log(Level.SEVERE,e.getLocalizedMessage(),e);
      throw new DataSourceException(e);
    }
  }
 else   if (destination instanceof ImageOutputStream)   this.destination=outStream=(ImageOutputStream)destination;
 else   throw new DataSourceException("The provided destination cannot be used!");
  if (hints != null) {
    if (this.hints == null) {
      this.hints=new Hints(Hints.LENIENT_DATUM_SHIFT,Boolean.TRUE);
    }
    this.hints.add(hints);
  }
}
