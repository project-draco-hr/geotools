{
  super.setMembers(imageReader);
  final int imageIndex=getImageIndex();
  if (imageReader instanceof HDF4APSImageReader) {
    final HDF4APSImageReader reader=(HDF4APSImageReader)imageReader;
    setDriverDescription(driverDescription);
    setDriverName(driverName);
    String scale=reader.getAttributeAsString(imageIndex,HDF4APSProperties.PDSA_SCALINGSLOPE);
    if (scale != null && scale.trim().length() > 0) {
      setScales(new Double[]{Double.parseDouble(scale)});
    }
    String offset=reader.getAttributeAsString(imageIndex,HDF4APSProperties.PDSA_SCALINGINTERCEPT);
    if (offset != null && offset.trim().length() > 0) {
      setOffsets(new Double[]{Double.parseDouble(offset)});
    }
    String noData=reader.getAttributeAsString(imageIndex,HDF4APSProperties.PDSA_INVALID);
    if (noData != null && noData.trim().length() > 0) {
      setNoDataValues(new Double[]{Double.parseDouble(noData)});
    }
    String validRange=reader.getAttributeAsString(imageIndex,HDF4APSProperties.PDSA_VALIDRANGE);
    if (validRange == null || validRange.trim().length() < 1)     validRange=reader.getAttributeAsString(imageIndex,HDF4APSProperties.PDSA_BROWSERANGES);
    if (validRange != null && validRange.trim().length() > 0) {
      String values[]=validRange.split(",");
      if (values.length == 2) {
        if (!values[0].equalsIgnoreCase(values[1])) {
          setMinimums(new Double[]{Double.parseDouble(values[0])});
          setMaximums(new Double[]{Double.parseDouble(values[1])});
        }
      }
    }
    setDatasetName(reader.getDatasetName(imageIndex));
    setNumOverviews(new int[]{0});
    final int numAttributes=reader.getNumAttributes(imageIndex);
    this.additionalMetadata=new HashMap<String,String>(numAttributes);
    for (int i=0; i < numAttributes; i++) {
      final KeyValuePair attributePair=reader.getAttribute(imageIndex,i);
      final String attributeName=attributePair.getKey();
      final String attributeValue=attributePair.getValue();
      additionalMetadata.put(attributeName,attributeValue);
    }
  }
}
