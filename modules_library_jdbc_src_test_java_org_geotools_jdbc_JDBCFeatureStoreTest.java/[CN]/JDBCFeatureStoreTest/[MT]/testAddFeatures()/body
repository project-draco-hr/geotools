{
  SimpleFeatureBuilder b=new SimpleFeatureBuilder(featureStore.getSchema());
  DefaultFeatureCollection collection=new DefaultFeatureCollection(null,featureStore.getSchema());
  FeatureEventWatcher watcher=new FeatureEventWatcher();
  for (int i=3; i < 6; i++) {
    b.set(aname("intProperty"),new Integer(i));
    b.set(aname("geometry"),new GeometryFactory().createPoint(new Coordinate(i,i)));
    collection.add(b.buildFeature(null));
  }
  featureStore.addFeatureListener(watcher);
  List<FeatureId> fids=featureStore.addFeatures((SimpleFeatureCollection)collection);
  assertEquals(watcher.bounds,collection.getBounds());
  assertEquals(3,fids.size());
  SimpleFeatureCollection features=featureStore.getFeatures();
  assertEquals(6,features.size());
  FilterFactory ff=dataStore.getFilterFactory();
  for (Iterator f=fids.iterator(); f.hasNext(); ) {
    FeatureId identifier=(FeatureId)f.next();
    String fid=identifier.getID();
    Id filter=ff.id(Collections.singleton(identifier));
    features=featureStore.getFeatures(filter);
    assertEquals(1,features.size());
    SimpleFeatureIterator iterator=features.features();
    try {
      assertTrue(iterator.hasNext());
      SimpleFeature feature=(SimpleFeature)iterator.next();
      assertEquals(fid,feature.getID());
      assertFalse(iterator.hasNext());
    }
  finally {
      iterator.close();
    }
  }
}
