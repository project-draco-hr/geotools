{
  CurvedGeometryFactory curvedFactory;
  if (gf instanceof CurvedGeometryFactory) {
    curvedFactory=(CurvedGeometryFactory)gf;
  }
 else {
    curvedFactory=new CurvedGeometryFactory(gf,Double.MAX_VALUE);
  }
switch (SDO.TT(GTYPE)) {
case TT.POINT:
    return createPoint(curvedFactory,GTYPE,SRID,elemInfo,triplet,coords);
case TT.LINE:
  return createLine(curvedFactory,GTYPE,SRID,elemInfo,triplet,coords,false);
case TT.POLYGON:
return createPolygon(curvedFactory,GTYPE,SRID,elemInfo,triplet,coords);
case TT.MULTIPOINT:
return createMultiPoint(curvedFactory,GTYPE,SRID,elemInfo,triplet,coords);
case TT.MULTILINE:
return createMultiLine(curvedFactory,GTYPE,SRID,elemInfo,triplet,coords,N);
case TT.MULTIPOLYGON:
return createMultiPolygon(curvedFactory,GTYPE,SRID,elemInfo,triplet,coords,N,false);
case TT.COLLECTION:
return createCollection(curvedFactory,GTYPE,SRID,elemInfo,triplet,coords,N);
case TT.SOLID:
return createMultiPolygon(curvedFactory,GTYPE,SRID,elemInfo,triplet,coords,N,true);
case TT.UNKNOWN:
default :
LOGGER.warning("Cannot represent provided SDO STRUCT (GTYPE =" + GTYPE + ") using JTS Geometry");
return null;
}
}
