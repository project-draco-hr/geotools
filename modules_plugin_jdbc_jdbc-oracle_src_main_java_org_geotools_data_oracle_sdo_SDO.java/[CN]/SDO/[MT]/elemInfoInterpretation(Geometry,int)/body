{
switch (etype) {
case ETYPE.CUSTOM:
    break;
case ETYPE.POINT:
  if (geom instanceof Point) {
    return 1;
  }
if (geom instanceof MultiPoint) {
  return ((MultiPoint)geom).getNumGeometries();
}
break;
case ETYPE.LINE:
if (isCurve((LineString)geom)) {
return 2;
}
return 1;
case ETYPE.POLYGON:
case ETYPE.POLYGON_EXTERIOR:
case ETYPE.POLYGON_INTERIOR:
if (geom instanceof Polygon) {
Polygon polygon=(Polygon)geom;
if (isCurve(polygon)) {
return 2;
}
if (isRectangle(polygon)) {
return 3;
}
if (isCircle(polygon)) {
return 4;
}
}
return 1;
case ETYPE.COMPOUND:
throw new IllegalArgumentException("JTS LineStrings are not composed of curves and lines.");
case ETYPE.COMPOUND_POLYGON:
case ETYPE.COMPOUND_POLYGON_INTERIOR:
case ETYPE.COMPOUND_POLYGON_EXTERIOR:
throw new IllegalArgumentException("JTS Polygons are not composed of curves and lines.");
}
throw new IllegalArgumentException("Cannot encode JTS " + geom.getGeometryType() + " as "+ "SDO_INTERPRETATION (Limitied to Point, Line, Polygon, "+ "GeometryCollection, MultiPoint, MultiLineString and MultiPolygon)");
}
