{
  final int STARTING_OFFSET=STARTING_OFFSET(elemInfo,triplet);
  final int eTYPE=ETYPE(elemInfo,triplet);
  final int INTERPRETATION=INTERPRETATION(elemInfo,triplet);
  ensure("ELEM_INFO STARTING_OFFSET {1} must be in the range {0}..{1} of COORDINATES",1,STARTING_OFFSET,ordinateSize(coords,GTYPE));
  if (!(1 <= STARTING_OFFSET && STARTING_OFFSET <= ordinateSize(coords,GTYPE))) {
    throw new IllegalArgumentException("ELEM_INFO STARTING_OFFSET " + STARTING_OFFSET + "inconsistent with COORDINATES length "+ ordinateSize(coords,GTYPE));
  }
  ensure("ETYPE {0} must be expected POLYGON or POLYGON_EXTERIOR (one of {1})",eTYPE,new int[]{ETYPE.COMPOUND_POLYGON_EXTERIOR,ETYPE.COMPOUND_POLYGON,ETYPE.POLYGON,ETYPE.POLYGON_EXTERIOR,ETYPE.FACE_EXTERIOR,ETYPE.FACE_EXTERIOR});
  if ((eTYPE != ETYPE.COMPOUND_POLYGON_EXTERIOR) && (eTYPE != ETYPE.COMPOUND_POLYGON) && ((INTERPRETATION < 1) || (INTERPRETATION > 4))) {
    LOGGER.warning("Could not create JTS Polygon with INTERPRETATION " + INTERPRETATION + " "+ "- we can only support 1 for straight edges, 2 for circular ones, "+ "3 for rectangle and 4 for circles");
    return null;
  }
  LinearRing exteriorRing=createLinearRing(gf,GTYPE,SRID,elemInfo,triplet,coords);
  if (eTYPE == ETYPE.COMPOUND_POLYGON_EXTERIOR) {
    triplet=triplet + elemInfo[2];
  }
  List rings=new LinkedList();
  int etype;
  HOLES:   for (int i=triplet + 1; (etype=ETYPE(elemInfo,i)) != -1; ) {
    if (etype == ETYPE.POLYGON_INTERIOR) {
      rings.add(createLinearRing(gf,GTYPE,SRID,elemInfo,i,coords));
      i++;
    }
 else     if (etype == ETYPE.COMPOUND_POLYGON_INTERIOR) {
      int subelements=INTERPRETATION(elemInfo,i);
      rings.add(createLinearRing(gf,GTYPE,SRID,elemInfo,i,coords));
      i+=subelements;
    }
 else     if (etype == ETYPE.POLYGON) {
      LinearRing ring=createLinearRing(gf,GTYPE,SRID,elemInfo,i,coords);
      if (clock.isCCW(ring.getCoordinates())) {
        rings.add(ring);
        i++;
      }
 else {
        break HOLES;
      }
    }
 else {
      break HOLES;
    }
  }
  Polygon poly=gf.createPolygon(exteriorRing,toInteriorRingArray(rings));
  poly.setSRID(SRID);
  return poly;
}
