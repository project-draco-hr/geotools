{
  final int L=SDO.L(GTYPE);
  final int TT=SDO.TT(GTYPE);
  double[] list;
  double[][] lists;
  CoordinateSequence coords;
  if ((L == 0) && (TT == 01) && (point != null)&& (elemInfo == null)) {
    coords=SDO.coordinates(gf.getCoordinateSequenceFactory(),GTYPE,point);
    elemInfo=new int[]{1,ETYPE.POINT,1};
  }
 else {
    int element=0;
    int etype=ETYPE(elemInfo,element);
    if (etype == 0) {
      int startpointCoordinates=0;
      while (etype == 0) {
        element++;
        etype=ETYPE(elemInfo,element);
        startpointCoordinates=STARTING_OFFSET(elemInfo,element);
      }
      if (etype != -1) {
        int ol=ordinates.length;
        int elemsToCopy=ol - (startpointCoordinates - 1);
        double[] newOrdinates=new double[elemsToCopy];
        System.arraycopy(ordinates,startpointCoordinates - 1,newOrdinates,0,elemsToCopy);
        elemInfo=new int[]{1,etype,INTERPRETATION(elemInfo,element)};
        ordinates=newOrdinates;
      }
    }
    coords=SDO.coordinates(gf.getCoordinateSequenceFactory(),GTYPE,ordinates);
  }
  return create(gf,GTYPE,SRID,elemInfo,0,coords,-1);
}
