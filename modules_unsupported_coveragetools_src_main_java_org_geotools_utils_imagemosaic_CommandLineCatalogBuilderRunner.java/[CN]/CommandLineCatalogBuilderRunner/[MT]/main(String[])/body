{
  final CommandLineCatalogBuilderRunner runner=new CommandLineCatalogBuilderRunner(args);
  final CatalogBuilderConfiguration configuration=new CatalogBuilderConfiguration();
  configuration.setParameter(Prop.ABSOLUTE_PATH,runner.absolute.toString());
  configuration.setParameter(Prop.INDEX_NAME,runner.indexName);
  configuration.setParameter(Prop.FOOTPRINT_MANAGEMENT,runner.footprintManagement.toString());
  configuration.setParameter(Prop.CACHING,runner.caching.toString());
  configuration.setParameter(Prop.ROOT_MOSAIC_DIR,runner.rootMosaicDirectory);
  configuration.setParameter(Prop.WILDCARD,runner.wildcardString);
  configuration.setParameter(Prop.LOCATION_ATTRIBUTE,runner.locationAttribute);
  final String directories=runner.indexingDirectoriesString;
  final String[] dirs_=directories.split(",");
  final List<String> dirs=new ArrayList<String>();
  for (  String dir : dirs_)   dirs.add(dir);
  configuration.setParameter(Prop.INDEXING_DIRECTORIES,directories);
  final ImageMosaicEventHandlers eventHandler=new ImageMosaicEventHandlers();
  final ImageMosaicConfigHandler catalogHandler=new ImageMosaicConfigHandler(configuration,eventHandler);
  final ImageMosaicDirectoryWalker builder=new ImageMosaicDirectoryWalker(catalogHandler,eventHandler);
  final Queue<Throwable> exceptions=new LinkedList<Throwable>();
  try {
    final ImageMosaicEventHandlers.ProcessingEventListener listener=new ImageMosaicEventHandlers.ProcessingEventListener(){
      @Override public void exceptionOccurred(      ExceptionEvent event){
        final Throwable t=event.getException();
        exceptions.add(t);
        if (LOGGER.isLoggable(Level.SEVERE))         LOGGER.log(Level.SEVERE,t.getLocalizedMessage(),t);
      }
      @Override public void getNotification(      ProcessingEvent event){
        if (LOGGER.isLoggable(Level.FINE))         LOGGER.fine(event.getMessage());
      }
    }
;
    eventHandler.addProcessingEventListener(listener);
    builder.run();
  }
 catch (  Throwable e) {
    LOGGER.log(Level.SEVERE,"Unable to build mosaic",e);
  }
 finally {
    catalogHandler.dispose();
  }
}
