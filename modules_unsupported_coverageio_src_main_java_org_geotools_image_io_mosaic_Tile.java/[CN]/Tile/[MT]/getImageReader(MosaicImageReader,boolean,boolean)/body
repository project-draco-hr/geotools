{
  final ImageReaderSpi provider=getImageReaderSpi();
  final ImageReader reader;
  final Object currentInput;
  if (mosaic != null) {
    reader=mosaic.getTileReader(provider);
    currentInput=mosaic.getRawInput(reader);
  }
 else {
    reader=provider.createReaderInstance();
    currentInput=null;
  }
  final Object input=getInput();
  final boolean sameInput=Utilities.equals(input,currentInput);
  if (!sameInput || (getImageIndex() < reader.getMinIndex()) || (!seekForwardOnly && reader.isSeekForwardOnly())|| (!ignoreMetadata && reader.isIgnoringMetadata())) {
    Object actualInput=reader.getInput();
    reader.setInput(null);
    if (mosaic != null) {
      mosaic.setRawInput(reader,null);
    }
    ImageInputStream stream=null;
    if (actualInput instanceof ImageInputStream) {
      stream=(ImageInputStream)actualInput;
    }
    final ImageReaderSpi spi=reader.getOriginatingProvider();
    if (spi == null || isValidInput(spi.getInputTypes(),input)) {
      if (stream != null) {
        stream.close();
        stream=null;
      }
      actualInput=input;
    }
 else {
      if (stream != null) {
        if (sameInput)         try {
          stream.seek(0);
        }
 catch (        IndexOutOfBoundsException e) {
          Logging.recoverableException(Tile.class,"getImageReader",e);
          stream.close();
          stream=null;
        }
 else {
          stream.close();
          stream=null;
        }
      }
      if (stream == null) {
        stream=getInputStream();
      }
      actualInput=stream;
    }
    reader.setInput(actualInput,seekForwardOnly,ignoreMetadata);
    if (mosaic != null) {
      mosaic.setRawInput(reader,input);
    }
  }
  return reader;
}
