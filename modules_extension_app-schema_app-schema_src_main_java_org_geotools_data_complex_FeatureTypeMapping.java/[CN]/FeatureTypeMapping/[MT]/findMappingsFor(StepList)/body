{
  List candidates;
  if (!propertyName.toString().contains("[")) {
    candidates=getAttributeMappingsIgnoreIndex(propertyName);
  }
 else {
    candidates=new ArrayList<AttributeMapping>();
    AttributeMapping mapping=getAttributeMapping(propertyName);
    if (mapping != null) {
      candidates.add(mapping);
    }
  }
  List expressions=getExpressions(candidates);
  if (candidates.size() == 0 && propertyName.size() > 0) {
    XPath.Step clientPropertyStep=(Step)propertyName.get(propertyName.size() - 1);
    if (clientPropertyStep.isXmlAttribute()) {
      Name clientPropertyName=Types.toTypeName(clientPropertyStep.getName());
      XPath.StepList parentPath;
      if (propertyName.size() == 1) {
        parentPath=XPath.rootElementSteps(this.target,this.namespaces);
      }
 else {
        parentPath=new XPath.StepList(propertyName);
        parentPath.remove(parentPath.size() - 1);
      }
      candidates=getAttributeMappingsIgnoreIndex(parentPath);
      expressions=getClientPropertyExpressions(candidates,clientPropertyName,parentPath);
      if (expressions.isEmpty()) {
        FeatureTypeMapping inputMapping=getUnderlyingComplexMapping();
        if (inputMapping != null) {
          return getClientPropertyExpressions(inputMapping.getAttributeMappingsIgnoreIndex(parentPath),clientPropertyName,parentPath);
        }
      }
    }
  }
  return expressions;
}
