{
  if (query.getMaxFeatures() != Integer.MAX_VALUE) {
    return false;
  }
  SortBy sortBy;
  if (visitor instanceof MinVisitor) {
    MinVisitor minVisitor=(MinVisitor)visitor;
    List<Expression> exprs=minVisitor.getExpressions();
    if (exprs.size() != 1 || !(exprs.get(0) instanceof PropertyName)) {
      return false;
    }
    PropertyName propName=(PropertyName)exprs.get(0);
    sortBy=new SortByImpl(propName,SortOrder.ASCENDING);
  }
 else   if (visitor instanceof MaxVisitor) {
    MaxVisitor maxVisitor=(MaxVisitor)visitor;
    List<Expression> exprs=maxVisitor.getExpressions();
    if (exprs.size() != 1 || !(exprs.get(0) instanceof PropertyName)) {
      return false;
    }
    PropertyName propName=(PropertyName)exprs.get(0);
    sortBy=new SortByImpl(propName,SortOrder.DESCENDING);
  }
 else   if (visitor instanceof NearestVisitor) {
    NearestVisitor nearestVisitor=(NearestVisitor)visitor;
    Expression exp=nearestVisitor.getExpression();
    if (!(exp instanceof PropertyName)) {
      return false;
    }
    PropertyName propName=(PropertyName)exp;
    if (!(nearestVisitor.getValueToMatch() instanceof Date)) {
      return false;
    }
    FilterFactory factory=CommonFactoryFinder.getFilterFactory(null);
    PropertyName expr=factory.property("abs(ms(" + dateFormatUTC.format(nearestVisitor.getValueToMatch()) + ","+ propName.getPropertyName()+ "))");
    sortBy=new SortByImpl(expr,SortOrder.ASCENDING);
  }
 else {
    return false;
  }
  Query newQuery=new Query(query);
  newQuery.setSortBy(new SortBy[]{sortBy});
  newQuery.setMaxFeatures(1);
  FeatureReader<SimpleFeatureType,SimpleFeature> reader=getReader(newQuery);
  while (reader.hasNext()) {
    visitor.visit(reader.next());
  }
  return true;
}
