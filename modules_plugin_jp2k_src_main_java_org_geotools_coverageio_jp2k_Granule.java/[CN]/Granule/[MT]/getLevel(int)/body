{
synchronized (granuleLevels) {
    if (granuleLevels.containsKey(Integer.valueOf(index)))     return granuleLevels.get(Integer.valueOf(index));
 else {
      ImageInputStream inStream=null;
      ImageReader reader=null;
      try {
        inStream=Utils.getInputStream(granuleFile);
        if (inStream == null)         throw new IllegalArgumentException();
        if (cachedSPI == null) {
          reader=Utils.getReader(inStream);
          if (reader != null)           cachedSPI=reader.getOriginatingProvider();
        }
 else         reader=cachedSPI.createReaderInstance();
        if (reader == null)         throw new IllegalArgumentException("Unable to get an ImageReader for the provided file " + granuleFile.getAbsolutePath());
        final Rectangle levelDimension=ImageUtilities.getDimension(index,inStream,reader);
        final Level baseLevel=granuleLevels.get(0);
        final double scaleX=baseLevel.width / (1.0 * levelDimension.width);
        final double scaleY=baseLevel.height / (1.0 * levelDimension.height);
        final Level newLevel=new Level(scaleX,scaleY,levelDimension.width,levelDimension.height);
        this.granuleLevels.put(Integer.valueOf(index),newLevel);
        return newLevel;
      }
 catch (      IllegalStateException e) {
        throw new IllegalArgumentException(e);
      }
catch (      IOException e) {
        throw new IllegalArgumentException(e);
      }
 finally {
        try {
          if (inStream != null)           inStream.close();
        }
 catch (        Throwable e) {
          throw new IllegalArgumentException(e);
        }
 finally {
          if (reader != null)           reader.dispose();
        }
      }
    }
  }
}
