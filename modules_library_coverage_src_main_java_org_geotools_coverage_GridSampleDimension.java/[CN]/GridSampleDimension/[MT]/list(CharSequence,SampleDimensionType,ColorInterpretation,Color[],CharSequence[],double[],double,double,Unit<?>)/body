{
  if (description == null) {
    description=Vocabulary.formatInternational(VocabularyKeys.UNTITLED);
  }
  if (Double.isInfinite(minimum) || Double.isInfinite(maximum) || !(minimum < maximum)) {
    throw new IllegalArgumentException(Errors.format(ErrorKeys.BAD_RANGE_$2,minimum,maximum));
  }
  if (type == null) {
    type=TypeMap.getSampleDimensionType(minimum,maximum);
  }
  if (color == null) {
    color=ColorInterpretation.PALETTE_INDEX;
  }
  final int nameCount=(categories != null) ? categories.length : 0;
  final int nodataCount=(nodata != null) ? nodata.length : 0;
  final List<Category> categoryList=new ArrayList<Category>(nameCount + nodataCount + 2);
  for (int i=0; i < nodataCount; i++) {
    CharSequence name=null;
    final double padValue=nodata[i];
    final int intValue=(int)Math.floor(padValue);
    if (intValue >= 0 && intValue < nameCount) {
      if (intValue == padValue) {
        continue;
      }
      name=categories[intValue];
    }
    final Number value=TypeMap.wrapSample(padValue,type,false);
    if (name == null) {
      name=value.toString();
    }
    final NumberRange<?> range=new NumberRange(value.getClass(),value,value);
    final Color[] colors=ColorUtilities.subarray(palette,intValue,intValue + 1);
    categoryList.add(new Category(name,colors,range,false));
  }
  if (nameCount != 0) {
    int lower=0;
    final int length=categories.length;
    for (int upper=1; upper <= length; upper++) {
      if (upper != length) {
        final String nameLower=categories[lower].toString().trim();
        final String nameUpper=categories[upper].toString().trim();
        if (nameLower.equalsIgnoreCase(nameUpper)) {
          continue;
        }
      }
      final CharSequence name=categories[lower];
      Number min=TypeMap.wrapSample(lower,type,false);
      Number max=TypeMap.wrapSample(upper - 1,type,false);
      final Class<? extends Number> classe;
      if (min.equals(max)) {
        min=max;
        classe=max.getClass();
      }
 else {
        classe=ClassChanger.getWidestClass(min,max);
        min=ClassChanger.cast(min,classe);
        max=ClassChanger.cast(max,classe);
      }
      final NumberRange<?> range=new NumberRange(classe,min,max);
      final Color[] colors=ColorUtilities.subarray(palette,lower,upper);
      categoryList.add(new Category(name,colors,range,false));
      lower=upper;
    }
  }
  boolean needQuantitative=false;
  if (nodataCount != 0 || categoryList.size() <= 1) {
    needQuantitative=true;
    for (int i=categoryList.size(); --i >= 0; ) {
      Category category=categoryList.get(i);
      if (!category.isQuantitative()) {
        final NumberRange range=category.getRange();
        final Comparable min=range.getMinValue();
        final Comparable max=range.getMaxValue();
        @SuppressWarnings("unchecked") final int c=min.compareTo(max);
        if (c != 0) {
          final double xmin=((Number)min).doubleValue();
          final double xmax=((Number)max).doubleValue();
          if (!rangeContains(xmin,xmax,nodata)) {
            final InternationalString name=category.getName();
            final Color[] colors=category.getColors();
            category=new Category(name,colors,range);
            categoryList.set(i,category);
            needQuantitative=false;
          }
        }
      }
    }
  }
  if (needQuantitative) {
    boolean minIncluded=true;
    boolean maxIncluded=true;
    for (int i=categoryList.size(); --i >= 0; ) {
      final NumberRange range=categoryList.get(i).getRange();
      final double min=range.getMinimum();
      final double max=range.getMaximum();
      if (max - minimum < maximum - min) {
        if (max >= minimum) {
          minimum=max;
          minIncluded=!range.isMaxIncluded();
        }
      }
 else {
        if (min <= maximum) {
          maximum=min;
          maxIncluded=!range.isMinIncluded();
        }
      }
    }
    if (maximum - minimum > (minIncluded && maxIncluded ? 0 : 1)) {
      Number min=TypeMap.wrapSample(minimum,type,false);
      Number max=TypeMap.wrapSample(maximum,type,false);
      final Class<? extends Number> classe=ClassChanger.getWidestClass(min,max);
      min=ClassChanger.cast(min,classe);
      max=ClassChanger.cast(max,classe);
      final NumberRange range=new NumberRange(classe,min,minIncluded,max,maxIncluded);
      final Color[] colors=ColorUtilities.subarray(palette,(int)Math.ceil(minimum),(int)Math.floor(maximum));
      categoryList.add(new Category(description,colors,range));
      needQuantitative=false;
    }
  }
  final Category[] cl=categoryList.toArray(new Category[categoryList.size()]);
  if (ColorInterpretation.PALETTE_INDEX.equals(color) || ColorInterpretation.GRAY_INDEX.equals(color)) {
    return list(cl,unit);
  }
  throw new UnsupportedOperationException("Not yet implemented");
}
