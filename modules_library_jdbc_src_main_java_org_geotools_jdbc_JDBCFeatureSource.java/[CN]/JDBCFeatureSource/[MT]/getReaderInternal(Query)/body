{
  Filter[] split=splitFilter(query.getFilter());
  Filter preFilter=split[0];
  Filter postFilter=split[1];
  boolean postFilterRequired=postFilter != null && postFilter != Filter.INCLUDE;
  DefaultQuery preQuery=new DefaultQuery(query);
  preQuery.setFilter(preFilter);
  if (postFilterRequired) {
    preQuery.setStartIndex(0);
    preQuery.setMaxFeatures(Integer.MAX_VALUE);
  }
  SimpleFeatureType[] types=buildQueryAndReturnFeatureTypes(getSchema(),query.getPropertyNames(),postFilter);
  SimpleFeatureType querySchema=types[0];
  SimpleFeatureType returnedSchema=types[1];
  Connection cx=getDataStore().getConnection(getState());
  FeatureReader<SimpleFeatureType,SimpleFeature> reader;
  try {
    SQLDialect dialect=getDataStore().getSQLDialect();
    if (getState().getTransaction() == Transaction.AUTO_COMMIT) {
      cx.setAutoCommit(dialect.isAutoCommitQuery());
    }
    if (query.getJoins().isEmpty()) {
      if (dialect instanceof PreparedStatementSQLDialect) {
        PreparedStatement ps=getDataStore().selectSQLPS(querySchema,preQuery,cx);
        reader=new JDBCFeatureReader(ps,cx,this,querySchema,query.getHints());
      }
 else {
        String sql=getDataStore().selectSQL(querySchema,preQuery);
        getDataStore().getLogger().fine(sql);
        reader=new JDBCFeatureReader(sql,cx,this,querySchema,query.getHints());
      }
    }
 else {
      JoinInfo join=JoinInfo.create(preQuery,this);
      if (dialect instanceof PreparedStatementSQLDialect) {
        PreparedStatement ps=getDataStore().selectJoinSQLPS(querySchema,join,preQuery,cx);
        reader=new JDBCJoiningFeatureReader(ps,cx,this,querySchema,join,query.getHints());
      }
 else {
        String sql=getDataStore().selectJoinSQL(querySchema,join,preQuery);
        getDataStore().getLogger().fine(sql);
        reader=new JDBCJoiningFeatureReader(sql,cx,this,querySchema,join,query.getHints());
      }
      if (join.hasPostFilters()) {
        reader=new JDBCJoiningFilteringFeatureReader(reader,join);
      }
    }
  }
 catch (  Throwable e) {
    getDataStore().closeSafe(cx);
    if (e instanceof Error) {
      throw (Error)e;
    }
 else {
      throw (IOException)new IOException().initCause(e);
    }
  }
  if (postFilterRequired) {
    reader=new FilteringFeatureReader<SimpleFeatureType,SimpleFeature>(reader,postFilter);
    if (!returnedSchema.equals(querySchema)) {
      reader=new ReTypeFeatureReader(reader,returnedSchema);
    }
    int offset=query.getStartIndex() != null ? query.getStartIndex() : 0;
    if (offset > 0) {
      for (int i=0; i < offset && reader.hasNext(); i++) {
        reader.next();
      }
    }
    if (query.getMaxFeatures() >= 0 && query.getMaxFeatures() < Integer.MAX_VALUE) {
      reader=new MaxFeatureReader<SimpleFeatureType,SimpleFeature>(reader,query.getMaxFeatures());
    }
  }
  return reader;
}
