{
  Expression testAttribute1=new LiteralExpressionImpl(new Integer(4));
  Expression testAttribute2=new LiteralExpressionImpl(new Integer(2));
  MathExpressionImpl mathTest=new AddImpl(null,null);
  mathTest.addLeftValue(testAttribute1);
  mathTest.addRightValue(testAttribute2);
  LOGGER.fine("math test: " + testAttribute1.getValue(testFeature) + " + "+ testAttribute2.getValue(testFeature)+ " = "+ mathTest.getValue(testFeature));
  assertEquals(new Integer(6),mathTest.evaluate(testFeature,Integer.class));
  mathTest=new SubtractImpl(null,null);
  mathTest.addLeftValue(testAttribute1);
  mathTest.addRightValue(testAttribute2);
  LOGGER.fine("math test: " + testAttribute1.getValue(testFeature) + " - "+ testAttribute2.getValue(testFeature)+ " = "+ mathTest.getValue(testFeature));
  assertEquals(new Integer(2),mathTest.evaluate(testFeature,Integer.class));
  mathTest=new MultiplyImpl(null,null);
  mathTest.addLeftValue(testAttribute1);
  mathTest.addRightValue(testAttribute2);
  LOGGER.fine("math test: " + testAttribute1.getValue(testFeature) + " * "+ testAttribute2.getValue(testFeature)+ " = "+ mathTest.getValue(testFeature));
  assertEquals(new Integer(8),mathTest.evaluate(testFeature,Integer.class));
  mathTest=new DivideImpl(null,null);
  mathTest.addLeftValue(testAttribute1);
  mathTest.addRightValue(testAttribute2);
  LOGGER.fine("math test: " + testAttribute1.getValue(testFeature) + " / "+ testAttribute2.getValue(testFeature)+ " = "+ mathTest.getValue(testFeature));
  assertEquals(new Double(2),mathTest.getValue(testFeature));
}
