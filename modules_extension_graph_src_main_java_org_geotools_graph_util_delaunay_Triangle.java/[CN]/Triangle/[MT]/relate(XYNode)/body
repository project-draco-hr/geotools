{
  int ret;
  if ((!(node1 instanceof XYNode)) || (!(node2 instanceof XYNode)) || (!(node3 instanceof XYNode))) {
    throw new RuntimeException("I can't perform a relate function on a non-spatial triangle");
  }
  LinearRing lr=fact.createLinearRing(new Coordinate[]{((XYNode)node1).getCoordinate(),((XYNode)node2).getCoordinate(),((XYNode)node3).getCoordinate(),((XYNode)node1).getCoordinate()});
  Polygon poly=fact.createPolygon(lr,null);
  Point nPoint=fact.createPoint(n.getCoordinate());
  Line2D.Double line12=new Line2D.Double(((XYNode)node1).getCoordinate().x,((XYNode)node1).getCoordinate().y,((XYNode)node2).getCoordinate().x,((XYNode)node2).getCoordinate().y);
  Line2D.Double line13=new Line2D.Double(((XYNode)node1).getCoordinate().x,((XYNode)node1).getCoordinate().y,((XYNode)node3).getCoordinate().x,((XYNode)node3).getCoordinate().y);
  Line2D.Double line23=new Line2D.Double(((XYNode)node2).getCoordinate().x,((XYNode)node2).getCoordinate().y,((XYNode)node3).getCoordinate().x,((XYNode)node3).getCoordinate().y);
  Point2D.Double point2D=new Point2D.Double(n.getCoordinate().x,n.getCoordinate().y);
  if ((line12.ptSegDist(point2D) <= TOLERANCE) || (line13.ptSegDist(point2D) <= TOLERANCE) || (line23.ptSegDist(point2D) <= TOLERANCE)) {
    ret=ON_EDGE;
  }
 else   if (poly.contains(nPoint)) {
    ret=INSIDE;
  }
 else {
    ret=OUTSIDE;
  }
  return ret;
}
