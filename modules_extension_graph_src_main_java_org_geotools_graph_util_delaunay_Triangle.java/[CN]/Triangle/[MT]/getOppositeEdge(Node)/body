{
  if ((edge1.getNodeA().equals(n) || (edge1.getNodeB().equals(n)))) {
    if ((edge2.getNodeA().equals(n) || (edge2.getNodeB().equals(n)))) {
      return edge3;
    }
 else     if ((edge3.getNodeA().equals(n) || (edge3.getNodeB().equals(n)))) {
      return edge2;
    }
 else {
      throw new RuntimeException("Node n must be in this triangle for Triangle.getOppositeEdge to work!");
    }
  }
 else   if ((edge2.getNodeA().equals(n) || (edge2.getNodeB().equals(n)))) {
    if ((edge3.getNodeA().equals(n) || (edge3.getNodeB().equals(n)))) {
      return edge1;
    }
 else {
      throw new RuntimeException("Node n must be in this triangle for Triangle.getOppositeEdge to work!");
    }
  }
 else {
    throw new RuntimeException("Node n must be in this triangle for Triangle.getOppositeEdge to work!");
  }
}
