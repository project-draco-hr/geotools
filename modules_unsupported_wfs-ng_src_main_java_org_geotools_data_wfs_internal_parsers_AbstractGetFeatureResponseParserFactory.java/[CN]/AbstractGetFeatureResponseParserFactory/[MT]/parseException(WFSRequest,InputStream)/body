{
  Parser parser=new Parser(originatingRequest.getStrategy().getWfsConfiguration());
  Object parsed;
  try {
    parsed=parser.parse(inputStream);
    if (!(parsed instanceof net.opengis.ows10.ExceptionReportType || parsed instanceof net.opengis.ows11.ExceptionReportType)) {
      throw new IOException("Unrecognized server error");
    }
  }
 catch (  Exception e) {
    return new WFSException("Exception parsing server exception report",e);
  }
  if (parsed instanceof net.opengis.ows10.ExceptionReportType) {
    net.opengis.ows10.ExceptionReportType report=(net.opengis.ows10.ExceptionReportType)parsed;
    @SuppressWarnings("unchecked") List<net.opengis.ows10.ExceptionType> exceptions=report.getException();
    StringBuilder msg=new StringBuilder("WFS returned an exception.");
    if (originatingRequest != null) {
      msg.append(" Originating Request: ");
      msg.append(originatingRequest.toString());
    }
    WFSException result=new WFSException(msg.toString());
    for (    net.opengis.ows10.ExceptionType ex : exceptions) {
      result.addExceptionReport(ex.getExceptionCode() + ": " + String.valueOf(ex.getExceptionText()));
    }
    return result;
  }
 else {
    net.opengis.ows11.ExceptionReportType report=(net.opengis.ows11.ExceptionReportType)parsed;
    @SuppressWarnings("unchecked") List<net.opengis.ows11.ExceptionType> exceptions=report.getException();
    StringBuilder msg=new StringBuilder("WFS returned an exception.");
    if (originatingRequest != null) {
      msg.append(" Originating Request: ");
      msg.append(originatingRequest.toString());
    }
    WFSException result=new WFSException(msg.toString());
    for (    net.opengis.ows11.ExceptionType ex : exceptions) {
      result.addExceptionReport(ex.getExceptionCode() + ": " + String.valueOf(ex.getExceptionText()));
    }
    return result;
  }
}
