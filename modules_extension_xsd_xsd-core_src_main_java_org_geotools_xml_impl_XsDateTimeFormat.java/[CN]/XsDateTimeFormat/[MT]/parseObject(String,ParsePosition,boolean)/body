{
  if (pString == null) {
    throw new NullPointerException("The String argument must not be null.");
  }
  if (pParsePosition == null) {
    throw new NullPointerException("The ParsePosition argument must not be null.");
  }
  int offset=pParsePosition.getIndex();
  int length=pString.length();
  boolean isMinus=false;
  StringBuffer digits=new StringBuffer();
  int year, month, mday;
  if (parseDate) {
    if (offset < length) {
      char c=pString.charAt(offset);
      if (c == '+') {
        ++offset;
      }
 else       if (c == '-') {
        ++offset;
        isMinus=true;
      }
    }
    offset=parseInt(pString,offset,digits);
    if (digits.length() < 4) {
      pParsePosition.setErrorIndex(offset);
      return null;
    }
    year=Integer.parseInt(digits.toString());
    if (offset < length && pString.charAt(offset) == '-') {
      ++offset;
    }
 else {
      pParsePosition.setErrorIndex(offset);
      return null;
    }
    offset=parseInt(pString,offset,digits);
    if (digits.length() != 2) {
      pParsePosition.setErrorIndex(offset);
      return null;
    }
    month=Integer.parseInt(digits.toString());
    if (offset < length && pString.charAt(offset) == '-') {
      ++offset;
    }
 else {
      pParsePosition.setErrorIndex(offset);
      return null;
    }
    offset=parseInt(pString,offset,digits);
    if (digits.length() != 2) {
      pParsePosition.setErrorIndex(offset);
      return null;
    }
    mday=Integer.parseInt(digits.toString());
    if (parseTime) {
      if (offset < length && pString.charAt(offset) == 'T') {
        ++offset;
      }
 else {
        if (lenient) {
          if (offset >= length) {
            pString=pString + "T";
          }
 else {
            pString=pString.substring(0,offset) + "T" + pString.substring(offset);
          }
          ++offset;
          length=pString.length();
        }
 else {
          pParsePosition.setErrorIndex(offset);
          return null;
        }
      }
    }
  }
 else {
    year=month=mday=0;
  }
  int hour, minute, second, millis;
  if (parseTime) {
    int offsetBefore=offset;
    offset=parseInt(pString,offset,digits);
    if (digits.length() != 2) {
      if (lenient) {
        pString=pString.substring(0,offsetBefore) + "00" + pString.substring(offset);
        offset=parseInt(pString,offsetBefore,digits);
        length=pString.length();
      }
 else {
        pParsePosition.setErrorIndex(offset);
        return null;
      }
    }
    hour=Integer.parseInt(digits.toString());
    if (offset < length && pString.charAt(offset) == ':') {
      ++offset;
    }
 else {
      if (lenient) {
        if (offset >= length) {
          pString=pString + ":";
        }
 else {
          pString=pString.substring(0,offset) + ":" + pString.substring(offset);
        }
        ++offset;
        length=pString.length();
      }
 else {
        pParsePosition.setErrorIndex(offset);
        return null;
      }
    }
    offsetBefore=offset;
    offset=parseInt(pString,offset,digits);
    if (digits.length() != 2) {
      if (lenient) {
        pString=pString.substring(0,offsetBefore) + "00" + pString.substring(offset);
        offset=parseInt(pString,offsetBefore,digits);
        length=pString.length();
      }
 else {
        pParsePosition.setErrorIndex(offset);
        return null;
      }
    }
    minute=Integer.parseInt(digits.toString());
    if (offset < length && pString.charAt(offset) == ':') {
      ++offset;
    }
 else {
      if (lenient) {
        if (offset >= length) {
          pString=pString + ":";
        }
 else {
          pString=pString.substring(0,offset) + ":" + pString.substring(offset);
        }
        ++offset;
        length=pString.length();
      }
 else {
        pParsePosition.setErrorIndex(offset);
        return null;
      }
    }
    offsetBefore=offset;
    offset=parseInt(pString,offset,digits);
    if (digits.length() != 2) {
      if (lenient) {
        pString=pString.substring(0,offsetBefore) + "00" + pString.substring(offset);
        offset=parseInt(pString,offsetBefore,digits);
        length=pString.length();
      }
 else {
        pParsePosition.setErrorIndex(offset);
        return null;
      }
    }
    second=Integer.parseInt(digits.toString());
    if (offset < length && pString.charAt(offset) == '.') {
      ++offset;
      offsetBefore=offset;
      offset=parseInt(pString,offset,digits);
      if (digits.length() > 0) {
        millis=Integer.parseInt(digits.toString());
        if (millis > 999) {
          if (lenient) {
            pString=pString.substring(0,offsetBefore) + "000" + pString.substring(offset);
            length=pString.length();
          }
 else {
            pParsePosition.setErrorIndex(offset);
            return null;
          }
        }
        for (int i=digits.length(); i < 3; i++) {
          millis*=10;
        }
      }
 else {
        millis=0;
      }
    }
 else {
      millis=0;
    }
  }
 else {
    hour=minute=second=millis=0;
  }
  digits.setLength(0);
  digits.append("GMT");
  if (offset < length) {
    char c=pString.charAt(offset);
    if (c == 'Z') {
      ++offset;
    }
 else     if (c == '+' || c == '-') {
      digits.append(c);
      ++offset;
      for (int i=0; i < 5; i++) {
        if (offset >= length) {
          pParsePosition.setErrorIndex(offset);
          return null;
        }
        c=pString.charAt(offset);
        if ((i != 2 && Character.isDigit(c)) || (i == 2 && c == ':')) {
          digits.append(c);
        }
 else {
          pParsePosition.setErrorIndex(offset);
          return null;
        }
        ++offset;
      }
    }
  }
  TimeZone tz;
  if (parseTime) {
    tz=TimeZone.getTimeZone(digits.toString());
  }
 else {
    tz=TimeZone.getTimeZone("GMT");
  }
  Calendar cal=Calendar.getInstance(tz);
  cal.clear();
  if (parseDate) {
    cal.set(Calendar.YEAR,isMinus ? -year : year);
    cal.set(Calendar.MONTH,month - 1);
    cal.set(Calendar.DAY_OF_MONTH,mday);
  }
  if (parseTime) {
    cal.set(Calendar.HOUR_OF_DAY,hour);
    cal.set(Calendar.MINUTE,minute);
    cal.set(Calendar.SECOND,second);
    cal.set(Calendar.MILLISECOND,millis);
  }
  pParsePosition.setIndex(offset);
  return cal;
}
