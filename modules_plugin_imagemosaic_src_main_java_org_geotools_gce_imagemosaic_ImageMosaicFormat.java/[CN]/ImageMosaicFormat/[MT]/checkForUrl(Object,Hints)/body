{
  try {
    URL sourceURL=Utils.checkSource(source,hints);
    if (sourceURL == null) {
      return false;
    }
    if (source instanceof File) {
      File file=(File)source;
      if (!file.exists()) {
        return false;
      }
    }
    DataStore tileIndexStore=null;
    CoordinateReferenceSystem crs=null;
    boolean shapefile=true;
    try {
      final File sourceF=DataUtilities.urlToFile(sourceURL);
      if (FilenameUtils.getName(sourceF.getAbsolutePath()).equalsIgnoreCase("datastore.properties")) {
        shapefile=false;
        final Properties properties=new Properties();
        final FileInputStream stream=new FileInputStream(sourceF);
        try {
          properties.load(stream);
        }
  finally {
          IOUtils.closeQuietly(stream);
        }
        final String SPIClass=properties.getProperty("SPI");
        final DataStoreFactorySpi spi=(DataStoreFactorySpi)Class.forName(SPIClass).newInstance();
        final Map<String,Serializable> params=new HashMap<String,Serializable>();
        final Param[] paramsInfo=spi.getParametersInfo();
        for (        Param p : paramsInfo) {
          if (properties.containsKey(p.key))           params.put(p.key,(Serializable)Converters.convert(properties.getProperty(p.key),p.type));
 else           if (p.required && p.sample == null) {
            if (LOGGER.isLoggable(Level.FINE))             LOGGER.fine("Required parameter missing: " + p.toString());
            return false;
          }
        }
        tileIndexStore=spi.createDataStore(params);
        if (tileIndexStore == null)         return false;
      }
 else {
        URL testPropertiesUrl=DataUtilities.changeUrlExt(sourceURL,"properties");
        File testFile=DataUtilities.urlToFile(testPropertiesUrl);
        if (!testFile.exists()) {
          return false;
        }
        ShapefileDataStore store=new ShapefileDataStore(sourceURL);
        store.setDbftimeZone(TimeZone.getTimeZone("UTC"));
        tileIndexStore=store;
      }
      final String[] typeNames=tileIndexStore.getTypeNames();
      if (typeNames.length <= 0)       return false;
      final String typeName=typeNames[0];
      if (typeName == null)       return false;
      final SimpleFeatureSource featureSource=tileIndexStore.getFeatureSource(typeName);
      if (featureSource == null)       return false;
      final SimpleFeatureType schema=featureSource.getSchema();
      if (schema == null)       return false;
      crs=featureSource.getSchema().getGeometryDescriptor().getCoordinateReferenceSystem();
      if (crs == null)       return false;
      URL propsUrl=null;
      if (shapefile)       propsUrl=DataUtilities.changeUrlExt(sourceURL,"properties");
 else {
        final File parent=DataUtilities.urlToFile(sourceURL).getParentFile();
        final File[] properties=parent.listFiles((FilenameFilter)FileFilterUtils.andFileFilter(FileFilterUtils.notFileFilter(FileFilterUtils.nameFileFilter("indexer.properties")),FileFilterUtils.andFileFilter(FileFilterUtils.notFileFilter(FileFilterUtils.nameFileFilter("datastore.properties")),FileFilterUtils.makeFileOnly(FileFilterUtils.suffixFileFilter(".properties")))));
        for (        File propFile : properties)         if (Utils.checkFileReadable(propFile) && Utils.loadMosaicProperties(DataUtilities.fileToURL(propFile),"") != null) {
          propsUrl=DataUtilities.fileToURL(propFile);
          break;
        }
      }
      final MosaicConfigurationBean props=Utils.loadMosaicProperties(propsUrl,"location");
      if (props == null)       return false;
      final String locationAttributeName=props.getLocationAttribute();
      if (schema.getDescriptor(locationAttributeName) == null)       return false;
      return true;
    }
  finally {
      try {
        if (tileIndexStore != null)         tileIndexStore.dispose();
      }
 catch (      Throwable e) {
        if (LOGGER.isLoggable(Level.FINE))         LOGGER.log(Level.FINE,e.getLocalizedMessage(),e);
      }
    }
  }
 catch (  Throwable e) {
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.log(Level.FINE,e.getLocalizedMessage(),e);
    return false;
  }
}
