{
  if (validationProcessor == null) {
    LOGGER.warning("Validation Processor unavaialble");
    return;
  }
  LOGGER.finer("Required to validate " + featureStores.size() + " typeRefs");
  LOGGER.finer("within " + bBox);
  Set typeRefs=new HashSet();
  for (  Name name : featureStores.keySet()) {
    String typeRef=typeRef(name);
    typeRefs.add(typeRef);
    Set dependencies=validationProcessor.getDependencies(typeRef);
    LOGGER.finer("typeRef " + typeRef + " requires "+ dependencies);
    if (dependencies != null && dependencies.size() > 0)     typeRefs.addAll(dependencies);
  }
  Map sources=new HashMap();
  for (Iterator i=typeRefs.iterator(); i.hasNext(); ) {
    String typeRef=(String)i.next();
    LOGGER.finer("Searching for required typeRef: " + typeRef);
    if (featureStores.containsKey(typeRef)) {
      LOGGER.finer(" found required typeRef: " + typeRef + " (it was already loaded)");
      sources.put(typeRef,featureStores.get(typeRef));
    }
 else {
      LOGGER.finer(" could not find typeRef: " + typeRef + " (we will now load it)");
      String split[]=typeRef.split(":");
      String dataStoreId=split[0];
      String typeName=split[1];
      LOGGER.finer(" going to look for dataStoreId:" + dataStoreId + " and typeName:"+ typeName);
      LOGGER.finer(" loaded required typeRef: " + typeRef);
      FeatureSource<?,?> source=repository.source(dataStoreId,typeName);
      sources.put(typeRef,source);
    }
  }
  LOGGER.finer("Total of " + sources.size() + " SimpleFeatureSource marshalled for testing");
  final Map failed=new TreeMap();
  try {
    LOGGER.finer("Runing integrity tests using validation validationProcessor ");
    validationProcessor.runIntegrityTests(featureStores.keySet(),sources,bBox,results);
  }
 catch (  Exception badIdea) {
    badIdea.printStackTrace();
    throw new DataSourceException("Validation Failed",badIdea);
  }
  if (failed.isEmpty()) {
    LOGGER.finer("All validation tests passed");
    return;
  }
  LOGGER.finer("Validation fail - marshal result for transaction document");
  StringBuffer message=new StringBuffer();
  for (Iterator i=failed.entrySet().iterator(); i.hasNext(); ) {
    Map.Entry entry=(Map.Entry)i.next();
    message.append(entry.getKey());
    message.append(" failed test ");
    message.append(entry.getValue());
    message.append("\n");
  }
}
