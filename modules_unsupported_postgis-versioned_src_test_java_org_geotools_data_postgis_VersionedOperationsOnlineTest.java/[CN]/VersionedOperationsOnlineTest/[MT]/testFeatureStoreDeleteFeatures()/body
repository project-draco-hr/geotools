{
  VersionedPostgisDataStore ds=getDataStore();
  ds.setVersioned("road",true,"gimbo","version enabling stuff");
  Filter filter=ff.id(Collections.singleton(ff.featureId("road.rd1")));
  FeatureReader<SimpleFeatureType,SimpleFeature> fr=ds.getFeatureReader(new DefaultQuery("road",filter),Transaction.AUTO_COMMIT);
  Envelope env=((Geometry)((SimpleFeature)fr.next()).getDefaultGeometry()).getEnvelopeInternal();
  fr.close();
  Transaction t=createTransaction("gimbo","removing one feature by mass delete with filter");
  VersioningFeatureStore fs=(VersioningFeatureStore)ds.getFeatureSource("road");
  fs.setTransaction(t);
  fs.removeFeatures(filter);
  t.commit();
  t.close();
  fs.setTransaction(Transaction.AUTO_COMMIT);
  fr=ds.getFeatureReader(new DefaultQuery("road"),Transaction.AUTO_COMMIT);
  while (fr.hasNext())   assertFalse(fr.next().getID().equals("road.rd1"));
  fr.close();
  DefaultQuery q=new DefaultQuery("changesets");
  q.setSortBy(new SortBy[]{ff.sort("revision",SortOrder.DESCENDING)});
  final SimpleFeatureCollection changes=ds.getFeatureSource("changesets").getFeatures(q);
  SimpleFeatureIterator fi=changes.features();
  SimpleFeature lastChangeset=fi.next();
  fi.close();
  assertEquals(env,((Geometry)lastChangeset.getDefaultGeometry()).getEnvelopeInternal());
  long lastRevision=(Long)lastChangeset.getAttribute("revision");
  String vPrev=String.valueOf(lastRevision - 1);
  String vCurr=String.valueOf(lastRevision);
  FeatureDiffReader fdr=fs.getDifferences(vPrev,vCurr,null,null);
  assertTrue(fdr.hasNext());
  FeatureDiff fd=fdr.next();
  assertEquals(FeatureDiff.DELETED,fd.getState());
  assertEquals("road.rd1",fd.getOldFeature().getID());
  fdr.close();
  String[] modifiedTypes=ds.getModifiedFeatureTypes(vPrev,vCurr);
  assertEquals(1,modifiedTypes.length);
  assertEquals("road",modifiedTypes[0]);
}
