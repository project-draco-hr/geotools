{
  VersionedPostgisDataStore ds=getDataStore();
  SimpleFeatureType ft=ds.getSchema("road");
  assertFalse(ds.isVersioned("road"));
  ds.setVersioned("road",true,"gimbo","Initial import of roads");
  assertTrue(ds.isVersioned("road"));
  assertEquals(ft,ds.getSchema("road"));
  if (ds.getFIDMapper("road").returnFIDColumnsAsAttributes())   assertNotNull(ds.wrapped.getSchema("road").getDescriptor("revision"));
  assertNotNull(ds.wrapped.getSchema("road").getDescriptor("expired"));
  assertFalse(Arrays.asList(ds.getTypeNames()).contains("road_vfc_view"));
  SimpleFeatureType view=ds.wrapped.getSchema("road_vfc_view");
  AttributeDescriptor[] types=view.getAttributeDescriptors().toArray(new AttributeDescriptor[view.getAttributeDescriptors().size()]);
  assertEquals(ft.getAttributeCount() + 12,view.getAttributeCount());
  assertEquals("creationVersion",types[0].getLocalName());
  assertEquals("createdBy",types[1].getLocalName());
  assertEquals("creationDate",types[2].getLocalName());
  assertEquals("creationMessage",types[3].getLocalName());
  assertEquals("lastUpdateVersion",types[4].getLocalName());
  assertEquals("lastUpdatedBy",types[5].getLocalName());
  assertEquals("lastUpdateDate",types[6].getLocalName());
  assertEquals("lastUpdateMessage",types[7].getLocalName());
  try {
    ds.getSchema("road_vfc_view");
    fail("The versioning feature collection for road should not be visible as a standalone type");
  }
 catch (  IOException e) {
  }
  ds.setVersioned("road",false,"gimbo","Versioning no more needed");
  assertFalse(ds.isVersioned("road"));
  assertEquals(ft,ds.getSchema("road"));
  assertNull(ds.wrapped.getSchema("road").getDescriptor("revision"));
  assertNull(ds.wrapped.getSchema("road").getDescriptor("expired"));
  try {
    ds.wrapped.getSchema("road_vfc_view");
    fail("The versioning view should not be there anymore");
  }
 catch (  IOException e) {
  }
}
