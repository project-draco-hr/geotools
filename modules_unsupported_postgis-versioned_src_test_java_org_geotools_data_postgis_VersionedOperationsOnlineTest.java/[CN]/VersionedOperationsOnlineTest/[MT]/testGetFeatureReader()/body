{
  VersionedPostgisDataStore ds=getDataStore();
  SimpleFeatureType originalFt=ds.getSchema("road");
  ds.setVersioned("road",true,"gimbo","version enabling stuff");
  DefaultQuery q=new DefaultQuery("road");
  FeatureReader<SimpleFeatureType,SimpleFeature> fr=ds.wrapped.getFeatureReader(q,Transaction.AUTO_COMMIT);
  while (fr.hasNext()) {
    SimpleFeature f=fr.next();
    assertEquals(new Long(1),(Long)f.getAttribute("revision"));
    assertEquals(new Long(Long.MAX_VALUE),(Long)f.getAttribute("expired"));
  }
  fr.close();
  SqlTestUtils.execute(pool,"INSERT INTO CHANGESETS VALUES(2, 'gimbo', default, '', null)");
  SqlTestUtils.execute(pool,"INSERT INTO CHANGESETS VALUES(3, 'gimbo', default, '', null)");
  SqlTestUtils.execute(pool,"INSERT INTO ROAD SELECT FID, ID, GEOM, 'r1 rev 2', 2, 3, 2 " + "FROM ROAD WHERE ID = 1 AND EXPIRED = " + Long.MAX_VALUE);
  SqlTestUtils.execute(pool,"INSERT INTO ROAD SELECT FID, ID, GEOM, 'r1 rev 3', 3,  " + Long.MAX_VALUE + ", 2 "+ "FROM ROAD WHERE ID = 1 AND EXPIRED = "+ Long.MAX_VALUE);
  SqlTestUtils.execute(pool,"UPDATE ROAD SET EXPIRED = 2 WHERE ID = 1 AND REVISION = 1 AND EXPIRED = " + Long.MAX_VALUE);
  assertEquals(roadFeatures.length + 2,ds.wrapped.getFeatureSource("road").getCount(Query.ALL));
  Filter idFilter=ff.equals(ff.property("id"),ff.literal(1l));
  q=new DefaultQuery("road",idFilter);
  fr=ds.getFeatureReader(q,Transaction.AUTO_COMMIT);
  assertEquals(originalFt,fr.getFeatureType());
  assertTrue(fr.hasNext());
  SimpleFeature f=fr.next();
  assertEquals("road.rd1",f.getID());
  assertEquals("r1 rev 3",f.getAttribute("name"));
  assertFalse(fr.hasNext());
  fr.close();
  q=new DefaultQuery("road",idFilter);
  q.setVersion("1");
  fr=ds.getFeatureReader(q,Transaction.AUTO_COMMIT);
  assertTrue(fr.hasNext());
  f=fr.next();
  assertEquals("road.rd1",f.getID());
  assertEquals("r1",f.getAttribute("name"));
  assertFalse(fr.hasNext());
  fr.close();
  q=new DefaultQuery("road",idFilter);
  q.setVersion("2");
  fr=ds.getFeatureReader(q,Transaction.AUTO_COMMIT);
  assertTrue(fr.hasNext());
  f=fr.next();
  assertEquals("road.rd1",f.getID());
  assertEquals("r1 rev 2",f.getAttribute("name"));
  assertFalse(fr.hasNext());
  fr.close();
  Filter fidFilter=ff.id(Collections.singleton(ff.featureId("road.rd1")));
  q=new DefaultQuery("road",fidFilter);
  fr=ds.getFeatureReader(q,Transaction.AUTO_COMMIT);
  assertTrue(fr.hasNext());
  f=fr.next();
  assertEquals("road.rd1",f.getID());
  assertEquals("r1 rev 3",f.getAttribute("name"));
  assertFalse(fr.hasNext());
  fr.close();
  q=new DefaultQuery("road",fidFilter);
  q.setVersion("2");
  fr=ds.getFeatureReader(q,Transaction.AUTO_COMMIT);
  assertTrue(fr.hasNext());
  f=fr.next();
  assertEquals("road.rd1",f.getID());
  assertEquals("r1 rev 2",f.getAttribute("name"));
  assertFalse(fr.hasNext());
  fr.close();
}
