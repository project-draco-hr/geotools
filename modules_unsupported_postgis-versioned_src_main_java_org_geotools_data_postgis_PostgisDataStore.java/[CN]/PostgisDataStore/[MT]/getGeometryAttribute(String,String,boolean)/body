{
  Connection dbConnection=null;
  Class type=null;
  int srid=0;
  int dimension=2;
  try {
    dbConnection=getConnection(Transaction.AUTO_COMMIT);
    StringBuffer sql=new StringBuffer();
    sql.append("SELECT type, coord_dimension FROM geometry_columns WHERE ");
    String dbSchema=config.getDatabaseSchemaName();
    if (schemaEnabled && dbSchema != null && dbSchema.length() > 0) {
      sql.append("f_table_schema='");
      sql.append(dbSchema);
      sql.append("' AND ");
    }
    sql.append("f_table_name='");
    sql.append(tableName);
    sql.append("' AND f_geometry_column='");
    sql.append(columnName);
    sql.append("';");
    String sqlStatement=sql.toString();
    LOGGER.fine("geometry type sql statement is " + sqlStatement);
    String geometryType=null;
    Statement statement=dbConnection.createStatement();
    ResultSet result=statement.executeQuery(sqlStatement);
    if (result.next()) {
      geometryType=result.getString("type");
      dimension=result.getInt("coord_dimension");
      LOGGER.fine("geometry type is: " + geometryType);
      if (dimension < 2) {
        dimension=2;
        LOGGER.warning("Geometry dimension " + dimension + " + is invalid, assuming 2");
      }
    }
    result.close();
    if (geometryType == null) {
      sql=new StringBuffer();
      if (WKBEnabled) {
        sql.append("SELECT encode(AsBinary(force_2d(\"");
        sql.append(columnName);
        sql.append("\"), 'XDR'),'base64') FROM \"");
      }
 else {
        sql.append("SELECT AsText(\"");
        sql.append(columnName);
        sql.append("\") FROM \"");
      }
      if (schemaEnabled && dbSchema != null && dbSchema.length() > 0) {
        sql.append(dbSchema);
        sql.append("\".\"");
      }
      sql.append(tableName);
      sql.append("\" LIMIT 1");
      sqlStatement=sql.toString();
      result=statement.executeQuery(sqlStatement);
      if (result.next()) {
        AttributeIO attrIO=getGeometryAttributeIO(null,null);
        Object object=attrIO.read(result,1);
        if (object instanceof Geometry) {
          Geometry geom=(Geometry)object;
          geometryType=geom.getGeometryType().toUpperCase();
          type=geom.getClass();
          srid=geom.getSRID();
        }
      }
      result.close();
    }
    statement.close();
    if (geometryType == null) {
      String msg=" no geometry found in the GEOMETRY_COLUMNS table" + " for " + tableName + " of the postgis install.  A row"+ " for "+ columnName+ " is required"+ " for geotools to work correctly";
      throw new DataSourceException(msg);
    }
    if (type == null) {
      type=(Class)GEOM_TYPE_MAP.get(geometryType);
    }
  }
 catch (  SQLException sqe) {
    throw new IOException("An SQL exception occurred: " + sqe.getMessage());
  }
 finally {
    JDBCUtils.close(dbConnection,Transaction.AUTO_COMMIT,null);
  }
  if (srid < 1) {
    srid=determineSRID(tableName,columnName);
  }
  CoordinateReferenceSystem crs=null;
  try {
    crs=getPostgisAuthorityFactory().createCRS(srid);
  }
 catch (  FactoryException e) {
    crs=null;
  }
  return new AttributeTypeBuilder().name(columnName).binding(type).nillable(nillable).crs(crs).userData(Hints.COORDINATE_DIMENSION,dimension).buildDescriptor(columnName);
}
