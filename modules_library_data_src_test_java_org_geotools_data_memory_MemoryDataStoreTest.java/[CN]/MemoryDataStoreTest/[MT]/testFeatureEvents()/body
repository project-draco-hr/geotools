{
  SimpleFeatureStore store1=(SimpleFeatureStore)data.getFeatureSource(roadFeatures[0].getFeatureType().getTypeName());
  SimpleFeatureStore store2=(SimpleFeatureStore)data.getFeatureSource(roadFeatures[0].getFeatureType().getTypeName());
  store1.setTransaction(defaultTransaction);
class Listener implements FeatureListener {
    String name;
    List events=new ArrayList();
    public Listener(    String name){
      this.name=name;
    }
    public void changed(    FeatureEvent featureEvent){
      this.events.add(featureEvent);
    }
    FeatureEvent getEvent(    int i){
      return (FeatureEvent)events.get(i);
    }
  }
  Listener listener1=new Listener("one");
  Listener listener2=new Listener("two");
  store1.addFeatureListener(listener1);
  store2.addFeatureListener(listener2);
  FilterFactory factory=CommonFactoryFinder.getFilterFactory(null);
  final SimpleFeature feature=roadFeatures[0];
  store1.removeFeatures(factory.id(Collections.singleton(factory.featureId(feature.getID()))));
  assertEquals(1,listener1.events.size());
  assertEquals(0,listener2.events.size());
  FeatureEvent event=listener1.getEvent(0);
  assertEquals(feature.getBounds(),event.getBounds());
  assertEquals(FeatureEvent.Type.REMOVED,event.getType());
  listener1.events.clear();
  listener2.events.clear();
  store1.getTransaction().commit();
  assertEquals(0,listener1.events.size());
  assertEquals(1,listener2.events.size());
  event=listener2.getEvent(0);
  assertEquals(feature.getBounds(),event.getBounds());
  assertEquals(FeatureEvent.Type.COMMIT,event.getType());
  listener1.events.clear();
  listener2.events.clear();
  store1.addFeatures(DataUtilities.collection(feature));
  assertEquals(1,listener1.events.size());
  event=listener1.getEvent(0);
  assertEquals(feature.getBounds(),event.getBounds());
  assertEquals(FeatureEvent.Type.ADDED,event.getType());
  assertEquals(0,listener2.events.size());
  listener1.events.clear();
  listener2.events.clear();
  store1.getTransaction().rollback();
  assertEquals(1,listener1.events.size());
  event=listener1.getEvent(0);
  assertEquals(feature.getBounds(),event.getBounds());
  assertEquals(FeatureEvent.Type.ROLLBACK,event.getType());
  assertEquals(0,listener2.events.size());
  listener1.events.clear();
  listener2.events.clear();
  store2.addFeatures(DataUtilities.collection(feature));
  assertEquals(1,listener1.events.size());
  event=listener1.getEvent(0);
  assertEquals(feature.getBounds(),event.getBounds());
  assertEquals(FeatureEvent.Type.ADDED,event.getType());
  assertEquals(1,listener2.events.size());
}
