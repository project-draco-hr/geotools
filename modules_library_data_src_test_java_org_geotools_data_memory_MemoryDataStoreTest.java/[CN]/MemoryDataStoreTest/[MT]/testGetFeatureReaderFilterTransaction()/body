{
  Transaction t=new DefaultTransaction();
  SimpleFeatureType type=data.getSchema("road");
  FeatureReader<SimpleFeatureType,SimpleFeature> reader;
  reader=data.getFeatureReader(new DefaultQuery("road",Filter.EXCLUDE),t);
  assertEquals(type,reader.getFeatureType());
  assertEquals(0,count(reader));
  reader=data.getFeatureReader(new DefaultQuery("road"),t);
  assertTrue(reader instanceof DiffFeatureReader);
  assertEquals(type,reader.getFeatureType());
  assertEquals(roadFeatures.length,count(reader));
  reader=data.getFeatureReader(new DefaultQuery("road",rd1Filter),t);
  assertEquals(type,reader.getFeatureType());
  assertEquals(1,count(reader));
  FeatureWriter<SimpleFeatureType,SimpleFeature> writer=((ContentFeatureStore)data.getFeatureSource("road",t)).getWriter(Filter.INCLUDE);
  SimpleFeature feature;
  while (writer.hasNext()) {
    feature=writer.next();
    if (feature.getID().equals("road.rd1")) {
      writer.remove();
    }
  }
  reader=data.getFeatureReader(new DefaultQuery("road",Filter.EXCLUDE),t);
  assertEquals(0,count(reader));
  reader=data.getFeatureReader(new DefaultQuery("road"),t);
  assertEquals(roadFeatures.length - 1,count(reader));
  reader=data.getFeatureReader(new DefaultQuery("road",rd1Filter),t);
  assertEquals(0,count(reader));
  t.rollback();
  reader=data.getFeatureReader(new DefaultQuery("road",Filter.EXCLUDE),t);
  assertEquals(0,count(reader));
  reader=data.getFeatureReader(new DefaultQuery("road"),t);
  assertEquals(roadFeatures.length,count(reader));
  reader=data.getFeatureReader(new DefaultQuery("road",rd1Filter),t);
  assertEquals(1,count(reader));
}
