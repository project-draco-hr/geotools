{
  FeatureLock lockA=new FeatureLock("LockA",3600);
  FeatureLock lockB=new FeatureLock("LockB",3600);
  Transaction t1=new DefaultTransaction();
  Transaction t2=new DefaultTransaction();
  try {
    FeatureLocking<SimpleFeatureType,SimpleFeature> road1=(FeatureLocking<SimpleFeatureType,SimpleFeature>)data.getFeatureSource("road");
    FeatureLocking<SimpleFeatureType,SimpleFeature> road2=(FeatureLocking<SimpleFeatureType,SimpleFeature>)data.getFeatureSource("road");
    road1.setTransaction(t1);
    road2.setTransaction(t2);
    road1.setFeatureLock(lockA);
    road2.setFeatureLock(lockB);
    assertFalse(isLocked("road","road.rd1"));
    assertFalse(isLocked("road","road.rd2"));
    assertFalse(isLocked("road","road.rd3"));
    road1.lockFeatures(rd1Filter);
    assertTrue(isLocked("road","road.rd1"));
    assertFalse(isLocked("road","road.rd2"));
    assertFalse(isLocked("road","road.rd3"));
    road2.lockFeatures(rd2Filter);
    assertTrue(isLocked("road","road.rd1"));
    assertTrue(isLocked("road","road.rd2"));
    assertFalse(isLocked("road","road.rd3"));
    try {
      road1.unLockFeatures(rd1Filter);
      fail("need authorization");
    }
 catch (    IOException expected) {
    }
    t1.addAuthorization(lockA.getAuthorization());
    try {
      road1.unLockFeatures(rd2Filter);
      fail("need correct authorization");
    }
 catch (    IOException expected) {
    }
    road1.unLockFeatures(rd1Filter);
    assertFalse(isLocked("road","road.rd1"));
    assertTrue(isLocked("road","road.rd2"));
    assertFalse(isLocked("road","road.rd3"));
    t2.addAuthorization(lockB.getAuthorization());
    road2.unLockFeatures(rd2Filter);
    assertFalse(isLocked("road","road.rd1"));
    assertFalse(isLocked("road","road.rd2"));
    assertFalse(isLocked("road","road.rd3"));
  }
  finally {
    t1.close();
    t2.close();
  }
}
