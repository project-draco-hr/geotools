{
  SimpleFeatureCollection collection;
  Set<Collection<Property>> actual;
  Set<Collection<Property>> expected;
  Filter filter;
  filter=ff.id(Collections.singleton(ff.featureId(GeoGITRepositoryTestCase.idP2)));
  collection=pointsSource.getFeatures(new Query(pointsName,filter));
  actual=new HashSet<Collection<Property>>();
  for (  Feature f : toList(collection.features())) {
    actual.add(f.getProperties());
  }
  expected=Collections.singleton(points2.getProperties());
  assertEquals(expected,actual);
  ReferencedEnvelope queryBounds=boundsOf(points1,points2);
  Polygon geometry=JTS.toGeometry(queryBounds);
  filter=ff.intersects(ff.property(pointsType.getGeometryDescriptor().getLocalName()),ff.literal(geometry));
  collection=pointsSource.getFeatures(new Query(pointsName,filter));
  actual=new HashSet<Collection<Property>>();
  for (  Feature f : toList(collection.features())) {
    actual.add(f.getProperties());
  }
  expected=new HashSet<Collection<Property>>(Arrays.asList(points1.getProperties(),points2.getProperties()));
  assertEquals(expected,actual);
  ReferencedEnvelope transformedQueryBounds;
  CoordinateReferenceSystem queryCrs=CRS.decode("EPSG:3857");
  transformedQueryBounds=queryBounds.transform(queryCrs,true);
  geometry=JTS.toGeometry(transformedQueryBounds);
  geometry.setUserData(queryCrs);
  filter=ff.intersects(ff.property(pointsType.getGeometryDescriptor().getLocalName()),ff.literal(geometry));
  collection=pointsSource.getFeatures(new Query(pointsName,filter));
  actual=new HashSet<Collection<Property>>();
  for (  Feature f : toList(collection.features())) {
    actual.add(f.getProperties());
  }
  expected=new HashSet<Collection<Property>>(Arrays.asList(points1.getProperties(),points2.getProperties()));
  assertEquals(expected,actual);
  filter=ECQL.toFilter("sp = 'StringProp2_3' OR ip = 2000");
  collection=linesSource.getFeatures(new Query(linesName,filter));
  actual=new HashSet<Collection<Property>>();
  for (  Feature f : toList(collection.features())) {
    actual.add(f.getProperties());
  }
  expected=new HashSet<Collection<Property>>(Arrays.asList(lines2.getProperties(),lines3.getProperties()));
  assertEquals(expected,actual);
}
