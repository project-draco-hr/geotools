{
  int s1a=UBYTE_MAX_VALUE - sa;
  int d1a=UBYTE_MAX_VALUE - da;
  int drsa=dr * sa;
  int dgsa=dg * sa;
  int dbsa=db * sa;
  int srda=sr * da;
  int sgda=sg * da;
  int sbda=sb * da;
  int sada=sa * da;
  result[RED]=((srda + drsa >= sada) ? (sada + sr * d1a + dr * s1a + UBYTE_MAX_VALUE) >> SHIFT8 : drsa / (UBYTE_MAX_VALUE - (sr << SHIFT8) / sa) + ((sr * d1a + dr * s1a + UBYTE_MAX_VALUE) >> SHIFT8));
  result[GREEN]=((sgda + dgsa >= sada) ? (sada + sg * d1a + dg * s1a + UBYTE_MAX_VALUE) >> SHIFT8 : dgsa / (UBYTE_MAX_VALUE - (sg << SHIFT8) / sa) + ((sg * d1a + dg * s1a + UBYTE_MAX_VALUE) >> SHIFT8));
  result[BLUE]=((sbda + dbsa >= sada) ? (sada + sb * d1a + db * s1a + UBYTE_MAX_VALUE) >> SHIFT8 : dbsa / (UBYTE_MAX_VALUE - (sb << SHIFT8) / sa) + ((sb * d1a + db * s1a + UBYTE_MAX_VALUE) >> SHIFT8));
  result[ALPHA]=(sa + da - ((sa * da + UBYTE_MAX_VALUE) >> SHIFT8));
}
