{
  double usr=sr * 1d / UBYTE_MAX_VALUE;
  double usg=sg * 1d / UBYTE_MAX_VALUE;
  double usb=sb * 1d / UBYTE_MAX_VALUE;
  double usa=sa * 1d / UBYTE_MAX_VALUE;
  double udr=dr * 1d / UBYTE_MAX_VALUE;
  double udg=dg * 1d / UBYTE_MAX_VALUE;
  double udb=db * 1d / UBYTE_MAX_VALUE;
  double uda=(da > 0 ? da * 1d : 1d) / UBYTE_MAX_VALUE;
  if (usa > 0) {
    result[RED]=(int)Math.round(softLight(usr,udr,usa,uda) * UBYTE_MAX_VALUE);
    result[GREEN]=(int)Math.round(softLight(usg,udg,usa,uda) * UBYTE_MAX_VALUE);
    result[BLUE]=(int)Math.round(softLight(usb,udb,usa,uda) * UBYTE_MAX_VALUE);
    result[ALPHA]=(sa + da - ((sa * da + UBYTE_MAX_VALUE) >> SHIFT8));
  }
 else {
    result[RED]=dr;
    result[GREEN]=dg;
    result[BLUE]=db;
    result[ALPHA]=da;
  }
}
