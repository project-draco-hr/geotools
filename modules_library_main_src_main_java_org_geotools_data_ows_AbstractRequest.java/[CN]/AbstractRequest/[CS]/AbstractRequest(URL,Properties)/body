{
  if (properties == null) {
    this.properties=new Properties();
  }
 else {
    this.properties=properties;
  }
  int index=onlineResource.toExternalForm().lastIndexOf("?");
  String urlWithoutQuery=null;
  if (index <= 0) {
    urlWithoutQuery=onlineResource.toExternalForm() + "?";
  }
 else {
    urlWithoutQuery=onlineResource.toExternalForm().substring(0,index);
    boolean once=true;
    if (onlineResource.getQuery() != null) {
      StringTokenizer tokenizer=new StringTokenizer(onlineResource.getQuery(),"&");
      while (tokenizer.hasMoreTokens()) {
        String token=tokenizer.nextToken();
        String[] param=token.split("=");
        if (param != null && param.length > 0 && param[0] != null) {
          String key=param[0];
          String value;
          if (param.length == 1) {
            if (once) {
              urlWithoutQuery+="?" + param[0] + "&";
              once=false;
            }
 else {
              urlWithoutQuery+=param[0] + "&";
            }
          }
 else {
            value=param[1];
            setProperty(key.toUpperCase(),value);
          }
        }
      }
    }
    if (once) {
      urlWithoutQuery+="?";
    }
  }
  try {
    this.onlineResource=new URL(urlWithoutQuery);
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException("Error parsing URL. This is likely a bug in the code.");
  }
  initService();
  initRequest();
  initVersion();
}
