{
  URL postUrl=ds.capabilities.getTransaction().getPost();
  if (postUrl == null) {
    throw new UnsupportedOperationException("Capabilities document does not describe a valid POST url for Transaction");
  }
  HttpURLConnection hc=ds.protocolHandler.getConnectionFactory().getConnection(postUrl,POST);
  Map<String,Object> hints=new HashMap<String,Object>();
  hints.put(DocumentWriter.BASE_ELEMENT,WFSSchema.getInstance().getElements()[24]);
  Set<String> fts=new HashSet<String>();
  Iterator<Action> i=toCommit.iterator();
  while (i.hasNext()) {
    Action a=(Action)i.next();
    fts.add(a.getTypeName());
  }
  Set<String> ns=new HashSet<String>();
  ns.add(WFSSchema.NAMESPACE.toString());
  Iterator<String> i2=fts.iterator();
  while (i2.hasNext()) {
    String target=(String)i2.next();
    SimpleFeatureType schema=ds.getSchema(target);
    try {
      String namespaceURI=schema.getName().getNamespaceURI();
      ns.add(namespaceURI);
      URI namespaceLocation=ds.getDescribeFeatureTypeURL(target).toURI();
      SchemaFactory.getInstance(new URI(namespaceURI),namespaceLocation);
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
  }
  hints.put(DocumentWriter.SCHEMA_ORDER,ns.toArray(new String[ns.size()]));
  OutputStream os=hc.getOutputStream();
  Writer w=new OutputStreamWriter(os);
  Logger logger=Logging.getLogger("org.geotools.data.wfs");
  if (logger.isLoggable(Level.FINE)) {
    w=new LogWriterDecorator(w,logger,Level.FINE);
  }
  logger=Logging.getLogger("org.geotools.data.communication");
  if (logger.isLoggable(Level.FINE)) {
    w=new LogWriterDecorator(w,logger,Level.FINE);
  }
  if (transaction != null && transaction.getProperty("handle") instanceof String) {
    String commitMessageHandle=(String)transaction.getProperty("handle");
    if (commitMessageHandle != null) {
      hints.put("handle",commitMessageHandle);
    }
  }
  DocumentWriter.writeDocument(this,WFSSchema.getInstance(),w,hints);
  w.flush();
  w.close();
  InputStream is=this.ds.protocolHandler.getConnectionFactory().getInputStream(hc);
  hints=new HashMap<String,Object>();
  TransactionResult ft=(TransactionResult)DocumentFactory.getInstance(is,hints,Level.WARNING);
  return ft;
}
