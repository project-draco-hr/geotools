{
  FeatureLock lockA=FeatureLockFactory.generate("LockA",3600);
  FeatureLock lockB=FeatureLockFactory.generate("LockB",3600);
  Transaction t1=new DefaultTransaction();
  Transaction t2=new DefaultTransaction();
  FeatureLocking<SimpleFeatureType,SimpleFeature> road1=(FeatureLocking<SimpleFeatureType,SimpleFeature>)data.getFeatureSource("ROAD");
  FeatureLocking<SimpleFeatureType,SimpleFeature> road2=(FeatureLocking<SimpleFeatureType,SimpleFeature>)data.getFeatureSource("ROAD");
  road1.setTransaction(t1);
  road2.setTransaction(t2);
  road1.setFeatureLock(lockA);
  road2.setFeatureLock(lockB);
  assertFalse(isLocked("ROAD",roadFeatures[0].getID()));
  assertFalse(isLocked("ROAD",roadFeatures[1].getID()));
  assertFalse(isLocked("ROAD",roadFeatures[2].getID()));
  road1.lockFeatures(rd1Filter);
  assertTrue(isLocked("ROAD",roadFeatures[0].getID()));
  assertFalse(isLocked("ROAD",roadFeatures[1].getID()));
  assertFalse(isLocked("ROAD",roadFeatures[2].getID()));
  road2.lockFeatures(rd2Filter);
  assertTrue(isLocked("ROAD",roadFeatures[0].getID()));
  assertTrue(isLocked("ROAD",roadFeatures[1].getID()));
  assertFalse(isLocked("ROAD",roadFeatures[2].getID()));
  try {
    road1.unLockFeatures(rd1Filter);
    fail("need authorization");
  }
 catch (  IOException expected) {
  }
  t1.addAuthorization(lockA.getAuthorization());
  try {
    road1.unLockFeatures(rd2Filter);
    fail("need correct authorization");
  }
 catch (  IOException expected) {
  }
  road1.unLockFeatures(rd1Filter);
  assertFalse(isLocked("ROAD",roadFeatures[0].getID()));
  assertTrue(isLocked("ROAD",roadFeatures[1].getID()));
  assertFalse(isLocked("ROAD",roadFeatures[2].getID()));
  t2.addAuthorization(lockB.getAuthorization());
  road2.unLockFeatures(rd2Filter);
  assertFalse(isLocked("ROAD",roadFeatures[0].getID()));
  assertFalse(isLocked("ROAD",roadFeatures[1].getID()));
  assertFalse(isLocked("ROAD",roadFeatures[2].getID()));
}
