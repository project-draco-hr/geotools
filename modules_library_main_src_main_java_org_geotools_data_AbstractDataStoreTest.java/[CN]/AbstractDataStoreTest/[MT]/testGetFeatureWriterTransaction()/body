{
  Transaction t1=new DefaultTransaction();
  Transaction t2=new DefaultTransaction();
  FeatureWriter<SimpleFeatureType,SimpleFeature> writer1=data.getFeatureWriter("ROAD",rd1Filter,t1);
  FeatureWriter<SimpleFeatureType,SimpleFeature> writer2=data.getFeatureWriterAppend("ROAD",t2);
  SimpleFeatureType road=data.getSchema("ROAD");
  FeatureReader<SimpleFeatureType,SimpleFeature> reader;
  SimpleFeature feature;
  SimpleFeature[] ORIGIONAL=roadFeatures;
  SimpleFeature[] REMOVE=new SimpleFeature[ORIGIONAL.length - 1];
  SimpleFeature[] ADD=new SimpleFeature[ORIGIONAL.length + 1];
  SimpleFeature[] FINAL=new SimpleFeature[ORIGIONAL.length];
  int i;
  int index;
  index=0;
  for (i=0; i < ORIGIONAL.length; i++) {
    feature=ORIGIONAL[i];
    if (!feature.getID().equals(roadFeatures[0].getID())) {
      REMOVE[index++]=feature;
    }
  }
  for (i=0; i < ORIGIONAL.length; i++) {
    ADD[i]=ORIGIONAL[i];
  }
  ADD[i]=newRoad;
  for (i=0; i < REMOVE.length; i++) {
    FINAL[i]=REMOVE[i];
  }
  FINAL[i]=newRoad;
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),Transaction.AUTO_COMMIT);
  assertTrue(covers(reader,ORIGIONAL));
  while (writer1.hasNext()) {
    feature=(SimpleFeature)writer1.next();
    assertEquals(roadFeatures[0].getID(),feature.getID());
    writer1.remove();
  }
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),Transaction.AUTO_COMMIT);
  assertTrue(covers(reader,ORIGIONAL));
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),t1);
  assertTrue(covers(reader,REMOVE));
  writer1.close();
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),Transaction.AUTO_COMMIT);
  assertTrue(covers(reader,ORIGIONAL));
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),t1);
  assertTrue(covers(reader,REMOVE));
  feature=(SimpleFeature)writer2.next();
  feature.setAttributes(newRoad.getAttributes());
  writer2.write();
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),Transaction.AUTO_COMMIT);
  assertTrue(covers(reader,ORIGIONAL));
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),t2);
  assertTrue(coversLax(reader,ADD));
  writer2.close();
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),Transaction.AUTO_COMMIT);
  assertTrue(covers(reader,ORIGIONAL));
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),t2);
  assertTrue(coversLax(reader,ADD));
  t1.commit();
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),Transaction.AUTO_COMMIT);
  assertTrue(covers(reader,REMOVE));
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),t1);
  assertTrue(covers(reader,REMOVE));
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),t2);
  assertTrue(coversLax(reader,FINAL));
  t2.commit();
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),Transaction.AUTO_COMMIT);
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),Transaction.AUTO_COMMIT);
  assertTrue(coversLax(reader,FINAL));
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),t1);
  assertTrue(coversLax(reader,FINAL));
  reader=data.getFeatureReader(new DefaultQuery("ROAD"),t2);
  assertTrue(coversLax(reader,FINAL));
}
