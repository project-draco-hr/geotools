{
  BinarySpatialOperator filter=null;
switch (nodeType) {
case JJTROUTINEINVOCATION_GEOOP_EQUAL_NODE:
    filter=this.builder.buildSpatialEqualFilter();
  break;
case JJTROUTINEINVOCATION_GEOOP_DISJOINT_NODE:
filter=this.builder.buildSpatialDisjointFilter();
break;
case JJTROUTINEINVOCATION_GEOOP_INTERSECT_NODE:
filter=this.builder.buildSpatialIntersectsFilter();
break;
case JJTROUTINEINVOCATION_GEOOP_TOUCH_NODE:
filter=this.builder.buildSpatialTouchesFilter();
break;
case JJTROUTINEINVOCATION_GEOOP_CROSS_NODE:
filter=this.builder.buildSpatialCrossesFilter();
break;
case JJTROUTINEINVOCATION_GEOOP_WITHIN_NODE:
filter=this.builder.buildSpatialWithinFilter();
break;
case JJTROUTINEINVOCATION_GEOOP_CONTAIN_NODE:
filter=this.builder.buildSpatialContainsFilter();
break;
case JJTROUTINEINVOCATION_GEOOP_OVERLAP_NODE:
filter=this.builder.buildSpatialOverlapsFilter();
break;
default :
throw new CQLException("Binary spatial operator unexpected");
}
return filter;
}
