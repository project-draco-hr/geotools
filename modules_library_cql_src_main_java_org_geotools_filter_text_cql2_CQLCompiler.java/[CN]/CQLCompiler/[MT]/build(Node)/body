{
switch (cqlNode.getType()) {
case JJTINTEGERNODE:
    return this.builder.buildLiteralInteger(getToken(0).image);
case JJTFLOATINGNODE:
  return this.builder.buildLiteralDouble(getToken(0).image);
case JJTSTRINGNODE:
return this.builder.buildLiteralString(getToken(0).image);
case JJTIDENTIFIER_NODE:
return this.builder.buildIdentifier(JJTIDENTIFIER_PART_NODE);
case JJTIDENTIFIER_PART_NODE:
return this.builder.buildIdentifierPart(getTokenInPosition(0));
case JJTSIMPLE_ATTRIBUTE_NODE:
return this.builder.buildSimpleAttribute();
case JJTCOMPOUND_ATTRIBUTE_NODE:
return this.builder.buildCompoundAttribute(JJTSIMPLE_ATTRIBUTE_NODE,ATTRIBUTE_PATH_SEPARATOR);
case JJTFUNCTION_NODE:
return this.builder.buildFunction(JJTFUNCTIONNAME_NODE);
case JJTFUNCTIONNAME_NODE:
return cqlNode;
case JJTFUNCTIONARG_NODE:
return cqlNode;
case JJTADDNODE:
case JJTSUBTRACTNODE:
case JJTMULNODE:
case JJTDIVNODE:
return buildBinaryExpression(cqlNode.getType());
case JJTBOOLEAN_AND_NODE:
return buildLogicFilter(JJTBOOLEAN_AND_NODE);
case JJTBOOLEAN_OR_NODE:
return buildLogicFilter(JJTBOOLEAN_OR_NODE);
case JJTBOOLEAN_NOT_NODE:
return buildLogicFilter(JJTBOOLEAN_NOT_NODE);
case JJTBETWEEN_NODE:
return this.builder.buildBetween();
case JJTNOT_BETWEEN_NODE:
return this.builder.buildNotBetween();
case JJTCOMPARISONPREDICATE_EQ_NODE:
case JJTCOMPARISONPREDICATE_GT_NODE:
case JJTCOMPARISONPREDICATE_LT_NODE:
case JJTCOMPARISONPREDICATE_GTE_NODE:
case JJTCOMPARISONPREDICATE_LTE_NODE:
return buildBinaryComparasionOperator(cqlNode.getType());
case JJTCOMPARISONPREDICATE_NOT_EQUAL_NODE:
Filter eq=buildBinaryComparasionOperator(JJTCOMPARISONPREDICATE_EQ_NODE);
Not notFilter=this.builder.buildNotFilter(eq);
return notFilter;
case JJTLIKE_NODE:
return this.builder.buildLikeFilter(true);
case JJTNOT_LIKE_NODE:
return this.builder.buildNotLikeFilter(true);
case JJTNULLPREDICATENODE:
return this.builder.buildPropertyIsNull();
case JJTNOTNULLPREDICATENODE:
return this.builder.buildPorpertyNotIsNull();
case JJTDATETIME_NODE:
return this.builder.buildDateTimeExpression(getTokenInPosition(0));
case JJTDURATION_DATE_NODE:
return this.builder.buildDurationExpression(getTokenInPosition(0));
case JJTPERIOD_BETWEEN_DATES_NODE:
return this.builder.buildPeriodBetweenDates();
case JJTPERIOD_WITH_DATE_DURATION_NODE:
return this.builder.buildPeriodDateAndDuration();
case JJTPERIOD_WITH_DURATION_DATE_NODE:
return this.builder.buildPeriodDurationAndDate();
case JJTTPBEFORE_DATETIME_NODE:
return buildBeforePredicate();
case JJTTPAFTER_DATETIME_NODE:
return buildAfterPredicate();
case JJTTPDURING_PERIOD_NODE:
return buildDuring();
case JJTTPBEFORE_OR_DURING_PERIOD_NODE:
return buildBeforeOrDuring();
case JJTTPDURING_OR_AFTER_PERIOD_NODE:
return buildDuringOrAfter();
case JJTEXISTENCE_PREDICATE_EXISTS_NODE:
return this.builder.buildPropertyExists();
case JJTEXISTENCE_PREDICATE_DOESNOTEXIST_NODE:
Filter filter=this.builder.buildPropertyExists();
Filter filterPropNotExist=this.builder.buildNotFilter(filter);
return filterPropNotExist;
case JJTROUTINEINVOCATION_GEOOP_EQUAL_NODE:
case JJTROUTINEINVOCATION_GEOOP_DISJOINT_NODE:
case JJTROUTINEINVOCATION_GEOOP_INTERSECT_NODE:
case JJTROUTINEINVOCATION_GEOOP_TOUCH_NODE:
case JJTROUTINEINVOCATION_GEOOP_CROSS_NODE:
case JJTROUTINEINVOCATION_GEOOP_WITHIN_NODE:
case JJTROUTINEINVOCATION_GEOOP_CONTAIN_NODE:
case JJTROUTINEINVOCATION_GEOOP_OVERLAP_NODE:
return buildBinarySpatialOperator(cqlNode.getType());
case JJTROUTINEINVOCATION_GEOOP_BBOX_NODE:
case JJTROUTINEINVOCATION_GEOOP_BBOX_SRS_NODE:
return buildBBox(cqlNode.getType());
case JJTROUTINEINVOCATION_GEOOP_RELATE_NODE:
return this.builder.buildSpatialRelateFilter();
case JJTDE9IM_NODE:
return this.builder.buildDE9IM(getToken(0).image);
case JJTTOLERANCE_NODE:
return this.builder.buildTolerance();
case JJTDISTANCEUNITS_NODE:
return this.builder.buildDistanceUnit(getTokenInPosition(0));
case JJTROUTINEINVOCATION_RELOP_BEYOND_NODE:
case JJTROUTINEINVOCATION_RELOP_DWITHIN_NODE:
return buildDistanceBufferOperator(cqlNode.getType());
case JJTWKTNODE:
return this.builder.buildGeometry(TokenAdapter.newAdapterFor(cqlNode.getToken()));
case JJTENVELOPETAGGEDTEXT_NODE:
return this.builder.buildEnvelop(TokenAdapter.newAdapterFor(cqlNode.getToken()));
case JJTINCLUDE_NODE:
return Filter.INCLUDE;
case JJTEXCLUDE_NODE:
return Filter.EXCLUDE;
case JJTTRUENODE:
return this.builder.buildTrueLiteral();
case JJTFALSENODE:
return this.builder.buildFalseLiteral();
}
return null;
}
