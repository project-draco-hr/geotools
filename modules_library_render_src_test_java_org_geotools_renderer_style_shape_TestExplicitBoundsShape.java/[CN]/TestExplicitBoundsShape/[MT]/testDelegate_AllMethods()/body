{
  try {
    Shape shape=createMock(Shape.class);
    reset(shape);
    expect(shape.contains((Point2D)null)).andReturn(false);
    expect(shape.contains((Rectangle2D)null)).andReturn(false);
    expect(shape.contains(0.0,0.0)).andReturn(false);
    expect(shape.contains(0.0,0.0,0.0,0.0)).andReturn(false);
    expect(shape.getBounds()).andReturn(null);
    expect(shape.getBounds2D()).andReturn(null);
    expect(shape.getPathIterator(null)).andReturn(null);
    expect(shape.getPathIterator(null,0.0)).andReturn(null);
    expect(shape.intersects(null)).andReturn(false);
    expect(shape.intersects(0.0,0.0,0.0,0.0)).andReturn(false);
    replay(shape);
    ExplicitBoundsShape target=new ExplicitBoundsShape(shape);
    assertFalse(target.contains((Point2D)null));
    assertFalse(target.contains((Rectangle2D)null));
    assertFalse(target.contains(0.0,0.0));
    assertFalse(target.contains(0.0,0.0,0.0,0.0));
    assertNull(target.getBounds());
    assertNull(target.getBounds2D());
    assertNull(target.getPathIterator(null));
    assertNull(target.getPathIterator(null,0.0));
    assertFalse(target.intersects(null));
    assertFalse(target.intersects(0.0,0.0,0.0,0.0));
    verify(shape);
  }
 catch (  Throwable e) {
    e.printStackTrace();
    fail("Should not throw " + e.getClass().getSimpleName());
  }
}
