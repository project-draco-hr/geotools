{
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine(new StringBuffer("Creating mosaic to comply with envelope ").append((state.getRequestedEnvelope() != null) ? state.getRequestedEnvelope().toString() : null).append(" crs ").append(crs.toWKT()).append(" dim ").append((pixelDimension == null) ? " null" : pixelDimension.toString()).toString());
  }
  transformRequestEnvelope(state);
  if (!state.getRequestEnvelopeTransformed().intersects(this.originalEnvelope,true)) {
    LOGGER.warning("The requested envelope does not intersect the envelope of this mosaic");
    LOGGER.warning(state.getRequestEnvelopeTransformed().toString());
    LOGGER.warning(originalEnvelope.toString());
    return null;
  }
  final ImageReadParam readP=new ImageReadParam();
  final Integer imageChoice;
  if (pixelDimension != null) {
    try {
      imageChoice=setReadParams(OverviewPolicy.getDefaultPolicy(),readP,state.getRequestEnvelopeTransformed(),pixelDimension);
      readP.setSourceSubsampling(1,1,0,0);
    }
 catch (    TransformException e) {
      LOGGER.severe(e.getLocalizedMessage());
      return coverageFactory.create(coverageName,getEmptyImage((int)pixelDimension.getWidth(),(int)pixelDimension.getHeight(),backgroundColor,outputTransparentColor),state.getRequestedEnvelope());
    }
  }
 else {
    imageChoice=new Integer(0);
  }
  ImageLevelInfo info=jdbcAccess.getLevelInfo(imageChoice.intValue());
  LOGGER.info("Coverage " + info.getCoverageName() + " using spatial table "+ info.getSpatialTableName()+ ", image table "+ info.getTileTableName());
  ImageComposerThread imageComposerThread=new ImageComposerThread(backgroundColor,outputTransparentColor,pixelDimension,state.getRequestEnvelopeTransformed(),info,state.getTileQueue(),config,state.isXAxisSwitch(),coverageFactory);
  imageComposerThread.start();
  jdbcAccess.startTileDecoders(pixelDimension,state.getRequestEnvelopeTransformed(),info,state.getTileQueue(),coverageFactory);
  try {
    imageComposerThread.join();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  GridCoverage2D result=imageComposerThread.getGridCoverage2D();
  return transformResult(result,pixelDimension,state);
}
