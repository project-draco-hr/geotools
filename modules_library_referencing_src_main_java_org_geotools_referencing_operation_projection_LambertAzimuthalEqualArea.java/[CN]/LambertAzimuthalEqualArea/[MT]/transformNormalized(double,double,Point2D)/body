{
  final double coslam=cos(lambda);
  final double sinlam=sin(lambda);
  final double sinphi=sin(phi);
  double q=qsfn(sinphi);
  final double sinb, cosb, b, c, x, y;
switch (mode) {
case OBLIQUE:
{
      sinb=q / qp;
      cosb=sqrt(1.0 - sinb * sinb);
      c=1.0 + sinb1 * sinb + cosb1 * cosb * coslam;
      b=sqrt(2.0 / c);
      y=ymf * b * (cosb1 * sinb - sinb1 * cosb * coslam);
      x=xmf * b * cosb* sinlam;
      break;
    }
case EQUATORIAL:
{
    sinb=q / qp;
    cosb=sqrt(1.0 - sinb * sinb);
    c=1.0 + cosb * coslam;
    b=sqrt(2.0 / c);
    y=ymf * b * sinb;
    x=xmf * b * cosb* sinlam;
    break;
  }
case NORTH_POLE:
{
  c=(PI / 2) + phi;
  q=qp - q;
  if (q >= 0.0) {
    b=sqrt(q);
    x=b * sinlam;
    y=coslam * -b;
  }
 else {
    x=y=0.;
  }
  break;
}
case SOUTH_POLE:
{
c=phi - (PI / 2);
q=qp + q;
if (q >= 0.0) {
  b=sqrt(q);
  x=b * sinlam;
  y=coslam * +b;
}
 else {
  x=y=0.;
}
break;
}
default :
{
throw new AssertionError(mode);
}
}
if (abs(c) < EPSILON_LATITUDE) {
throw new ProjectionException(ErrorKeys.TOLERANCE_ERROR);
}
if (ptDst != null) {
ptDst.setLocation(x,y);
return ptDst;
}
return new Point2D.Double(x,y);
}
