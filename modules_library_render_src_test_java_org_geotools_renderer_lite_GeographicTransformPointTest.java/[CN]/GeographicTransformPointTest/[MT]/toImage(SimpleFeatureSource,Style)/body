{
  String typeName=featuerSource.getSchema().getTypeName();
  MapContent content=new MapContent();
  ReferencedEnvelope dataBounds=featuerSource.getBounds();
  assertNotNull(typeName + " bounds",dataBounds);
  assertFalse(typeName + " bounds empty",dataBounds.isEmpty());
  assertFalse(typeName + " bounds null",dataBounds.isNull());
  ReferencedEnvelope bounds=JTS.toGeographic(dataBounds);
  assertNotNull(typeName + " world",bounds);
  assertTrue(typeName + " world WGS84",CRS.equalsIgnoreMetadata(DefaultGeographicCRS.WGS84,bounds.getCoordinateReferenceSystem()));
  assertFalse(typeName + " world empty",bounds.isEmpty());
  assertFalse(typeName + " world null",bounds.isNull());
  ReferencedEnvelope reference=JTS.toGeographic(point_test_2d.getBounds());
  assertNotNull("reference point_test_2d bounds",reference);
  assertTrue("reference point_test_2d bounds available",!reference.isEmpty() && !reference.isNull());
  assertTrue("bounds WGS84",CRS.equalsIgnoreMetadata(DefaultGeographicCRS.WGS84,reference.getCoordinateReferenceSystem()));
  content.getViewport().setBounds(reference);
  assertEquals("map viewport set",reference,content.getViewport().getBounds());
  assertTrue("map viewport WGS84",CRS.equalsIgnoreMetadata(DefaultGeographicCRS.WGS84,content.getCoordinateReferenceSystem()));
  content.addLayer(new FeatureLayer(featuerSource,style));
  StreamingRenderer renderer=new StreamingRenderer();
  renderer.setMapContent(content);
  renderer.setJava2DHints(new RenderingHints(KEY_ANTIALIASING,VALUE_ANTIALIAS_ON));
  BufferedImage image=RendererBaseTest.showRender(typeName,renderer,TIME,bounds);
  assertNotNull(image);
  return image;
}
