{
  GeometryFactoryImpl tCoordFactory=(GeometryFactoryImpl)builder.getGeometryFactory();
  PrimitiveFactoryImpl tPrimFactory=(PrimitiveFactoryImpl)builder.getPrimitiveFactory();
  PositionImpl p1=new PositionImpl(tCoordFactory.createDirectPosition(new double[]{-50,0}));
  PositionImpl p2=new PositionImpl(tCoordFactory.createDirectPosition(new double[]{-30,30}));
  PositionImpl p3=new PositionImpl(tCoordFactory.createDirectPosition(new double[]{0,50}));
  PositionImpl p4=new PositionImpl(tCoordFactory.createDirectPosition(new double[]{30,30}));
  PositionImpl p5=new PositionImpl(tCoordFactory.createDirectPosition(new double[]{50,0}));
  LineStringImpl line1=null;
  ArrayList<Position> positionList=new ArrayList<Position>();
  positionList.add(p1);
  positionList.add(p2);
  positionList.add(p3);
  positionList.add(p4);
  positionList.add(p5);
  line1=tCoordFactory.createLineString(positionList);
  ArrayList<CurveSegment> tLineList=new ArrayList<CurveSegment>();
  tLineList.add(line1);
  CurveImpl curve1=tPrimFactory.createCurve(tLineList);
  assertTrue(curve1.isCycle() == false);
  line1.setCurve(curve1);
  assertTrue(curve1.getStartPoint().getOrdinate(0) == -50);
  assertTrue(curve1.getStartPoint().getOrdinate(1) == 0);
  assertTrue(curve1.getEndPoint().getOrdinate(0) == 50);
  assertTrue(curve1.getEndPoint().getOrdinate(1) == 0);
  assertTrue(curve1.getStartParam() == 0.0);
  assertTrue(Math.round(line1.getEndParam()) == 144.0);
  assertTrue(curve1.getStartConstructiveParam() == 0.0);
  assertTrue(curve1.getEndConstructiveParam() == 1.0);
  CurveBoundary cb=curve1.getBoundary();
  assertTrue(cb != null);
  double[] dp=cb.getStartPoint().getPosition().getCoordinates();
  assertTrue(dp[0] == -50);
  assertTrue(dp[1] == 0);
  dp=cb.getEndPoint().getPosition().getCoordinates();
  assertTrue(dp[0] == 50);
  assertTrue(dp[1] == 0);
  assertTrue(curve1.getEnvelope() != null);
  dp=curve1.getEnvelope().getLowerCorner().getCoordinates();
  assertTrue(dp[0] == -50);
  assertTrue(dp[1] == 0);
  dp=curve1.getEnvelope().getUpperCorner().getCoordinates();
  assertTrue(dp[0] == 50);
  assertTrue(dp[1] == 50);
  dp=curve1.forParam(0).getCoordinates();
  assertTrue(dp[0] == -50);
  assertTrue(dp[1] == 0.0);
  dp=curve1.forParam(curve1.length()).getCoordinates();
  assertTrue(dp[0] == 50);
  assertTrue(dp[1] == 0.0);
  dp=curve1.forParam(50).getCoordinates();
  assertTrue(Math.round(dp[0] * 1000) == -18397);
  assertTrue(Math.round(dp[1] * 1000) == 37735);
  dp=curve1.forConstructiveParam(0.0).getCoordinates();
  assertTrue(dp[0] == -50);
  assertTrue(dp[1] == 0.0);
  dp=curve1.forConstructiveParam(1.0).getCoordinates();
  assertTrue(dp[0] == 50);
  assertTrue(dp[1] == 0.0);
  dp=curve1.forConstructiveParam(50 / curve1.length()).getCoordinates();
  assertTrue(Math.round(dp[0] * 1000) == -18397);
  assertTrue(Math.round(dp[1] * 1000) == 37735);
  dp=curve1.getTangent(0);
  assertTrue(Math.round(dp[0] * 1000) == -49445);
  assertTrue(Math.round(dp[1] * 1000) == 832);
  dp=curve1.getTangent(40);
  assertTrue(Math.round(dp[0] * 100) == -2589);
  assertTrue(Math.round(dp[1] * 100) == 3274);
  dp=curve1.getTangent(curve1.getEndParam());
  assertTrue(Math.round(dp[0] * 100) == 5055);
  assertTrue(Math.round(dp[1] * 100) == -83);
  dp=curve1.getRepresentativePoint().getCoordinates();
  assertTrue(dp[0] == 0);
  assertTrue(dp[1] == 50);
  DirectPosition p6=tCoordFactory.createDirectPosition(new double[]{80,20});
  DirectPosition p7=tCoordFactory.createDirectPosition(new double[]{130,60});
  List<DirectPosition> directPositions=new ArrayList<DirectPosition>();
  directPositions.add(p5.getPosition());
  directPositions.add(p6);
  directPositions.add(p7);
  CurveImpl curve2=(CurveImpl)tPrimFactory.createCurveByDirectPositions(directPositions);
  CurveImpl curve3=curve1.merge(curve2);
  assertTrue(curve1.asDirectPositions().size() == 5);
  assertTrue(curve2.asDirectPositions().size() == 3);
  assertTrue(curve3.asDirectPositions().size() == 7);
  curve3=curve2.merge(curve1);
  assertTrue(curve1.asDirectPositions().size() == 5);
  assertTrue(curve2.asDirectPositions().size() == 3);
  assertTrue(curve3.asDirectPositions().size() == 7);
  directPositions.remove(0);
  curve2=(CurveImpl)tPrimFactory.createCurveByDirectPositions(directPositions);
  curve3=null;
  try {
    curve3=curve2.merge(curve1);
  }
 catch (  IllegalArgumentException e) {
  }
  assertTrue(curve3 == null);
  Complex cc1=curve1.getClosure();
  assertTrue(cc1 instanceof CompositeCurve);
}
