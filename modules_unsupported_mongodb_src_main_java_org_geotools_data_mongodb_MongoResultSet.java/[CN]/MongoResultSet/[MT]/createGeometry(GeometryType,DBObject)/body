{
  Geometry geometryObj=null;
  if (type.equals(GeometryType.GeometryCollection)) {
    if (!coordinates.containsField("geometries")) {
      log.warning("No geometries detected for GeometryCollection, skipping.");
      return geometryObj;
    }
    BasicDBList geometryList=(BasicDBList)coordinates.get("geometries");
    int i=0;
    Geometry[] geometries=new Geometry[geometryList.size()];
    for (    Object geoElement : geometryList) {
      String subType=(String)((BasicDBList)geoElement).get("type");
      GeometryType geoType=GeometryType.valueOf(subType);
      geometries[i++]=createGeometry(geoType,(DBObject)geoElement);
    }
    geometryObj=geoFactory.createGeometryCollection(geometries);
  }
 else {
    if (!coordinates.containsField("coordinates")) {
      return geoFactory.createPoint((Coordinate)null);
    }
    BasicDBList coords=(BasicDBList)coordinates.get("coordinates");
    int i=0;
switch (type) {
case LineString:
      geometryObj=createLineString(coords);
    break;
case Point:
  geometryObj=createPoint(coords);
break;
case Polygon:
geometryObj=createPolygon(coords);
break;
case MultiLineString:
LineString[] lines=new LineString[coords.size()];
for (Object lineCoords : coords) {
lines[i++]=createLineString((BasicDBList)lineCoords);
}
geometryObj=geoFactory.createMultiLineString(lines);
break;
case MultiPoint:
Point[] points=new Point[coords.size()];
for (Object obj : coords) {
BasicDBList aPoint=(BasicDBList)obj;
points[i++]=createPoint(aPoint);
}
geometryObj=geoFactory.createMultiPoint(points);
break;
case MultiPolygon:
Polygon[] polys=new Polygon[coords.size()];
for (Object polyCoords : coords) {
polys[i++]=createPolygon((BasicDBList)polyCoords);
}
geometryObj=geoFactory.createMultiPolygon(polys);
break;
}
}
return geometryObj;
}
