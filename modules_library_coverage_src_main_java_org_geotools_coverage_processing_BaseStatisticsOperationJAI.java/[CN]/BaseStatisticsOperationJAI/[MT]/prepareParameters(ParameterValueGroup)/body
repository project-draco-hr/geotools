{
  final ImagingParameters copy=(ImagingParameters)descriptor.createValue();
  final ParameterBlockJAI block=(ParameterBlockJAI)copy.parameters;
  try {
    final GridCoverage2D source=(GridCoverage2D)parameters.parameter(operation.getSourceNames()[PRIMARY_SOURCE_INDEX]).getValue();
    final AffineTransform gridToWorldTransformCorrected=new AffineTransform((AffineTransform)((GridGeometry2D)source.getGridGeometry()).getGridToCRS2D(PixelOrientation.UPPER_LEFT));
    final MathTransform worldToGridTransform;
    try {
      worldToGridTransform=ProjectiveTransform.create(gridToWorldTransformCorrected.createInverse());
    }
 catch (    NoninvertibleTransformException e) {
      final CoverageProcessingException ce=new CoverageProcessingException(e);
      throw ce;
    }
    final CoordinateReferenceSystem crs=source.getCoordinateReferenceSystem2D();
    final Envelope2D envelope=source.getEnvelope2D();
    final double xPeriod=parameters.parameter("xPeriod").doubleValue();
    final double yPeriod=parameters.parameter("yPeriod").doubleValue();
    if (!Double.isNaN(xPeriod) && !Double.isNaN(yPeriod)) {
      final DirectPosition2D LLC=new DirectPosition2D(crs,envelope.x,envelope.y);
      LLC.setCoordinateReferenceSystem(crs);
      final DirectPosition2D URC=new DirectPosition2D(crs,envelope.x + xPeriod,envelope.y + yPeriod);
      URC.setCoordinateReferenceSystem(crs);
      final Envelope2D shrinkedEnvelope=new Envelope2D(LLC,URC);
      final Rectangle2D transformedEnv=CRS.transform(worldToGridTransform,shrinkedEnvelope).toRectangle2D();
      block.setParameter("xPeriod",Integer.valueOf((int)transformedEnv.getWidth()));
      block.setParameter("yPeriod",Integer.valueOf((int)transformedEnv.getHeight()));
    }
    final Object o=parameters.parameter("roi").getValue();
    if (o != null && o instanceof Polygon) {
      final Polygon roiInput=(Polygon)o;
      if (new ReferencedEnvelope(roiInput.getEnvelopeInternal(),source.getCoordinateReferenceSystem2D()).intersects((Envelope)new ReferencedEnvelope(envelope))) {
        final java.awt.Polygon shapePolygon=convertPolygon(roiInput,worldToGridTransform);
        block.setParameter("roi",new ROIShape(shapePolygon));
      }
    }
    handleJAIEXTParams(block,parameters);
    return block;
  }
 catch (  Exception e) {
    final CoverageProcessingException ce=new CoverageProcessingException(e);
    throw ce;
  }
}
