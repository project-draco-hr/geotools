{
  double S1=abs(P1);
  double S2=abs(P2);
  double DA=(P2 - P1);
  if (S1 > TOLERANCE_0 || S2 <= (PI / 2 - TOLERANCE_0) || S2 >= (PI / 2 + TOLERANCE_0)) {
    final double DB=sin(P2 * 2.0) - sin(P1 * 2.0);
    final double DC=sin(P2 * 4.0) - sin(P1 * 4.0);
    final double DD=sin(P2 * 6.0) - sin(P1 * 6.0);
    final double DE=sin(P2 * 8.0) - sin(P1 * 8.0);
    final double DF=sin(P2 * 10.0) - sin(P1 * 10.0);
    S2=-DB * B / 2.0 + DC * C / 4.0 - DD * D / 6.0 + DE * E / 8.0 - DF * F / 10.0;
  }
 else {
    S2=0;
  }
  S1=DA * A;
  return abs(semiMajorAxis * (1.0 - eccentricitySquared) * (S1 + S2));
}
