{
  checkNumberOfPoints(numberOfPoints);
  if (!directionValid) {
    computeDirection();
  }
  if (!destinationValid) {
    computeDestinationPoint();
  }
  final double long2=this.long2;
  final double lat2=this.lat2;
  final double distance=this.distance;
  final double deltaDistance=distance / numberOfPoints;
  final GeneralPath path=new GeneralPath(GeneralPath.WIND_EVEN_ODD,numberOfPoints + 1);
  path.moveTo((float)toDegrees(long1),(float)toDegrees(lat1));
  for (int i=1; i < numberOfPoints; i++) {
    this.distance=i * deltaDistance;
    computeDestinationPoint();
    path.lineTo((float)toDegrees(this.long2),(float)toDegrees(this.lat2));
  }
  this.long2=long2;
  this.lat2=lat2;
  this.distance=distance;
  path.lineTo((float)toDegrees(long2),(float)toDegrees(lat2));
  return path;
}
