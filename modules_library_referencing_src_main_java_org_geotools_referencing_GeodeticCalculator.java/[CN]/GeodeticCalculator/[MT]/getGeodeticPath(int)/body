{
  if (numPoints < 0) {
    throw new IllegalArgumentException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2,"numPoints",numPoints));
  }
  List<Point2D> points=new ArrayList<Point2D>(numPoints + 2);
  if (!directionValid) {
    computeDirection();
  }
  if (!destinationValid) {
    computeDestinationPoint();
  }
  final double long2=this.long2;
  final double lat2=this.lat2;
  final double distance=this.distance;
  final double delta=distance / (numPoints + 1);
  points.add(new Point2D.Double(toDegrees(long1),toDegrees(lat1)));
  for (int i=1; i <= numPoints; i++) {
    this.distance=i * delta;
    computeDestinationPoint();
    points.add(new Point2D.Double(toDegrees(this.long2),toDegrees(this.lat2)));
  }
  points.add(new Point2D.Double(toDegrees(long2),toDegrees(lat2)));
  this.long2=long2;
  this.lat2=lat2;
  this.distance=distance;
  return points;
}
