{
  if (filter != null) {
    org.geotools.filter.Expression leftGeometry=filter.getLeftGeometry();
    org.geotools.filter.Expression rightGeometry=filter.getRightGeometry();
switch (filter.getFilterType()) {
case FilterType.GEOMETRY_BBOX:
      Envelope bbox=null;
    LiteralExpression le=null;
  if (leftGeometry != null && leftGeometry.getType() == ExpressionType.LITERAL_GEOMETRY) {
    le=(LiteralExpression)leftGeometry;
    if (le != null && le.getLiteral() != null && le.getLiteral() instanceof Geometry) {
      bbox=((Geometry)le.getLiteral()).getEnvelopeInternal();
    }
  }
 else {
    if (rightGeometry != null && rightGeometry.getType() == ExpressionType.LITERAL_GEOMETRY) {
      le=(LiteralExpression)rightGeometry;
      if (le != null && le.getLiteral() != null && le.getLiteral() instanceof Geometry) {
        Geometry g=(Geometry)le.getLiteral();
        bbox=g.getEnvelopeInternal();
      }
    }
  }
if (bbox != null) {
  boolean changed=false;
  double minx, miny, maxx, maxy;
  minx=bbox.getMinX();
  miny=bbox.getMinY();
  maxx=bbox.getMaxX();
  maxy=bbox.getMaxY();
  if (maxbbox != null) {
    if (minx < maxbbox.getMinX()) {
      minx=maxbbox.getMinX();
      changed=true;
    }
    if (maxx > maxbbox.getMaxX()) {
      maxx=maxbbox.getMaxX();
      changed=true;
    }
    if (miny < maxbbox.getMinY()) {
      miny=maxbbox.getMinY();
      changed=true;
    }
    if (maxy > maxbbox.getMaxY()) {
      maxy=maxbbox.getMaxY();
      changed=true;
    }
  }
  if (changed) {
    Envelope tmp=new Envelope(minx,maxx,miny,maxy);
    try {
      le.setLiteral((new GeometryFactory()).toGeometry(tmp));
    }
 catch (    IllegalFilterException e) {
      logger.warning(e.toString());
    }
  }
}
return;
case FilterType.GEOMETRY_BEYOND:
case FilterType.GEOMETRY_CONTAINS:
case FilterType.GEOMETRY_CROSSES:
case FilterType.GEOMETRY_DISJOINT:
case FilterType.GEOMETRY_DWITHIN:
case FilterType.GEOMETRY_EQUALS:
case FilterType.GEOMETRY_INTERSECTS:
case FilterType.GEOMETRY_OVERLAPS:
case FilterType.GEOMETRY_TOUCHES:
case FilterType.GEOMETRY_WITHIN:
default :
if (leftGeometry != null) leftGeometry.accept(this);
if (rightGeometry != null) rightGeometry.accept(this);
}
}
}
