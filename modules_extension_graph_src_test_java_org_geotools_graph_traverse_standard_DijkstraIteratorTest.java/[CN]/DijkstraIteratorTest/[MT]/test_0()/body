{
  int nnodes=100;
  Node[] ends=GraphTestUtil.buildNoBifurcations(builder(),nnodes);
  CountingWalker walker=new CountingWalker();
  final DijkstraIterator iterator=createIterator();
  iterator.setSource(ends[0]);
  BasicGraphTraversal traversal=new BasicGraphTraversal(builder().getGraph(),walker,iterator);
  traversal.init();
  traversal.traverse();
  GraphVisitor visitor=new GraphVisitor(){
    public int visit(    Graphable component){
      assertTrue(component.isVisited());
      assertTrue(iterator.getCost(component) == (double)component.getID());
      if (component.getID() == 0)       assertNull(iterator.getParent(component));
 else       assertTrue(iterator.getParent(component).getID() == component.getID() - 1);
      return 0;
    }
  }
;
  builder().getGraph().visitNodes(visitor);
  assertTrue(walker.getCount() == nnodes);
}
