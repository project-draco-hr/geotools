{
  BufferedImage[] images=new BufferedImage[bounds.length];
  for (int i=0; i < images.length; i++) {
    images[i]=renderImage(renderer,bounds[i],listener);
  }
  final BufferedImage image=mergeImages(images);
  final String headless=System.getProperty("java.awt.headless","false");
  if (!headless.equalsIgnoreCase("true") && TestData.isInteractiveTest()) {
    try {
      Frame frame=new Frame(testName);
      frame.addWindowListener(new WindowAdapter(){
        public void windowClosing(        WindowEvent e){
          e.getWindow().dispose();
        }
      }
);
      Panel p=new Panel(){
        /** 
 * <code>serialVersionUID</code> field 
 */
        private static final long serialVersionUID=1L;
{
          setPreferredSize(new Dimension(image.getWidth(),image.getHeight()));
        }
        public void paint(        Graphics g){
          g.drawImage(image,0,0,this);
        }
      }
;
      frame.add(p);
      frame.pack();
      frame.setVisible(true);
      Thread.sleep(timeOut);
      frame.dispose();
    }
 catch (    HeadlessException exception) {
      return image;
    }
  }
  boolean hasData=false;
  for (int y=0; y < image.getHeight(); y++) {
    for (int x=0; x < image.getWidth(); x++) {
      if (image.getRGB(x,y) != 0) {
        hasData=true;
      }
    }
  }
  assert(hasData);
  return image;
}
