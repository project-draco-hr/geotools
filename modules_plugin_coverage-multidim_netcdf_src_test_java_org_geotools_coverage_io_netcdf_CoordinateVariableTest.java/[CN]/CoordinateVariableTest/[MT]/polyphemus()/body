{
  final NetcdfDataset dataset=NetcdfDataset.openDataset(TestData.url(this,"O3-NO2.nc").toExternalForm());
  assertNotNull(dataset);
  final List<CoordinateAxis> cvs=dataset.getCoordinateAxes();
  assertNotNull(cvs);
  assertSame(4,cvs.size());
  Dimension dim=dataset.findDimension("time");
  assertNotNull(dim);
  assertEquals("time",dim.getShortName());
  CoordinateAxis coordinateAxis=dataset.findCoordinateAxis(dim.getShortName());
  assertNotNull(coordinateAxis);
  assertTrue(coordinateAxis instanceof CoordinateAxis1D);
  Class<?> binding=CoordinateVariable.suggestBinding((CoordinateAxis1D)coordinateAxis);
  assertNotNull(binding);
  assertSame(Date.class,binding);
  CoordinateVariable<?> cv=CoordinateVariable.create((CoordinateAxis1D)coordinateAxis);
  assertSame(Date.class,cv.getType());
  List<?> list=cv.read();
  assertNotNull(list);
  assertEquals(2,list.size());
  final GregorianCalendar cal=new GregorianCalendar(NetCDFTimeUtilities.UTC_TIMEZONE);
  cal.set(2012,3,1,0,0,0);
  cal.set(GregorianCalendar.MILLISECOND,0);
  assertEquals(cal.getTime(),cv.getMinimum());
  assertEquals(list.get(0),cv.getMinimum());
  cal.set(2012,3,1,1,0,0);
  assertEquals(cal.getTime(),cv.getMaximum());
  assertEquals(list.get(1),cv.getMaximum());
  assertEquals(2,cv.getSize());
  assertEquals("hours since 2012-04-01 0:00:00",cv.getUnit());
  CoordinateReferenceSystem crs=cv.getCoordinateReferenceSystem();
  assertNotNull(crs);
  assertTrue(crs instanceof TemporalCRS);
  dim=dataset.findDimension("z");
  assertNotNull(dim);
  assertEquals("z",dim.getShortName());
  coordinateAxis=dataset.findCoordinateAxis(dim.getShortName());
  assertNotNull(coordinateAxis);
  assertTrue(coordinateAxis instanceof CoordinateAxis1D);
  binding=CoordinateVariable.suggestBinding((CoordinateAxis1D)coordinateAxis);
  assertNotNull(binding);
  assertSame(Float.class,binding);
  cv=CoordinateVariable.create((CoordinateAxis1D)coordinateAxis);
  list=cv.read();
  assertNotNull(list);
  assertEquals(2,list.size());
  assertSame(Float.class,cv.getType());
  assertEquals(10f,cv.getMinimum());
  assertEquals(450f,cv.getMaximum());
  assertEquals(list.get(0),cv.getMinimum());
  assertEquals(list.get(1),cv.getMaximum());
  assertEquals(2,cv.getSize());
  assertEquals("meters",cv.getUnit());
  crs=cv.getCoordinateReferenceSystem();
  assertNotNull(crs);
  assertTrue(crs instanceof VerticalCRS);
  dataset.close();
}
