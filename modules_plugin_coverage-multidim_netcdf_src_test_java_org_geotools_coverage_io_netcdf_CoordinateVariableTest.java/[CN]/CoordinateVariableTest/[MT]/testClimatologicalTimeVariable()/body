{
  final File workDir=new File(TestData.file(this,"."),"climatologicalaxis");
  if (!workDir.mkdir()) {
    FileUtils.deleteDirectory(workDir);
    assertTrue("Unable to create workdir:" + workDir,workDir.mkdir());
  }
  FileUtils.copyFile(TestData.file(this,"climatological.zip"),new File(workDir,"climatological.zip"));
  TestData.unzipFile(this,"climatologicalaxis/climatological.zip");
  final NetcdfDataset dataset=NetcdfDataset.openDataset(TestData.url(this,"climatologicalaxis/climatological.nc").toExternalForm());
  Dimension dim=dataset.findDimension("time");
  CoordinateAxis1D coordinateAxis=(CoordinateAxis1D)dataset.findCoordinateAxis(dim.getShortName());
  try {
    CoordinateHandler handler=CoordinateHandlerFinder.findHandler(coordinateAxis);
    assertNotNull(handler);
    assertTrue(handler instanceof ClimatologicalTimeHandler);
    ClimatologicalTimeHandler timeHandler=(ClimatologicalTimeHandler)handler;
    CoordinateVariable<Date> coordinateVariable=timeHandler.createCoordinateVariable(coordinateAxis);
    assertNotNull(coordinateVariable);
    assertTrue(coordinateVariable instanceof ClimatologicalTimeCoordinateVariable);
    ClimatologicalTimeCoordinateVariable timeVariable=(ClimatologicalTimeCoordinateVariable)coordinateVariable;
    CoordinateReferenceSystem crs=timeVariable.getCoordinateReferenceSystem();
    assertTrue(crs instanceof TemporalCRS);
    assertEquals(12,timeVariable.getSize());
    Calendar calendar=new GregorianCalendar(TimeZone.getTimeZone("UTC"));
    calendar.set(0,0,16,0,0,0);
    calendar.set(Calendar.MILLISECOND,0);
    assertEquals(calendar.getTimeInMillis(),timeVariable.getMinimum().getTime());
    calendar.set(Calendar.MONTH,11);
    assertEquals(calendar.getTimeInMillis(),timeVariable.getMaximum().getTime());
    calendar.set(Calendar.MONTH,2);
    assertEquals(calendar.getTimeInMillis(),timeVariable.read(2).getTime());
  }
  finally {
    dataset.close();
    FileUtils.deleteDirectory(TestData.file(this,"climatologicalaxis"));
  }
}
