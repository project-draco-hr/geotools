{
  Map<String,Serializable> params=new HashMap<String,Serializable>();
  params.put("dbtype","app-schema");
  URL url=getClass().getResource(TEST_DATA + "Gsml30MappedFeature.xml");
  Assert.assertNotNull(url);
  params.put("url",url.toExternalForm());
  DataAccess<FeatureType,Feature> dataAccess=null;
  try {
    dataAccess=DataAccessFinder.getDataStore(params);
    Assert.assertNotNull(dataAccess);
    FeatureType mappedFeatureType=dataAccess.getSchema(MAPPED_FEATURE);
    Assert.assertNotNull(mappedFeatureType);
    FeatureSource<FeatureType,Feature> source=dataAccess.getFeatureSource(MAPPED_FEATURE);
    FeatureCollection<FeatureType,Feature> features=source.getFeatures();
    FeatureIterator<Feature> iterator=features.features();
    Map<String,Feature> featureMap=new LinkedHashMap<String,Feature>();
    try {
      while (iterator.hasNext()) {
        Feature f=iterator.next();
        featureMap.put(f.getIdentifier().getID(),f);
      }
    }
  finally {
      iterator.close();
    }
    Assert.assertEquals(2,featureMap.size());
    Assert.assertEquals("First",((ComplexAttribute)featureMap.get("mf.1").getProperty(new NameImpl(GML.NAMESPACE,"name"))).getProperty(new NameImpl("simpleContent")).getValue());
    Assert.assertEquals("Second",((ComplexAttribute)featureMap.get("mf.2").getProperty(new NameImpl(GML.NAMESPACE,"name"))).getProperty(new NameImpl("simpleContent")).getValue());
    for (int i=1; i <= 2; i++) {
      Assert.assertEquals(BigInteger.valueOf(250000),((Attribute)((ComplexAttribute)((ComplexAttribute)((ComplexAttribute)featureMap.get("mf." + i).getProperty(new NameImpl(GSML,"resolutionScale"))).getProperty(new NameImpl(GMD.NAMESPACE,"MD_RepresentativeFraction"))).getProperty(new NameImpl(GMD.NAMESPACE,"denominator"))).getProperty(new NameImpl(GCO.NAMESPACE,"Integer"))).getValue());
    }
  }
  finally {
    if (dataAccess != null) {
      dataAccess.dispose();
    }
  }
}
