{
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("Parsing pyramid properties file at:" + sourceURL.toExternalForm());
  }
  BufferedInputStream propertyStream=null;
  InputStream openStream=null;
  try {
    openStream=sourceURL.openStream();
    propertyStream=new BufferedInputStream(openStream);
    final Properties properties=new Properties();
    properties.load(propertyStream);
    final String envelope=properties.getProperty("Envelope2D");
    String[] pairs=envelope.split(" ");
    final double cornersV[][]=new double[2][2];
    String pair[];
    for (int i=0; i < 2; i++) {
      pair=pairs[i].split(",");
      cornersV[i][0]=Double.parseDouble(pair[0]);
      cornersV[i][1]=Double.parseDouble(pair[1]);
    }
    this.originalEnvelope=new GeneralEnvelope(cornersV[0],cornersV[1]);
    this.originalEnvelope.setCoordinateReferenceSystem(crs);
    numOverviews=Integer.parseInt(properties.getProperty("LevelsNum")) - 1;
    levelsDirs=properties.getProperty("LevelsDirs").split(" ");
    final String levels=properties.getProperty("Levels");
    pairs=levels.split(" ");
    overViewResolutions=numOverviews >= 1 ? new double[numOverviews][2] : null;
    pair=pairs[0].split(",");
    highestRes=new double[2];
    highestRes[0]=Double.parseDouble(pair[0].trim());
    highestRes[1]=Double.parseDouble(pair[1].trim());
    for (int i=1; i < numOverviews + 1; i++) {
      pair=pairs[i].split(",");
      overViewResolutions[i - 1][0]=Double.parseDouble(pair[0].trim());
      overViewResolutions[i - 1][1]=Double.parseDouble(pair[1].trim());
    }
    coverageName=properties.getProperty("Name");
    originalGridRange=new GridEnvelope2D(new Rectangle((int)Math.round(originalEnvelope.getSpan(0) / highestRes[0]),(int)Math.round(originalEnvelope.getSpan(1) / highestRes[1])));
    final GridToEnvelopeMapper geMapper=new GridToEnvelopeMapper(originalGridRange,originalEnvelope);
    geMapper.setPixelAnchor(PixelInCell.CELL_CORNER);
    raster2Model=geMapper.createTransform();
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("Parsed pyramid properties file at:" + sourceURL.toExternalForm());
    }
  }
  finally {
    if (propertyStream != null)     IOUtils.closeQuietly(propertyStream);
    if (openStream != null)     IOUtils.closeQuietly(openStream);
  }
}
