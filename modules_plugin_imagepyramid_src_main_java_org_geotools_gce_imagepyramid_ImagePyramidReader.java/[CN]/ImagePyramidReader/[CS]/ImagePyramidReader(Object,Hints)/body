{
  if (this.hints == null)   this.hints=new Hints();
  if (uHints != null) {
    this.hints.add(uHints);
  }
  this.coverageFactory=CoverageFactoryFinder.getGridCoverageFactory(this.hints);
  if (source == null) {
    throw new DataSourceException("ImagePyramidReader:null source set to read this coverage.");
  }
  this.source=source;
  this.sourceURL=Utils.checkSource(source,uHints);
  if (sourceURL == null) {
    throw new IllegalArgumentException("This plugin accepts only File, URL and String pointing to a file");
  }
  final URL prjURL=DataUtilities.changeUrlExt(sourceURL,"prj");
  PrjFileReader crsReader=null;
  try {
    crsReader=new PrjFileReader(Channels.newChannel(prjURL.openStream()));
  }
 catch (  FactoryException e) {
    throw new DataSourceException(e);
  }
 finally {
    try {
      crsReader.close();
    }
 catch (    Throwable e) {
      if (LOGGER.isLoggable(Level.FINE))       LOGGER.log(Level.FINE,e.getLocalizedMessage(),e);
    }
  }
  final Object tempCRS=hints.get(Hints.DEFAULT_COORDINATE_REFERENCE_SYSTEM);
  if (tempCRS != null) {
    this.crs=(CoordinateReferenceSystem)tempCRS;
    LOGGER.log(Level.WARNING,"Using forced coordinate reference system " + crs.toWKT());
  }
 else {
    final CoordinateReferenceSystem tempcrs=crsReader.getCoordinateReferenceSystem();
    if (tempcrs == null) {
      crs=AbstractGridFormat.getDefaultCRS();
      LOGGER.log(Level.WARNING,"Unable to find a CRS for this coverage, using a default one: " + crs.toWKT());
    }
 else     crs=tempcrs;
  }
  parseMainFile(sourceURL);
}
