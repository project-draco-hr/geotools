{
  if (sampleDataType == DataBuffer.TYPE_DOUBLE) {
    scanInfo.fullyCovered=checkFullyCovered(iter,D_VALUE,geometriesList);
  }
 else   if (sampleDataType == DataBuffer.TYPE_BYTE) {
    scanInfo.fullyCovered=checkFullyCovered(iter,I_VALUE,geometriesList);
  }
  boolean firstRef=true;
  java.awt.Polygon awtPolygon=new java.awt.Polygon();
  if (!scanInfo.fullyCovered) {
    final int minX=imageProperties.minX;
    final int minY=imageProperties.minY;
    final int maxX=imageProperties.maxX;
    final int maxY=imageProperties.maxY;
    final int minTileY=imageProperties.minTileY;
    final int minTileX=imageProperties.minTileX;
    final int maxTileY=imageProperties.maxTileY;
    final int maxTileX=imageProperties.maxTileX;
    final int tileWidth=imageProperties.tileWidth;
    final int tileHeight=imageProperties.tileHeight;
    if (sampleDataType == DataBuffer.TYPE_DOUBLE) {
      for (int tileY=minTileY; tileY <= maxTileY; tileY++) {
        for (int tileX=minTileX; tileX <= maxTileX; tileX++) {
          for (int trow=0; trow < tileHeight; trow++) {
            int row=(tileY * tileHeight) + trow;
            if ((row >= minY) && (row <= maxY)) {
              for (int tcol=0; tcol < tileWidth; tcol++) {
                int col=(tileX * tileWidth) + tcol;
                if ((col >= minX) && (col <= maxX)) {
                  double value=iter.getSampleDouble(col,row,0);
                  if (!bitSet.get(col - minX,row - minY) && !Double.isNaN(value)) {
                    if (areEqual(value,D_VALUE)) {
                      Polygon polygon=identifyPerimeter(iter,col,row,awtPolygon,sampleDataType,scanInfo);
                      if (polygon != null) {
                        if (removeCollinear) {
                          if (LOGGER.isLoggable(Level.FINE)) {
                            LOGGER.fine("Removing collinear points");
                          }
                          polygon=(Polygon)JTS.removeCollinearVertices(polygon);
                        }
                        bitSet.set(polygon);
                        geometriesList.add(polygon);
                      }
 else                       if (scanInfo.firstFound && firstRef) {
                        scanInfo.refColumn=col;
                        scanInfo.refRow=row;
                        firstRef=false;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (sampleDataType == DataBuffer.TYPE_BYTE) {
      for (int tileY=minTileY; tileY <= maxTileY; tileY++) {
        for (int tileX=minTileX; tileX <= maxTileX; tileX++) {
          for (int trow=0; trow < tileHeight; trow++) {
            int row=(tileY * tileHeight) + trow;
            if ((row >= minY) && (row <= maxY)) {
              for (int tcol=0; tcol < tileWidth; tcol++) {
                int col=(tileX * tileWidth) + tcol;
                if ((col >= minX) && (col <= maxX)) {
                  int value=iter.getSample(col,row,0);
                  if (!bitSet.get(col - minX,row - minY)) {
                    if (value == I_VALUE) {
                      Polygon polygon=identifyPerimeter(iter,col,row,awtPolygon,sampleDataType,scanInfo);
                      if (polygon != null) {
                        if (removeCollinear) {
                          if (LOGGER.isLoggable(Level.FINE)) {
                            LOGGER.fine("Removing collinear points");
                          }
                          polygon=(Polygon)JTS.removeCollinearVertices(polygon);
                        }
                        geometriesList.add(polygon);
                        bitSet.set(polygon);
                      }
 else                       if (scanInfo.firstFound && firstRef) {
                        scanInfo.refColumn=col;
                        scanInfo.refRow=row;
                        firstRef=false;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!scanInfo.fullyCovered && geometriesList.isEmpty() && (scanInfo.refColumn != Integer.MIN_VALUE)&& (scanInfo.refColumn != Integer.MAX_VALUE)) {
    scanInfo.takeFirst=true;
    Polygon polygon=identifyPerimeter(iter,scanInfo.refColumn,scanInfo.refRow,awtPolygon,sampleDataType,scanInfo);
    geometriesList.add(polygon);
  }
}
