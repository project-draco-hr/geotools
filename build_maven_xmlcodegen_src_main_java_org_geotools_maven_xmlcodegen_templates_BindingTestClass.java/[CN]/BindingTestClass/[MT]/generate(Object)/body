{
  final StringBuffer stringBuffer=new StringBuffer();
  Object[] arguments=(Object[])argument;
  XSDNamedComponent named=(XSDNamedComponent)arguments[0];
  XSDSchema schema=named.getSchema();
  XSDTypeDefinition type=null;
  String ns=schema.getTargetNamespace();
  String prefix=Schemas.getTargetPrefix(schema);
  stringBuffer.append(TEXT_1);
  stringBuffer.append(named.getTargetNamespace());
  stringBuffer.append(TEXT_2);
  stringBuffer.append(named.getName());
  stringBuffer.append(TEXT_3);
  OutputFormat output=new OutputFormat();
  output.setOmitXMLDeclaration(true);
  output.setIndenting(true);
  StringWriter writer=new StringWriter();
  XMLSerializer serializer=new XMLSerializer(writer,output);
  try {
    serializer.serialize(named.getElement());
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
  String[] lines=writer.getBuffer().toString().split("\n");
  for (int i=0; i < lines.length; i++) {
    stringBuffer.append(TEXT_4);
    stringBuffer.append(lines[i].replaceAll("<","&lt;").replaceAll(">","&gt;"));
  }
  stringBuffer.append(TEXT_5);
  String className=named.getName().substring(0,1).toUpperCase() + named.getName().substring(1) + "BindingTest";
  String baseClassName=prefix.toUpperCase() + "TestSupport";
  stringBuffer.append(TEXT_6);
  stringBuffer.append(className);
  stringBuffer.append(TEXT_7);
  stringBuffer.append(baseClassName);
  stringBuffer.append(TEXT_8);
  stringBuffer.append(prefix.toUpperCase());
  stringBuffer.append(TEXT_9);
  stringBuffer.append(named.getName());
  stringBuffer.append(TEXT_10);
  stringBuffer.append(prefix.toUpperCase());
  stringBuffer.append(TEXT_11);
  stringBuffer.append(named.getName());
  stringBuffer.append(TEXT_12);
  return stringBuffer.toString();
}
