{
  Class<? extends CoordinateOperation> type=getType(definition);
  final OperationMethod method=definition.getMethod();
  if (method instanceof MathTransformProvider) {
    final Class<? extends Operation> candidate=((MathTransformProvider)method).getOperationType();
    if (candidate != null) {
      if (type.isAssignableFrom(candidate)) {
        type=candidate;
      }
    }
  }
  if (typeHint != null && type.isAssignableFrom(typeHint)) {
    type=typeHint;
  }
  if (ConicProjection.class.isAssignableFrom(type)) {
    return new DefaultConicProjection(definition,sourceCRS,targetCRS,transform);
  }
  if (CylindricalProjection.class.isAssignableFrom(type)) {
    return new DefaultCylindricalProjection(definition,sourceCRS,targetCRS,transform);
  }
  if (PlanarProjection.class.isAssignableFrom(type)) {
    return new DefaultPlanarProjection(definition,sourceCRS,targetCRS,transform);
  }
  if (Projection.class.isAssignableFrom(type)) {
    return new DefaultProjection(definition,sourceCRS,targetCRS,transform);
  }
  return new DefaultConversion(definition,sourceCRS,targetCRS,transform);
}
