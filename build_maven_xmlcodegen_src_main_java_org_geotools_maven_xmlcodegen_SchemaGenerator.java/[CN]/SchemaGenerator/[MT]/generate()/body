{
  List typeDefs=GeneratorUtils.types(schema,includes);
  if (simpleTypes) {
    logger.info("Generting simple types");
    for (Iterator itr=typeDefs.iterator(); itr.hasNext(); ) {
      XSDTypeDefinition xsdType=(XSDTypeDefinition)itr.next();
      if (xsdType.getName() == null) {
        continue;
      }
      if (!xsdType.getTargetNamespace().equals(schema.getTargetNamespace())) {
        continue;
      }
      if (xsdType instanceof XSDSimpleTypeDefinition) {
        logger.info(xsdType.getName());
        createType((XSDSimpleTypeDefinition)xsdType,0);
      }
    }
  }
  if (complexTypes) {
    logger.info("Generting complex types");
    for (Iterator itr=typeDefs.iterator(); itr.hasNext(); ) {
      XSDTypeDefinition xsdType=(XSDTypeDefinition)itr.next();
      if (xsdType.getName() == null) {
        continue;
      }
      if (!xsdType.getTargetNamespace().equals(schema.getTargetNamespace())) {
        continue;
      }
      if (xsdType instanceof XSDComplexTypeDefinition) {
        logger.info(xsdType.getName());
        try {
          createType((XSDComplexTypeDefinition)xsdType,0);
        }
 catch (        Exception e) {
          logger.warning("XERRORX generating " + xsdType);
        }
      }
    }
  }
  Schema gtSchema=new SchemaImpl(schema.getTargetNamespace());
  for (Iterator itr=types.values().iterator(); itr.hasNext(); ) {
    AttributeType gtType=(AttributeType)itr.next();
    if (gtType.getName().getLocalPart() == null) {
      throw new NullPointerException();
    }
    gtSchema.put(gtType.getName(),gtType);
  }
  Object[] input=new Object[]{gtSchema,Schemas.getTargetPrefix(schema),this};
  String result=execute("SchemaClassTemplate",input);
  String className=Schemas.getTargetPrefix(schema).toUpperCase() + "Schema";
  write(result,className,sourceLocation);
}
