{
  if (el == null || neighbor == null) {
    throw new IllegalArgumentException("el and neighbour position must both be non-null");
  }
  if (!(el instanceof Hexagon)) {
    throw new IllegalArgumentException("el must be an instance of Hexagon");
  }
  Hexagon hexagon=(Hexagon)el;
  if (!isValidNeighbor(neighbor)) {
    throw new IllegalArgumentException(neighbor + " is not a valid neighbour position for orientation " + hexagon.getOrientation());
  }
  ReferencedEnvelope bounds=hexagon.getBounds();
  double dx, dy;
switch (neighbor) {
case LEFT:
    dx=-bounds.getWidth();
  dy=0.0;
break;
case LOWER:
dx=0.0;
dy=-bounds.getHeight();
break;
case LOWER_LEFT:
if (hexagon.getOrientation() == Orientation.FLAT) {
dx=-0.75 * bounds.getWidth();
dy=-0.5 * bounds.getHeight();
}
 else {
dx=-0.5 * bounds.getWidth();
dy=-0.75 * bounds.getHeight();
}
break;
case LOWER_RIGHT:
if (hexagon.getOrientation() == Orientation.FLAT) {
dx=0.75 * bounds.getWidth();
dy=-0.5 * bounds.getHeight();
}
 else {
dx=0.5 * bounds.getWidth();
dy=-0.75 * bounds.getHeight();
}
break;
case RIGHT:
dx=bounds.getWidth();
dy=0.0;
break;
case UPPER:
dx=0.0;
dy=bounds.getHeight();
break;
case UPPER_LEFT:
if (hexagon.getOrientation() == Orientation.FLAT) {
dx=-0.75 * bounds.getWidth();
dy=0.5 * bounds.getHeight();
}
 else {
dx=-0.5 * bounds.getWidth();
dy=0.75 * bounds.getHeight();
}
break;
case UPPER_RIGHT:
if (hexagon.getOrientation() == Orientation.FLAT) {
dx=0.75 * bounds.getWidth();
dy=0.5 * bounds.getHeight();
}
 else {
dx=0.5 * bounds.getWidth();
dy=0.75 * bounds.getHeight();
}
break;
default :
throw new IllegalArgumentException("Unrecognized value for neighbor");
}
return Hexagons.create(bounds.getMinX() + dx,bounds.getMinY() + dy,hexagon.getSideLength(),hexagon.getOrientation(),bounds.getCoordinateReferenceSystem());
}
