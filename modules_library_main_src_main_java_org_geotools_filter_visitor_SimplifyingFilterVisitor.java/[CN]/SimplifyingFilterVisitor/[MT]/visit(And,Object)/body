{
  List<Filter> flattened=new ArrayList<Filter>(filter.getChildren().size());
  for (  Filter child : filter.getChildren()) {
    Filter cloned=(Filter)child.accept(this,extraData);
    if (cloned instanceof And) {
      And and=(And)cloned;
      flattened.addAll(and.getChildren());
    }
 else {
      flattened.add(cloned);
    }
  }
  for (int i=0; i < flattened.size(); i++) {
    Filter f=flattened.get(i);
    if (f instanceof Or) {
      Or or=((Or)f);
      Filter reduced=null;
      boolean twoOrMore=false;
      for (      Filter child : or.getChildren()) {
        List<Filter> newList=new ArrayList<>(flattened);
        newList.remove(or);
        newList.add(child);
        And and=getFactory(extraData).and(newList);
        Filter simplified=(Filter)and.accept(this,extraData);
        if (simplified == Filter.EXCLUDE) {
          continue;
        }
 else         if (simplified == Filter.INCLUDE) {
          return Filter.INCLUDE;
        }
 else         if (reduced == null) {
          reduced=simplified;
        }
 else         if (!simplified.equals(reduced)) {
          twoOrMore=true;
        }
      }
      if (reduced == null) {
        return Filter.EXCLUDE;
      }
 else       if (!twoOrMore) {
        flattened.clear();
        if (!(reduced instanceof And)) {
          flattened.add(reduced);
        }
 else {
          flattened.addAll(((And)reduced).getChildren());
        }
        i=0;
      }
    }
  }
  if (featureType != null) {
    RangeCombiner combiner=new RangeCombiner.And(ff,featureType,flattened);
    flattened=combiner.getReducedFilters();
  }
  List<Filter> simplified=new ArrayList<Filter>(flattened.size());
  for (  Filter child : flattened) {
    if (child == Filter.EXCLUDE) {
      return Filter.EXCLUDE;
    }
    if (child == Filter.INCLUDE) {
      continue;
    }
    simplified.add(child);
  }
  for (int i=0; i < simplified.size(); i++) {
    for (int j=i + 1; j < simplified.size(); ) {
      Filter f1=simplified.get(i);
      Filter f2=simplified.get(j);
      if (f1.equals(f2)) {
        simplified.remove(j);
      }
 else       if (dualFilters(f1,f2)) {
        return Filter.EXCLUDE;
      }
 else {
        j++;
      }
    }
  }
  if (simplified.size() == 0) {
    return Filter.INCLUDE;
  }
  if (simplified.size() == 1) {
    return simplified.get(0);
  }
  return getFactory(extraData).and(simplified);
}
