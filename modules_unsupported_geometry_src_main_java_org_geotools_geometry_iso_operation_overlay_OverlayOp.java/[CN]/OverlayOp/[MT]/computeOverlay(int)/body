{
  this.copyPoints(0);
  this.copyPoints(1);
  this.arg[0].computeSelfNodes(li,false);
  this.arg[1].computeSelfNodes(li,false);
  this.arg[0].computeEdgeIntersections(arg[1],li,true);
  List baseSplitEdges=new ArrayList();
  this.arg[0].computeSplitEdges(baseSplitEdges);
  this.arg[1].computeSplitEdges(baseSplitEdges);
  insertUniqueEdges(baseSplitEdges);
  this.computeLabelsFromDepths();
  this.replaceCollapsedEdges();
  this.graph.addEdges(this.edgeList.getEdges());
  this.computeLabelling();
  this.labelIncompleteNodes();
  findResultAreaEdges(opCode);
  cancelDuplicateResultEdges();
  PolygonBuilder polyBuilder=new PolygonBuilder(crs,cga);
  polyBuilder.add(this.graph);
  this.resultPolyList=polyBuilder.getPolygons();
  LineBuilder lineBuilder=new LineBuilder(this,crs,ptLocator);
  this.resultLineList=lineBuilder.build(opCode);
  PointBuilder pointBuilder=new PointBuilder(this,crs,ptLocator);
  this.resultPointList=pointBuilder.build(opCode);
  this.resultGeom=this.computeGeometry(resultPointList,resultLineList,resultPolyList);
}
