{
  LineSegment seg;
switch (nbrConfig(curData)) {
case 0:
    break;
case 1:
  horizLine=new LineSegment();
horizLine.p0.x=col;
seg=new LineSegment();
seg.p0.y=row;
vertLines.put(col,seg);
break;
case 2:
break;
case 3:
horizLine.p1.x=col;
addHorizLine(row);
horizLine=null;
seg=new LineSegment();
seg.p0.y=row;
vertLines.put(col,seg);
break;
case 4:
horizLine.p1.x=col;
addHorizLine(row);
horizLine=null;
seg=vertLines.get(col);
seg.p1.y=row;
addVertLine(col);
vertLines.remove(col);
break;
case 5:
horizLine=new LineSegment();
horizLine.p0.x=col;
seg=vertLines.get(col);
seg.p1.y=row;
addVertLine(col);
vertLines.remove(col);
break;
case 6:
horizLine.p1.x=col;
addHorizLine(row);
horizLine.p0.x=col;
seg=vertLines.get(col);
seg.p1.y=row;
addVertLine(col);
vertLines.remove(col);
break;
case 7:
horizLine.p1.x=col;
addHorizLine(row);
horizLine.p0.x=col;
seg=new LineSegment();
seg.p0.y=row;
vertLines.put(col,seg);
break;
case 8:
horizLine.p1.x=col;
addHorizLine(row);
horizLine=null;
seg=vertLines.get(col);
seg.p1.y=row;
addVertLine(col);
seg=new LineSegment();
seg.p0.y=row;
vertLines.put(col,seg);
break;
case 9:
horizLine=new LineSegment();
horizLine.p0.x=col;
seg=vertLines.get(col);
seg.p1.y=row;
addVertLine(col);
seg=new LineSegment();
seg.p0.y=row;
vertLines.put(col,seg);
break;
case 10:
horizLine.p1.x=col;
addHorizLine(row);
horizLine.p0.x=col;
seg=vertLines.get(col);
seg.p1.y=row;
addVertLine(col);
seg=new LineSegment();
seg.p0.y=row;
vertLines.put(col,seg);
int z=-1;
if (isDifferent(curData[TL],curData[BR])) {
if (!isDifferent(curData[TR],curData[BL])) {
z=CROSS;
}
}
 else {
if (isDifferent(curData[TR],curData[BL])) {
z=TL_BR;
}
 else {
z=TR_BL;
}
}
if (z != -1) {
cornerTouches.add(new Coordinate(col,row,z));
}
break;
case 11:
break;
}
}
