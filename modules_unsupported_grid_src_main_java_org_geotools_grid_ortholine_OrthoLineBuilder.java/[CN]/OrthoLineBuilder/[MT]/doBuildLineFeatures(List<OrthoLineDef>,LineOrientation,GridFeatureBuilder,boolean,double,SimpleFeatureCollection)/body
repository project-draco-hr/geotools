{
  final int NDEFS=lineDefs.size();
  if (NDEFS > 0) {
    double minOrdinate, maxOrdinate;
    if (orientation == LineOrientation.HORIZONTAL) {
      minOrdinate=gridBounds.getMinY();
      maxOrdinate=gridBounds.getMaxY();
    }
 else {
      minOrdinate=gridBounds.getMinX();
      maxOrdinate=gridBounds.getMaxX();
    }
    double[] pos=new double[NDEFS];
    boolean[] active=new boolean[NDEFS];
    boolean[] atCurPos=new boolean[NDEFS];
    boolean[] generate=new boolean[NDEFS];
    Map<String,Object> attributes=new HashMap<String,Object>();
    String geomPropName=lineFeatureBuilder.getType().getGeometryDescriptor().getLocalName();
    for (int i=0; i < NDEFS; i++) {
      pos[i]=minOrdinate;
      active[i]=true;
    }
    int numActive=NDEFS;
    while (numActive > 0) {
      double curPos=maxOrdinate;
      for (int i=0; i < NDEFS; i++) {
        if (active[i] && pos[i] < curPos - TOL) {
          curPos=pos[i];
        }
      }
      for (int i=0; i < NDEFS; i++) {
        atCurPos[i]=active[i] && Math.abs(pos[i] - curPos) < TOL;
      }
      System.arraycopy(atCurPos,0,generate,0,NDEFS);
      for (int i=0; i < NDEFS - 1; i++) {
        if (generate[i] && atCurPos[i]) {
          for (int j=i + 1; j < NDEFS; j++) {
            if (generate[j] && atCurPos[j]) {
              if (lineDefs.get(i).getLevel() >= lineDefs.get(j).getLevel()) {
                generate[j]=false;
              }
 else {
                generate[i]=false;
                break;
              }
            }
          }
        }
 else {
          generate[i]=false;
        }
      }
      for (int i=0; i < NDEFS; i++) {
        if (generate[i]) {
          OrthoLine element=new OrthoLineImpl(gridBounds,orientation,pos[i],lineDefs.get(i).getLevel(),new Double(pos[i]));
          if (lineFeatureBuilder.getCreateFeature(element)) {
            lineFeatureBuilder.setAttributes(element,attributes);
            if (densify) {
              featureBuilder.set(geomPropName,element.toDenseGeometry(vertexSpacing));
            }
 else {
              featureBuilder.set(geomPropName,element.toGeometry());
            }
            for (            String propName : attributes.keySet()) {
              featureBuilder.set(propName,attributes.get(propName));
            }
            fc.add(featureBuilder.buildFeature(lineFeatureBuilder.getFeatureID(element)));
          }
        }
      }
      for (int i=0; i < NDEFS; i++) {
        if (atCurPos[i]) {
          pos[i]+=lineDefs.get(i).getSpacing();
          if (pos[i] > maxOrdinate + TOL) {
            active[i]=false;
            numActive--;
          }
        }
      }
    }
  }
}
