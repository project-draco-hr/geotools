{
  final WindBarbDefinition retValue=WindBarb.DEFAULT_WINDBARB_DEFINITION;
  if (params == null || params.size() <= 0) {
    return retValue;
  }
  String temp=null;
  int vectorLength=retValue.vectorLength;
  if (params.containsKey("vectorlength")) {
    temp=params.get("vectorlength");
    if (temp == null || temp.length() <= 0) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong vectorLength provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
    try {
      vectorLength=Integer.parseInt(temp);
    }
 catch (    Exception e) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong vectorLength provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
    if (vectorLength <= 0) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong vectorLength provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
  }
  int basePennantLength=retValue.basePennantLength;
  if (params.containsKey("basepennantlength")) {
    temp=params.get("basepennantlength");
    if (temp == null || temp.length() <= 0) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong basePennantLength provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
    try {
      basePennantLength=Integer.parseInt(temp);
    }
 catch (    Exception e) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong basePennantLength provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
    if (basePennantLength <= 0 || basePennantLength >= vectorLength) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong basePennantLength provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
  }
  int elementsSpacing=retValue.elementsSpacing;
  if (params.containsKey("elementsspacing")) {
    temp=params.get("elementsspacing");
    if (temp == null || temp.length() <= 0) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong elementsSpacing provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
    try {
      elementsSpacing=Integer.parseInt(temp);
    }
 catch (    Exception e) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong elementsSpacing provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
    if (elementsSpacing <= 0 || elementsSpacing >= vectorLength || elementsSpacing + basePennantLength >= vectorLength) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong elementsSpacing provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
  }
  int longBarbLength=retValue.longBarbLength;
  if (params.containsKey("longbarblength")) {
    temp=params.get("longbarblength");
    if (temp == null || temp.length() <= 0) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong longBarbLength provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
    try {
      longBarbLength=Integer.parseInt(temp);
    }
 catch (    Exception e) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong longBarbLength provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
    if (longBarbLength <= 0) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong longBarbLength provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
  }
  int zeroWindRadius=retValue.zeroWindRadius;
  if (params.containsKey("zerowindradius")) {
    temp=params.get("zerowindradius");
    if (temp == null || temp.length() <= 0) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong zeroWindRadius provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
    try {
      zeroWindRadius=Integer.parseInt(temp);
    }
 catch (    Exception e) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong zeroWindRadius provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
    if (zeroWindRadius <= 0) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("Wrong zeroWindRadius provided: " + temp + " resorting to default wind barb definition");
      }
      return retValue;
    }
  }
  return new WindBarbDefinition(vectorLength,basePennantLength,elementsSpacing,longBarbLength,zeroWindRadius);
}
