{
  if (symbolUrl == null) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("Provided null symbol to the WindBarbs Factory");
    }
    return null;
  }
  if (feature == null) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("Provided null feature to the WindBarbs Factory");
    }
    return null;
  }
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("Trying to resolve symbol:" + symbolUrl.toString());
  }
  final String wellKnownName=symbolUrl.evaluate(feature,String.class);
  if (wellKnownName == null || wellKnownName.length() <= 0) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("Unable to resolve symbol provided to WindBarbs Factory");
    }
    return null;
  }
  if (!wellKnownName.matches(WindBarbsFactory.WINDBARB_DEFINITION)) {
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine("Unable to resolve symbol: " + wellKnownName);
    }
    return null;
  }
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("Resolved symbol " + wellKnownName);
  }
  String windBarbName=null;
  Matcher matcher=WINDBARB_SET_PATTERN.matcher(wellKnownName);
  if (matcher.matches()) {
    try {
      windBarbName=matcher.group(2);
    }
 catch (    Exception e) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.log(Level.INFO,"Unable to parse windbarb set from string: " + wellKnownName,e);
      }
      return null;
    }
  }
  if (windBarbName == null || windBarbName.length() <= 0) {
    if (LOGGER.isLoggable(Level.INFO)) {
      LOGGER.fine("Unable to parse windBarbName from string: " + wellKnownName);
    }
    return null;
  }
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("Resolved windBarbName " + windBarbName);
  }
  matcher=SPEED_PATTERN.matcher(wellKnownName);
  double speed=Double.NaN;
  if (matcher.matches()) {
    String speedString="";
    try {
      speedString=matcher.group(2);
      speed=Double.parseDouble(speedString);
    }
 catch (    Exception e) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.log(Level.INFO,"Unable to parse speed from string: " + speedString,e);
      }
      return null;
    }
  }
 else {
    if (LOGGER.isLoggable(Level.INFO)) {
      LOGGER.fine("Unable to parse speed from string: " + wellKnownName);
    }
    return null;
  }
  String uom=null;
  matcher=UNIT_PATTERN.matcher(wellKnownName);
  if (matcher.matches()) {
    uom=matcher.group(2);
  }
  if (uom == null || uom.length() <= 0) {
    if (LOGGER.isLoggable(Level.INFO)) {
      LOGGER.info("Unable to parse UoM from " + wellKnownName);
    }
    return null;
  }
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("WindBarbs name " + windBarbName + "with Speed "+ speed+ "["+ uom+ "]");
  }
  int index=wellKnownName.indexOf('?');
  if (index > 0) {
    final Map<String,String> params=new HashMap<String,String>();
    final String kvp=wellKnownName.substring(index + 1);
    String[] pairs=kvp.split("&");
    if (pairs != null && pairs.length > 0) {
      for (      String pair : pairs) {
        String[] splitPair=pair.split("=");
        if (splitPair != null && splitPair.length > 0) {
          params.put(splitPair[0].toLowerCase(),splitPair[1]);
        }
 else {
          if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine("Skipping pair " + pair);
          }
        }
      }
      if (!params.isEmpty()) {
        return getWindBarb(windBarbName,speed,uom,params);
      }
    }
  }
 else {
    if (!wellKnownName.endsWith("]")) {
      if (LOGGER.isLoggable(Level.INFO)) {
        LOGGER.info("The provided symbol may be missing a ? before the KVP part.");
      }
      return null;
    }
  }
  return getWindBarb(windBarbName,speed,uom);
}
