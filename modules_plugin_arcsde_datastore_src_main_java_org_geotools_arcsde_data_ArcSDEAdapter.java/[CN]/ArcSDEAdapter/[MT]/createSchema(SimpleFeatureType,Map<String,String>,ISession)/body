{
  if (featureType == null) {
    throw new NullPointerException("You have to provide a FeatureType instance");
  }
  final Command<Void> createSchemaCmd=new Command<Void>(){
    @Override public Void execute(    ISession session,    SeConnection connection) throws SeException, IOException {
      final String[] typeNameParts=featureType.getTypeName().split("\\.");
      final String unqualifiedTypeName=typeNameParts[typeNameParts.length - 1];
      SeTable table=null;
      SeLayer layer=null;
      boolean tableCreated=false;
      int rowIdType=SeRegistration.SE_REGISTRATION_ROW_ID_COLUMN_TYPE_NONE;
      String rowIdColumn=null;
      String configKeyword="DEFAULTS";
      if (hints.containsKey("configuration.keyword")) {
        configKeyword=String.valueOf(hints.get("configuration.keyword"));
      }
      if (hints.get("rowid.column.type") instanceof String) {
        String rowIdStr=(String)hints.get("rowid.column.type");
        if (rowIdStr.equalsIgnoreCase("NONE")) {
          rowIdType=SeRegistration.SE_REGISTRATION_ROW_ID_COLUMN_TYPE_NONE;
        }
 else         if (rowIdStr.equalsIgnoreCase("USER")) {
          rowIdType=SeRegistration.SE_REGISTRATION_ROW_ID_COLUMN_TYPE_USER;
        }
 else         if (rowIdStr.equalsIgnoreCase("SDE")) {
          rowIdType=SeRegistration.SE_REGISTRATION_ROW_ID_COLUMN_TYPE_SDE;
        }
 else {
          throw new DataSourceException("createSchema hint 'rowid.column.type' must be one of 'NONE', 'USER' or 'SDE'");
        }
      }
      if (hints.get("rowid.column.name") instanceof String) {
        rowIdColumn=(String)hints.get("rowid.column.name");
      }
      Exception error=null;
      try {
        String qualifiedName=null;
        if (unqualifiedTypeName.indexOf('.') == -1) {
          qualifiedName=connection.getUser() + "." + unqualifiedTypeName;
          LOGGER.finer("new full qualified type name: " + qualifiedName);
        }
 else {
          qualifiedName=unqualifiedTypeName;
          LOGGER.finer("full qualified type name provided by user: " + qualifiedName);
        }
        layer=new SeLayer(connection);
        layer.setTableName(qualifiedName);
        layer.setCreationKeyword(configKeyword);
        final String HACK_COL_NAME="gt_workaround_col_";
        table=createSeTable(connection,qualifiedName,HACK_COL_NAME,configKeyword);
        tableCreated=true;
        final List<AttributeDescriptor> atts=featureType.getAttributeDescriptors();
        AttributeDescriptor currAtt;
        for (Iterator<AttributeDescriptor> it=atts.iterator(); it.hasNext(); ) {
          currAtt=it.next();
          if (currAtt instanceof GeometryDescriptor) {
            GeometryDescriptor geometryAtt=(GeometryDescriptor)currAtt;
            createSeLayer(layer,qualifiedName,geometryAtt);
          }
 else {
            LOGGER.fine("Creating column definition for " + currAtt);
            SeColumnDefinition newCol=ArcSDEAdapter.createSeColumnDefinition(currAtt);
            newCol=new SeColumnDefinition(newCol.getName(),newCol.getType(),newCol.getSize(),newCol.getScale(),true);
            LOGGER.fine("Adding column " + newCol.getName() + " to the actual table.");
            table.addColumn(newCol);
          }
        }
        LOGGER.fine("deleting the 'workaround' column...");
        table.dropColumn(HACK_COL_NAME);
        LOGGER.fine("setting up table registration with ArcSDE...");
        SeRegistration reg=new SeRegistration(connection,table.getName());
        if (rowIdColumn != null) {
          LOGGER.fine("setting rowIdColumnName to " + rowIdColumn + " in table "+ reg.getTableName());
          reg.setRowIdColumnName(rowIdColumn);
          reg.setRowIdColumnType(rowIdType);
          reg.alter();
          reg=null;
        }
        LOGGER.fine("Schema correctly created: " + featureType);
      }
 catch (      SeException e) {
        LOGGER.log(Level.WARNING,e.getSeError().getErrDesc(),e);
        throw e;
      }
 finally {
        if ((error != null) && tableCreated) {
        }
      }
      return null;
    }
  }
;
  session.issue(createSchemaCmd);
}
