{
  Iterator itr=m_edge.getOutRelated();
  BasicDirectedEdge de=(BasicDirectedEdge)itr.next();
  assertTrue(de == m_outEdge);
  assertTrue(!itr.hasNext());
  m_edge.getInNode().addOut(m_same);
  m_edge.getOutNode().addIn(m_same);
  itr=m_edge.getOutRelated();
  de=(BasicDirectedEdge)itr.next();
  assertTrue(de == m_outEdge);
  assertTrue(!itr.hasNext());
  m_edge.getInNode().removeOut(m_same);
  m_edge.getOutNode().removeIn(m_same);
  m_edge.getInNode().addIn(m_opp);
  m_edge.getOutNode().addOut(m_opp);
  itr=m_edge.getOutRelated();
  de=(BasicDirectedEdge)itr.next();
  assertTrue(de == m_outEdge || de == m_opp);
  de=(BasicDirectedEdge)itr.next();
  assertTrue(de == m_outEdge || de == m_opp);
  assertTrue(!itr.hasNext());
  m_edge.getInNode().addIn(m_opp2);
  m_edge.getOutNode().addOut(m_opp2);
  itr=m_edge.getOutRelated();
  de=(BasicDirectedEdge)itr.next();
  assertTrue(de == m_outEdge || de == m_opp || de == m_opp2);
  de=(BasicDirectedEdge)itr.next();
  assertTrue(de == m_outEdge || de == m_opp || de == m_opp2);
  de=(BasicDirectedEdge)itr.next();
  assertTrue(de == m_outEdge || de == m_opp || de == m_opp2);
  assertTrue(!itr.hasNext());
  m_edge.getInNode().removeIn(m_opp);
  m_edge.getOutNode().removeOut(m_opp);
  m_edge.getInNode().removeIn(m_opp2);
  m_edge.getOutNode().removeOut(m_opp2);
  m_edge.getOutNode().addIn(m_outloop);
  m_edge.getOutNode().addOut(m_outloop);
  itr=m_edge.getOutRelated();
  de=(BasicDirectedEdge)itr.next();
  assertTrue(de == m_outEdge || de == m_outloop);
  de=(BasicDirectedEdge)itr.next();
  assertTrue(de == m_outEdge || de == m_outloop);
  assertTrue(!itr.hasNext());
}
