{
  Repository repository=lookup(REPOSITORY_PARAM,params,Repository.class);
  String[] stores=lookup(STORES_PARAM,params,String[].class);
  boolean tolerant=lookup(TOLERATE_CONNECTION_FAILURE,params,Boolean.class);
  String namespace=lookup(NAMESPACE,params,String.class);
  ExecutorService executor;
  int parallelism=lookup(PARALLELISM,params,Integer.class);
  if (parallelism <= 0) {
    executor=Executors.newCachedThreadPool();
  }
 else {
    executor=Executors.newFixedThreadPool(parallelism);
  }
  List<AggregateTypeConfiguration> configs=null;
  URL configuration=lookup(CONFIGURATION,params,URL.class);
  if (configuration != null) {
    configs=new AggregateTypeParser().parseConfigurations(configuration.openStream());
  }
  String configurationXml=lookup(CONFIGURATION_XML,params,String.class);
  if (configurationXml != null && !"".equals(configurationXml.trim())) {
    configs=new AggregateTypeParser().parseConfigurations(new ByteArrayInputStream(configurationXml.getBytes()));
  }
  AggregatingDataStore store=new AggregatingDataStore(repository,executor);
  store.setNamespaceURI(namespace);
  store.setTolerant(tolerant);
  if (stores != null) {
    store.autoConfigureStores(Arrays.asList(stores));
  }
  if (configs != null) {
    for (    AggregateTypeConfiguration config : configs) {
      store.addType(config);
    }
  }
  return store;
}
