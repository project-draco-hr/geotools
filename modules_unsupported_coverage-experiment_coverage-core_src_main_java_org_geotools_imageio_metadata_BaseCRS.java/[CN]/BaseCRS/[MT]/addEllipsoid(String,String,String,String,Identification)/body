{
  if (datum.getSelectedChoice() == Datum.GEODETIC_DATUM) {
    ellipsoid=new IdentifiableMetadataAccessor(datum.getChild(),SpatioTemporalMetadataFormat.MD_DTM_GD_ELLIPSOID,null,ellipsoidId);
    this.semiMajorAxis=new MetadataAccessor(ellipsoid,SpatioTemporalMetadataFormat.MD_DTM_GD_EL_SEMIMAJORAXIS,null);
    this.semiMajorAxis.setString(SpatioTemporalMetadataFormat.MD_COMM_ATTRIBUTEVALUE,semiMajorAxis);
    ellipsoid.setString(SpatioTemporalMetadataFormat.MD_DTM_GD_EL_UNIT,unit);
    this.secondDefiningParameter=new MetadataAccessor(ellipsoid,SpatioTemporalMetadataFormat.MD_DTM_GD_EL_SECONDDEFPARAM,null);
    if (Utilities.ensureValidString(semiMajorAxis,semiMinorAxis) && semiMajorAxis.equals(semiMinorAxis)) {
      this.secondDefiningParameter.setString(SpatioTemporalMetadataFormat.MD_DTM_GD_EL_SPHERE,"true");
    }
 else     if (Utilities.ensureValidString(semiMinorAxis)) {
      this.secondDefiningParameter.setString(SpatioTemporalMetadataFormat.MD_COMM_ATTRIBUTETYPE,SpatioTemporalMetadataFormat.MD_DTM_GD_EL_SEMIMINORAXIS);
      this.secondDefiningParameter.setString(SpatioTemporalMetadataFormat.MD_COMM_ATTRIBUTEVALUE,semiMinorAxis);
    }
 else     if (Utilities.ensureValidString(invFlattening)) {
      this.secondDefiningParameter.setString(SpatioTemporalMetadataFormat.MD_COMM_ATTRIBUTETYPE,SpatioTemporalMetadataFormat.MD_DTM_GD_EL_INVERSEFLATTENING);
      this.secondDefiningParameter.setString(SpatioTemporalMetadataFormat.MD_COMM_ATTRIBUTEVALUE,invFlattening);
    }
 else {
      throw new IllegalArgumentException("Second Defining Parameter is mandatory for Geodetic Datum Ellipsoid!");
    }
  }
 else   throw new IllegalArgumentException("Could not set Prime Meridian for non-Geodetic Datum type");
}
