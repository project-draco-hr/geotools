{
  final String pmCode=metadata.getGeoKey(GeoTiffGCSCodes.GeogPrimeMeridianGeoKey);
  PrimeMeridian pm=null;
  try {
    if (pmCode != null) {
      if (pmCode.equals(GeoTiffConstants.GTUserDefinedGeoKey_String)) {
        try {
          String name=metadata.getGeoKey(GeoTiffGCSCodes.GeogCitationGeoKey);
          if (name == null) {
            name="unnamed";
          }
 else {
            String[] values=name.split("\\|");
            if (values != null && values.length >= 4) {
              name=values[3];
            }
          }
          final String pmValue=metadata.getGeoKey(GeoTiffGCSCodes.GeogPrimeMeridianLongGeoKey);
          final double pmNumeric=Double.parseDouble(pmValue);
          if (pmNumeric == 0) {
            return DefaultPrimeMeridian.GREENWICH;
          }
          final Map<String,String> props=new HashMap<String,String>();
          props.put("name",name);
          pm=datumObjFactory.createPrimeMeridian(props,pmNumeric,linearUnit);
        }
 catch (        NumberFormatException nfe) {
          final IOException io=new GeoTiffException(metadata,"Invalid user-defined prime meridian spec.",nfe);
          throw io;
        }
      }
 else {
        pm=this.allAuthoritiesFactory.createPrimeMeridian("EPSG:" + pmCode);
      }
    }
 else {
      pm=DefaultPrimeMeridian.GREENWICH;
    }
  }
 catch (  FactoryException fe) {
    final IOException io=new GeoTiffException(metadata,fe.getLocalizedMessage(),fe);
    throw io;
  }
  return pm;
}
