{
  String classification;
switch (args.length) {
case 0:
    classification="Mercator_1SP";
  break;
case 1:
classification=args[0];
break;
default :
System.err.println("Expected 0 or 1 argument");
return;
}
CRSFactory crsFactory=ReferencingFactoryFinder.getCRSFactory(null);
CSFactory csFactory=ReferencingFactoryFinder.getCSFactory(null);
MathTransformFactory mtFactory=ReferencingFactoryFinder.getMathTransformFactory(null);
CoordinateSystemAxis longAxis=org.geotools.referencing.cs.DefaultCoordinateSystemAxis.GEODETIC_LONGITUDE;
CoordinateSystemAxis latAxis=org.geotools.referencing.cs.DefaultCoordinateSystemAxis.GEODETIC_LATITUDE;
EllipsoidalCS ellipseCS=csFactory.createEllipsoidalCS(Collections.singletonMap("name","Lat/Long"),latAxis,longAxis);
GeodeticDatum datum=org.geotools.referencing.datum.DefaultGeodeticDatum.WGS84;
GeographicCRS sourceCRS=crsFactory.createGeographicCRS(Collections.singletonMap("name","WGS 84"),datum,ellipseCS);
ParameterValueGroup parameters=mtFactory.getDefaultParameters(classification);
if (false) {
parameters.parameter("false_easting").setValue(1000.0);
parameters.parameter("false_northing").setValue(1000.0);
}
CartesianCS cartCS=org.geotools.referencing.cs.DefaultCartesianCS.GENERIC_2D;
Map<String,String> properties=Collections.singletonMap("name",classification);
Conversion conversion=new DefiningConversion("Mercator",parameters);
ProjectedCRS targetCRS=crsFactory.createProjectedCRS(properties,sourceCRS,conversion,cartCS);
CoordinateOperationFactory coFactory=ReferencingFactoryFinder.getCoordinateOperationFactory(null);
CoordinateOperation co=coFactory.createOperation(sourceCRS,targetCRS);
MathTransform transform=co.getMathTransform();
System.out.print("Projection classification is ");
System.out.println(classification);
System.out.println("Source CRS is:");
System.out.println("    " + sourceCRS.toWKT());
System.out.println("Target CRS is:");
System.out.println("    " + targetCRS.toWKT());
System.out.println("Enter (latitude longitude) coordinates separated by a space.");
System.out.println("Enter \"exit\" to finish.");
final BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
String line;
while ((line=in.readLine()) != null) {
line=line.trim();
if (line.equalsIgnoreCase("exit")) {
break;
}
int split=line.indexOf(' ');
if (split >= 0) {
double latitude=Double.parseDouble(line.substring(0,split));
double longitude=Double.parseDouble(line.substring(split));
DirectPosition point=new GeneralDirectPosition(latitude,longitude);
point=transform.transform(point,point);
System.out.println(point);
}
}
}
