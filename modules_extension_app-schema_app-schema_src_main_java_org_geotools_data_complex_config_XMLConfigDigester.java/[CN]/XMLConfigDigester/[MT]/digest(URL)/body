{
  if (dataStoreConfigUrl == null) {
    throw new NullPointerException("datastore config url");
  }
  InputStream configStream=null;
  String configString=null;
  try {
    configStream=dataStoreConfigUrl.openStream();
    if (configStream == null) {
      throw new IOException("Can't open datastore config file " + dataStoreConfigUrl);
    }
 else {
      InterpolationProperties props=new InterpolationProperties();
      props.putAll(properties);
      File dataStoreConfigFile=DataUtilities.urlToFile(dataStoreConfigUrl);
      if (dataStoreConfigFile != null) {
        if (props.getProperty(CONFIG_FILE_PROPERTY) == null) {
          props.setProperty(CONFIG_FILE_PROPERTY,dataStoreConfigFile.getPath());
        }
        if (props.getProperty(CONFIG_PARENT_PROPERTY) == null) {
          props.setProperty(CONFIG_PARENT_PROPERTY,dataStoreConfigFile.getParent());
        }
      }
      configString=props.interpolate(InterpolationProperties.readAll(configStream));
    }
  }
  finally {
    if (configStream != null) {
      configStream.close();
    }
  }
  XMLConfigDigester.LOGGER.fine("parsing complex datastore config: " + dataStoreConfigUrl.toExternalForm());
  Digester digester=new Digester();
  XMLConfigDigester.LOGGER.fine("digester created");
  digester.setValidating(false);
  digester.setNamespaceAware(true);
  digester.setRuleNamespaceURI(XMLConfigDigester.CONFIG_NS_URI);
  AppSchemaDataAccessDTO configDto=new AppSchemaDataAccessDTO();
  configDto.setBaseSchemasUrl(dataStoreConfigUrl.toExternalForm());
  digester.push(configDto);
  try {
    setNamespacesRules(digester);
    setIncludedTypesRules(digester);
    setSourceDataStoresRules(digester);
    setTargetSchemaUriRules(digester);
    setTypeMappingsRules(digester);
  }
 catch (  Exception e) {
    e.printStackTrace();
    XMLConfigDigester.LOGGER.log(Level.SEVERE,"setting digester properties: ",e);
    throw new IOException("Error setting digester properties: " + e.getMessage());
  }
  try {
    digester.parse(new StringReader(configString));
  }
 catch (  SAXException e) {
    e.printStackTrace();
    XMLConfigDigester.LOGGER.log(Level.SEVERE,"parsing " + dataStoreConfigUrl,e);
    IOException ioe=new IOException("Can't parse complex datastore config. ");
    ioe.initCause(e);
    throw ioe;
  }
  AppSchemaDataAccessDTO config=(AppSchemaDataAccessDTO)digester.getRoot();
  return config;
}
