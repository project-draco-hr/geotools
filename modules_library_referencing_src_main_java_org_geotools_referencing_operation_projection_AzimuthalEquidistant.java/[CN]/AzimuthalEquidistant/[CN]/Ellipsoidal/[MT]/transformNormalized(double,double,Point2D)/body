{
  double x=0;
  double y=0;
  double coslam=cos(lambda);
  double cosphi=cos(phi);
  double sinphi=sin(phi);
switch (mode) {
case NORTH_POLAR:
    coslam=-coslam;
case SOUTH_POLAR:
  double rho=abs(Mp - mlfn(phi,sinphi,cosphi));
x=rho * sin(lambda);
y=rho * coslam;
break;
case EQUATORIAL:
case OBLIQUE:
if (abs(lambda) < EPS10 && abs(phi - latitudeOfOrigin) < EPS10) {
x=0;
y=0;
break;
}
GeodesicData g=geodesic.Inverse(toDegrees(latitudeOfOrigin),toDegrees(centralMeridian),toDegrees(phi),toDegrees(lambda + centralMeridian));
double azi1=toRadians(g.azi1);
x=g.s12 * sin(azi1) / semiMajor;
y=g.s12 * cos(azi1) / semiMajor;
break;
}
if (ptDst == null) {
return new Point2D.Double(x,y);
}
 else {
ptDst.setLocation(x,y);
return ptDst;
}
}
