{
  final Random rd=new Random(457821698762354L);
  final Plane plan=new Plane();
  final Point3d P1=new Point3d(100 * rd.nextDouble() + 25,100 * rd.nextDouble() + 25,Math.rint(100 * rd.nextDouble() + 40));
  final Point3d P2=new Point3d(100 * rd.nextDouble() + 25,100 * rd.nextDouble() + 25,Math.rint(100 * rd.nextDouble() + 40));
  final Point3d P3=new Point3d(100 * rd.nextDouble() + 25,100 * rd.nextDouble() + 25,Math.rint(100 * rd.nextDouble() + 40));
  plan.setPlane(P1,P2,P3);
  assertEquals("P1",P1.z,plan.z(P1.x,P1.y),EPS);
  assertEquals("P2",P2.z,plan.z(P2.x,P2.y),EPS);
  assertEquals("P3",P3.z,plan.z(P3.x,P3.y),EPS);
  final double[] x=new double[4000];
  final double[] y=new double[4000];
  final double[] z=new double[4000];
  for (int i=0; i < z.length; i++) {
    x[i]=40 + 100 * rd.nextDouble();
    y[i]=40 + 100 * rd.nextDouble();
    z[i]=plan.z(x[i],y[i]) + 10 * rd.nextDouble() - 5;
  }
  final Plane copy=plan.clone();
  final double eps=1E-2;
  assertEquals("c",copy.c,plan.c,eps);
  assertEquals("cx",copy.cx,plan.cx,eps);
  assertEquals("cy",copy.cy,plan.cy,eps);
}
