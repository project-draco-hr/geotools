{
  boolean p1q1p2=Envelope.intersects(p1,p2,q1);
  boolean p1q2p2=Envelope.intersects(p1,p2,q2);
  boolean q1p1q2=Envelope.intersects(q1,q2,p1);
  boolean q1p2q2=Envelope.intersects(q1,q2,p2);
  if (p1q1p2 && p1q2p2) {
    intPt[0]=q1;
    intPt[1]=q2;
    return COLLINEAR;
  }
  if (q1p1q2 && q1p2q2) {
    intPt[0]=p1;
    intPt[1]=p2;
    return COLLINEAR;
  }
  if (p1q1p2 && q1p1q2) {
    intPt[0]=q1;
    intPt[1]=p1;
    return q1.equals(p1) && !p1q2p2 && !q1p2q2 ? DO_INTERSECT : COLLINEAR;
  }
  if (p1q1p2 && q1p2q2) {
    intPt[0]=q1;
    intPt[1]=p2;
    return q1.equals(p2) && !p1q2p2 && !q1p1q2 ? DO_INTERSECT : COLLINEAR;
  }
  if (p1q2p2 && q1p1q2) {
    intPt[0]=q2;
    intPt[1]=p1;
    return q2.equals(p1) && !p1q1p2 && !q1p2q2 ? DO_INTERSECT : COLLINEAR;
  }
  if (p1q2p2 && q1p2q2) {
    intPt[0]=q2;
    intPt[1]=p2;
    return q2.equals(p2) && !p1q1p2 && !q1p1q2 ? DO_INTERSECT : COLLINEAR;
  }
  return DONT_INTERSECT;
}
