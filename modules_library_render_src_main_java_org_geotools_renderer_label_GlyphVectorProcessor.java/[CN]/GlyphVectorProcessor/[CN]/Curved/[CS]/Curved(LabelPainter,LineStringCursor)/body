{
  super(painter);
  AffineTransform oldTransform=painter.graphics.getTransform();
  LineInfo lineInfo=painter.lines.get(0);
  if (!painter.isLabelUpwards(cursor) && painter.getLabel().isForceLeftToRightEnabled()) {
    LineStringCursor reverse=cursor.reverse();
    reverse.moveTo(cursor.getLineStringLength() - cursor.getCurrentOrdinate());
    cursor=reverse;
  }
  double anchorY=painter.getLinePlacementYAnchor();
  double mid=cursor.getCurrentOrdinate();
  Coordinate c=new Coordinate();
  c=cursor.getCurrentPosition(c);
  double startOrdinate=mid - painter.getStraightLabelWidth() / 2;
  if (startOrdinate < 0)   startOrdinate=0;
  cursor.moveTo(startOrdinate);
  final double lineHeight=painter.getLineHeight();
  for (  LineInfo.LineComponent lineComponent : lineInfo.getComponents()) {
    GlyphVector gv=lineComponent.getGlyphVector();
    try {
      final int numGlyphs=gv.getNumGlyphs();
      float nextAdvance=gv.getGlyphMetrics(0).getAdvance() * 0.5f;
      double start=cursor.getCurrentOrdinate();
      for (int i=0; i < numGlyphs; i++) {
        Point2D p=gv.getGlyphPosition(i);
        float advance=nextAdvance;
        nextAdvance=i < numGlyphs - 1 ? gv.getGlyphMetrics(i + 1).getAdvance() * 0.5f : 0;
        c=cursor.getCurrentPosition(c);
        AffineTransform t=new AffineTransform();
        t.setToTranslation(c.x,c.y);
        t.rotate(cursor.getCurrentAngle());
        t.translate(-p.getX() - advance,-p.getY() + lineHeight * anchorY);
        transforms.add(t);
        cursor.moveTo(cursor.getCurrentOrdinate() + advance + nextAdvance);
      }
      cursor.moveTo(start + gv.getGlyphPosition(numGlyphs).getX());
    }
  finally {
      painter.graphics.setTransform(oldTransform);
    }
  }
}
