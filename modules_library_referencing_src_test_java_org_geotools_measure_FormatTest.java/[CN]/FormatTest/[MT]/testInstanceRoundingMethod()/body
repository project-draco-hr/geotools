{
  double value=2.5d;
  AngleFormat af=new AngleFormat("D");
  assertEquals("2",af.format(value));
  af.setRoundingMethod(AngleFormat.RoundingMethod.ROUND_HALF_UP);
  assertEquals("3",af.format(value));
  af.setRoundingMethod(AngleFormat.RoundingMethod.ROUND_HALF_DOWN);
  assertEquals("2",af.format(value));
  value=3.5d;
  af.setRoundingMethod(AngleFormat.RoundingMethod.ROUND_HALF_EVEN);
  assertEquals("4",af.format(value));
  af=new AngleFormat("D M.m");
  value=30.45d / 60d;
  assertEquals("0 30.4",af.format(value));
  af.setRoundingMethod(AngleFormat.RoundingMethod.ROUND_HALF_UP);
  assertEquals("0 30.5",af.format(value));
  af.setRoundingMethod(AngleFormat.RoundingMethod.ROUND_HALF_DOWN);
  assertEquals("0 30.4",af.format(value));
  value=30.55d / 60d;
  af.setRoundingMethod(AngleFormat.RoundingMethod.ROUND_HALF_EVEN);
  assertEquals("0 30.6",af.format(value));
  af=new AngleFormat("D M S.s");
  value=3661.45d / 3600d;
  assertEquals("1 1 1.4",af.format(value));
  af.setRoundingMethod(AngleFormat.RoundingMethod.ROUND_HALF_UP);
  assertEquals("1 1 1.5",af.format(value));
  af.setRoundingMethod(AngleFormat.RoundingMethod.ROUND_HALF_DOWN);
  assertEquals("1 1 1.4",af.format(value));
  value=3661.55d / 3600d;
  af.setRoundingMethod(AngleFormat.RoundingMethod.ROUND_HALF_EVEN);
  assertEquals("1 1 1.6",af.format(value));
}
