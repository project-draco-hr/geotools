{
  try {
    ensureOpen();
    if (!hasNext()) {
      throw new NoSuchElementException("No more features in this reader, you should call " + "hasNext() to check for feature availability");
    }
    Connection cx;
    try {
      cx=st.getConnection();
    }
 catch (    SQLException e) {
      throw (IOException)new IOException().initCause(e);
    }
    String fid;
    try {
      fid=dataStore.encodeFID(pkey,rs);
      fid=featureType.getTypeName() + "." + fid;
    }
 catch (    Exception e) {
      throw new RuntimeException("Could not determine fid from primary key",e);
    }
    Integer depth=(Integer)hints.get(Hints.ASSOCIATION_TRAVERSAL_DEPTH);
    if (depth == null) {
      depth=new Integer(0);
    }
    PropertyName associationPropertyName=(PropertyName)hints.get(Hints.ASSOCIATION_PROPERTY);
    final int attributeCount=featureType.getAttributeCount();
    int[] attributeRsIndex=buildAttributeRsIndex();
    for (int i=0; i < attributeCount; i++) {
      AttributeDescriptor type=featureType.getDescriptor(i);
      boolean resolve=depth.intValue() > 0;
      if (resolve && (associationPropertyName != null)) {
        AttributeDescriptor associationProperty=(AttributeDescriptor)associationPropertyName.evaluate(featureType);
        resolve=(associationProperty != null) && associationProperty.getLocalName().equals(type.getLocalName());
      }
      try {
        Object value=null;
        if (type instanceof GeometryDescriptor) {
          GeometryDescriptor gatt=(GeometryDescriptor)type;
          try {
            value=dataStore.getSQLDialect().decodeGeometryValue(gatt,rs,attributeRsIndex[i],geometryFactory,cx);
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
          if (value != null) {
            Geometry geometry=(Geometry)value;
            if (geometry.getUserData() == null) {
              geometry.setUserData(gatt.getCoordinateReferenceSystem());
            }
          }
 else {
            if (dataStore.isAssociations()) {
              try {
                dataStore.ensureAssociationTablesExist(st.getConnection());
              }
 catch (              IOException e) {
                throw new RuntimeException(e);
              }
              Statement select=null;
              ResultSet gas=null;
              try {
                if (dataStore.getSQLDialect() instanceof PreparedStatementSQLDialect) {
                  select=dataStore.selectGeometryAssociationSQLPS(fid,null,gatt.getLocalName(),cx);
                  gas=((PreparedStatement)select).executeQuery();
                }
 else {
                  String sql=dataStore.selectGeometryAssociationSQL(fid,null,gatt.getLocalName());
                  dataStore.getLogger().fine(sql);
                  select=st.getConnection().createStatement();
                  gas=select.executeQuery(sql.toString());
                }
                if (gas.next()) {
                  String gid=gas.getString("gid");
                  boolean ref=gas.getBoolean("ref");
                  Geometry g=null;
                  if (ref && !resolve) {
                    g=geometryFactory.createPoint(new CoordinateArraySequence(new Coordinate[]{}));
                    dataStore.setGmlProperties(g,gid,null,null);
                  }
 else {
                    ResultSet grs=null;
                    if (dataStore.getSQLDialect() instanceof PreparedStatementSQLDialect) {
                      dataStore.closeSafe(select);
                      select=dataStore.selectGeometrySQLPS(gid,cx);
                      grs=((PreparedStatement)select).executeQuery();
                    }
 else {
                      String sql=dataStore.selectGeometrySQL(gid);
                      dataStore.getLogger().fine(sql);
                      grs=select.executeQuery(sql);
                    }
                    try {
                      if (!grs.next()) {
                        throw new SQLException("no entry for: " + gid + " in "+ JDBCDataStore.GEOMETRY_TABLE);
                      }
                      String name=grs.getString("name");
                      String desc=grs.getString("description");
                      if (grs.getObject("geometry") != null) {
                        g=dataStore.getSQLDialect().decodeGeometryValue(gatt,grs,"geometry",geometryFactory,cx);
                      }
 else {
                        String gtype=grs.getString("type");
                        if ("MULTIPOINT".equals(gtype) || "MULTILINESTRING".equals(gtype) || "MULTIPOLYGON".equals(gtype)) {
                          ResultSet mg=null;
                          if (dataStore.getSQLDialect() instanceof PreparedStatementSQLDialect) {
                            dataStore.closeSafe(select);
                            select=dataStore.selectMultiGeometrySQLPS(gid,cx);
                            mg=((PreparedStatement)select).executeQuery();
                          }
 else {
                            String sql=dataStore.selectMultiGeometrySQL(gid);
                            dataStore.getLogger().fine(sql);
                            mg=select.executeQuery(sql);
                          }
                          try {
                            ArrayList members=new ArrayList();
                            while (mg.next()) {
                              String mgid=mg.getString("mgid");
                              boolean mref=mg.getBoolean("ref");
                              Geometry member=null;
                              if (!mref || resolve) {
                                Statement select2=null;
                                ResultSet mgg=null;
                                if (dataStore.getSQLDialect() instanceof PreparedStatementSQLDialect) {
                                  select2=dataStore.selectGeometrySQLPS(mgid,cx);
                                  mgg=((PreparedStatement)select2).executeQuery();
                                }
 else {
                                  String sql=dataStore.selectGeometrySQL(mgid);
                                  dataStore.getLogger().fine(sql);
                                  select2=st.getConnection().createStatement();
                                  mgg=select2.executeQuery(sql);
                                }
                                try {
                                  mgg.next();
                                  String mname=mgg.getString("name");
                                  String mdesc=mgg.getString("description");
                                  member=dataStore.getSQLDialect().decodeGeometryValue(gatt,mgg,"geometry",geometryFactory,cx);
                                  dataStore.setGmlProperties(member,mgid,mname,mdesc);
                                }
  finally {
                                  dataStore.closeSafe(mgg);
                                  dataStore.closeSafe(select2);
                                }
                              }
 else {
                                member=geometryFactory.createPoint(new CoordinateArraySequence(new Coordinate[]{}));
                                dataStore.setGmlProperties(member,mgid,null,null);
                              }
                              members.add(member);
                            }
                            if ("MULTIPOINT".equals(gtype)) {
                              g=geometryFactory.createMultiPoint((Point[])members.toArray(new Point[members.size()]));
                            }
 else                             if ("MULTILINESTRING".equals(gtype)) {
                              g=geometryFactory.createMultiLineString((LineString[])members.toArray(new LineString[members.size()]));
                            }
 else                             if ("MULTIPOLYGON".equals(gtype)) {
                              g=geometryFactory.createMultiPolygon((Polygon[])members.toArray(new Polygon[members.size()]));
                            }
 else {
                              g=geometryFactory.createGeometryCollection((Geometry[])members.toArray(new Geometry[members.size()]));
                            }
                          }
  finally {
                            dataStore.closeSafe(mg);
                          }
                        }
                      }
                      dataStore.setGmlProperties(g,gid,name,desc);
                    }
 catch (                    IOException e) {
                      throw new RuntimeException(e);
                    }
 finally {
                      dataStore.closeSafe(grs);
                    }
                  }
                  value=g;
                }
              }
  finally {
                dataStore.closeSafe(gas);
                dataStore.closeSafe(select);
              }
            }
          }
        }
 else {
          value=rs.getObject(attributeRsIndex[i]);
        }
        if (dataStore.isAssociations() && Association.class.equals(type.getType().getBinding()) && (value != null)) {
          Statement select=null;
          ResultSet associations=null;
          if (dataStore.getSQLDialect() instanceof PreparedStatementSQLDialect) {
            select=dataStore.selectAssociationSQLPS(fid,cx);
            associations=((PreparedStatement)select).executeQuery();
          }
 else {
            String sql=dataStore.selectAssociationSQL(fid);
            dataStore.getLogger().fine(sql);
            select=st.getConnection().createStatement();
            associations=select.executeQuery(sql);
          }
          try {
            if (associations.next()) {
              String rtable=associations.getString("rtable");
              String rfid=associations.getString("rfid");
              SimpleFeatureType associatedType=null;
              try {
                associatedType=dataStore.getSchema(rtable);
              }
 catch (              IOException e) {
                String msg="Could not load schema: " + rtable;
                dataStore.getLogger().log(Level.WARNING,msg,e);
              }
              builder.userData("gml:id",rtable + "." + rfid);
              builder.userData("gml:featureTypeName",rtable);
              FeatureTypeFactory tf=dataStore.getFeatureTypeFactory();
              if (associatedType == null) {
                SimpleFeatureTypeBuilder tb=new SimpleFeatureTypeBuilder(tf);
                tb.setName(rtable);
                associatedType=tb.buildFeatureType();
              }
              AssociationType associationType=tf.createAssociationType(type.getName(),associatedType,false,Collections.EMPTY_LIST,null,null);
              AssociationDescriptor associationDescriptor=tf.createAssociationDescriptor(associationType,type.getName(),1,1,true);
              FeatureFactory f=dataStore.getFeatureFactory();
              Association association=f.createAssociation(null,associationDescriptor);
              association.getUserData().put("gml:id",rtable + "." + rfid);
              if (resolve) {
                DefaultQuery query=new DefaultQuery(rtable);
                Hints hints=new Hints(Hints.ASSOCIATION_TRAVERSAL_DEPTH,new Integer(depth.intValue() - 1));
                query.setHints(hints);
                FilterFactory ff=dataStore.getFilterFactory();
                Id filter=ff.id(Collections.singleton(ff.featureId(value.toString())));
                query.setFilter(filter);
                try {
                  FeatureReader<SimpleFeatureType,SimpleFeature> r=dataStore.getFeatureReader(query,tx);
                  try {
                    r.hasNext();
                    SimpleFeature associated=r.next();
                    association.setValue(associated);
                  }
  finally {
                    r.close();
                  }
                }
 catch (                IOException e) {
                  throw new RuntimeException(e);
                }
              }
              value=association;
            }
          }
  finally {
            dataStore.closeSafe(associations);
            dataStore.closeSafe(select);
          }
        }
        if (value != null) {
          Class binding=type.getType().getBinding();
          Object converted=Converters.convert(value,binding);
          if (converted != null && converted != value) {
            value=converted;
            if (dataStore.getLogger().isLoggable(Level.FINER)) {
              String msg=value + " is not of type " + binding.getName()+ ", attempting conversion";
              dataStore.getLogger().finer(msg);
            }
          }
        }
        builder.add(value);
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
    try {
      return builder.buildFeature(fid);
    }
 catch (    IllegalAttributeException e) {
      throw new RuntimeException(e);
    }
  }
  finally {
    next=null;
  }
}
