{
  try {
    ensureOpen();
    if (!hasNext()) {
      throw new NoSuchElementException("No more features in this reader, you should call " + "hasNext() to check for feature availability");
    }
    Connection cx;
    try {
      cx=st.getConnection();
    }
 catch (    SQLException e) {
      throw (IOException)new IOException().initCause(e);
    }
    String fid;
    try {
      fid=dataStore.encodeFID(pkey,rs,offset);
      if (fid == null) {
        return null;
      }
      fid=featureType.getTypeName() + "." + fid;
    }
 catch (    Exception e) {
      throw new RuntimeException("Could not determine fid from primary key",e);
    }
    final int attributeCount=featureType.getAttributeCount();
    int[] attributeRsIndex=buildAttributeRsIndex();
    for (int i=0; i < attributeCount; i++) {
      AttributeDescriptor type=featureType.getDescriptor(i);
      try {
        Object value=null;
        if (type instanceof GeometryDescriptor) {
          GeometryDescriptor gatt=(GeometryDescriptor)type;
          try {
            value=dataStore.getSQLDialect().decodeGeometryValue(gatt,rs,offset + attributeRsIndex[i],geometryFactory,cx);
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
          if (value != null) {
            Geometry geometry=(Geometry)value;
            if (geometry.getUserData() == null) {
              geometry.setUserData(gatt.getCoordinateReferenceSystem());
            }
          }
        }
 else {
          value=rs.getObject(offset + attributeRsIndex[i]);
        }
        if (value != null) {
          Class binding=type.getType().getBinding();
          Object converted=Converters.convert(value,binding);
          if (converted != null && converted != value) {
            value=converted;
            if (dataStore.getLogger().isLoggable(Level.FINER)) {
              String msg=value + " is not of type " + binding.getName()+ ", attempting conversion";
              dataStore.getLogger().finer(msg);
            }
          }
        }
        builder.add(value);
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
    try {
      return builder.buildFeature(fid);
    }
 catch (    IllegalAttributeException e) {
      throw new RuntimeException(e);
    }
  }
  finally {
    next=null;
  }
}
