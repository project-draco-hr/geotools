{
  if (q.getFilter() == null)   return new Filter[]{Filter.INCLUDE,Filter.INCLUDE};
  if (q.getTypeName() == null || t == null)   return new Filter[]{Filter.INCLUDE,q.getFilter()};
  SimpleFeatureType ft=getSchema(q.getTypeName());
  List fts=capabilities.getFeatureTypes();
  boolean found=false;
  for (int i=0; i < fts.size(); i++)   if (fts.get(i) != null) {
    FeatureSetDescription fsd=(FeatureSetDescription)fts.get(i);
    if (ft.getTypeName().equals(fsd.getName())) {
      found=true;
    }
 else {
      String fsdName=(fsd.getName() == null) ? null : fsd.getName().substring(fsd.getName().indexOf(":") + 1);
      if (ft.getTypeName().equals(fsdName)) {
        found=true;
      }
    }
  }
  if (!found) {
    LOGGER.warning("Could not find typeName: " + ft.getTypeName());
    return new Filter[]{Filter.INCLUDE,q.getFilter()};
  }
  WFSTransactionState state=(t == Transaction.AUTO_COMMIT) ? null : (WFSTransactionState)t.getState(this);
  WFSTransactionAccessor transactionAccessor=null;
  if (state != null)   transactionAccessor=new WFSTransactionAccessor(state.getActions(ft.getTypeName()));
  PostPreProcessFilterSplittingVisitor wfsfv=new PostPreProcessFilterSplittingVisitor(capabilities.getFilterCapabilities(),ft,transactionAccessor);
  q.getFilter().accept(wfsfv,null);
  Filter[] f=new Filter[2];
  f[0]=wfsfv.getFilterPre();
  f[1]=wfsfv.getFilterPost();
  return f;
}
