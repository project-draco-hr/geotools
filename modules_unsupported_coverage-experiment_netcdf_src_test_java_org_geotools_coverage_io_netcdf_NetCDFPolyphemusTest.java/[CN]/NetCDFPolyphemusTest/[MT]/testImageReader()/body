{
  final String[] files=TestData.file(this,".").list(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.equalsIgnoreCase("O3-NO2.nc");
    }
  }
);
  for (  String filePath : files) {
    final File file=new File(TestData.file(this,"."),filePath);
    final NetCDFImageReaderSpi netCDFImageReaderSpi=new NetCDFImageReaderSpi();
    assertTrue(netCDFImageReaderSpi.canDecodeInput(file));
    NetCDFImageReader reader=null;
    try {
      reader=(NetCDFImageReader)netCDFImageReaderSpi.createReaderInstance();
      reader.setInput(file);
      int numImages=reader.getNumImages(true);
      for (int i=0; i < numImages; i++) {
        UnidataSlice2DIndex sliceIndex=reader.getSlice2DIndex(i);
        String variableName=sliceIndex.getVariableName();
        StringBuilder sb=new StringBuilder();
        sb.append("\n").append("\n").append("\n");
        sb.append("IMAGE: ").append(i).append("\n");
        sb.append(" Variable Name = ").append(variableName);
        sb.append(" ( Z = ");
        sb.append(sliceIndex.getZIndex());
        sb.append("; T = ");
        sb.append(sliceIndex.getTIndex());
        sb.append(")");
        LOGGER.info(sb.toString());
      }
    }
 catch (    Throwable t) {
      if (LOGGER.isLoggable(Level.WARNING)) {
        LOGGER.log(Level.WARNING,t.getLocalizedMessage(),t);
      }
    }
 finally {
      if (reader != null) {
        try {
          reader.dispose();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
}
