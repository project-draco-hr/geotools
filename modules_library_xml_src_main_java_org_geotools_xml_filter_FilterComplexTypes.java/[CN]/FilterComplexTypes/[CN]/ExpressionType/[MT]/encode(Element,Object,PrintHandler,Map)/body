{
  Expression e=(Expression)value;
switch (Filters.getExpressionType(e)) {
case ATTRIBUTE:
case ATTRIBUTE_DOUBLE:
case ATTRIBUTE_GEOMETRY:
case ATTRIBUTE_INTEGER:
case ATTRIBUTE_STRING:
case ATTRIBUTE_UNDECLARED:
    PropertyNameType.getInstance().encode(new FilterElement("PropertyName",PropertyNameType.getInstance()),e,output,hints);
  return;
case FUNCTION:
FunctionType.getInstance().encode((element != null) ? element : new FilterElement("Function",FunctionType.getInstance()),e,output,hints);
return;
case LITERAL_DOUBLE:
case LITERAL_GEOMETRY:
case LITERAL_INTEGER:
case LITERAL_STRING:
LiteralType.getInstance().encode((element != null) ? element : new FilterElement("Literal",LiteralType.getInstance()),e,output,hints);
return;
case MATH_ADD:
BinaryOperatorType.getInstance().encode((element != null) ? element : new FilterElement("Add",BinaryOperatorType.getInstance()),e,output,hints);
return;
case MATH_DIVIDE:
BinaryOperatorType.getInstance().encode((element != null) ? element : new FilterElement("Div",BinaryOperatorType.getInstance()),e,output,hints);
return;
case MATH_MULTIPLY:
BinaryOperatorType.getInstance().encode((element != null) ? element : new FilterElement("Mul",BinaryOperatorType.getInstance()),e,output,hints);
return;
case MATH_SUBTRACT:
BinaryOperatorType.getInstance().encode((element != null) ? element : new FilterElement("Sub",BinaryOperatorType.getInstance()),e,output,hints);
return;
}
throw new OperationNotSupportedException("Expression " + e + " type not found");
}
