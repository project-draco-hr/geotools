{
  FeatureLock lock=new FeatureLock("test",360000);
  SimpleFeatureSource source=data.getFeatureSource(first.typeName);
  if (!(source instanceof FeatureLocking)) {
    LOGGER.info("testUnLockFeatures ignored, store does not support locking");
    return;
  }
  @SuppressWarnings("unchecked") FeatureLocking<SimpleFeatureType,SimpleFeature> road=(FeatureLocking<SimpleFeatureType,SimpleFeature>)source;
  road.setFeatureLock(lock);
  road.lockFeatures();
  try {
    road.unLockFeatures();
    fail("unlock should fail due on AUTO_COMMIT");
  }
 catch (  IOException expected) {
  }
  try (Transaction t=new DefaultTransaction()){
    road.setTransaction(t);
    try {
      road.unLockFeatures();
      fail("unlock should fail due lack of authorization");
    }
 catch (    IOException expected) {
    }
    t.addAuthorization(lock.getAuthorization());
    road.unLockFeatures();
  }
 }
