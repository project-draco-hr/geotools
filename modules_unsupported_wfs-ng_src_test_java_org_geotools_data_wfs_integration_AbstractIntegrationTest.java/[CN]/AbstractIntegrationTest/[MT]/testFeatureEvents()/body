{
  SimpleFeatureStore store1=(SimpleFeatureStore)data.getFeatureSource(first.typeName);
  SimpleFeatureStore store2=(SimpleFeatureStore)data.getFeatureSource(first.typeName);
  store1.setTransaction(new DefaultTransaction());
class Listener implements FeatureListener {
    List<FeatureEvent> events=new ArrayList<FeatureEvent>();
    public void changed(    FeatureEvent featureEvent){
      this.events.add(featureEvent);
    }
    FeatureEvent getEvent(    int i){
      return (FeatureEvent)events.get(i);
    }
  }
  Listener listener1=new Listener();
  Listener listener2=new Listener();
  store1.addFeatureListener(listener1);
  store2.addFeatureListener(listener2);
  FilterFactory2 ff=CommonFactoryFinder.getFilterFactory2();
  final SimpleFeature feature=first.features[0];
  Id fidFilter=ff.id(feature.getIdentifier());
  store1.removeFeatures(fidFilter);
  assertEquals(1,listener1.events.size());
  assertEquals(0,listener2.events.size());
  FeatureEvent event=listener1.getEvent(0);
  assertEquals(feature.getBounds(),event.getBounds());
  assertEquals(FeatureEvent.Type.REMOVED,event.getType());
  listener1.events.clear();
  listener2.events.clear();
  store1.getTransaction().commit();
  assertEquals(0,listener1.events.size());
  assertEquals(3,listener2.events.size());
  event=listener2.getEvent(0);
  assertEquals(feature.getBounds(),event.getBounds());
  assertEquals(FeatureEvent.Type.REMOVED,event.getType());
  listener1.events.clear();
  listener2.events.clear();
  store1.addFeatures(DataUtilities.collection(feature));
  assertEquals(1,listener1.events.size());
  event=listener1.getEvent(0);
  assertEquals(feature.getBounds(),event.getBounds());
  assertEquals(FeatureEvent.Type.ADDED,event.getType());
  assertEquals(0,listener2.events.size());
  listener1.events.clear();
  listener2.events.clear();
  store1.getTransaction().rollback();
  assertEquals(1,listener1.events.size());
  event=listener1.getEvent(0);
  assertNull(event.getBounds());
  assertEquals(FeatureEvent.Type.CHANGED,event.getType());
  assertEquals(0,listener2.events.size());
}
