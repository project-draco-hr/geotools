{
  int maxCombinations=getMaxCombinations(stylesheet);
  TranslationMode mode=getTranslationMode(stylesheet);
  int autoThreshold=getAutoThreshold(stylesheet);
  List<CssRule> allRules=stylesheet.getRules();
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("Starting with " + allRules.size() + "  rules in the stylesheet");
  }
  StyleBuilder styleBuilder=new StyleBuilder();
  styleBuilder.name("Default Styler");
  List<List<CssRule>> zIndexRules=organizeByZIndex(allRules);
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine("Split the rules into " + zIndexRules + "  sets after z-index separation");
  }
  for (  List<CssRule> rules : zIndexRules) {
    Collections.sort(rules,CssRuleComparator.DESCENDING);
    Map<String,List<CssRule>> typenameRules=organizeByTypeName(rules);
    for (    Map.Entry<String,List<CssRule>> entry : typenameRules.entrySet()) {
      FeatureTypeStyleBuilder ftsBuilder=styleBuilder.featureTypeStyle();
      ftsBuilder.option(FeatureTypeStyle.KEY_EVALUATION_MODE,FeatureTypeStyle.VALUE_EVALUATION_MODE_FIRST);
      String featureTypeName=entry.getKey();
      List<CssRule> localRules=entry.getValue();
      if (featureTypeName != null) {
        ftsBuilder.setFeatureTypeNames(Arrays.asList((Name)new NameImpl(featureTypeName)));
      }
      final FeatureType targetFeatureType=getTargetFeatureType(featureTypeName,localRules);
      if (targetFeatureType != null) {
        for (        CssRule rule : localRules) {
          rule.getSelector().accept(new AbstractSelectorVisitor(){
            @Override public Object visit(            Data data){
              data.featureType=targetFeatureType;
              return super.visit(data);
            }
          }
);
        }
      }
      List<CssRule> flattenedRules=flattenScaleRanges(localRules);
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.fine("Preparing power set expansion with " + flattenedRules.size() + "  rules for feature type: "+ featureTypeName);
      }
      CachedSimplifyingFilterVisitor cachedSimplifier=new CachedSimplifyingFilterVisitor(targetFeatureType);
      RulePowerSetBuilder builder=new RulePowerSetBuilder(flattenedRules,cachedSimplifier,maxCombinations);
      List<CssRule> combinedRules=builder.buildPowerSet();
      Collections.sort(combinedRules,CssRuleComparator.DESCENDING);
      int rulesCount=combinedRules.size();
      if (LOGGER.isLoggable(Level.FINE)) {
        LOGGER.fine("Generated " + rulesCount + " combined rules after filtered power set expansion");
      }
      DomainCoverage coverage=new DomainCoverage(targetFeatureType,cachedSimplifier);
      if (mode == TranslationMode.Exclusive) {
        coverage.exclusiveRulesEnabled=true;
      }
 else       if (mode == TranslationMode.Auto) {
        if (rulesCount < autoThreshold) {
          LOGGER.fine("Sticking to Exclusive translation mode, rules number is " + rulesCount + " with a threshold of "+ autoThreshold);
          coverage.exclusiveRulesEnabled=true;
        }
 else {
          LOGGER.info("Switching to Simple translation mode, rules number is " + rulesCount + " with a threshold of "+ autoThreshold);
          coverage.exclusiveRulesEnabled=false;
        }
      }
 else {
        coverage.exclusiveRulesEnabled=false;
      }
      for (int i=0; i < rulesCount; i++) {
        CssRule cssRule=combinedRules.get(i);
        if (!cssRule.hasSymbolizerProperty()) {
          continue;
        }
        if (LOGGER.isLoggable(Level.FINE)) {
          LOGGER.fine("Current domain coverage: " + coverage);
          LOGGER.fine("Adding rule to domain coverage: " + cssRule);
          LOGGER.fine("Rules left to process: " + (rulesCount - i));
        }
        List<CssRule> derivedRules=coverage.addRule(cssRule);
        if (LOGGER.isLoggable(Level.FINE)) {
          LOGGER.fine("Derived rules not yet covered in domain coverage: " + derivedRules.size() + "\n"+ derivedRules);
        }
        for (        CssRule derived : derivedRules) {
          buildSldRule(derived,ftsBuilder,targetFeatureType);
        }
      }
    }
  }
  return styleBuilder.build();
}
