{
  Map<String,List<Value>> values=cssRule.getPropertyValues(PseudoClass.ROOT,"stroke");
  if (values == null || values.isEmpty()) {
    return;
  }
  int repeatCount=getMaxRepeatCount(values);
  for (int i=0; i < repeatCount; i++) {
    if (getValue(values,"stroke",i) == null) {
      continue;
    }
    LineSymbolizerBuilder lb=ruleBuilder.line();
    Expression strokeGeometry=getExpression(values,"stroke-geometry",i);
    if (strokeGeometry != null) {
      lb.geometry(strokeGeometry);
    }
    Expression strokeOffset=getExpression(values,"stroke-offset",i);
    if (strokeOffset != null && !isZero(strokeOffset)) {
      lb.perpendicularOffset(strokeOffset);
    }
    StrokeBuilder strokeBuilder=lb.stroke();
    buildStroke(cssRule,strokeBuilder,values,i);
    addVendorOptions(lb,LINE_VENDOR_OPTIONS,values,i);
  }
}
