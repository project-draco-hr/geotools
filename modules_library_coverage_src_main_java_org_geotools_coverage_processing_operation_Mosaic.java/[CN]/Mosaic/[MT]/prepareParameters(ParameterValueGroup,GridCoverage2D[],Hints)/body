{
  final ImagingParameters copy=(ImagingParameters)descriptor.createValue();
  final ParameterBlockJAI block=(ParameterBlockJAI)copy.parameters;
  GridGeometryPolicy policy=null;
  Object externalGG=parameters.parameter(GEOMETRY).getValue();
  GridGeometry2D gg=null;
  if (externalGG != null && externalGG instanceof GridGeometry2D) {
    gg=(GridGeometry2D)externalGG;
    policy=GridGeometryPolicy.EXTERNAL;
  }
 else {
    Object ggPolicy=parameters.parameter(POLICY).getValue();
    if (ggPolicy != null && ggPolicy instanceof String) {
      policy=GridGeometryPolicy.getPolicyFromString((String)ggPolicy);
    }
  }
  if (policy == null) {
    policy=GridGeometryPolicy.FIRST;
  }
  Object alphaBandList=parameters.parameter(ALPHA_NAME).getValue();
  GridCoverage2D[] alphaCovs=null;
  if (alphaBandList != null && alphaBandList instanceof Collection) {
    Collection<GridCoverage2D> alphas=(Collection<GridCoverage2D>)alphaBandList;
    alphaCovs=new GridCoverage2D[alphas.size()];
    alphas.toArray(alphaCovs);
  }
  ResampledRasters rr=policy.resampleGridGeometry(sources,alphaCovs,gg,parameters,hints);
  RenderedImage[] rasters=rr.getRasters();
  GridGeometry2D finalGeometry=rr.getFinalGeometry();
  if (finalGeometry == null) {
    throw new CoverageProcessingException("No final GridGeometry found");
  }
  int numSources=rasters.length;
  for (int i=0; i < numSources; i++) {
    block.setSource(rasters[i],i);
  }
  double[] nodata=null;
  Object outputNodata=parameters.parameter(OUTNODATA_NAME).getValue();
  if (outputNodata != null && outputNodata instanceof double[]) {
    nodata=((double[])outputNodata);
  }
 else {
    nodata=CoverageUtilities.getBackgroundValues(sources[PRIMARY_SOURCE_INDEX]);
  }
  block.setParameter("backgroundValues",nodata);
  double threshold=CoverageUtilities.getMosaicThreshold(rasters[PRIMARY_SOURCE_INDEX].getSampleModel().getDataType());
  block.setParameter("sourceThreshold",new double[][]{{threshold}});
  ROI[] rois=new ROI[numSources];
  for (int i=0; i < numSources; i++) {
    rois[i]=new ROIShape(PlanarImage.wrapRenderedImage(rasters[i]).getBounds());
  }
  block.setParameter("sourceROI",rois);
  block.setParameter("mosaicType",MosaicDescriptor.MOSAIC_TYPE_OVERLAY);
  if (rr.getAlphas() != null) {
    block.setParameter("sourceAlpha",rr.getAlphas());
  }
  return new Params(block,hints,finalGeometry);
}
