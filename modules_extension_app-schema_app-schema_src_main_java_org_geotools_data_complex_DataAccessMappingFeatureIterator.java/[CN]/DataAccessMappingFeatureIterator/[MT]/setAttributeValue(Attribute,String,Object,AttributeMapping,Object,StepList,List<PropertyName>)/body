{
  final Expression sourceExpression=attMapping.getSourceExpression();
  final AttributeType targetNodeType=attMapping.getTargetNodeInstance();
  StepList xpath=inputXpath == null ? attMapping.getTargetXPath().clone() : inputXpath;
  Map<Name,Expression> clientPropsMappings=attMapping.getClientProperties();
  boolean isNestedFeature=attMapping.isNestedAttribute();
  if (id == null && Expression.NIL != attMapping.getIdentifierExpression()) {
    id=extractIdForAttribute(attMapping.getIdentifierExpression(),source);
  }
  if (attMapping.isNestedAttribute()) {
    NestedAttributeMapping nestedMapping=((NestedAttributeMapping)attMapping);
    Object mappingName=nestedMapping.getNestedFeatureType(source);
    if (mappingName != null) {
      if (nestedMapping.isSameSource() && mappingName instanceof Name) {
        return setPolymorphicValues((Name)mappingName,target,id,nestedMapping,source,xpath,clientPropsMappings);
      }
 else       if (mappingName instanceof String) {
        if (attMapping instanceof JoiningNestedAttributeMapping) {
          if (values == null && source != null) {
            values=getValues(attMapping.isMultiValued(),sourceExpression,source);
          }
          if (values != null) {
            List<Object> idValues=getIdValues(source);
            if (values instanceof Collection) {
              for (              Object singleVal : (Collection)values) {
                ((JoiningNestedAttributeMapping)attMapping).skip(this,singleVal,idValues);
              }
            }
 else {
              ((JoiningNestedAttributeMapping)attMapping).skip(this,values,idValues);
            }
          }
        }
        return setPolymorphicReference((String)mappingName,clientPropsMappings,target,xpath,targetNodeType);
      }
    }
 else {
      return null;
    }
  }
  if (values == null && source != null) {
    values=getValues(attMapping.isMultiValued(),sourceExpression,source);
  }
  boolean isHRefLink=isByReference(clientPropsMappings,isNestedFeature);
  if (isNestedFeature) {
    if (values == null) {
      return null;
    }
    if (values instanceof Collection) {
      ArrayList<Attribute> nestedFeatures=new ArrayList<Attribute>(((Collection)values).size());
      for (      Object val : (Collection)values) {
        if (val instanceof Attribute) {
          val=((Attribute)val).getValue();
          if (val instanceof Collection) {
            val=((Collection)val).iterator().next();
          }
          while (val instanceof Attribute) {
            val=((Attribute)val).getValue();
          }
        }
        if (isHRefLink) {
          nestedFeatures.addAll(((NestedAttributeMapping)attMapping).getInputFeatures(this,val,getIdValues(source),source,reprojection,selectedProperties,includeMandatory));
        }
 else {
          nestedFeatures.addAll(((NestedAttributeMapping)attMapping).getFeatures(this,val,getIdValues(source),reprojection,source,selectedProperties,includeMandatory));
        }
      }
      values=nestedFeatures;
    }
 else     if (isHRefLink) {
      values=((NestedAttributeMapping)attMapping).getInputFeatures(this,values,getIdValues(source),source,reprojection,selectedProperties,includeMandatory);
    }
 else {
      values=((NestedAttributeMapping)attMapping).getFeatures(this,values,getIdValues(source),reprojection,source,selectedProperties,includeMandatory);
    }
    if (isHRefLink) {
      setXlinkReference(target,clientPropsMappings,values,xpath,targetNodeType);
      return null;
    }
  }
  Attribute instance=null;
  if (values instanceof Collection) {
    for (    Object singleVal : (Collection)values) {
      ArrayList valueList=new ArrayList();
      if (singleVal instanceof Attribute) {
        Map<Name,Expression> valueProperties=getClientProperties((Attribute)singleVal);
        if (!valueProperties.isEmpty()) {
          clientPropsMappings.putAll(valueProperties);
        }
      }
      if (!isNestedFeature) {
        if (singleVal instanceof Attribute) {
          singleVal=((Attribute)singleVal).getValue();
        }
        if (singleVal instanceof Collection) {
          valueList.addAll((Collection)singleVal);
        }
 else {
          valueList.add(singleVal);
        }
      }
 else {
        valueList.add(singleVal);
      }
      instance=xpathAttributeBuilder.set(target,xpath,valueList,id,targetNodeType,false,sourceExpression);
      setClientProperties(instance,source,clientPropsMappings);
    }
  }
 else {
    if (values instanceof Attribute) {
      Map<Name,Expression> newClientProps=getClientProperties((Attribute)values);
      if (!newClientProps.isEmpty()) {
        newClientProps.putAll(clientPropsMappings);
        clientPropsMappings=newClientProps;
      }
      values=((Attribute)values).getValue();
    }
    instance=xpathAttributeBuilder.set(target,xpath,values,id,targetNodeType,false,sourceExpression);
    setClientProperties(instance,source,clientPropsMappings);
  }
  if (instance != null && attMapping.encodeIfEmpty()) {
    instance.getDescriptor().getUserData().put("encodeIfEmpty",attMapping.encodeIfEmpty());
  }
  return instance;
}
