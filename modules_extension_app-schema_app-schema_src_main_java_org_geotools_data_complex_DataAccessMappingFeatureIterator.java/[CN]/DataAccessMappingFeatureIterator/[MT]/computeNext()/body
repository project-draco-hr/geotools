{
  String id=getNextFeatureId();
  List<Feature> sources=getSources(id);
  final AttributeDescriptor targetNode=mapping.getTargetFeature();
  final Name targetNodeName=targetNode.getName();
  AttributeBuilder builder=new AttributeBuilder(attf);
  builder.setDescriptor(targetNode);
  Feature target=(Feature)builder.build(id);
  for (  AttributeMapping attMapping : selectedMapping) {
    try {
      if (skipTopElement(targetNodeName,attMapping.getTargetXPath(),targetNode.getType())) {
        continue;
      }
      if (attMapping.isList()) {
        Attribute instance=setAttributeValue(target,null,sources.get(0),attMapping,null,null,selectedProperties.get(attMapping));
        if (sources.size() > 1 && instance != null) {
          Object[] values=new Object[sources.size()];
          Expression sourceExpr=attMapping.getSourceExpression();
          int i=0;
          for (          Feature source : sources) {
            values[i]=getValue(sourceExpr,source);
            i++;
          }
          if (comparator == null) {
            comparator=new ValueComparator();
          }
          Arrays.sort(values,comparator);
          String valueString=StringUtils.join(values," ");
          StepList fullPath=attMapping.getTargetXPath();
          StepList leafPath=fullPath.subList(fullPath.size() - 1,fullPath.size());
          if (instance instanceof ComplexAttributeImpl) {
            xpathAttributeBuilder.set(instance,leafPath,valueString,null,null,false,sourceExpr);
          }
 else {
            instance.setValue(valueString);
          }
        }
      }
 else       if (attMapping.isMultiValued()) {
        for (        Feature source : sources) {
          setAttributeValue(target,null,source,attMapping,null,null,selectedProperties.get(attMapping));
        }
      }
 else {
        setAttributeValue(target,null,sources.get(0),attMapping,null,null,selectedProperties.get(attMapping));
        skipNestedMapping(attMapping,sources.subList(1,sources.size()));
      }
    }
 catch (    Exception e) {
      throw new RuntimeException("Error applying mapping with targetAttribute " + attMapping.getTargetXPath(),e);
    }
  }
  cleanEmptyElements(target);
  return target;
}
