{
  FeatureCollection<? extends FeatureType,? extends Feature> matchingFeatures;
  Query query=new Query();
  if (reprojection != null) {
    if (sourceFeatures.getSchema().getGeometryDescriptor() != null && !this.isReprojectionCrsEqual(this.mappedSource.getSchema().getCoordinateReferenceSystem(),this.reprojection)) {
      query.setCoordinateSystemReproject(reprojection);
    }
  }
  Filter fidFilter;
  if (mapping.getFeatureIdExpression().equals(Expression.NIL)) {
    Set<FeatureId> ids=new HashSet<FeatureId>();
    FeatureId featureId=namespaceAwareFilterFactory.featureId(fId);
    ids.add(featureId);
    fidFilter=namespaceAwareFilterFactory.id(ids);
  }
 else {
    fidFilter=namespaceAwareFilterFactory.equals(mapping.getFeatureIdExpression(),namespaceAwareFilterFactory.literal(fId));
  }
  if (listFilter != null) {
    List<Filter> filters=new ArrayList<Filter>();
    filters.add(listFilter);
    filters.add(fidFilter);
    fidFilter=namespaceAwareFilterFactory.and(filters);
  }
  query.setFilter(fidFilter);
  matchingFeatures=this.mappedSource.getFeatures(query);
  FeatureIterator<? extends Feature> iterator=matchingFeatures.features();
  List<Feature> features=new ArrayList<Feature>();
  while (iterator.hasNext()) {
    features.add(iterator.next());
  }
  if (features.isEmpty()) {
    features.add(curSrcFeature);
  }
  filteredFeatures.add(fId);
  iterator.close();
  curSrcFeature=null;
  return features;
}
