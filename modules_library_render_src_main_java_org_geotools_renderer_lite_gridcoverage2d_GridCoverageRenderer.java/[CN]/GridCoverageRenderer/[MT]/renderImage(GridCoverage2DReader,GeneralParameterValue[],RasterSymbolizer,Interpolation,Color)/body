{
  CoordinateReferenceSystem sourceCRS=reader.getCoordinateReferenceSystem();
  CoordinateReferenceSystem targetCRS=destinationEnvelope.getCoordinateReferenceSystem();
  ProjectionHandler handler=null;
  List<GridCoverage2D> coverages;
  GridCoverageReaderHelper rh=new GridCoverageReaderHelper(reader,destinationSize,ReferencedEnvelope.reference(destinationEnvelope),interpolation);
  if (GridCoverageReaderHelper.isReprojectingReader(reader)) {
    GridCoverage2D coverage=rh.readCoverage(readParams);
    coverages=new ArrayList<>();
    coverages.add(coverage);
  }
 else {
    if (advancedProjectionHandlingEnabled) {
      handler=ProjectionHandlerFinder.getHandler(rh.getReadEnvelope(),sourceCRS,wrapEnabled);
      if (handler instanceof WrappingProjectionHandler) {
        ((WrappingProjectionHandler)handler).setDatelineWrappingCheckEnabled(false);
      }
    }
    coverages=rh.readCoverages(readParams,handler);
  }
  double[] bgValues=GridCoverageRendererUtilities.colorToArray(background);
  List<GridCoverage2D> reprojectedCoverages=new ArrayList<GridCoverage2D>();
  for (  GridCoverage2D coverage : coverages) {
    if (coverage == null) {
      continue;
    }
    final CoordinateReferenceSystem coverageCRS=coverage.getCoordinateReferenceSystem();
    if (!CRS.equalsIgnoreMetadata(coverageCRS,destinationCRS)) {
      GridCoverage2D reprojected=reproject(coverage,true,bgValues);
      if (reprojected != null) {
        reprojectedCoverages.add(reprojected);
      }
    }
 else {
      reprojectedCoverages.addAll(coverages);
    }
  }
  List<GridCoverage2D> displacedCoverages=new ArrayList<GridCoverage2D>();
  if (handler != null) {
    Envelope testEnvelope=ReferencedEnvelope.reference(destinationEnvelope);
    MathTransform mt=CRS.findMathTransform(sourceCRS,targetCRS);
    PolygonExtractor polygonExtractor=new PolygonExtractor();
    for (    GridCoverage2D coverage : reprojectedCoverages) {
      Polygon polygon=JTS.toGeometry((BoundingBox)coverage.getEnvelope2D());
      Geometry postProcessed=handler.postProcess(mt,polygon);
      List<Polygon> polygons=polygonExtractor.getPolygons(postProcessed);
      for (      Polygon displaced : polygons) {
        Envelope intersection=testEnvelope.intersection(displaced.getEnvelopeInternal());
        if (intersection == null || intersection.isNull() || intersection.getArea() == 0) {
          continue;
        }
        if (displaced.equals(polygon)) {
          displacedCoverages.add(coverage);
        }
 else {
          double[] tx=getTranslationFactors(polygon,displaced);
          if (tx != null) {
            GridCoverage2D displacedCoverage=displaceCoverage(coverage,tx[0],tx[1]);
            displacedCoverages.add(displacedCoverage);
          }
        }
      }
    }
  }
 else {
    displacedCoverages.addAll(reprojectedCoverages);
  }
  List<GridCoverage2D> symbolizedCoverages=new ArrayList<>();
  for (  GridCoverage2D displaced : displacedCoverages) {
    GridCoverage2D symbolized=symbolize(displaced,symbolizer,GridCoverageRendererUtilities.colorToArray(background));
    symbolizedCoverages.add(symbolized);
  }
  GridCoverage2D mosaicked=null;
  if (symbolizedCoverages.size() == 0) {
    return null;
  }
 else   if (symbolizedCoverages.size() == 1) {
    mosaicked=symbolizedCoverages.get(0);
  }
 else {
    mosaicked=GridCoverageRendererUtilities.mosaic(symbolizedCoverages,destinationEnvelope,hints);
  }
  if (mosaicked == null) {
    return null;
  }
  GridCoverage2D cropped=crop(mosaicked,destinationEnvelope,false);
  if (cropped == null) {
    return null;
  }
  return cropped.getRenderedImage();
}
