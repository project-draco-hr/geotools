{
  CoordinateReferenceSystem sourceCRS=reader.getCoordinateReferenceSystem();
  CoordinateReferenceSystem targetCRS=destinationEnvelope.getCoordinateReferenceSystem();
  ProjectionHandler handler=null;
  List<GridCoverage2D> coverages;
  GridCoverageReaderHelper rh=new GridCoverageReaderHelper(reader,destinationSize,ReferencedEnvelope.reference(destinationEnvelope),interpolation);
  if (GridCoverageReaderHelper.isReprojectingReader(reader)) {
    GridCoverage2D coverage=rh.readCoverage(readParams);
    coverages=new ArrayList<>();
    coverages.add(coverage);
  }
 else {
    if (advancedProjectionHandlingEnabled) {
      handler=ProjectionHandlerFinder.getHandler(rh.getReadEnvelope(),sourceCRS,wrapEnabled);
      if (handler instanceof WrappingProjectionHandler) {
        ((WrappingProjectionHandler)handler).setDatelineWrappingCheckEnabled(false);
      }
    }
    coverages=rh.readCoverages(readParams,handler,gridCoverageFactory);
  }
  boolean reprojectionNeeded=false;
  for (  GridCoverage2D coverage : coverages) {
    if (coverage == null) {
      continue;
    }
    final CoordinateReferenceSystem coverageCRS=coverage.getCoordinateReferenceSystem();
    if (!CRS.equalsIgnoreMetadata(coverageCRS,destinationCRS)) {
      reprojectionNeeded=true;
      break;
    }
  }
  double[] bgValues=GridCoverageRendererUtilities.colorToArray(background);
  if (!coverages.isEmpty()) {
    ColorModel cm=coverages.get(0).getRenderedImage().getColorModel();
    if (cm instanceof IndexColorModel) {
      IndexColorModel icm=(IndexColorModel)cm;
      int idx=ColorUtilities.findColorIndex(background,icm);
      if (idx < 0) {
        for (int i=0; i < coverages.size(); i++) {
          GridCoverage2D coverage=coverages.get(i);
          ImageWorker iw=new ImageWorker(coverage.getRenderedImage());
          iw.forceComponentColorModel();
          GridCoverage2D expandedCoverage=gridCoverageFactory.create(coverage.getName(),iw.getRenderedImage(),coverage.getGridGeometry(),null,new GridCoverage2D[]{coverage},coverage.getProperties());
          coverages.set(i,expandedCoverage);
        }
      }
    }
 else {
      bgValues=GridCoverageRendererUtilities.colorToArray(background);
    }
  }
  if (reprojectionNeeded && handler != null && handler.getValidAreaBounds() != null) {
    List<GridCoverage2D> cropped=new ArrayList<>();
    ReferencedEnvelope validArea=handler.getValidAreaBounds();
    GridGeometryReducer reducer=new GridGeometryReducer(validArea);
    for (    GridCoverage2D coverage : coverages) {
      GridGeometry2D gg=coverage.getGridGeometry();
      GridGeometry2D reduced=reducer.reduce(gg);
      if (!reduced.equals(gg)) {
        GeneralEnvelope cutEnvelope=reducer.getCutEnvelope(reduced);
        GridCoverage2D croppedCoverage=crop(coverage,cutEnvelope,false,bgValues);
        cropped.add(croppedCoverage);
      }
 else {
        cropped.add(coverage);
      }
    }
    coverages=cropped;
  }
  if (coverages.size() > 1 && reprojectionNeeded) {
    for (int i=0; i < coverages.size(); i++) {
      GridCoverage2D coverage=coverages.get(i);
      if (coverage == null) {
        continue;
      }
      RenderedImage input=coverage.getRenderedImage();
      Object roiObject=input.getProperty("ROI");
      Object gcRoiObject=coverage.getProperty("GC_ROI");
      if (!(roiObject instanceof ROI) && !(gcRoiObject instanceof ROI)) {
        Envelope env=new Envelope(input.getMinX(),input.getMinX() + input.getWidth(),input.getMinY(),input.getMinY() + input.getHeight());
        ROI roi=new ROI(new ROIGeometry(JTS.toGeometry(env)).getAsImage());
        PlanarImage pi=PlanarImage.wrapRenderedImage(input);
        pi.setProperty("ROI",roi);
        Map properties=new HashMap(coverage.getProperties());
        properties.put("GC_ROI",roi);
        GridCoverage2D coverageWithRoi=gridCoverageFactory.create(coverage.getName(),pi,coverage.getGridGeometry(),null,new GridCoverage2D[]{coverage},properties);
        coverages.set(i,coverageWithRoi);
      }
    }
  }
  List<GridCoverage2D> reprojectedCoverages=new ArrayList<GridCoverage2D>();
  int index=0;
  for (  GridCoverage2D coverage : coverages) {
    if (coverage == null) {
      continue;
    }
    final CoordinateReferenceSystem coverageCRS=coverage.getCoordinateReferenceSystem();
    if (!CRS.equalsIgnoreMetadata(coverageCRS,destinationCRS)) {
      GridCoverage2D reprojected=reproject(coverage,true,bgValues);
      if (reprojected != null) {
        reprojectedCoverages.add(reprojected);
      }
    }
 else {
      reprojectedCoverages.add(coverage);
    }
  }
  List<GridCoverage2D> displacedCoverages=new ArrayList<GridCoverage2D>();
  if (handler != null) {
    Envelope testEnvelope=ReferencedEnvelope.reference(destinationEnvelope);
    MathTransform mt=CRS.findMathTransform(sourceCRS,targetCRS);
    PolygonExtractor polygonExtractor=new PolygonExtractor();
    int i=0;
    for (    GridCoverage2D coverage : reprojectedCoverages) {
      GridCoverage2D alpha=null;
      Polygon polygon=JTS.toGeometry((BoundingBox)coverage.getEnvelope2D());
      Geometry postProcessed=handler.postProcess(mt,polygon);
      List<Polygon> polygons=polygonExtractor.getPolygons(postProcessed);
      for (      Polygon displaced : polygons) {
        Envelope intersection=testEnvelope.intersection(displaced.getEnvelopeInternal());
        if (intersection == null || intersection.isNull() || intersection.getArea() == 0) {
          continue;
        }
        if (displaced.equals(polygon)) {
          displacedCoverages.add(coverage);
        }
 else {
          double[] tx=getTranslationFactors(polygon,displaced);
          if (tx != null) {
            GridCoverage2D displacedCoverage=GridCoverageRendererUtilities.displace(coverage,tx[0],tx[1],gridCoverageFactory);
            displacedCoverages.add(displacedCoverage);
          }
        }
      }
      i++;
    }
  }
 else {
    displacedCoverages.addAll(reprojectedCoverages);
  }
  List<GridCoverage2D> symbolizedCoverages=new ArrayList<>();
  int ii=0;
  for (  GridCoverage2D displaced : displacedCoverages) {
    GridCoverage2D symbolized=symbolize(displaced,symbolizer,bgValues);
    symbolizedCoverages.add(symbolized);
    ii++;
  }
  GridCoverage2D mosaicked=null;
  if (symbolizedCoverages.size() == 0) {
    return null;
  }
 else   if (symbolizedCoverages.size() == 1) {
    mosaicked=symbolizedCoverages.get(0);
  }
 else {
    Hints mosaicHints=new Hints(this.hints);
    mosaicHints.put(JAI.KEY_REPLACE_INDEX_COLOR_MODEL,false);
    mosaicked=GridCoverageRendererUtilities.mosaic(symbolizedCoverages,new ArrayList<GridCoverage2D>(),destinationEnvelope,mosaicHints,bgValues);
  }
  if (mosaicked == null) {
    return null;
  }
  GridCoverage2D cropped=crop(mosaicked,destinationEnvelope,false,bgValues);
  if (cropped == null) {
    return null;
  }
  return cropped.getRenderedImage();
}
