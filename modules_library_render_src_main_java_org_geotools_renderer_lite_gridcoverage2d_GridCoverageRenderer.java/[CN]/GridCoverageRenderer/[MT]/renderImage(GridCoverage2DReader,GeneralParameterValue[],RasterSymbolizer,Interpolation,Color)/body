{
  CoordinateReferenceSystem sourceCRS=reader.getCoordinateReferenceSystem();
  CoordinateReferenceSystem targetCRS=destinationEnvelope.getCoordinateReferenceSystem();
  ProjectionHandler handler=null;
  List<GridCoverage2D> coverages;
  GridCoverageReaderHelper rh=new GridCoverageReaderHelper(reader,destinationSize,ReferencedEnvelope.reference(destinationEnvelope),interpolation);
  if (GridCoverageReaderHelper.isReprojectingReader(reader)) {
    GridCoverage2D coverage=rh.readCoverage(readParams);
    coverages=new ArrayList<>();
    coverages.add(coverage);
  }
 else {
    if (advancedProjectionHandlingEnabled) {
      handler=ProjectionHandlerFinder.getHandler(rh.getReadEnvelope(),sourceCRS,wrapEnabled);
      if (handler instanceof WrappingProjectionHandler) {
        ((WrappingProjectionHandler)handler).setDatelineWrappingCheckEnabled(false);
      }
    }
    coverages=rh.readCoverages(readParams,handler);
  }
  List<GridCoverage2D> alphaCoverages=new ArrayList<GridCoverage2D>();
  if (coverages.size() > 1) {
    boolean reprojectionNeeded=false;
    for (    GridCoverage2D coverage : coverages) {
      if (coverage == null) {
        continue;
      }
      final CoordinateReferenceSystem coverageCRS=coverage.getCoordinateReferenceSystem();
      if (!CRS.equalsIgnoreMetadata(coverageCRS,destinationCRS)) {
        reprojectionNeeded=true;
        break;
      }
    }
    if (reprojectionNeeded) {
      for (      GridCoverage2D coverage : coverages) {
        if (coverage == null) {
          continue;
        }
        GridCoverage2D alphaCoverage=createAlphaBand(coverage);
        alphaCoverages.add(alphaCoverage);
      }
    }
  }
  double[] bgValues=GridCoverageRendererUtilities.colorToArray(background);
  List<GridCoverage2D> reprojectedCoverages=new ArrayList<GridCoverage2D>();
  List<GridCoverage2D> reprojectedAlphas=new ArrayList<GridCoverage2D>();
  boolean alphaAdded=alphaCoverages.size() > 1;
  int index=0;
  for (  GridCoverage2D coverage : coverages) {
    GridCoverage2D alpha=null;
    if (alphaAdded) {
      alpha=alphaCoverages.get(index);
      index++;
    }
    if (coverage == null) {
      continue;
    }
    final CoordinateReferenceSystem coverageCRS=coverage.getCoordinateReferenceSystem();
    if (!CRS.equalsIgnoreMetadata(coverageCRS,destinationCRS)) {
      GridCoverage2D reprojected=reproject(coverage,true,bgValues);
      GridCoverage2D reprojectedAlpha=alpha != null ? reproject(alpha,true,new double[1]) : null;
      if (reprojected != null) {
        reprojectedCoverages.add(reprojected);
      }
      if (reprojectedAlpha != null) {
        reprojectedAlphas.add(reprojectedAlpha);
      }
    }
 else {
      reprojectedCoverages.addAll(coverages);
    }
  }
  List<GridCoverage2D> displacedCoverages=new ArrayList<GridCoverage2D>();
  List<GridCoverage2D> displacedAlphas=new ArrayList<GridCoverage2D>();
  if (handler != null) {
    Envelope testEnvelope=ReferencedEnvelope.reference(destinationEnvelope);
    MathTransform mt=CRS.findMathTransform(sourceCRS,targetCRS);
    PolygonExtractor polygonExtractor=new PolygonExtractor();
    int i=0;
    for (    GridCoverage2D coverage : reprojectedCoverages) {
      GridCoverage2D alpha=null;
      if (alphaAdded) {
        alpha=reprojectedAlphas.get(i);
      }
      Polygon polygon=JTS.toGeometry((BoundingBox)coverage.getEnvelope2D());
      Geometry postProcessed=handler.postProcess(mt,polygon);
      List<Polygon> polygons=polygonExtractor.getPolygons(postProcessed);
      for (      Polygon displaced : polygons) {
        Envelope intersection=testEnvelope.intersection(displaced.getEnvelopeInternal());
        if (intersection == null || intersection.isNull() || intersection.getArea() == 0) {
          continue;
        }
        if (displaced.equals(polygon)) {
          displacedCoverages.add(coverage);
          if (alpha != null) {
            displacedAlphas.add(alpha);
          }
        }
 else {
          double[] tx=getTranslationFactors(polygon,displaced);
          if (tx != null) {
            GridCoverage2D displacedCoverage=displaceCoverage(coverage,tx[0],tx[1]);
            displacedCoverages.add(displacedCoverage);
            if (alpha != null) {
              GridCoverage2D displacedAlpha=displaceCoverage(alpha,tx[0],tx[1]);
              displacedAlphas.add(displacedAlpha);
            }
          }
        }
      }
      i++;
    }
  }
 else {
    displacedAlphas.addAll(reprojectedAlphas);
    displacedCoverages.addAll(reprojectedCoverages);
  }
  List<GridCoverage2D> symbolizedCoverages=new ArrayList<>();
  List<GridCoverage2D> affineAlphas=new ArrayList<>();
  int ii=0;
  for (  GridCoverage2D displaced : displacedCoverages) {
    GridCoverage2D symbolized=symbolize(displaced,symbolizer,bgValues);
    if (alphaAdded) {
      GridCoverage2D alpha=displacedAlphas.get(ii);
      GridCoverage2D affineAlpha=affine(alpha,new double[1]);
      affineAlphas.add(affineAlpha);
    }
 else {
      affineAlphas.addAll(displacedAlphas);
    }
    symbolizedCoverages.add(symbolized);
    ii++;
  }
  boolean indexed=false;
  GridCoverage2D mosaicked=null;
  if (symbolizedCoverages.size() == 0) {
    return null;
  }
 else   if (symbolizedCoverages.size() == 1) {
    mosaicked=symbolizedCoverages.get(0);
  }
 else {
    List<GridCoverage2D> expandedCoverages=new ArrayList<GridCoverage2D>();
    List<GridCoverage2D> alphas=new ArrayList<GridCoverage2D>();
    if (alphaAdded) {
      GridCoverage2D s0=symbolizedCoverages.get(0);
      ImageWorker w=new ImageWorker(s0.getRenderedImage());
      indexed=w.isIndexed();
      List<GridCoverage2D> expandedCovs=new ArrayList<GridCoverage2D>();
      if (indexed) {
        for (        GridCoverage2D cov : symbolizedCoverages) {
          RenderedImage img=cov.getRenderedImage();
          ImageWorker worker=new ImageWorker(img);
          worker.forceComponentColorModel();
          GridCoverage2D expanded=gridCoverageFactory.create(cov.getName(),worker.getRenderedImage(),cov.getGridGeometry(),null,new GridCoverage2D[]{cov},cov.getProperties());
          expandedCovs.add(expanded);
        }
      }
 else {
        expandedCovs.addAll(symbolizedCoverages);
      }
      expandedCoverages.addAll(expandedCovs);
      alphas.addAll(affineAlphas);
    }
 else {
      expandedCoverages.addAll(symbolizedCoverages);
    }
    mosaicked=GridCoverageRendererUtilities.mosaic(expandedCoverages,alphas,destinationEnvelope,hints,bgValues);
  }
  if (mosaicked == null) {
    return null;
  }
  if (indexed) {
    RenderedImage result=mosaicked.getRenderedImage();
    ImageWorker w=new ImageWorker(result);
    w.forceIndexColorModel(true);
    result=w.getRenderedImage();
    GridCoverage2D newCoverage=gridCoverageFactory.create(mosaicked.getName(),result,mosaicked.getGridGeometry(),null,new GridCoverage2D[]{mosaicked},mosaicked.getProperties());
    mosaicked=newCoverage;
  }
  GridCoverage2D cropped=crop(mosaicked,destinationEnvelope,false);
  if (cropped == null) {
    return null;
  }
  return cropped.getRenderedImage();
}
