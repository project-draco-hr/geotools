{
  final double eccentricityRatio=excentricitySquared / sqrt(1.0 - excentricitySquared);
  final double modifiedRadiusSq=(normalisedCylindricalRadius * normalisedCylindricalRadius) / (1.0 - excentricitySquared);
  double zExtension=1.0;
  double estimate=0.0;
  while (abs(estimate - zExtension) > EPSILON) {
    zExtension=estimate;
    final double producedZ=normalisedZ + zExtension;
    estimate=eccentricityRatio * producedZ / sqrt(modifiedRadiusSq + producedZ * producedZ);
  }
  final double latitude;
  if (abs(normalisedCylindricalRadius) <= EPSILON) {
    if ((normalisedZ + estimate) > 0.0) {
      latitude=PI / 2;
    }
 else {
      latitude=-PI / 2;
    }
  }
 else {
    latitude=atan((normalisedZ + estimate) / normalisedCylindricalRadius);
  }
  return latitude;
}
