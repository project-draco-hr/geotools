{
  final double normalisedCylindricalZ=sinPhi0 * (primeVert0 * (1.0 - excentricitySquared)) + cosPhi0 * y;
  final double primeVerticalCylindricalRadius=cosPhi0 * primeVert0 - sinPhi0 * y;
  final double lambda=atan2(x,primeVerticalCylindricalRadius);
  final double normalisedCylindricalRadius=hypot(x,primeVerticalCylindricalRadius);
  final double phi=getLatitudeFromPolar(normalisedCylindricalRadius,normalisedCylindricalZ);
  if (ptDst != null) {
    ptDst.setLocation(lambda,phi);
    return ptDst;
  }
  return new Point2D.Double(lambda,phi);
}
