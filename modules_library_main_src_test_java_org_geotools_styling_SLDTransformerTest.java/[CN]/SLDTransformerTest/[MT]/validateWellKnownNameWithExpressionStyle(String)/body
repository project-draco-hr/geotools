{
  StringReader stringReader=new StringReader(xmlStyle);
  SLDParser sldParser=new SLDParser(sf,stringReader);
  Style[] parsedStyles=sldParser.readXML();
  assertNotNull("parsing xml style returns null",parsedStyles);
  assertTrue("more or less that one style is available",parsedStyles.length == 1);
  Style style=parsedStyles[0];
  assertNotNull("style is null",style);
  assertNotNull("feature type styles are null",style.featureTypeStyles());
  assertTrue("more or less that one feature type style is available",style.featureTypeStyles().size() == 1);
  assertNotNull("rules are null",style.featureTypeStyles().get(0).rules());
  assertTrue("more or less that one rule is available",style.featureTypeStyles().get(0).rules().size() == 1);
  Rule rule=style.featureTypeStyles().get(0).rules().get(0);
  assertNotNull("rule is null",rule);
  List<? extends Symbolizer> symbolizers=rule.symbolizers();
  assertNotNull("symbolizers are null",symbolizers);
  assertTrue("more or less that one symbolizer is available",symbolizers.size() == 1);
  PointSymbolizer pointSymbolizer=(PointSymbolizer)symbolizers.get(0);
  assertNotNull("point symbolizer is null",pointSymbolizer);
  Graphic graphic=pointSymbolizer.getGraphic();
  assertNotNull("graphic is null",graphic);
  assertNotNull("graphic symbols are null",graphic.graphicalSymbols());
  assertTrue("more or less that one graphic symbol is available",graphic.graphicalSymbols().size() == 1);
  Mark mark=(Mark)graphic.graphicalSymbols().get(0);
  assertNotNull("mark is null",mark);
  assertNotNull("mark wellKnownName is null",mark.getWellKnownName());
  assertTrue("wellKnownName is not a function",mark.getWellKnownName() instanceof Function);
  Function function=(Function)mark.getWellKnownName();
  assertTrue("wellKnownName function is not strConcat",function.getName().equals("strConcat"));
  assertTrue("wellKnownName function have a wrong number of parameters",function.getParameters().size() == 2);
  Expression firstParameter=function.getParameters().get(0);
  assertNotNull("first parameter is null",firstParameter);
  assertTrue("first parameter is not a literal",firstParameter instanceof Literal);
  Literal literal=(Literal)firstParameter;
  assertTrue("literal value is different of 'mark-'",literal.getValue().equals("mark-"));
  Expression secondParameter=function.getParameters().get(1);
  assertNotNull("second parameter is null",secondParameter);
  assertTrue("second parameter is",secondParameter instanceof PropertyName);
  PropertyName propertyName=(PropertyName)secondParameter;
  assertTrue("property name is different of 'MARK_NAME'",propertyName.getPropertyName().equals("MARK_NAME"));
  return style;
}
